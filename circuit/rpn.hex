v2.0 raw
# ImageBaseAddress=0x00000000
# entry
# 00000 Instruction { source: "Initialzing flags and internal regs.", opcode: Init, args: [], resolved: None }
00 
# 00001 Instruction { source: "Initialzing stack register to 0x000f0f00.", opcode: LoadImm32, args: [Register(0x0c), Constant32(0x000f0f00=986880)], resolved: None }
20 0c 00 0f 0f 00 
# 00007 Instruction { source: "PseudoCall(Label24(:main))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 0000d Instruction { source: "PseudoCall(Label24(:main))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 17 00 00 00 
# 00013 Instruction { source: "PseudoCall(Label24(:main))", opcode: JmpImm, args: [Label24(:main)], resolved: None }
70 ec 11 00 
# 00017 Instruction { source: "PseudoCall(Label24(:main))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 0001d Instruction { source: "Halting after return from entry function.", opcode: Halt, args: [Constant32(0x00000000=0)], resolved: None }
7e 00 00 00 00 
# :RpnCalc_handle
# Ret Some(U8)
# Arg0=c
# Arg1=ch
# Var a (Local a Number(USIZE) Reg(U32)) Reg(U32) Some([16, 17, 18, 19])
# Var b (Local b Number(USIZE) Reg(U32)) Reg(U32) Some([20, 21, 22, 23])
# Var c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([24, 25, 26, 27])
# Var ch (Arg1 ch Number(U8)) Reg(U8) Some([28])
# Var diff (Local diff Number(USIZE) Reg(U32)) Reg(U32) Some([16, 17, 18, 19])
# Var i (Local i Number(U8) Reg(U8)) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_RpnCalc_init_46_c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_RpnCalc_init_46_inline_RpnCalc_init_stack_init_45_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_RpnCalc_init_46_inline_RpnCalc_init_stack_init_45_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_RpnCalc_init_46_inline_RpnCalc_init_stack_init_45_t1 (t1 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_RpnCalc_init_46_inline_RpnCalc_init_stack_init_45_t2 (t2 Number(USIZE, 64)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_RpnCalc_init_46_inline_RpnCalc_init_stack_init_45_t3 (t3 Number(USIZE, 0)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_RpnCalc_init_46_s (Local s Ptr(Struct("Stack")) Reg(U32)) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_RpnCalc_init_46_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_RpnCalc_init_46_t1 (t1 Call(Call { function: "stack_init", parameters: [Ident("s")] })) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_RpnCalc_init_46_t2 (t2 Ident("s")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_RpnCalc_init_46_t3 (t3 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_RpnCalc_init_46_t4 (t4 Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_RpnCalc_init_46_t5 (t5 Number(USIZE, 68)) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_RpnCalc_init_46_t6 (t6 Number(USIZE, 0)) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_57_c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([32, 33, 34, 35])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_n (Arg1 n Number(USIZE)) Reg(U32) Some([36, 37, 38, 39])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([40, 41, 42, 43])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([40, 41, 42, 43])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t1 (t1 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([44, 45, 46, 47])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t10 (t10 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([36, 37, 38, 39])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t11 (t11 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([36, 37, 38, 39])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t12 (t12 Number(USIZE, 64)) Reg(U32) Some([44, 45, 46, 47])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t13 (t13 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([40, 41, 42, 43])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t14 (t14 PtrFieldDeref("s", "first_free")) Reg(U32) Some([40, 41, 42, 43])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t15 (t15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([40, 41, 42, 43])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t16 (t16 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([40, 41, 42, 43])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t17 (t17 Number(USIZE, 64)) Reg(U32) Some([44, 45, 46, 47])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t18 (t18 Number(USIZE, 1)) Reg(U32) Some([44, 45, 46, 47])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t2 (t2 Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([44, 45, 46, 47])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t3 (t3 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([48, 49, 50, 51])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t4 (t4 PtrFieldDeref("s", "first_free")) Reg(U32) Some([48, 49, 50, 51])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t5 (t5 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([48, 49, 50, 51])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t6 (t6 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([40, 41, 42, 43])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t7 (t7 Number(USIZE, 64)) Reg(U32) Some([48, 49, 50, 51])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t8 (t8 Number(USIZE, 4)) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t9 (t9 Ident("n")) Reg(U32) Some([36, 37, 38, 39])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([44, 45, 46, 47])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_57_t0 (t0 PtrFieldDeref("c", "have_num")) Reg(U8) Some([52])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_57_t1 (t1 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }) Reg(U32) Some([36, 37, 38, 39])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_57_t10 (t10 Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([32, 33, 34, 35])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_57_t11 (t11 Number(USIZE, 68)) Reg(U32) Some([36, 37, 38, 39])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_57_t12 (t12 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([36, 37, 38, 39])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_57_t13 (t13 Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([32, 33, 34, 35])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_57_t14 (t14 Number(USIZE, 68)) Reg(U32) Some([36, 37, 38, 39])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_57_t15 (t15 Number(USIZE, 0)) Reg(U32) Some([40, 41, 42, 43])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_57_t16 (t16 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }) Reg(U32) Some([32, 33, 34, 35])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_57_t17 (t17 Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([32, 33, 34, 35])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_57_t18 (t18 Number(USIZE, 72)) Reg(U32) Some([36, 37, 38, 39])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_57_t19 (t19 Number(U8, 0)) Reg(U8) Some([52])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_57_t2 (t2 Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([32, 33, 34, 35])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_57_t3 (t3 Number(USIZE, 72)) Reg(U32) Some([36, 37, 38, 39])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_57_t4 (t4 Number(U8, 0)) Reg(U8) Some([53])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_57_t5 (t5 Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_57_t6 (t6 AddressOf(PtrFieldDeref("c", "stack"))) Reg(U32) Some([40, 41, 42, 43])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_57_t7 (t7 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([32, 33, 34, 35])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_57_t8 (t8 PtrFieldDeref("c", "num")) Reg(U32) Some([36, 37, 38, 39])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_57_t9 (t9 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([36, 37, 38, 39])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_58_c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_n (Arg1 n Number(USIZE)) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t1 (t1 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t10 (t10 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t11 (t11 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t12 (t12 Number(USIZE, 64)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t13 (t13 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t14 (t14 PtrFieldDeref("s", "first_free")) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t15 (t15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t16 (t16 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t17 (t17 Number(USIZE, 64)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t18 (t18 Number(USIZE, 1)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t2 (t2 Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t3 (t3 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([32, 33, 34, 35])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t4 (t4 PtrFieldDeref("s", "first_free")) Reg(U32) Some([32, 33, 34, 35])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t5 (t5 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([32, 33, 34, 35])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t6 (t6 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t7 (t7 Number(USIZE, 64)) Reg(U32) Some([32, 33, 34, 35])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t8 (t8 Number(USIZE, 4)) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t9 (t9 Ident("n")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_58_t0 (t0 PtrFieldDeref("c", "have_num")) Reg(U8) Some([60])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_58_t1 (t1 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_58_t10 (t10 Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_58_t11 (t11 Number(USIZE, 68)) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_58_t12 (t12 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_58_t13 (t13 Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_58_t14 (t14 Number(USIZE, 68)) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_58_t15 (t15 Number(USIZE, 0)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_58_t16 (t16 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_58_t17 (t17 Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_58_t18 (t18 Number(USIZE, 72)) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_58_t19 (t19 Number(U8, 0)) Reg(U8) Some([60])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_58_t2 (t2 Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_58_t3 (t3 Number(USIZE, 72)) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_58_t4 (t4 Number(U8, 0)) Reg(U8) Some([61])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_58_t5 (t5 Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_58_t6 (t6 AddressOf(PtrFieldDeref("c", "stack"))) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_58_t7 (t7 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_58_t8 (t8 PtrFieldDeref("c", "num")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_58_t9 (t9 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_59_c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_n (Arg1 n Number(USIZE)) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t1 (t1 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t10 (t10 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t11 (t11 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t12 (t12 Number(USIZE, 64)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t13 (t13 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t14 (t14 PtrFieldDeref("s", "first_free")) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t15 (t15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t16 (t16 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t17 (t17 Number(USIZE, 64)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t18 (t18 Number(USIZE, 1)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t2 (t2 Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t3 (t3 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([32, 33, 34, 35])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t4 (t4 PtrFieldDeref("s", "first_free")) Reg(U32) Some([32, 33, 34, 35])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t5 (t5 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([32, 33, 34, 35])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t6 (t6 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t7 (t7 Number(USIZE, 64)) Reg(U32) Some([32, 33, 34, 35])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t8 (t8 Number(USIZE, 4)) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t9 (t9 Ident("n")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_59_t0 (t0 PtrFieldDeref("c", "have_num")) Reg(U8) Some([60])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_59_t1 (t1 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_59_t10 (t10 Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_59_t11 (t11 Number(USIZE, 68)) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_59_t12 (t12 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_59_t13 (t13 Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_59_t14 (t14 Number(USIZE, 68)) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_59_t15 (t15 Number(USIZE, 0)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_59_t16 (t16 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_59_t17 (t17 Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_59_t18 (t18 Number(USIZE, 72)) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_59_t19 (t19 Number(U8, 0)) Reg(U8) Some([60])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_59_t2 (t2 Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_59_t3 (t3 Number(USIZE, 72)) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_59_t4 (t4 Number(U8, 0)) Reg(U8) Some([61])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_59_t5 (t5 Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_59_t6 (t6 AddressOf(PtrFieldDeref("c", "stack"))) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_59_t7 (t7 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_59_t8 (t8 PtrFieldDeref("c", "num")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_59_t9 (t9 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_mul32_32_14_a (Arg0 a Number(USIZE)) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_mul32_32_14_a_hi (Local a_hi Number(USIZE) Reg(U32)) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_mul32_32_14_b (Arg1 b Number(USIZE)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_mul32_32_14_b_hi (Local b_hi Number(USIZE) Reg(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_14_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([32, 33, 34, 35])
# Var inline_RpnCalc_handle_mul32_32_14_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_a (Arg0 a Number(USIZE)) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_b (Arg1 b Number(USIZE)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([32, 33, 34, 35])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([36, 37, 38, 39])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([36, 37, 38, 39])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t0 (t0 Ident("a")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t1 (t1 Ident("b")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t10 (t10 Ident("c")) Reg(U32) Some([32, 33, 34, 35])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t11 (t11 Ident("f")) Reg(U32) Some([36, 37, 38, 39])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t12 (t12 Ident("a")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t13 (t13 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([36, 37, 38, 39])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t14 (t14 Index("b", Number(U8, 1))) Reg(U8) Some([28])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t15 (t15 Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t16 (t16 Index("a", Number(U8, 1))) Reg(U8) Some([60])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t17 (t17 Ident("b")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t18 (t18 Ident("d")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t19 (t19 Ident("e")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t2 (t2 Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([36, 37, 38, 39])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t20 (t20 Index("d", Number(U8, 2))) Reg(U8) Some([60])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t21 (t21 Index("d", Number(U8, 1))) Reg(U8) Some([60])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t22 (t22 Index("d", Number(U8, 0))) Reg(U8) Some([60])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t23 (t23 Number(U8, 0)) Reg(U8) Some([60])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t24 (t24 Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t25 (t25 Ident("c")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t26 (t26 Ident("d")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t3 (t3 Index("a", Number(U8, 1))) Reg(U8) Some([60])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t4 (t4 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([40, 41, 42, 43])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t5 (t5 Index("b", Number(U8, 1))) Reg(U8) Some([28])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t6 (t6 Index("f", Number(U8, 1))) Reg(U8) Some([52])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t7 (t7 Index("f", Number(U8, 0))) Reg(U8) Some([52])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t8 (t8 Number(U8, 0)) Reg(U8) Some([53])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t9 (t9 Number(U8, 0)) Reg(U8) Some([53])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_a (Arg0 a Number(USIZE)) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_b (Arg1 b Number(USIZE)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([36, 37, 38, 39])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([40, 41, 42, 43])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([40, 41, 42, 43])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t0 (t0 Ident("a")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t1 (t1 Ident("b")) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t10 (t10 Ident("c")) Reg(U32) Some([36, 37, 38, 39])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t11 (t11 Ident("f")) Reg(U32) Some([40, 41, 42, 43])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t12 (t12 Ident("a")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t13 (t13 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([40, 41, 42, 43])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t14 (t14 Index("b", Number(U8, 1))) Reg(U8) Some([61])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t15 (t15 Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t16 (t16 Index("a", Number(U8, 1))) Reg(U8) Some([60])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t17 (t17 Ident("b")) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t18 (t18 Ident("d")) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t19 (t19 Ident("e")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t2 (t2 Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([40, 41, 42, 43])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t20 (t20 Index("d", Number(U8, 2))) Reg(U8) Some([60])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t21 (t21 Index("d", Number(U8, 1))) Reg(U8) Some([60])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t22 (t22 Index("d", Number(U8, 0))) Reg(U8) Some([60])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t23 (t23 Number(U8, 0)) Reg(U8) Some([60])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t24 (t24 Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t25 (t25 Ident("c")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t26 (t26 Ident("d")) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t3 (t3 Index("a", Number(U8, 1))) Reg(U8) Some([60])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t4 (t4 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([44, 45, 46, 47])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t5 (t5 Index("b", Number(U8, 1))) Reg(U8) Some([61])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t6 (t6 Index("f", Number(U8, 1))) Reg(U8) Some([53])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t7 (t7 Index("f", Number(U8, 0))) Reg(U8) Some([53])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t8 (t8 Number(U8, 0)) Reg(U8) Some([62])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t9 (t9 Number(U8, 0)) Reg(U8) Some([62])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_a (Arg0 a Number(USIZE)) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_b (Arg1 b Number(USIZE)) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t0 (t0 Ident("a")) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t1 (t1 Ident("b")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t10 (t10 Ident("c")) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t11 (t11 Ident("f")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t12 (t12 Ident("a")) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t13 (t13 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t14 (t14 Index("b", Number(U8, 1))) Reg(U8) Some([60])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t15 (t15 Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t16 (t16 Index("a", Number(U8, 1))) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t17 (t17 Ident("b")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t18 (t18 Ident("d")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t19 (t19 Ident("e")) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t2 (t2 Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t20 (t20 Index("d", Number(U8, 2))) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t21 (t21 Index("d", Number(U8, 1))) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t22 (t22 Index("d", Number(U8, 0))) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t23 (t23 Number(U8, 0)) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t24 (t24 Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t25 (t25 Ident("c")) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t26 (t26 Ident("d")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t3 (t3 Index("a", Number(U8, 1))) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t4 (t4 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([36, 37, 38, 39])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t5 (t5 Index("b", Number(U8, 1))) Reg(U8) Some([60])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t6 (t6 Index("f", Number(U8, 1))) Reg(U8) Some([28])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t7 (t7 Index("f", Number(U8, 0))) Reg(U8) Some([28])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t8 (t8 Number(U8, 0)) Reg(U8) Some([52])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t9 (t9 Number(U8, 0)) Reg(U8) Some([52])
# Var inline_RpnCalc_handle_mul32_32_14_t0 (t0 Ident("a")) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_mul32_32_14_t1 (t1 Ident("b")) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_mul32_32_14_t10 (t10 Ident("a")) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_mul32_32_14_t11 (t11 Ident("b_hi")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_mul32_32_14_t12 (t12 Index("d", Number(U8, 1))) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_mul32_32_14_t13 (t13 Index("d", Number(U8, 0))) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_mul32_32_14_t14 (t14 Number(U8, 0)) Reg(U8) Some([60])
# Var inline_RpnCalc_handle_mul32_32_14_t15 (t15 Number(U8, 0)) Reg(U8) Some([60])
# Var inline_RpnCalc_handle_mul32_32_14_t16 (t16 Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_mul32_32_14_t17 (t17 Ident("c")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_mul32_32_14_t18 (t18 Ident("d")) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_mul32_32_14_t2 (t2 Index("a", Number(U8, 3))) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_mul32_32_14_t3 (t3 Index("a", Number(U8, 2))) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_mul32_32_14_t4 (t4 Index("b", Number(U8, 3))) Reg(U8) Some([61])
# Var inline_RpnCalc_handle_mul32_32_14_t5 (t5 Index("b", Number(U8, 2))) Reg(U8) Some([61])
# Var inline_RpnCalc_handle_mul32_32_14_t6 (t6 Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })) Reg(U32) Some([40, 41, 42, 43])
# Var inline_RpnCalc_handle_mul32_32_14_t7 (t7 Ident("a_hi")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_mul32_32_14_t8 (t8 Ident("b")) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_mul32_32_14_t9 (t9 Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_mul32_by10_15_a (Arg0 a Number(USIZE)) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_mul32_by10_15_b (Local b Number(USIZE) Reg(U32)) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_mul32_by10_15_t0 (t0 Ident("a")) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_mul32_by10_15_t1 (t1 Ident("a")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_mul32_by10_15_t2 (t2 Ident("a")) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_mul32_by10_15_t3 (t3 Ident("a")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_mul32_by10_15_t4 (t4 Ident("b")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_mul32_by10_15_t5 (t5 Ident("b")) Reg(U32) Some([32, 33, 34, 35])
# Var inline_RpnCalc_handle_mul32_by10_15_t6 (t6 Arithmetic(Add, Ident("b"), Ident("a"))) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_mul32_by10_15_t7 (t7 Ident("b")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_mul32_by10_15_t8 (t8 Ident("a")) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_putc_17_c (Arg0 c Number(U8)) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_putc_17_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_putc_17_t1 (t1 Ident("c")) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_putc_18_c (Arg0 c Number(U8)) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_putc_18_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_putc_18_t1 (t1 Ident("c")) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_putc_19_c (Arg0 c Number(U8)) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_putc_19_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_putc_19_t1 (t1 Ident("c")) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_putc_20_c (Arg0 c Number(U8)) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_putc_20_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_putc_20_t1 (t1 Ident("c")) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_putc_21_c (Arg0 c Number(U8)) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_putc_21_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_putc_21_t1 (t1 Ident("c")) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_putc_22_c (Arg0 c Number(U8)) Reg(U8) Some([60])
# Var inline_RpnCalc_handle_putc_22_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_putc_22_t1 (t1 Ident("c")) Reg(U8) Some([60])
# Var inline_RpnCalc_handle_putc_23_c (Arg0 c Number(U8)) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_putc_23_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_putc_23_t1 (t1 Ident("c")) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_putc_24_c (Arg0 c Number(U8)) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_putc_24_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_putc_24_t1 (t1 Ident("c")) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_putc_25_c (Arg0 c Number(U8)) Reg(U8) Some([60])
# Var inline_RpnCalc_handle_putc_25_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_putc_25_t1 (t1 Ident("c")) Reg(U8) Some([60])
# Var inline_RpnCalc_handle_putc_26_c (Arg0 c Number(U8)) Reg(U8) Some([60])
# Var inline_RpnCalc_handle_putc_26_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([29])
# Var inline_RpnCalc_handle_putc_26_t1 (t1 Ident("c")) Reg(U8) Some([60])
# Var inline_RpnCalc_handle_stack_get_44_n (Arg1 n Number(USIZE)) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_get_44_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_get_44_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_get_44_t1 (t1 Index("values", Ident("n"))) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_get_44_t2 (t2 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))) }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_get_44_t3 (t3 Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_get_44_t4 (t4 Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_get_44_t5 (t5 Ident("n")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_get_44_t6 (t6 Number(USIZE, 4)) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_get_44_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_pop_48_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_pop_48_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([32, 33, 34, 35])
# Var inline_RpnCalc_handle_stack_pop_48_t1 (t1 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_pop_48_t10 (t10 Index("values", PtrFieldDeref("s", "first_free"))) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_pop_48_t11 (t11 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_pop_48_t12 (t12 Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([32, 33, 34, 35])
# Var inline_RpnCalc_handle_stack_pop_48_t13 (t13 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_pop_48_t14 (t14 PtrFieldDeref("s", "first_free")) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_pop_48_t15 (t15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_pop_48_t16 (t16 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_pop_48_t17 (t17 Number(USIZE, 64)) Reg(U32) Some([36, 37, 38, 39])
# Var inline_RpnCalc_handle_stack_pop_48_t18 (t18 Number(USIZE, 4)) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_pop_48_t2 (t2 Number(USIZE, 64)) Reg(U32) Some([32, 33, 34, 35])
# Var inline_RpnCalc_handle_stack_pop_48_t3 (t3 Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([36, 37, 38, 39])
# Var inline_RpnCalc_handle_stack_pop_48_t4 (t4 PtrFieldDeref("s", "first_free")) Reg(U32) Some([36, 37, 38, 39])
# Var inline_RpnCalc_handle_stack_pop_48_t5 (t5 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([36, 37, 38, 39])
# Var inline_RpnCalc_handle_stack_pop_48_t6 (t6 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_pop_48_t7 (t7 Number(USIZE, 64)) Reg(U32) Some([36, 37, 38, 39])
# Var inline_RpnCalc_handle_stack_pop_48_t8 (t8 Number(USIZE, 1)) Reg(U32) Some([40, 41, 42, 43])
# Var inline_RpnCalc_handle_stack_pop_48_t9 (t9 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_pop_48_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([32, 33, 34, 35])
# Var inline_RpnCalc_handle_stack_pop_49_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_pop_49_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([32, 33, 34, 35])
# Var inline_RpnCalc_handle_stack_pop_49_t1 (t1 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_pop_49_t10 (t10 Index("values", PtrFieldDeref("s", "first_free"))) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_pop_49_t11 (t11 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_pop_49_t12 (t12 Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([32, 33, 34, 35])
# Var inline_RpnCalc_handle_stack_pop_49_t13 (t13 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_pop_49_t14 (t14 PtrFieldDeref("s", "first_free")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_pop_49_t15 (t15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_pop_49_t16 (t16 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_pop_49_t17 (t17 Number(USIZE, 64)) Reg(U32) Some([36, 37, 38, 39])
# Var inline_RpnCalc_handle_stack_pop_49_t18 (t18 Number(USIZE, 4)) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_pop_49_t2 (t2 Number(USIZE, 64)) Reg(U32) Some([32, 33, 34, 35])
# Var inline_RpnCalc_handle_stack_pop_49_t3 (t3 Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([36, 37, 38, 39])
# Var inline_RpnCalc_handle_stack_pop_49_t4 (t4 PtrFieldDeref("s", "first_free")) Reg(U32) Some([36, 37, 38, 39])
# Var inline_RpnCalc_handle_stack_pop_49_t5 (t5 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([36, 37, 38, 39])
# Var inline_RpnCalc_handle_stack_pop_49_t6 (t6 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_pop_49_t7 (t7 Number(USIZE, 64)) Reg(U32) Some([36, 37, 38, 39])
# Var inline_RpnCalc_handle_stack_pop_49_t8 (t8 Number(USIZE, 1)) Reg(U32) Some([40, 41, 42, 43])
# Var inline_RpnCalc_handle_stack_pop_49_t9 (t9 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_pop_49_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([32, 33, 34, 35])
# Var inline_RpnCalc_handle_stack_push_50_n (Arg1 n Number(USIZE)) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_push_50_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_50_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_50_t1 (t1 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_50_t10 (t10 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_push_50_t11 (t11 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_push_50_t12 (t12 Number(USIZE, 64)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_50_t13 (t13 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_50_t14 (t14 PtrFieldDeref("s", "first_free")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_50_t15 (t15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_50_t16 (t16 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_50_t17 (t17 Number(USIZE, 64)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_50_t18 (t18 Number(USIZE, 1)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_50_t2 (t2 Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_50_t3 (t3 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_50_t4 (t4 PtrFieldDeref("s", "first_free")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_50_t5 (t5 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_50_t6 (t6 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_50_t7 (t7 Number(USIZE, 64)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_50_t8 (t8 Number(USIZE, 4)) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_push_50_t9 (t9 Ident("n")) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_push_50_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_51_n (Arg1 n Number(USIZE)) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_push_51_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_51_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_51_t1 (t1 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_51_t10 (t10 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_push_51_t11 (t11 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_push_51_t12 (t12 Number(USIZE, 64)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_51_t13 (t13 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_51_t14 (t14 PtrFieldDeref("s", "first_free")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_51_t15 (t15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_51_t16 (t16 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_51_t17 (t17 Number(USIZE, 64)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_51_t18 (t18 Number(USIZE, 1)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_51_t2 (t2 Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_51_t3 (t3 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_51_t4 (t4 PtrFieldDeref("s", "first_free")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_51_t5 (t5 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_51_t6 (t6 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_51_t7 (t7 Number(USIZE, 64)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_51_t8 (t8 Number(USIZE, 4)) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_push_51_t9 (t9 Ident("n")) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_push_51_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_52_n (Arg1 n Number(USIZE)) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_push_52_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_52_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_52_t1 (t1 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_52_t10 (t10 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_push_52_t11 (t11 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_push_52_t12 (t12 Number(USIZE, 64)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_52_t13 (t13 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_52_t14 (t14 PtrFieldDeref("s", "first_free")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_52_t15 (t15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_52_t16 (t16 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_52_t17 (t17 Number(USIZE, 64)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_52_t18 (t18 Number(USIZE, 1)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_52_t2 (t2 Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_52_t3 (t3 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_52_t4 (t4 PtrFieldDeref("s", "first_free")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_52_t5 (t5 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_52_t6 (t6 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_52_t7 (t7 Number(USIZE, 64)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_52_t8 (t8 Number(USIZE, 4)) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_push_52_t9 (t9 Ident("n")) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_push_52_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_53_n (Arg1 n Number(USIZE)) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_push_53_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_53_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_53_t1 (t1 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_53_t10 (t10 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_push_53_t11 (t11 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_push_53_t12 (t12 Number(USIZE, 64)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_53_t13 (t13 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_53_t14 (t14 PtrFieldDeref("s", "first_free")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_53_t15 (t15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_53_t16 (t16 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_53_t17 (t17 Number(USIZE, 64)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_53_t18 (t18 Number(USIZE, 1)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_53_t2 (t2 Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_53_t3 (t3 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_53_t4 (t4 PtrFieldDeref("s", "first_free")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_53_t5 (t5 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_53_t6 (t6 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_53_t7 (t7 Number(USIZE, 64)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_53_t8 (t8 Number(USIZE, 4)) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_push_53_t9 (t9 Ident("n")) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_push_53_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_54_n (Arg1 n Number(USIZE)) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_push_54_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_54_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_54_t1 (t1 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_54_t10 (t10 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_push_54_t11 (t11 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_push_54_t12 (t12 Number(USIZE, 64)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_54_t13 (t13 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_54_t14 (t14 PtrFieldDeref("s", "first_free")) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_54_t15 (t15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_54_t16 (t16 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_54_t17 (t17 Number(USIZE, 64)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_54_t18 (t18 Number(USIZE, 1)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_54_t2 (t2 Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_54_t3 (t3 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([32, 33, 34, 35])
# Var inline_RpnCalc_handle_stack_push_54_t4 (t4 PtrFieldDeref("s", "first_free")) Reg(U32) Some([32, 33, 34, 35])
# Var inline_RpnCalc_handle_stack_push_54_t5 (t5 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([32, 33, 34, 35])
# Var inline_RpnCalc_handle_stack_push_54_t6 (t6 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_54_t7 (t7 Number(USIZE, 64)) Reg(U32) Some([32, 33, 34, 35])
# Var inline_RpnCalc_handle_stack_push_54_t8 (t8 Number(USIZE, 4)) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_push_54_t9 (t9 Ident("n")) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_push_54_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_55_n (Arg1 n Number(USIZE)) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_push_55_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_55_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_55_t1 (t1 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_55_t10 (t10 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_push_55_t11 (t11 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_push_55_t12 (t12 Number(USIZE, 64)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_55_t13 (t13 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_55_t14 (t14 PtrFieldDeref("s", "first_free")) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_55_t15 (t15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_55_t16 (t16 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_55_t17 (t17 Number(USIZE, 64)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_55_t18 (t18 Number(USIZE, 1)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_55_t2 (t2 Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([24, 25, 26, 27])
# Var inline_RpnCalc_handle_stack_push_55_t3 (t3 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_55_t4 (t4 PtrFieldDeref("s", "first_free")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_55_t5 (t5 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_55_t6 (t6 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([20, 21, 22, 23])
# Var inline_RpnCalc_handle_stack_push_55_t7 (t7 Number(USIZE, 64)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_55_t8 (t8 Number(USIZE, 4)) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_push_55_t9 (t9 Ident("n")) Reg(U32) Some([16, 17, 18, 19])
# Var inline_RpnCalc_handle_stack_push_55_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([24, 25, 26, 27])
# Var product (Local product Number(USIZE) Reg(U32)) Reg(U32) Some([20, 21, 22, 23])
# Var quotient (Local quotient Number(USIZE) Reg(U32)) Reg(U32) Some([20, 21, 22, 23])
# Var stack (Local stack Ptr(Struct("Stack")) Reg(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var stack_count (Local stack_count Number(U8) Reg(U8)) Reg(U8) Some([62])
# Var stack_count_usize (Local stack_count_usize Number(USIZE) Reg(U32)) Reg(U32) Some([32, 33, 34, 35])
# Var stack_needed (Local stack_needed Number(U8) Reg(U8)) Reg(U8) Some([68])
# Var sum (Local sum Number(USIZE) Reg(U32)) Reg(U32) Some([20, 21, 22, 23])
# Var t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([16, 17, 18, 19])
# Var t1 (t1 Ident("ch")) Reg(U8) Some([28])
# Var t10 (t10 Number(U8, 115)) Reg(U8) Some([69])
# Var t100 (t100 Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] })) Reg(U8) Some([29])
# Var t101 (t101 Ident("c")) Reg(U32) Some([16, 17, 18, 19])
# Var t102 (t102 Ident("ch")) Reg(U8) Some([29])
# Var t103 (t103 Number(U8, 100)) Reg(U8) Some([60])
# Var t104 (t104 Ident("i")) Reg(U8) Some([29])
# Var t105 (t105 Ident("stack_count")) Reg(U8) Some([60])
# Var t106 (t106 Call(Call { function: "print_dec8", parameters: [Ident("i")] })) Reg(U8) Some([29])
# Var t107 (t107 Ident("i")) Reg(U8) Some([29])
# Var t108 (t108 Call(Call { function: "putc", parameters: [Number(U8, 58)] })) Reg(U8) Some([29])
# Var t109 (t109 Number(U8, 58)) Reg(U8) Some([60])
# Var t11 (t11 Ident("stack_needed")) Reg(U8) Some([69])
# Var t110 (t110 Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })) Reg(U8) Some([29])
# Var t111 (t111 Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })) Reg(U32) Some([20, 21, 22, 23])
# Var t112 (t112 Ident("stack")) Reg(U32) Some([20, 21, 22, 23])
# Var t113 (t113 Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }) Reg(U32) Some([56, 57, 58, 59])
# Var t114 (t114 Ident("i")) Reg(U8) Some([29])
# Var t115 (t115 Call(Call { function: "putc", parameters: [Number(U8, 10)] })) Reg(U8) Some([29])
# Var t116 (t116 Number(U8, 10)) Reg(U8) Some([60])
# Var t117 (t117 Ident("i")) Reg(U8) Some([29])
# Var t118 (t118 Number(U8, 1)) Reg(U8) Some([60])
# Var t119 (t119 Ident("ch")) Reg(U8) Some([29])
# Var t12 (t12 Number(U8, 0)) Reg(U8) Some([52])
# Var t120 (t120 Number(U8, 57)) Reg(U8) Some([60])
# Var t121 (t121 Ident("ch")) Reg(U8) Some([29])
# Var t122 (t122 Number(U8, 48)) Reg(U8) Some([60])
# Var t123 (t123 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }) Reg(U32) Some([16, 17, 18, 19])
# Var t124 (t124 Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([16, 17, 18, 19])
# Var t125 (t125 Number(USIZE, 72)) Reg(U32) Some([20, 21, 22, 23])
# Var t126 (t126 Number(U8, 1)) Reg(U8) Some([60])
# Var t127 (t127 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([36, 37, 38, 39])
# Var t128 (t128 Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([16, 17, 18, 19])
# Var t129 (t129 Number(USIZE, 68)) Reg(U32) Some([20, 21, 22, 23])
# Var t13 (t13 Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })) Reg(U8) Some([29])
# Var t130 (t130 Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })) Reg(U32) Some([16, 17, 18, 19])
# Var t131 (t131 PtrFieldDeref("c", "num")) Reg(U32) Some([16, 17, 18, 19])
# Var t132 (t132 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([16, 17, 18, 19])
# Var t133 (t133 Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([16, 17, 18, 19])
# Var t134 (t134 Number(USIZE, 68)) Reg(U32) Some([20, 21, 22, 23])
# Var t135 (t135 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([16, 17, 18, 19])
# Var t136 (t136 Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([16, 17, 18, 19])
# Var t137 (t137 Number(USIZE, 68)) Reg(U32) Some([20, 21, 22, 23])
# Var t138 (t138 Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })) Reg(U32) Some([20, 21, 22, 23])
# Var t139 (t139 PtrFieldDeref("c", "num")) Reg(U32) Some([20, 21, 22, 23])
# Var t14 (t14 Ident("c")) Reg(U32) Some([24, 25, 26, 27])
# Var t140 (t140 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([20, 21, 22, 23])
# Var t141 (t141 Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([20, 21, 22, 23])
# Var t142 (t142 Number(USIZE, 68)) Reg(U32) Some([24, 25, 26, 27])
# Var t143 (t143 Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) Reg(U32) Some([24, 25, 26, 27])
# Var t144 (t144 Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) Reg(U8) Some([61])
# Var t145 (t145 Ident("ch")) Reg(U8) Some([61])
# Var t146 (t146 Number(U8, 48)) Reg(U8) Some([28])
# Var t147 (t147 Number(U8, 1)) Reg(U8) Some([29])
# Var t15 (t15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("stack") }, Number(USIZE, 64)) }) Reg(U32) Some([32, 33, 34, 35])
# Var t16 (t16 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("stack") }) Reg(U32) Some([32, 33, 34, 35])
# Var t17 (t17 Number(USIZE, 64)) Reg(U32) Some([36, 37, 38, 39])
# Var t18 (t18 Ident("stack_needed")) Reg(U8) Some([69])
# Var t19 (t19 Ident("stack_count")) Reg(U8) Some([52])
# Var t2 (t2 Number(U8, 43)) Reg(U8) Some([69])
# Var t20 (t20 Call(Call { function: "putc", parameters: [Number(U8, 69)] })) Reg(U8) Some([29])
# Var t21 (t21 Number(U8, 69)) Reg(U8) Some([29])
# Var t22 (t22 Call(Call { function: "putc", parameters: [Number(U8, 82)] })) Reg(U8) Some([29])
# Var t23 (t23 Number(U8, 82)) Reg(U8) Some([29])
# Var t24 (t24 Call(Call { function: "putc", parameters: [Number(U8, 82)] })) Reg(U8) Some([29])
# Var t25 (t25 Number(U8, 82)) Reg(U8) Some([29])
# Var t26 (t26 Call(Call { function: "putc", parameters: [Number(U8, 10)] })) Reg(U8) Some([29])
# Var t27 (t27 Number(U8, 10)) Reg(U8) Some([29])
# Var t28 (t28 Number(U8, 1)) Reg(U8) Some([29])
# Var t29 (t29 Ident("stack_needed")) Reg(U8) Some([69])
# Var t3 (t3 Ident("ch")) Reg(U8) Some([28])
# Var t30 (t30 Number(U8, 0)) Reg(U8) Some([52])
# Var t31 (t31 Ident("stack")) Reg(U32) Some([16, 17, 18, 19])
# Var t32 (t32 Ident("stack_needed")) Reg(U8) Some([69])
# Var t33 (t33 Number(U8, 1)) Reg(U8) Some([52])
# Var t34 (t34 Ident("stack")) Reg(U32) Some([20, 21, 22, 23])
# Var t35 (t35 Ident("ch")) Reg(U8) Some([28])
# Var t36 (t36 Number(U8, 43)) Reg(U8) Some([69])
# Var t37 (t37 Ident("b")) Reg(U32) Some([20, 21, 22, 23])
# Var t38 (t38 Ident("a")) Reg(U32) Some([16, 17, 18, 19])
# Var t39 (t39 Call(Call { function: "print_dec32", parameters: [Ident("sum")] })) Reg(U8) Some([29])
# Var t4 (t4 Number(U8, 45)) Reg(U8) Some([69])
# Var t40 (t40 Ident("sum")) Reg(U32) Some([16, 17, 18, 19])
# Var t41 (t41 Call(Call { function: "putc", parameters: [Number(U8, 10)] })) Reg(U8) Some([29])
# Var t42 (t42 Number(U8, 10)) Reg(U8) Some([29])
# Var t43 (t43 Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })) Reg(U8) Some([29])
# Var t44 (t44 Ident("stack")) Reg(U32) Some([16, 17, 18, 19])
# Var t45 (t45 Ident("sum")) Reg(U32) Some([24, 25, 26, 27])
# Var t46 (t46 Ident("ch")) Reg(U8) Some([28])
# Var t47 (t47 Number(U8, 45)) Reg(U8) Some([69])
# Var t48 (t48 Ident("b")) Reg(U32) Some([20, 21, 22, 23])
# Var t49 (t49 Ident("a")) Reg(U32) Some([16, 17, 18, 19])
# Var t5 (t5 Ident("ch")) Reg(U8) Some([28])
# Var t50 (t50 Call(Call { function: "print_dec32", parameters: [Ident("diff")] })) Reg(U8) Some([29])
# Var t51 (t51 Ident("diff")) Reg(U32) Some([16, 17, 18, 19])
# Var t52 (t52 Call(Call { function: "putc", parameters: [Number(U8, 10)] })) Reg(U8) Some([29])
# Var t53 (t53 Number(U8, 10)) Reg(U8) Some([60])
# Var t54 (t54 Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] })) Reg(U8) Some([29])
# Var t55 (t55 Ident("stack")) Reg(U32) Some([20, 21, 22, 23])
# Var t56 (t56 Ident("diff")) Reg(U32) Some([16, 17, 18, 19])
# Var t57 (t57 Ident("ch")) Reg(U8) Some([28])
# Var t58 (t58 Number(U8, 42)) Reg(U8) Some([69])
# Var t59 (t59 Ident("b")) Reg(U32) Some([20, 21, 22, 23])
# Var t6 (t6 Number(U8, 42)) Reg(U8) Some([69])
# Var t60 (t60 Ident("a")) Reg(U32) Some([24, 25, 26, 27])
# Var t61 (t61 Call(Call { function: "print_dec32", parameters: [Ident("product")] })) Reg(U8) Some([29])
# Var t62 (t62 Ident("product")) Reg(U32) Some([16, 17, 18, 19])
# Var t63 (t63 Call(Call { function: "putc", parameters: [Number(U8, 10)] })) Reg(U8) Some([29])
# Var t64 (t64 Number(U8, 10)) Reg(U8) Some([29])
# Var t65 (t65 Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })) Reg(U8) Some([29])
# Var t66 (t66 Ident("stack")) Reg(U32) Some([16, 17, 18, 19])
# Var t67 (t67 Ident("product")) Reg(U32) Some([24, 25, 26, 27])
# Var t68 (t68 Ident("ch")) Reg(U8) Some([28])
# Var t69 (t69 Number(U8, 47)) Reg(U8) Some([69])
# Var t7 (t7 Ident("ch")) Reg(U8) Some([28])
# Var t70 (t70 Ident("b")) Reg(U32) Some([20, 21, 22, 23])
# Var t71 (t71 Ident("a")) Reg(U32) Some([16, 17, 18, 19])
# Var t72 (t72 Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })) Reg(U8) Some([29])
# Var t73 (t73 Ident("quotient")) Reg(U32) Some([16, 17, 18, 19])
# Var t74 (t74 Call(Call { function: "putc", parameters: [Number(U8, 10)] })) Reg(U8) Some([29])
# Var t75 (t75 Number(U8, 10)) Reg(U8) Some([29])
# Var t76 (t76 Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })) Reg(U8) Some([29])
# Var t77 (t77 Ident("stack")) Reg(U32) Some([16, 17, 18, 19])
# Var t78 (t78 Ident("quotient")) Reg(U32) Some([24, 25, 26, 27])
# Var t79 (t79 Ident("ch")) Reg(U8) Some([28])
# Var t8 (t8 Number(U8, 47)) Reg(U8) Some([69])
# Var t80 (t80 Number(U8, 115)) Reg(U8) Some([69])
# Var t81 (t81 Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })) Reg(U8) Some([29])
# Var t82 (t82 Ident("stack")) Reg(U32) Some([24, 25, 26, 27])
# Var t83 (t83 Ident("a")) Reg(U32) Some([16, 17, 18, 19])
# Var t84 (t84 Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })) Reg(U8) Some([29])
# Var t85 (t85 Ident("stack")) Reg(U32) Some([16, 17, 18, 19])
# Var t86 (t86 Ident("b")) Reg(U32) Some([24, 25, 26, 27])
# Var t87 (t87 Ident("ch")) Reg(U8) Some([29])
# Var t88 (t88 Number(U8, 113)) Reg(U8) Some([60])
# Var t89 (t89 Number(U8, 0)) Reg(U8) Some([29])
# Var t9 (t9 Ident("ch")) Reg(U8) Some([28])
# Var t90 (t90 Ident("ch")) Reg(U8) Some([29])
# Var t91 (t91 Number(U8, 10)) Reg(U8) Some([60])
# Var t92 (t92 Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })) Reg(U8) Some([29])
# Var t93 (t93 Ident("c")) Reg(U32) Some([16, 17, 18, 19])
# Var t94 (t94 Ident("ch")) Reg(U8) Some([29])
# Var t95 (t95 Number(U8, 32)) Reg(U8) Some([60])
# Var t96 (t96 Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })) Reg(U8) Some([29])
# Var t97 (t97 Ident("c")) Reg(U32) Some([16, 17, 18, 19])
# Var t98 (t98 Ident("ch")) Reg(U8) Some([29])
# Var t99 (t99 Number(U8, 99)) Reg(U8) Some([60])
# 00022 Instruction { source: "Save function parameter 'c' registers [0, 1, 2, 3] to locals [24, 25, 26, 27].", opcode: Copy32, args: [Register(0x00), Register(0x18)], resolved: None }
21 00 18 
# 00025 Instruction { source: "Save function parameter 'ch' registers [4] to locals [28].", opcode: Copy8, args: [Register(0x04), Register(0x1c)], resolved: None }
0b 04 1c 
# t0 <- c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"stack\"), var_type: Some(Ptr(Struct(\"Stack\"))), value: AddressOf(PtrFieldDeref(\"c\", \"stack\")) }", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# 00028 Instruction { source: "t0 <- c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"stack\\\"), var_type: Some(Ptr(Struct(\\\"Stack\\\"))), value: AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Stack\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Stack\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x10)], resolved: None }
21 18 10 
# stack <- t0 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"stack\"), var_type: Some(Ptr(Struct(\"Stack\"))), value: AddressOf(PtrFieldDeref(\"c\", \"stack\")) }", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))"] }
# 0002b Instruction { source: "stack <- t0 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"stack\\\"), var_type: Some(Ptr(Struct(\\\"Stack\\\"))), value: AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\"] }", opcode: Copy32, args: [Register(0x10), Register(0x40)], resolved: None }
21 10 40 
# a <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: Some(Number(USIZE)), value: Number(U8, 0) }", "Number(U8, 0)"] }
# 0002e Instruction { source: "a <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: Some(Number(USIZE)), value: Number(U8, 0) }\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x10), Constant8(0x00=0)], resolved: None }
04 10 00 
# b <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(USIZE)), value: Number(U8, 0) }", "Number(U8, 0)"] }
# 00031 Instruction { source: "b <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(USIZE)), value: Number(U8, 0) }\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x14), Constant8(0x00=0)], resolved: None }
04 14 00 
# t1 <- ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 0) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t1 <- ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# t2 <- 0n43/0x2bu8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 0) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }", "Number(U8, 43)", "Number(U8, 43)"] }
# 00034 Instruction { source: "t2 <- 0n43/0x2bu8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }\", \"Number(U8, 43)\", \"Number(U8, 43)\"] }", opcode: LoadImm8, args: [Register(0x45), Constant8(0x2b=43)], resolved: None }
04 45 2b 
# if t1 == t2 then 'RpnCalc_handle_if_true_0_1' else 'RpnCalc_handle_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 0) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }"] }
# 00037 Instruction { source: "if t1 == t2 then 'RpnCalc_handle_if_true_0_1' else 'RpnCalc_handle_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }\"] }", opcode: Cmp8, args: [Register(0x1c), Register(0x45)], resolved: None }
15 1c 45 
# 0003a Instruction { source: "if t1 == t2 then 'RpnCalc_handle_if_true_0_1' else 'RpnCalc_handle_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_handle_if_true_0_1)], resolved: None }
72 42 00 00 
# 0003e Instruction { source: "if t1 == t2 then 'RpnCalc_handle_if_true_0_1' else 'RpnCalc_handle_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_0_2)], resolved: None }
70 49 00 00 
# :RpnCalc_handle_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 0) }] }"] }
# RpnCalc_handle_if_true_0_1
# stack_needed <- 0n2/0x02u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }", "Number(U8, 2)"] }
# 00042 Instruction { source: "stack_needed <- 0n2/0x02u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }\", \"Number(U8, 2)\"] }", opcode: LoadImm8, args: [Register(0x44), Constant8(0x02=2)], resolved: None }
04 44 02 
# goto RpnCalc_handle_if_end_0
# 	SourceContext { contexts: [] }
# 00045 Instruction { source: "goto RpnCalc_handle_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_0)], resolved: None }
70 a0 00 00 
# :RpnCalc_handle_if_else_0_2
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_0_2
# t3 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t3 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# t4 <- 0n45/0x2du8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }", "Number(U8, 45)", "Number(U8, 45)"] }
# 00049 Instruction { source: "t4 <- 0n45/0x2du8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }\", \"Number(U8, 45)\", \"Number(U8, 45)\"] }", opcode: LoadImm8, args: [Register(0x45), Constant8(0x2d=45)], resolved: None }
04 45 2d 
# if t3 == t4 then 'RpnCalc_handle_if_true_1_3' else 'RpnCalc_handle_if_else_1_4'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }"] }
# 0004c Instruction { source: "if t3 == t4 then 'RpnCalc_handle_if_true_1_3' else 'RpnCalc_handle_if_else_1_4'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }\"] }", opcode: Cmp8, args: [Register(0x1c), Register(0x45)], resolved: None }
15 1c 45 
# 0004f Instruction { source: "if t3 == t4 then 'RpnCalc_handle_if_true_1_3' else 'RpnCalc_handle_if_else_1_4'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_handle_if_true_1_3)], resolved: None }
72 57 00 00 
# 00053 Instruction { source: "if t3 == t4 then 'RpnCalc_handle_if_true_1_3' else 'RpnCalc_handle_if_else_1_4'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_1_4)], resolved: None }
70 5e 00 00 
# :RpnCalc_handle_if_true_1_3
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_true_1_3
# stack_needed <- 0n2/0x02u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }", "Number(U8, 2)"] }
# 00057 Instruction { source: "stack_needed <- 0n2/0x02u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }\", \"Number(U8, 2)\"] }", opcode: LoadImm8, args: [Register(0x44), Constant8(0x02=2)], resolved: None }
04 44 02 
# goto RpnCalc_handle_if_end_0
# 	SourceContext { contexts: [] }
# 0005a Instruction { source: "goto RpnCalc_handle_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_0)], resolved: None }
70 a0 00 00 
# :RpnCalc_handle_if_else_1_4
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_1_4
# t5 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t5 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# t6 <- 0n42/0x2au8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }", "Number(U8, 42)", "Number(U8, 42)"] }
# 0005e Instruction { source: "t6 <- 0n42/0x2au8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }\", \"Number(U8, 42)\", \"Number(U8, 42)\"] }", opcode: LoadImm8, args: [Register(0x45), Constant8(0x2a=42)], resolved: None }
04 45 2a 
# if t5 == t6 then 'RpnCalc_handle_if_true_2_5' else 'RpnCalc_handle_if_else_2_6'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }"] }
# 00061 Instruction { source: "if t5 == t6 then 'RpnCalc_handle_if_true_2_5' else 'RpnCalc_handle_if_else_2_6'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }\"] }", opcode: Cmp8, args: [Register(0x1c), Register(0x45)], resolved: None }
15 1c 45 
# 00064 Instruction { source: "if t5 == t6 then 'RpnCalc_handle_if_true_2_5' else 'RpnCalc_handle_if_else_2_6'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_handle_if_true_2_5)], resolved: None }
72 6c 00 00 
# 00068 Instruction { source: "if t5 == t6 then 'RpnCalc_handle_if_true_2_5' else 'RpnCalc_handle_if_else_2_6'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_2_6)], resolved: None }
70 73 00 00 
# :RpnCalc_handle_if_true_2_5
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_true_2_5
# stack_needed <- 0n2/0x02u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }", "Number(U8, 2)"] }
# 0006c Instruction { source: "stack_needed <- 0n2/0x02u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }\", \"Number(U8, 2)\"] }", opcode: LoadImm8, args: [Register(0x44), Constant8(0x02=2)], resolved: None }
04 44 02 
# goto RpnCalc_handle_if_end_0
# 	SourceContext { contexts: [] }
# 0006f Instruction { source: "goto RpnCalc_handle_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_0)], resolved: None }
70 a0 00 00 
# :RpnCalc_handle_if_else_2_6
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_2_6
# t7 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t7 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# t8 <- 0n47/0x2fu8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }", "Number(U8, 47)", "Number(U8, 47)"] }
# 00073 Instruction { source: "t8 <- 0n47/0x2fu8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }\", \"Number(U8, 47)\", \"Number(U8, 47)\"] }", opcode: LoadImm8, args: [Register(0x45), Constant8(0x2f=47)], resolved: None }
04 45 2f 
# if t7 == t8 then 'RpnCalc_handle_if_true_3_7' else 'RpnCalc_handle_if_else_3_8'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }"] }
# 00076 Instruction { source: "if t7 == t8 then 'RpnCalc_handle_if_true_3_7' else 'RpnCalc_handle_if_else_3_8'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }\"] }", opcode: Cmp8, args: [Register(0x1c), Register(0x45)], resolved: None }
15 1c 45 
# 00079 Instruction { source: "if t7 == t8 then 'RpnCalc_handle_if_true_3_7' else 'RpnCalc_handle_if_else_3_8'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_handle_if_true_3_7)], resolved: None }
72 81 00 00 
# 0007d Instruction { source: "if t7 == t8 then 'RpnCalc_handle_if_true_3_7' else 'RpnCalc_handle_if_else_3_8'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_3_8)], resolved: None }
70 88 00 00 
# :RpnCalc_handle_if_true_3_7
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_true_3_7
# stack_needed <- 0n2/0x02u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }", "Number(U8, 2)"] }
# 00081 Instruction { source: "stack_needed <- 0n2/0x02u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }\", \"Number(U8, 2)\"] }", opcode: LoadImm8, args: [Register(0x44), Constant8(0x02=2)], resolved: None }
04 44 02 
# goto RpnCalc_handle_if_end_0
# 	SourceContext { contexts: [] }
# 00084 Instruction { source: "goto RpnCalc_handle_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_0)], resolved: None }
70 a0 00 00 
# :RpnCalc_handle_if_else_3_8
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_3_8
# t9 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t9 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# t10 <- 0n115/0x73u8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }", "Number(U8, 115)", "Number(U8, 115)"] }
# 00088 Instruction { source: "t10 <- 0n115/0x73u8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }\", \"Number(U8, 115)\", \"Number(U8, 115)\"] }", opcode: LoadImm8, args: [Register(0x45), Constant8(0x73=115)], resolved: None }
04 45 73 
# if t9 == t10 then 'RpnCalc_handle_if_true_4_9' else 'RpnCalc_handle_if_else_4_10'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }"] }
# 0008b Instruction { source: "if t9 == t10 then 'RpnCalc_handle_if_true_4_9' else 'RpnCalc_handle_if_else_4_10'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }\"] }", opcode: Cmp8, args: [Register(0x1c), Register(0x45)], resolved: None }
15 1c 45 
# 0008e Instruction { source: "if t9 == t10 then 'RpnCalc_handle_if_true_4_9' else 'RpnCalc_handle_if_else_4_10'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_handle_if_true_4_9)], resolved: None }
72 96 00 00 
# 00092 Instruction { source: "if t9 == t10 then 'RpnCalc_handle_if_true_4_9' else 'RpnCalc_handle_if_else_4_10'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_4_10)], resolved: None }
70 9d 00 00 
# :RpnCalc_handle_if_true_4_9
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_true_4_9
# stack_needed <- 0n2/0x02u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }", "Number(U8, 2)"] }
# 00096 Instruction { source: "stack_needed <- 0n2/0x02u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }\", \"Number(U8, 2)\"] }", opcode: LoadImm8, args: [Register(0x44), Constant8(0x02=2)], resolved: None }
04 44 02 
# goto RpnCalc_handle_if_end_0
# 	SourceContext { contexts: [] }
# 00099 Instruction { source: "goto RpnCalc_handle_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_0)], resolved: None }
70 a0 00 00 
# :RpnCalc_handle_if_else_4_10
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_4_10
# stack_needed <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)"] }
# 0009d Instruction { source: "stack_needed <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x44), Constant8(0x00=0)], resolved: None }
04 44 00 
# :RpnCalc_handle_if_end_0
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_end_0
# t11 <- stack_needed U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }", "Ident(\"stack_needed\")", "Ident(\"stack_needed\")"] }
# 000a0 Instruction { source: "t11 <- stack_needed U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }\", \"Ident(\\\"stack_needed\\\")\", \"Ident(\\\"stack_needed\\\")\"] }", opcode: Copy8, args: [Register(0x44), Register(0x45)], resolved: None }
0b 44 45 
# t12 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 000a3 Instruction { source: "t12 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x34), Constant8(0x00=0)], resolved: None }
04 34 00 
# if t11 > t12 then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_else_0_13'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }"] }
# 000a6 Instruction { source: "if t11 > t12 then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_else_0_13'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x45), Register(0x34)], resolved: None }
15 45 34 
# 000a9 Instruction { source: "if t11 > t12 then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_else_0_13'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }\"] }", opcode: JcImm, args: [Label24(RpnCalc_handle_if_else_0_13)], resolved: None }
71 61 01 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t11 > t12 then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_else_0_13'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_true_0_12)], resolved: None }
# :RpnCalc_handle_if_true_0_12
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }])], else_block: [] }"] }
# RpnCalc_handle_if_true_0_12
# t14 <- c U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "t14 <- c U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_57_c <- t14 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })"] }
# 000ad Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_c <- t14 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy32, args: [Register(0x18), Register(0x20)], resolved: None }
21 18 20 
# inline_RpnCalc_handle_RpnCalc_push_pending_57_t2 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_c U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }", "PtrFieldDeref(\"c\", \"have_num\")", "PtrFieldDeref(\"c\", \"have_num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_t2 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_c U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_57_t3 <- 0n72/0x00000048u32 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }", "PtrFieldDeref(\"c\", \"have_num\")", "PtrFieldDeref(\"c\", \"have_num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))", "Number(USIZE, 72)", "Number(USIZE, 72)"] }
# 000b0 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_t3 <- 0n72/0x00000048u32 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\", \"Number(USIZE, 72)\", \"Number(USIZE, 72)\"] }", opcode: LoadImm32, args: [Register(0x24), Constant32(0x00000048=72)], resolved: None }
20 24 48 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_57_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_57_t3
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }", "PtrFieldDeref(\"c\", \"have_num\")", "PtrFieldDeref(\"c\", \"have_num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))"] }
# 000b6 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_57_t3\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 000b7 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_57_t3\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: AddCarry32_1, args: [Register(0x20), Register(0x24), Register(0x24)], resolved: None }
30 20 24 24 
# 000bb Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_57_t3\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_57_t0 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_57_t1] U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }", "PtrFieldDeref(\"c\", \"have_num\")", "PtrFieldDeref(\"c\", \"have_num\")"] }
# 000bc Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_t0 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_57_t1] U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\"] }", opcode: Load8, args: [Register(0x24), Register(0x34)], resolved: None }
05 24 34 
# inline_RpnCalc_handle_RpnCalc_push_pending_57_t4 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 000bf Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_t4 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x35), Constant8(0x00=0)], resolved: None }
04 35 00 
# if inline_RpnCalc_handle_RpnCalc_push_pending_57_t0 != inline_RpnCalc_handle_RpnCalc_push_pending_57_t4 then 'inline_RpnCalc_handle_RpnCalc_push_pending_57_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_57_RpnCalc_push_pending_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }"] }
# 000c2 Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_57_t0 != inline_RpnCalc_handle_RpnCalc_push_pending_57_t4 then 'inline_RpnCalc_handle_RpnCalc_push_pending_57_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_57_RpnCalc_push_pending_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x34), Register(0x35)], resolved: None }
15 34 35 
# 000c5 Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_57_t0 != inline_RpnCalc_handle_RpnCalc_push_pending_57_t4 then 'inline_RpnCalc_handle_RpnCalc_push_pending_57_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_57_RpnCalc_push_pending_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_57_RpnCalc_push_pending_if_else_0_2)], resolved: None }
72 5d 01 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_57_t0 != inline_RpnCalc_handle_RpnCalc_push_pending_57_t4 then 'inline_RpnCalc_handle_RpnCalc_push_pending_57_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_57_RpnCalc_push_pending_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_57_RpnCalc_push_pending_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_57_RpnCalc_push_pending_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }"] }
# inline_RpnCalc_handle_RpnCalc_push_pending_57_RpnCalc_push_pending_if_true_0_1
# inline_RpnCalc_handle_RpnCalc_push_pending_57_t7 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_c U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_t7 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_c U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Stack\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Stack\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_57_t6 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_t7 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))"] }
# 000c9 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_t6 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_t7 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\"] }", opcode: Copy32, args: [Register(0x20), Register(0x28)], resolved: None }
21 20 28 
# inline_RpnCalc_handle_RpnCalc_push_pending_57_t10 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_c U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_t10 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_c U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_57_t11 <- 0n68/0x00000044u32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Number(USIZE, 68)", "Number(USIZE, 68)"] }
# 000cc Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_t11 <- 0n68/0x00000044u32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Number(USIZE, 68)\", \"Number(USIZE, 68)\"] }", opcode: LoadImm32, args: [Register(0x24), Constant32(0x00000044=68)], resolved: None }
20 24 44 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_57_t9 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_t10 Add inline_RpnCalc_handle_RpnCalc_push_pending_57_t11
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))"] }
# 000d2 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_t9 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_t10 Add inline_RpnCalc_handle_RpnCalc_push_pending_57_t11\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 000d3 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_t9 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_t10 Add inline_RpnCalc_handle_RpnCalc_push_pending_57_t11\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_1, args: [Register(0x20), Register(0x24), Register(0x24)], resolved: None }
30 20 24 24 
# 000d7 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_t9 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_t10 Add inline_RpnCalc_handle_RpnCalc_push_pending_57_t11\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_57_t8 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_57_t9] U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")"] }
# 000d8 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_t8 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_57_t9] U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\"] }", opcode: Load32, args: [Register(0x24), Register(0x24)], resolved: None }
22 24 24 
# inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_s <- inline_RpnCalc_handle_RpnCalc_push_pending_57_t6 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_s <- inline_RpnCalc_handle_RpnCalc_push_pending_57_t6 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\"] }", opcode: Copy32, args: [Register(0x28), Register(0x28)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_n <- inline_RpnCalc_handle_RpnCalc_push_pending_57_t8 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_n <- inline_RpnCalc_handle_RpnCalc_push_pending_57_t8 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\"] }", opcode: Copy32, args: [Register(0x24), Register(0x24)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t0 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t0 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x28), Register(0x28)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_values <- inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t0 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# 000db Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_values <- inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t0 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0x28), Register(0x2c)], resolved: None }
21 28 2c 
# inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t2 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_values U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t2 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_values U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0x2c), Register(0x2c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t6 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_s U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t6 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_s U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x28), Register(0x28)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t7 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 000de Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t7 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x30), Constant32(0x00000040=64)], resolved: None }
20 30 40 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t5 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t6 Add inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t7
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 000e4 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t5 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t6 Add inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 000e5 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t5 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t6 Add inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x28), Register(0x30), Register(0x30)], resolved: None }
30 28 30 30 
# 000e9 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t5 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t6 Add inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t4 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t5] U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 000ea Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t4 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t5] U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x30), Register(0x30)], resolved: None }
22 30 30 
# inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t4 Add inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t4
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 000ed Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t4 Add inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 000ee Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t4 Add inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_1, args: [Register(0x30), Register(0x30), Register(0x30)], resolved: None }
30 30 30 30 
# 000f2 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t4 Add inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t3 Add inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t3
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))"] }
# 000f3 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t3 Add inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 000f4 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t3 Add inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x30), Register(0x30), Register(0x30)], resolved: None }
30 30 30 30 
# 000f8 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t3 Add inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t3
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))"] }
# 000f9 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 000fa Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_1, args: [Register(0x2c), Register(0x30), Register(0x2c)], resolved: None }
30 2c 30 2c 
# 000fe Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t9 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_n U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t9 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_n U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy32, args: [Register(0x24), Register(0x24)], resolved: None }
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t1] <- inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t9 U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }"] }
# 000ff Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t1] <- inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_1, args: [Register(0x24), Register(0x2c)], resolved: None }
23 24 2c 
# 00102 Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t1] <- inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t11 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# 00103 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t11 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x28), Register(0x24)], resolved: None }
21 28 24 
# inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t12 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 00106 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t12 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x2c), Constant32(0x00000040=64)], resolved: None }
20 2c 40 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t10 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t11 Add inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t12
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 0010c Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t10 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t11 Add inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0010d Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t10 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t11 Add inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x24), Register(0x2c), Register(0x24)], resolved: None }
30 24 2c 24 
# 00111 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t10 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t11 Add inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t16 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t16 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x28), Register(0x28)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t17 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 00112 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t17 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x2c), Constant32(0x00000040=64)], resolved: None }
20 2c 40 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t15 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t16 Add inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t17
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 00118 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t15 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t16 Add inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00119 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t15 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t16 Add inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x28), Register(0x2c), Register(0x28)], resolved: None }
30 28 2c 28 
# 0011d Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t15 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t16 Add inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t14 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t15] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 0011e Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t14 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t15] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x28), Register(0x28)], resolved: None }
22 28 28 
# inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t18 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 00121 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t18 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x2c), Constant32(0x00000001=1)], resolved: None }
20 2c 01 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t13 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t14 Add inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t18
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))"] }
# 00127 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t13 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t14 Add inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00128 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t13 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t14 Add inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x28), Register(0x2c), Register(0x28)], resolved: None }
30 28 2c 28 
# 0012c Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t13 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t14 Add inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t10] <- inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t13 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }"] }
# 0012d Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t10] <- inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t13 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_1, args: [Register(0x28), Register(0x24)], resolved: None }
23 28 24 
# 00130 Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t10] <- inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_t13 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_function_end_stack_push
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_function_end_stack_push\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_function_end_stack_push
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_57_inline_RpnCalc_push_pending_stack_push_56_function_end_stack_push
# inline_RpnCalc_handle_RpnCalc_push_pending_57_t13 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_t13 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_57_t14 <- 0n68/0x00000044u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Number(USIZE, 68)", "Number(USIZE, 68)"] }
# 00131 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_t14 <- 0n68/0x00000044u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Number(USIZE, 68)\", \"Number(USIZE, 68)\"] }", opcode: LoadImm32, args: [Register(0x24), Constant32(0x00000044=68)], resolved: None }
20 24 44 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_57_t12 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_t13 Add inline_RpnCalc_handle_RpnCalc_push_pending_57_t14
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))"] }
# 00137 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_t12 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_t13 Add inline_RpnCalc_handle_RpnCalc_push_pending_57_t14\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00138 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_t12 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_t13 Add inline_RpnCalc_handle_RpnCalc_push_pending_57_t14\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_1, args: [Register(0x20), Register(0x24), Register(0x24)], resolved: None }
30 20 24 24 
# 0013c Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_t12 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_t13 Add inline_RpnCalc_handle_RpnCalc_push_pending_57_t14\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_57_t15 <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 0013d Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_t15 <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x28), Constant32(0x00000000=0)], resolved: None }
20 28 00 00 00 00 
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_57_t12] <- inline_RpnCalc_handle_RpnCalc_push_pending_57_t15 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }"] }
# 00143 Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_57_t12] <- inline_RpnCalc_handle_RpnCalc_push_pending_57_t15 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\"] }", opcode: Store32_1, args: [Register(0x28), Register(0x24)], resolved: None }
23 28 24 
# 00146 Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_57_t12] <- inline_RpnCalc_handle_RpnCalc_push_pending_57_t15 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_RpnCalc_handle_RpnCalc_push_pending_57_t17 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_t17 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_57_t18 <- 0n72/0x00000048u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))", "Number(USIZE, 72)", "Number(USIZE, 72)"] }
# 00147 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_t18 <- 0n72/0x00000048u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\", \"Number(USIZE, 72)\", \"Number(USIZE, 72)\"] }", opcode: LoadImm32, args: [Register(0x24), Constant32(0x00000048=72)], resolved: None }
20 24 48 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_57_t16 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_t17 Add inline_RpnCalc_handle_RpnCalc_push_pending_57_t18
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))"] }
# 0014d Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_t16 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_t17 Add inline_RpnCalc_handle_RpnCalc_push_pending_57_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0014e Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_t16 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_t17 Add inline_RpnCalc_handle_RpnCalc_push_pending_57_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: AddCarry32_1, args: [Register(0x20), Register(0x24), Register(0x20)], resolved: None }
30 20 24 20 
# 00152 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_t16 <- inline_RpnCalc_handle_RpnCalc_push_pending_57_t17 Add inline_RpnCalc_handle_RpnCalc_push_pending_57_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_57_t19 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00153 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_57_t19 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x34), Constant8(0x00=0)], resolved: None }
04 34 00 
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_57_t16] <- inline_RpnCalc_handle_RpnCalc_push_pending_57_t19 U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }"] }
# 00156 Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_57_t16] <- inline_RpnCalc_handle_RpnCalc_push_pending_57_t19 U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\"] }", opcode: Store8, args: [Register(0x34), Register(0x20)], resolved: None }
06 34 20 
# goto inline_RpnCalc_handle_RpnCalc_push_pending_57_RpnCalc_push_pending_if_end_0
# 	SourceContext { contexts: [] }
# 00159 Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_57_RpnCalc_push_pending_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_57_RpnCalc_push_pending_if_end_0)], resolved: None }
70 5d 01 00 
# :inline_RpnCalc_handle_RpnCalc_push_pending_57_RpnCalc_push_pending_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_57_RpnCalc_push_pending_if_else_0_2
# :inline_RpnCalc_handle_RpnCalc_push_pending_57_RpnCalc_push_pending_if_end_0
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_57_RpnCalc_push_pending_if_end_0
# goto inline_RpnCalc_handle_RpnCalc_push_pending_57_function_end_RpnCalc_push_pending
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_57_function_end_RpnCalc_push_pending\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_57_function_end_RpnCalc_push_pending)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_57_function_end_RpnCalc_push_pending
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_57_function_end_RpnCalc_push_pending
# goto RpnCalc_handle_if_end_11
# 	SourceContext { contexts: [] }
# 0015d Instruction { source: "goto RpnCalc_handle_if_end_11\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_11)], resolved: None }
70 61 01 00 
# :RpnCalc_handle_if_else_0_13
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_0_13
# :RpnCalc_handle_if_end_11
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_end_11
# t16 <- stack U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"stack_count_usize\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\"stack\", \"first_free\") }", "PtrFieldDeref(\"stack\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"stack\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"stack\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"stack\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"stack\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"stack\") }", "Ident(\"stack\")"] }
# 00161 Instruction { source: "t16 <- stack U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"stack_count_usize\\\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\\\"stack\\\", \\\"first_free\\\") }\", \"PtrFieldDeref(\\\"stack\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"stack\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"stack\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"stack\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"stack\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"stack\\\") }\", \"Ident(\\\"stack\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x20)], resolved: None }
21 40 20 
# t17 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"stack_count_usize\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\"stack\", \"first_free\") }", "PtrFieldDeref(\"stack\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"stack\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"stack\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"stack\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 00164 Instruction { source: "t17 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"stack_count_usize\\\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\\\"stack\\\", \\\"first_free\\\") }\", \"PtrFieldDeref(\\\"stack\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"stack\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"stack\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"stack\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x24), Constant32(0x00000040=64)], resolved: None }
20 24 40 00 00 00 
# t15 <- t16 Add t17
# 	SourceContext { contexts: ["Assign { target: Ident(\"stack_count_usize\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\"stack\", \"first_free\") }", "PtrFieldDeref(\"stack\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"stack\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"stack\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"stack\") }, Number(USIZE, 64))"] }
# 0016a Instruction { source: "t15 <- t16 Add t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"stack_count_usize\\\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\\\"stack\\\", \\\"first_free\\\") }\", \"PtrFieldDeref(\\\"stack\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"stack\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"stack\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"stack\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0016b Instruction { source: "t15 <- t16 Add t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"stack_count_usize\\\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\\\"stack\\\", \\\"first_free\\\") }\", \"PtrFieldDeref(\\\"stack\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"stack\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"stack\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"stack\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x20), Register(0x24), Register(0x20)], resolved: None }
30 20 24 20 
# 0016f Instruction { source: "t15 <- t16 Add t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"stack_count_usize\\\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\\\"stack\\\", \\\"first_free\\\") }\", \"PtrFieldDeref(\\\"stack\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"stack\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"stack\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"stack\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# stack_count_usize <- mem[t15] U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"stack_count_usize\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\"stack\", \"first_free\") }", "PtrFieldDeref(\"stack\", \"first_free\")"] }
# 00170 Instruction { source: "stack_count_usize <- mem[t15] U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"stack_count_usize\\\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\\\"stack\\\", \\\"first_free\\\") }\", \"PtrFieldDeref(\\\"stack\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x20), Register(0x20)], resolved: None }
22 20 20 
# stack_count <- stack_count_usize[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"stack_count\"), var_type: Some(Number(U8)), value: Index(\"stack_count_usize\", Number(U8, 0)) }", "Index(\"stack_count_usize\", Number(U8, 0))"] }
# 00173 Instruction { source: "stack_count <- stack_count_usize[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"stack_count\\\"), var_type: Some(Number(U8)), value: Index(\\\"stack_count_usize\\\", Number(U8, 0)) }\", \"Index(\\\"stack_count_usize\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x20), Register(0x3e)], resolved: None }
0b 20 3e 
# t18 <- stack_needed U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Ident(\"stack_count\") }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Ident(\"stack_count\") }", "Ident(\"stack_needed\")", "Ident(\"stack_needed\")"] }
# 00176 Instruction { source: "t18 <- stack_needed U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Ident(\\\"stack_count\\\") }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Ident(\\\"stack_count\\\") }\", \"Ident(\\\"stack_needed\\\")\", \"Ident(\\\"stack_needed\\\")\"] }", opcode: Copy8, args: [Register(0x44), Register(0x45)], resolved: None }
0b 44 45 
# t19 <- stack_count U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Ident(\"stack_count\") }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Ident(\"stack_count\") }", "Ident(\"stack_count\")", "Ident(\"stack_count\")"] }
# 00179 Instruction { source: "t19 <- stack_count U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Ident(\\\"stack_count\\\") }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Ident(\\\"stack_count\\\") }\", \"Ident(\\\"stack_count\\\")\", \"Ident(\\\"stack_count\\\")\"] }", opcode: Copy8, args: [Register(0x3e), Register(0x34)], resolved: None }
0b 3e 34 
# if t18 > t19 then 'RpnCalc_handle_if_true_0_15' else 'RpnCalc_handle_if_else_0_16'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Ident(\"stack_count\") }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Ident(\"stack_count\") }"] }
# 0017c Instruction { source: "if t18 > t19 then 'RpnCalc_handle_if_true_0_15' else 'RpnCalc_handle_if_else_0_16'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Ident(\\\"stack_count\\\") }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Ident(\\\"stack_count\\\") }\"] }", opcode: Cmp8, args: [Register(0x45), Register(0x34)], resolved: None }
15 45 34 
# 0017f Instruction { source: "if t18 > t19 then 'RpnCalc_handle_if_true_0_15' else 'RpnCalc_handle_if_else_0_16'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Ident(\\\"stack_count\\\") }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Ident(\\\"stack_count\\\") }\"] }", opcode: JcImm, args: [Label24(RpnCalc_handle_if_else_0_16)], resolved: None }
71 a3 01 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t18 > t19 then 'RpnCalc_handle_if_true_0_15' else 'RpnCalc_handle_if_else_0_16'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Ident(\\\"stack_count\\\") }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Ident(\\\"stack_count\\\") }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_true_0_15)], resolved: None }
# :RpnCalc_handle_if_true_0_15
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Ident(\"stack_count\") }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }"] }
# RpnCalc_handle_if_true_0_15
# t21 <- 0n69/0x45u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 69)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 69)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 69)] })", "Number(U8, 69)", "Number(U8, 69)"] }
# 00183 Instruction { source: "t21 <- 0n69/0x45u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 69)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 69)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 69)] })\", \"Number(U8, 69)\", \"Number(U8, 69)\"] }", opcode: LoadImm8, args: [Register(0x1d), Constant8(0x45=69)], resolved: None }
04 1d 45 
# inline_RpnCalc_handle_putc_17_c <- t21 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 69)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 69)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 69)] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_17_c <- t21 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 69)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 69)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 69)] })\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# inline_RpnCalc_handle_putc_17_t1 <- inline_RpnCalc_handle_putc_17_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_17_t1 <- inline_RpnCalc_handle_putc_17_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_17_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 00186 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x1d)], resolved: None }
68 1d 
# goto inline_RpnCalc_handle_putc_17_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_17_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_17_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_17_function_end_putc
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_putc_17_function_end_putc
# t23 <- 0n82/0x52u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 82)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 82)] })", "Number(U8, 82)", "Number(U8, 82)"] }
# 00188 Instruction { source: "t23 <- 0n82/0x52u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] })\", \"Number(U8, 82)\", \"Number(U8, 82)\"] }", opcode: LoadImm8, args: [Register(0x1d), Constant8(0x52=82)], resolved: None }
04 1d 52 
# inline_RpnCalc_handle_putc_18_c <- t23 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 82)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 82)] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_18_c <- t23 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] })\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# inline_RpnCalc_handle_putc_18_t1 <- inline_RpnCalc_handle_putc_18_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_18_t1 <- inline_RpnCalc_handle_putc_18_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_18_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 0018b Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x1d)], resolved: None }
68 1d 
# goto inline_RpnCalc_handle_putc_18_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_18_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_18_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_18_function_end_putc
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_putc_18_function_end_putc
# t25 <- 0n82/0x52u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 82)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 82)] })", "Number(U8, 82)", "Number(U8, 82)"] }
# 0018d Instruction { source: "t25 <- 0n82/0x52u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] })\", \"Number(U8, 82)\", \"Number(U8, 82)\"] }", opcode: LoadImm8, args: [Register(0x1d), Constant8(0x52=82)], resolved: None }
04 1d 52 
# inline_RpnCalc_handle_putc_19_c <- t25 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 82)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 82)] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_19_c <- t25 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] })\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# inline_RpnCalc_handle_putc_19_t1 <- inline_RpnCalc_handle_putc_19_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_19_t1 <- inline_RpnCalc_handle_putc_19_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_19_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 00190 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x1d)], resolved: None }
68 1d 
# goto inline_RpnCalc_handle_putc_19_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_19_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_19_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_19_function_end_putc
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_putc_19_function_end_putc
# t27 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Number(U8, 10)", "Number(U8, 10)"] }
# 00192 Instruction { source: "t27 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x1d), Constant8(0x0a=10)], resolved: None }
04 1d 0a 
# inline_RpnCalc_handle_putc_20_c <- t27 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_20_c <- t27 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# inline_RpnCalc_handle_putc_20_t1 <- inline_RpnCalc_handle_putc_20_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_20_t1 <- inline_RpnCalc_handle_putc_20_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_20_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 00195 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x1d)], resolved: None }
68 1d 
# goto inline_RpnCalc_handle_putc_20_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_20_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_20_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_20_function_end_putc
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_putc_20_function_end_putc
# t28 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 1)) }", "Number(U8, 1)", "Number(U8, 1)"] }
# 00197 Instruction { source: "t28 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 1)) }\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x1d), Constant8(0x01=1)], resolved: None }
04 1d 01 
# return Some(t28)
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 1)) }"] }
# 0019a Instruction { source: "return Some(t28)\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x00)], resolved: None }
0b 1d 00 
# 0019d Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# goto RpnCalc_handle_if_end_14
# 	SourceContext { contexts: [] }
# 0019f Instruction { source: "goto RpnCalc_handle_if_end_14\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_14)], resolved: None }
70 a3 01 00 
# :RpnCalc_handle_if_else_0_16
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_0_16
# :RpnCalc_handle_if_end_14
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_end_14
# t29 <- stack_needed U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }, [Assign { target: Ident(\"a\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }", "Ident(\"stack_needed\")", "Ident(\"stack_needed\")"] }
# 001a3 Instruction { source: "t29 <- stack_needed U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] }) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }\", \"Ident(\\\"stack_needed\\\")\", \"Ident(\\\"stack_needed\\\")\"] }", opcode: Copy8, args: [Register(0x44), Register(0x45)], resolved: None }
0b 44 45 
# t30 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }, [Assign { target: Ident(\"a\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 001a6 Instruction { source: "t30 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] }) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x34), Constant8(0x00=0)], resolved: None }
04 34 00 
# if t29 > t30 then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_else_0_19'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }, [Assign { target: Ident(\"a\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }"] }
# 001a9 Instruction { source: "if t29 > t30 then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_else_0_19'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] }) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x45), Register(0x34)], resolved: None }
15 45 34 
# 001ac Instruction { source: "if t29 > t30 then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_else_0_19'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] }) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }\"] }", opcode: JcImm, args: [Label24(RpnCalc_handle_if_else_0_19)], resolved: None }
71 1a 02 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t29 > t30 then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_else_0_19'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] }) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_true_0_18)], resolved: None }
# :RpnCalc_handle_if_true_0_18
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }, [Assign { target: Ident(\"a\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }])], else_block: [] }"] }
# RpnCalc_handle_if_true_0_18
# t31 <- stack U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }", "Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] })", "Ident(\"stack\")", "Ident(\"stack\")"] }
# 001b0 Instruction { source: "t31 <- stack U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] }) }\", \"Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] })\", \"Ident(\\\"stack\\\")\", \"Ident(\\\"stack\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x10)], resolved: None }
21 40 10 
# inline_RpnCalc_handle_stack_pop_48_s <- t31 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }", "Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_48_s <- t31 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] }) }\", \"Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] })\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_stack_pop_48_t1 <- inline_RpnCalc_handle_stack_pop_48_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_48_t1 <- inline_RpnCalc_handle_stack_pop_48_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_stack_pop_48_t2 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 001b3 Instruction { source: "inline_RpnCalc_handle_stack_pop_48_t2 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x20), Constant32(0x00000040=64)], resolved: None }
20 20 40 00 00 00 
# inline_RpnCalc_handle_stack_pop_48_t0 <- inline_RpnCalc_handle_stack_pop_48_t1 Add inline_RpnCalc_handle_stack_pop_48_t2
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 001b9 Instruction { source: "inline_RpnCalc_handle_stack_pop_48_t0 <- inline_RpnCalc_handle_stack_pop_48_t1 Add inline_RpnCalc_handle_stack_pop_48_t2\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 001ba Instruction { source: "inline_RpnCalc_handle_stack_pop_48_t0 <- inline_RpnCalc_handle_stack_pop_48_t1 Add inline_RpnCalc_handle_stack_pop_48_t2\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x10), Register(0x20), Register(0x20)], resolved: None }
30 10 20 20 
# 001be Instruction { source: "inline_RpnCalc_handle_stack_pop_48_t0 <- inline_RpnCalc_handle_stack_pop_48_t1 Add inline_RpnCalc_handle_stack_pop_48_t2\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_pop_48_t6 <- inline_RpnCalc_handle_stack_pop_48_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_48_t6 <- inline_RpnCalc_handle_stack_pop_48_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_stack_pop_48_t7 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 001bf Instruction { source: "inline_RpnCalc_handle_stack_pop_48_t7 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x24), Constant32(0x00000040=64)], resolved: None }
20 24 40 00 00 00 
# inline_RpnCalc_handle_stack_pop_48_t5 <- inline_RpnCalc_handle_stack_pop_48_t6 Add inline_RpnCalc_handle_stack_pop_48_t7
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 001c5 Instruction { source: "inline_RpnCalc_handle_stack_pop_48_t5 <- inline_RpnCalc_handle_stack_pop_48_t6 Add inline_RpnCalc_handle_stack_pop_48_t7\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 001c6 Instruction { source: "inline_RpnCalc_handle_stack_pop_48_t5 <- inline_RpnCalc_handle_stack_pop_48_t6 Add inline_RpnCalc_handle_stack_pop_48_t7\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x10), Register(0x24), Register(0x24)], resolved: None }
30 10 24 24 
# 001ca Instruction { source: "inline_RpnCalc_handle_stack_pop_48_t5 <- inline_RpnCalc_handle_stack_pop_48_t6 Add inline_RpnCalc_handle_stack_pop_48_t7\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_pop_48_t4 <- mem[inline_RpnCalc_handle_stack_pop_48_t5] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 001cb Instruction { source: "inline_RpnCalc_handle_stack_pop_48_t4 <- mem[inline_RpnCalc_handle_stack_pop_48_t5] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x24), Register(0x24)], resolved: None }
22 24 24 
# inline_RpnCalc_handle_stack_pop_48_t8 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 001ce Instruction { source: "inline_RpnCalc_handle_stack_pop_48_t8 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x28), Constant32(0x00000001=1)], resolved: None }
20 28 01 00 00 00 
# inline_RpnCalc_handle_stack_pop_48_t3 <- inline_RpnCalc_handle_stack_pop_48_t4 Subtract inline_RpnCalc_handle_stack_pop_48_t8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))"] }
# 001d4 Instruction { source: "inline_RpnCalc_handle_stack_pop_48_t3 <- inline_RpnCalc_handle_stack_pop_48_t4 Subtract inline_RpnCalc_handle_stack_pop_48_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: Copy32, args: [Register(0x28), Register(0x00)], resolved: None }
21 28 00 
# 001d7 Instruction { source: "inline_RpnCalc_handle_stack_pop_48_t3 <- inline_RpnCalc_handle_stack_pop_48_t4 Subtract inline_RpnCalc_handle_stack_pop_48_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x00)], resolved: None }
01 00 
# 001d9 Instruction { source: "inline_RpnCalc_handle_stack_pop_48_t3 <- inline_RpnCalc_handle_stack_pop_48_t4 Subtract inline_RpnCalc_handle_stack_pop_48_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x01)], resolved: None }
01 01 
# 001db Instruction { source: "inline_RpnCalc_handle_stack_pop_48_t3 <- inline_RpnCalc_handle_stack_pop_48_t4 Subtract inline_RpnCalc_handle_stack_pop_48_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x02)], resolved: None }
01 02 
# 001dd Instruction { source: "inline_RpnCalc_handle_stack_pop_48_t3 <- inline_RpnCalc_handle_stack_pop_48_t4 Subtract inline_RpnCalc_handle_stack_pop_48_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x03)], resolved: None }
01 03 
# 001df Instruction { source: "inline_RpnCalc_handle_stack_pop_48_t3 <- inline_RpnCalc_handle_stack_pop_48_t4 Subtract inline_RpnCalc_handle_stack_pop_48_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x00), Constant32(0x00000001=1)], resolved: None }
32 00 01 00 00 00 
# 001e5 Instruction { source: "inline_RpnCalc_handle_stack_pop_48_t3 <- inline_RpnCalc_handle_stack_pop_48_t4 Subtract inline_RpnCalc_handle_stack_pop_48_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 001e6 Instruction { source: "inline_RpnCalc_handle_stack_pop_48_t3 <- inline_RpnCalc_handle_stack_pop_48_t4 Subtract inline_RpnCalc_handle_stack_pop_48_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x24), Register(0x00), Register(0x24)], resolved: None }
30 24 00 24 
# 001ea Instruction { source: "inline_RpnCalc_handle_stack_pop_48_t3 <- inline_RpnCalc_handle_stack_pop_48_t4 Subtract inline_RpnCalc_handle_stack_pop_48_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# mem[inline_RpnCalc_handle_stack_pop_48_t0] <- inline_RpnCalc_handle_stack_pop_48_t3 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }"] }
# 001eb Instruction { source: "mem[inline_RpnCalc_handle_stack_pop_48_t0] <- inline_RpnCalc_handle_stack_pop_48_t3 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_1, args: [Register(0x24), Register(0x20)], resolved: None }
23 24 20 
# 001ee Instruction { source: "mem[inline_RpnCalc_handle_stack_pop_48_t0] <- inline_RpnCalc_handle_stack_pop_48_t3 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_RpnCalc_handle_stack_pop_48_t9 <- inline_RpnCalc_handle_stack_pop_48_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_48_t9 <- inline_RpnCalc_handle_stack_pop_48_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_stack_pop_48_values <- inline_RpnCalc_handle_stack_pop_48_t9 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# 001ef Instruction { source: "inline_RpnCalc_handle_stack_pop_48_values <- inline_RpnCalc_handle_stack_pop_48_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0x10), Register(0x20)], resolved: None }
21 10 20 
# inline_RpnCalc_handle_stack_pop_48_t12 <- inline_RpnCalc_handle_stack_pop_48_values U32
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_48_t12 <- inline_RpnCalc_handle_stack_pop_48_values U32\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_RpnCalc_handle_stack_pop_48_t16 <- inline_RpnCalc_handle_stack_pop_48_s U32
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_48_t16 <- inline_RpnCalc_handle_stack_pop_48_s U32\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_stack_pop_48_t17 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 001f2 Instruction { source: "inline_RpnCalc_handle_stack_pop_48_t17 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x24), Constant32(0x00000040=64)], resolved: None }
20 24 40 00 00 00 
# inline_RpnCalc_handle_stack_pop_48_t15 <- inline_RpnCalc_handle_stack_pop_48_t16 Add inline_RpnCalc_handle_stack_pop_48_t17
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 001f8 Instruction { source: "inline_RpnCalc_handle_stack_pop_48_t15 <- inline_RpnCalc_handle_stack_pop_48_t16 Add inline_RpnCalc_handle_stack_pop_48_t17\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 001f9 Instruction { source: "inline_RpnCalc_handle_stack_pop_48_t15 <- inline_RpnCalc_handle_stack_pop_48_t16 Add inline_RpnCalc_handle_stack_pop_48_t17\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x10), Register(0x24), Register(0x10)], resolved: None }
30 10 24 10 
# 001fd Instruction { source: "inline_RpnCalc_handle_stack_pop_48_t15 <- inline_RpnCalc_handle_stack_pop_48_t16 Add inline_RpnCalc_handle_stack_pop_48_t17\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_pop_48_t14 <- mem[inline_RpnCalc_handle_stack_pop_48_t15] U32
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 001fe Instruction { source: "inline_RpnCalc_handle_stack_pop_48_t14 <- mem[inline_RpnCalc_handle_stack_pop_48_t15] U32\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x10), Register(0x10)], resolved: None }
22 10 10 
# inline_RpnCalc_handle_stack_pop_48_t13 <- inline_RpnCalc_handle_stack_pop_48_t14 Add inline_RpnCalc_handle_stack_pop_48_t14
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 00201 Instruction { source: "inline_RpnCalc_handle_stack_pop_48_t13 <- inline_RpnCalc_handle_stack_pop_48_t14 Add inline_RpnCalc_handle_stack_pop_48_t14\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00202 Instruction { source: "inline_RpnCalc_handle_stack_pop_48_t13 <- inline_RpnCalc_handle_stack_pop_48_t14 Add inline_RpnCalc_handle_stack_pop_48_t14\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_1, args: [Register(0x10), Register(0x10), Register(0x10)], resolved: None }
30 10 10 10 
# 00206 Instruction { source: "inline_RpnCalc_handle_stack_pop_48_t13 <- inline_RpnCalc_handle_stack_pop_48_t14 Add inline_RpnCalc_handle_stack_pop_48_t14\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_pop_48_t13 <- inline_RpnCalc_handle_stack_pop_48_t13 Add inline_RpnCalc_handle_stack_pop_48_t13
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))"] }
# 00207 Instruction { source: "inline_RpnCalc_handle_stack_pop_48_t13 <- inline_RpnCalc_handle_stack_pop_48_t13 Add inline_RpnCalc_handle_stack_pop_48_t13\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00208 Instruction { source: "inline_RpnCalc_handle_stack_pop_48_t13 <- inline_RpnCalc_handle_stack_pop_48_t13 Add inline_RpnCalc_handle_stack_pop_48_t13\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x10), Register(0x10), Register(0x10)], resolved: None }
30 10 10 10 
# 0020c Instruction { source: "inline_RpnCalc_handle_stack_pop_48_t13 <- inline_RpnCalc_handle_stack_pop_48_t13 Add inline_RpnCalc_handle_stack_pop_48_t13\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_pop_48_t11 <- inline_RpnCalc_handle_stack_pop_48_t12 Add inline_RpnCalc_handle_stack_pop_48_t13
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))"] }
# 0020d Instruction { source: "inline_RpnCalc_handle_stack_pop_48_t11 <- inline_RpnCalc_handle_stack_pop_48_t12 Add inline_RpnCalc_handle_stack_pop_48_t13\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0020e Instruction { source: "inline_RpnCalc_handle_stack_pop_48_t11 <- inline_RpnCalc_handle_stack_pop_48_t12 Add inline_RpnCalc_handle_stack_pop_48_t13\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_1, args: [Register(0x20), Register(0x10), Register(0x10)], resolved: None }
30 20 10 10 
# 00212 Instruction { source: "inline_RpnCalc_handle_stack_pop_48_t11 <- inline_RpnCalc_handle_stack_pop_48_t12 Add inline_RpnCalc_handle_stack_pop_48_t13\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_pop_48_t10 <- mem[inline_RpnCalc_handle_stack_pop_48_t11] U32
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))"] }
# 00213 Instruction { source: "inline_RpnCalc_handle_stack_pop_48_t10 <- mem[inline_RpnCalc_handle_stack_pop_48_t11] U32\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\"] }", opcode: Load32, args: [Register(0x10), Register(0x10)], resolved: None }
22 10 10 
# a <- inline_RpnCalc_handle_stack_pop_48_t10 U32
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }"] }
# optimized away noop copy Instruction { source: "a <- inline_RpnCalc_handle_stack_pop_48_t10 U32\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# goto inline_RpnCalc_handle_stack_pop_48_function_end_stack_pop
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_pop_48_function_end_stack_pop\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_pop_48_function_end_stack_pop)], resolved: None }
# :inline_RpnCalc_handle_stack_pop_48_function_end_stack_pop
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_stack_pop_48_function_end_stack_pop
# goto RpnCalc_handle_if_end_17
# 	SourceContext { contexts: [] }
# 00216 Instruction { source: "goto RpnCalc_handle_if_end_17\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_17)], resolved: None }
70 1a 02 00 
# :RpnCalc_handle_if_else_0_19
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_0_19
# :RpnCalc_handle_if_end_17
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_end_17
# t32 <- stack_needed U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 1) }, [Assign { target: Ident(\"b\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 1) }", "Ident(\"stack_needed\")", "Ident(\"stack_needed\")"] }
# 0021a Instruction { source: "t32 <- stack_needed U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 1) }, [Assign { target: Ident(\\\"b\\\"), var_type: None, value: Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] }) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 1) }\", \"Ident(\\\"stack_needed\\\")\", \"Ident(\\\"stack_needed\\\")\"] }", opcode: Copy8, args: [Register(0x44), Register(0x45)], resolved: None }
0b 44 45 
# t33 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 1) }, [Assign { target: Ident(\"b\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 1) }", "Number(U8, 1)", "Number(U8, 1)"] }
# 0021d Instruction { source: "t33 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 1) }, [Assign { target: Ident(\\\"b\\\"), var_type: None, value: Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] }) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 1) }\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x34), Constant8(0x01=1)], resolved: None }
04 34 01 
# if t32 > t33 then 'RpnCalc_handle_if_true_0_21' else 'RpnCalc_handle_if_else_0_22'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 1) }, [Assign { target: Ident(\"b\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 1) }"] }
# 00220 Instruction { source: "if t32 > t33 then 'RpnCalc_handle_if_true_0_21' else 'RpnCalc_handle_if_else_0_22'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 1) }, [Assign { target: Ident(\\\"b\\\"), var_type: None, value: Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] }) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 1) }\"] }", opcode: Cmp8, args: [Register(0x45), Register(0x34)], resolved: None }
15 45 34 
# 00223 Instruction { source: "if t32 > t33 then 'RpnCalc_handle_if_true_0_21' else 'RpnCalc_handle_if_else_0_22'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 1) }, [Assign { target: Ident(\\\"b\\\"), var_type: None, value: Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] }) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 1) }\"] }", opcode: JcImm, args: [Label24(RpnCalc_handle_if_else_0_22)], resolved: None }
71 91 02 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t32 > t33 then 'RpnCalc_handle_if_true_0_21' else 'RpnCalc_handle_if_else_0_22'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 1) }, [Assign { target: Ident(\\\"b\\\"), var_type: None, value: Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] }) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 1) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_true_0_21)], resolved: None }
# :RpnCalc_handle_if_true_0_21
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 1) }, [Assign { target: Ident(\"b\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }])], else_block: [] }"] }
# RpnCalc_handle_if_true_0_21
# t34 <- stack U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }", "Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] })", "Ident(\"stack\")", "Ident(\"stack\")"] }
# 00227 Instruction { source: "t34 <- stack U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: None, value: Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] }) }\", \"Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] })\", \"Ident(\\\"stack\\\")\", \"Ident(\\\"stack\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x14)], resolved: None }
21 40 14 
# inline_RpnCalc_handle_stack_pop_49_s <- t34 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }", "Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_49_s <- t34 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: None, value: Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] }) }\", \"Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] })\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_stack_pop_49_t1 <- inline_RpnCalc_handle_stack_pop_49_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_49_t1 <- inline_RpnCalc_handle_stack_pop_49_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_stack_pop_49_t2 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 0022a Instruction { source: "inline_RpnCalc_handle_stack_pop_49_t2 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x20), Constant32(0x00000040=64)], resolved: None }
20 20 40 00 00 00 
# inline_RpnCalc_handle_stack_pop_49_t0 <- inline_RpnCalc_handle_stack_pop_49_t1 Add inline_RpnCalc_handle_stack_pop_49_t2
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 00230 Instruction { source: "inline_RpnCalc_handle_stack_pop_49_t0 <- inline_RpnCalc_handle_stack_pop_49_t1 Add inline_RpnCalc_handle_stack_pop_49_t2\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00231 Instruction { source: "inline_RpnCalc_handle_stack_pop_49_t0 <- inline_RpnCalc_handle_stack_pop_49_t1 Add inline_RpnCalc_handle_stack_pop_49_t2\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x20), Register(0x20)], resolved: None }
30 14 20 20 
# 00235 Instruction { source: "inline_RpnCalc_handle_stack_pop_49_t0 <- inline_RpnCalc_handle_stack_pop_49_t1 Add inline_RpnCalc_handle_stack_pop_49_t2\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_pop_49_t6 <- inline_RpnCalc_handle_stack_pop_49_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_49_t6 <- inline_RpnCalc_handle_stack_pop_49_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_stack_pop_49_t7 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 00236 Instruction { source: "inline_RpnCalc_handle_stack_pop_49_t7 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x24), Constant32(0x00000040=64)], resolved: None }
20 24 40 00 00 00 
# inline_RpnCalc_handle_stack_pop_49_t5 <- inline_RpnCalc_handle_stack_pop_49_t6 Add inline_RpnCalc_handle_stack_pop_49_t7
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 0023c Instruction { source: "inline_RpnCalc_handle_stack_pop_49_t5 <- inline_RpnCalc_handle_stack_pop_49_t6 Add inline_RpnCalc_handle_stack_pop_49_t7\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0023d Instruction { source: "inline_RpnCalc_handle_stack_pop_49_t5 <- inline_RpnCalc_handle_stack_pop_49_t6 Add inline_RpnCalc_handle_stack_pop_49_t7\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x24), Register(0x24)], resolved: None }
30 14 24 24 
# 00241 Instruction { source: "inline_RpnCalc_handle_stack_pop_49_t5 <- inline_RpnCalc_handle_stack_pop_49_t6 Add inline_RpnCalc_handle_stack_pop_49_t7\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_pop_49_t4 <- mem[inline_RpnCalc_handle_stack_pop_49_t5] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 00242 Instruction { source: "inline_RpnCalc_handle_stack_pop_49_t4 <- mem[inline_RpnCalc_handle_stack_pop_49_t5] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x24), Register(0x24)], resolved: None }
22 24 24 
# inline_RpnCalc_handle_stack_pop_49_t8 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 00245 Instruction { source: "inline_RpnCalc_handle_stack_pop_49_t8 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x28), Constant32(0x00000001=1)], resolved: None }
20 28 01 00 00 00 
# inline_RpnCalc_handle_stack_pop_49_t3 <- inline_RpnCalc_handle_stack_pop_49_t4 Subtract inline_RpnCalc_handle_stack_pop_49_t8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))"] }
# 0024b Instruction { source: "inline_RpnCalc_handle_stack_pop_49_t3 <- inline_RpnCalc_handle_stack_pop_49_t4 Subtract inline_RpnCalc_handle_stack_pop_49_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: Copy32, args: [Register(0x28), Register(0x00)], resolved: None }
21 28 00 
# 0024e Instruction { source: "inline_RpnCalc_handle_stack_pop_49_t3 <- inline_RpnCalc_handle_stack_pop_49_t4 Subtract inline_RpnCalc_handle_stack_pop_49_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x00)], resolved: None }
01 00 
# 00250 Instruction { source: "inline_RpnCalc_handle_stack_pop_49_t3 <- inline_RpnCalc_handle_stack_pop_49_t4 Subtract inline_RpnCalc_handle_stack_pop_49_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x01)], resolved: None }
01 01 
# 00252 Instruction { source: "inline_RpnCalc_handle_stack_pop_49_t3 <- inline_RpnCalc_handle_stack_pop_49_t4 Subtract inline_RpnCalc_handle_stack_pop_49_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x02)], resolved: None }
01 02 
# 00254 Instruction { source: "inline_RpnCalc_handle_stack_pop_49_t3 <- inline_RpnCalc_handle_stack_pop_49_t4 Subtract inline_RpnCalc_handle_stack_pop_49_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x03)], resolved: None }
01 03 
# 00256 Instruction { source: "inline_RpnCalc_handle_stack_pop_49_t3 <- inline_RpnCalc_handle_stack_pop_49_t4 Subtract inline_RpnCalc_handle_stack_pop_49_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x00), Constant32(0x00000001=1)], resolved: None }
32 00 01 00 00 00 
# 0025c Instruction { source: "inline_RpnCalc_handle_stack_pop_49_t3 <- inline_RpnCalc_handle_stack_pop_49_t4 Subtract inline_RpnCalc_handle_stack_pop_49_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0025d Instruction { source: "inline_RpnCalc_handle_stack_pop_49_t3 <- inline_RpnCalc_handle_stack_pop_49_t4 Subtract inline_RpnCalc_handle_stack_pop_49_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x24), Register(0x00), Register(0x24)], resolved: None }
30 24 00 24 
# 00261 Instruction { source: "inline_RpnCalc_handle_stack_pop_49_t3 <- inline_RpnCalc_handle_stack_pop_49_t4 Subtract inline_RpnCalc_handle_stack_pop_49_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# mem[inline_RpnCalc_handle_stack_pop_49_t0] <- inline_RpnCalc_handle_stack_pop_49_t3 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }"] }
# 00262 Instruction { source: "mem[inline_RpnCalc_handle_stack_pop_49_t0] <- inline_RpnCalc_handle_stack_pop_49_t3 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_1, args: [Register(0x24), Register(0x20)], resolved: None }
23 24 20 
# 00265 Instruction { source: "mem[inline_RpnCalc_handle_stack_pop_49_t0] <- inline_RpnCalc_handle_stack_pop_49_t3 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_RpnCalc_handle_stack_pop_49_t9 <- inline_RpnCalc_handle_stack_pop_49_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_49_t9 <- inline_RpnCalc_handle_stack_pop_49_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_stack_pop_49_values <- inline_RpnCalc_handle_stack_pop_49_t9 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# 00266 Instruction { source: "inline_RpnCalc_handle_stack_pop_49_values <- inline_RpnCalc_handle_stack_pop_49_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0x14), Register(0x20)], resolved: None }
21 14 20 
# inline_RpnCalc_handle_stack_pop_49_t12 <- inline_RpnCalc_handle_stack_pop_49_values U32
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_49_t12 <- inline_RpnCalc_handle_stack_pop_49_values U32\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_RpnCalc_handle_stack_pop_49_t16 <- inline_RpnCalc_handle_stack_pop_49_s U32
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_49_t16 <- inline_RpnCalc_handle_stack_pop_49_s U32\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_stack_pop_49_t17 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 00269 Instruction { source: "inline_RpnCalc_handle_stack_pop_49_t17 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x24), Constant32(0x00000040=64)], resolved: None }
20 24 40 00 00 00 
# inline_RpnCalc_handle_stack_pop_49_t15 <- inline_RpnCalc_handle_stack_pop_49_t16 Add inline_RpnCalc_handle_stack_pop_49_t17
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 0026f Instruction { source: "inline_RpnCalc_handle_stack_pop_49_t15 <- inline_RpnCalc_handle_stack_pop_49_t16 Add inline_RpnCalc_handle_stack_pop_49_t17\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00270 Instruction { source: "inline_RpnCalc_handle_stack_pop_49_t15 <- inline_RpnCalc_handle_stack_pop_49_t16 Add inline_RpnCalc_handle_stack_pop_49_t17\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x24), Register(0x14)], resolved: None }
30 14 24 14 
# 00274 Instruction { source: "inline_RpnCalc_handle_stack_pop_49_t15 <- inline_RpnCalc_handle_stack_pop_49_t16 Add inline_RpnCalc_handle_stack_pop_49_t17\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_pop_49_t14 <- mem[inline_RpnCalc_handle_stack_pop_49_t15] U32
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 00275 Instruction { source: "inline_RpnCalc_handle_stack_pop_49_t14 <- mem[inline_RpnCalc_handle_stack_pop_49_t15] U32\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x14), Register(0x14)], resolved: None }
22 14 14 
# inline_RpnCalc_handle_stack_pop_49_t13 <- inline_RpnCalc_handle_stack_pop_49_t14 Add inline_RpnCalc_handle_stack_pop_49_t14
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 00278 Instruction { source: "inline_RpnCalc_handle_stack_pop_49_t13 <- inline_RpnCalc_handle_stack_pop_49_t14 Add inline_RpnCalc_handle_stack_pop_49_t14\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00279 Instruction { source: "inline_RpnCalc_handle_stack_pop_49_t13 <- inline_RpnCalc_handle_stack_pop_49_t14 Add inline_RpnCalc_handle_stack_pop_49_t14\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x14), Register(0x14)], resolved: None }
30 14 14 14 
# 0027d Instruction { source: "inline_RpnCalc_handle_stack_pop_49_t13 <- inline_RpnCalc_handle_stack_pop_49_t14 Add inline_RpnCalc_handle_stack_pop_49_t14\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_pop_49_t13 <- inline_RpnCalc_handle_stack_pop_49_t13 Add inline_RpnCalc_handle_stack_pop_49_t13
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))"] }
# 0027e Instruction { source: "inline_RpnCalc_handle_stack_pop_49_t13 <- inline_RpnCalc_handle_stack_pop_49_t13 Add inline_RpnCalc_handle_stack_pop_49_t13\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0027f Instruction { source: "inline_RpnCalc_handle_stack_pop_49_t13 <- inline_RpnCalc_handle_stack_pop_49_t13 Add inline_RpnCalc_handle_stack_pop_49_t13\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x14), Register(0x14)], resolved: None }
30 14 14 14 
# 00283 Instruction { source: "inline_RpnCalc_handle_stack_pop_49_t13 <- inline_RpnCalc_handle_stack_pop_49_t13 Add inline_RpnCalc_handle_stack_pop_49_t13\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_pop_49_t11 <- inline_RpnCalc_handle_stack_pop_49_t12 Add inline_RpnCalc_handle_stack_pop_49_t13
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))"] }
# 00284 Instruction { source: "inline_RpnCalc_handle_stack_pop_49_t11 <- inline_RpnCalc_handle_stack_pop_49_t12 Add inline_RpnCalc_handle_stack_pop_49_t13\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00285 Instruction { source: "inline_RpnCalc_handle_stack_pop_49_t11 <- inline_RpnCalc_handle_stack_pop_49_t12 Add inline_RpnCalc_handle_stack_pop_49_t13\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_1, args: [Register(0x20), Register(0x14), Register(0x14)], resolved: None }
30 20 14 14 
# 00289 Instruction { source: "inline_RpnCalc_handle_stack_pop_49_t11 <- inline_RpnCalc_handle_stack_pop_49_t12 Add inline_RpnCalc_handle_stack_pop_49_t13\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_pop_49_t10 <- mem[inline_RpnCalc_handle_stack_pop_49_t11] U32
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))"] }
# 0028a Instruction { source: "inline_RpnCalc_handle_stack_pop_49_t10 <- mem[inline_RpnCalc_handle_stack_pop_49_t11] U32\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\"] }", opcode: Load32, args: [Register(0x14), Register(0x14)], resolved: None }
22 14 14 
# b <- inline_RpnCalc_handle_stack_pop_49_t10 U32
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }"] }
# optimized away noop copy Instruction { source: "b <- inline_RpnCalc_handle_stack_pop_49_t10 U32\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# goto inline_RpnCalc_handle_stack_pop_49_function_end_stack_pop
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_pop_49_function_end_stack_pop\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_pop_49_function_end_stack_pop)], resolved: None }
# :inline_RpnCalc_handle_stack_pop_49_function_end_stack_pop
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_stack_pop_49_function_end_stack_pop
# goto RpnCalc_handle_if_end_20
# 	SourceContext { contexts: [] }
# 0028d Instruction { source: "goto RpnCalc_handle_if_end_20\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_20)], resolved: None }
70 91 02 00 
# :RpnCalc_handle_if_else_0_22
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_0_22
# :RpnCalc_handle_if_end_20
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_end_20
# t35 <- ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }, [Assign { target: Ident(\"sum\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"b\"), Ident(\"a\")) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"sum\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }, [Assign { target: Ident(\"diff\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"b\"), Ident(\"a\")) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }, [Assign { target: Ident(\"product\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul32_32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"product\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }, [Assign { target: Ident(\"quotient\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"div32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"quotient\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 100) }, [Assign { target: Ident(\"i\"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t35 <- ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }, [Assign { target: Ident(\\\"sum\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }, [Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }, [Assign { target: Ident(\\\"product\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul32_32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }, [Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_init\\\", parameters: [Ident(\\\"c\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 100) }, [Assign { target: Ident(\\\"i\\\"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Ident(\\\"stack_count\\\") }, while_true: [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# t36 <- 0n43/0x2bu8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }, [Assign { target: Ident(\"sum\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"b\"), Ident(\"a\")) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"sum\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }, [Assign { target: Ident(\"diff\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"b\"), Ident(\"a\")) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }, [Assign { target: Ident(\"product\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul32_32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"product\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }, [Assign { target: Ident(\"quotient\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"div32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"quotient\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 100) }, [Assign { target: Ident(\"i\"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }", "Number(U8, 43)", "Number(U8, 43)"] }
# 00291 Instruction { source: "t36 <- 0n43/0x2bu8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }, [Assign { target: Ident(\\\"sum\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }, [Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }, [Assign { target: Ident(\\\"product\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul32_32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }, [Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_init\\\", parameters: [Ident(\\\"c\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 100) }, [Assign { target: Ident(\\\"i\\\"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Ident(\\\"stack_count\\\") }, while_true: [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }\", \"Number(U8, 43)\", \"Number(U8, 43)\"] }", opcode: LoadImm8, args: [Register(0x45), Constant8(0x2b=43)], resolved: None }
04 45 2b 
# if t35 == t36 then 'RpnCalc_handle_if_true_0_24' else 'RpnCalc_handle_if_else_0_25'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }, [Assign { target: Ident(\"sum\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"b\"), Ident(\"a\")) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"sum\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }, [Assign { target: Ident(\"diff\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"b\"), Ident(\"a\")) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }, [Assign { target: Ident(\"product\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul32_32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"product\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }, [Assign { target: Ident(\"quotient\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"div32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"quotient\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 100) }, [Assign { target: Ident(\"i\"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }"] }
# 00294 Instruction { source: "if t35 == t36 then 'RpnCalc_handle_if_true_0_24' else 'RpnCalc_handle_if_else_0_25'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }, [Assign { target: Ident(\\\"sum\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }, [Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }, [Assign { target: Ident(\\\"product\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul32_32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }, [Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_init\\\", parameters: [Ident(\\\"c\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 100) }, [Assign { target: Ident(\\\"i\\\"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Ident(\\\"stack_count\\\") }, while_true: [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }\"] }", opcode: Cmp8, args: [Register(0x1c), Register(0x45)], resolved: None }
15 1c 45 
# 00297 Instruction { source: "if t35 == t36 then 'RpnCalc_handle_if_true_0_24' else 'RpnCalc_handle_if_else_0_25'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }, [Assign { target: Ident(\\\"sum\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }, [Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }, [Assign { target: Ident(\\\"product\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul32_32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }, [Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_init\\\", parameters: [Ident(\\\"c\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 100) }, [Assign { target: Ident(\\\"i\\\"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Ident(\\\"stack_count\\\") }, while_true: [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_handle_if_true_0_24)], resolved: None }
72 9f 02 00 
# 0029b Instruction { source: "if t35 == t36 then 'RpnCalc_handle_if_true_0_24' else 'RpnCalc_handle_if_else_0_25'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }, [Assign { target: Ident(\\\"sum\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }, [Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }, [Assign { target: Ident(\\\"product\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul32_32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }, [Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_init\\\", parameters: [Ident(\\\"c\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 100) }, [Assign { target: Ident(\\\"i\\\"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Ident(\\\"stack_count\\\") }, while_true: [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_0_25)], resolved: None }
70 2c 03 00 
# :RpnCalc_handle_if_true_0_24
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }, [Assign { target: Ident(\"sum\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"b\"), Ident(\"a\")) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"sum\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }, [Assign { target: Ident(\"diff\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"b\"), Ident(\"a\")) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }, [Assign { target: Ident(\"product\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul32_32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"product\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }, [Assign { target: Ident(\"quotient\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"div32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"quotient\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 100) }, [Assign { target: Ident(\"i\"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }"] }
# RpnCalc_handle_if_true_0_24
# t37 <- b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"sum\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"b\"), Ident(\"a\")) }", "Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "t37 <- b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"sum\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# t38 <- a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"sum\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"b\"), Ident(\"a\")) }", "Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t38 <- a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"sum\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# sum <- t37 Add t38
# 	SourceContext { contexts: ["Assign { target: Ident(\"sum\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"b\"), Ident(\"a\")) }", "Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))"] }
# 0029f Instruction { source: "sum <- t37 Add t38\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"sum\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 002a0 Instruction { source: "sum <- t37 Add t38\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"sum\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x10), Register(0x14)], resolved: None }
30 14 10 14 
# 002a4 Instruction { source: "sum <- t37 Add t38\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"sum\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t40 <- sum U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"sum\")] }) }", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"sum\")] })", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"sum\")] })", "Ident(\"sum\")", "Ident(\"sum\")"] }
# 002a5 Instruction { source: "t40 <- sum U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Ident(\\\"sum\\\")\", \"Ident(\\\"sum\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x10)], resolved: None }
21 14 10 
# None <= call print_dec32(t40,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"sum\")] }) }", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"sum\")] })", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"sum\")] })"] }
# 002a8 Instruction { source: "Arg0[a]=t40 None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Copy32, args: [Register(0x10), Register(0x00)], resolved: None }
21 10 00 
# Registers used by this function: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69}
# Registers used by callee tree: {128, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 200, 201, 202, 203, 204, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238}
# Registers to save: []
# 002ab Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 002b1 Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c bb 02 00 00 
# 002b7 Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: JmpImm, args: [Label24(:print_dec32)], resolved: None }
70 a3 17 00 
# 002bb Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# t42 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Number(U8, 10)", "Number(U8, 10)"] }
# 002c1 Instruction { source: "t42 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x1d), Constant8(0x0a=10)], resolved: None }
04 1d 0a 
# inline_RpnCalc_handle_putc_21_c <- t42 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_21_c <- t42 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# inline_RpnCalc_handle_putc_21_t1 <- inline_RpnCalc_handle_putc_21_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_21_t1 <- inline_RpnCalc_handle_putc_21_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_21_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 002c4 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x1d)], resolved: None }
68 1d 
# goto inline_RpnCalc_handle_putc_21_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_21_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_21_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_21_function_end_putc
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_putc_21_function_end_putc
# t44 <- stack U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] })", "Ident(\"stack\")", "Ident(\"stack\")"] }
# 002c6 Instruction { source: "t44 <- stack U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] })\", \"Ident(\\\"stack\\\")\", \"Ident(\\\"stack\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x10)], resolved: None }
21 40 10 
# t45 <- sum U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] })", "Ident(\"sum\")", "Ident(\"sum\")"] }
# 002c9 Instruction { source: "t45 <- sum U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] })\", \"Ident(\\\"sum\\\")\", \"Ident(\\\"sum\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x18)], resolved: None }
21 14 18 
# inline_RpnCalc_handle_stack_push_50_s <- t44 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] })"] }
# 002cc Instruction { source: "inline_RpnCalc_handle_stack_push_50_s <- t44 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] })\"] }", opcode: Copy32, args: [Register(0x10), Register(0x14)], resolved: None }
21 10 14 
# inline_RpnCalc_handle_stack_push_50_n <- t45 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] })"] }
# 002cf Instruction { source: "inline_RpnCalc_handle_stack_push_50_n <- t45 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] })\"] }", opcode: Copy32, args: [Register(0x18), Register(0x10)], resolved: None }
21 18 10 
# inline_RpnCalc_handle_stack_push_50_t0 <- inline_RpnCalc_handle_stack_push_50_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_50_t0 <- inline_RpnCalc_handle_stack_push_50_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_stack_push_50_values <- inline_RpnCalc_handle_stack_push_50_t0 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# 002d2 Instruction { source: "inline_RpnCalc_handle_stack_push_50_values <- inline_RpnCalc_handle_stack_push_50_t0 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0x14), Register(0x18)], resolved: None }
21 14 18 
# inline_RpnCalc_handle_stack_push_50_t2 <- inline_RpnCalc_handle_stack_push_50_values U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_50_t2 <- inline_RpnCalc_handle_stack_push_50_values U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_RpnCalc_handle_stack_push_50_t6 <- inline_RpnCalc_handle_stack_push_50_s U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_50_t6 <- inline_RpnCalc_handle_stack_push_50_s U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_stack_push_50_t7 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 002d5 Instruction { source: "inline_RpnCalc_handle_stack_push_50_t7 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x38), Constant32(0x00000040=64)], resolved: None }
20 38 40 00 00 00 
# inline_RpnCalc_handle_stack_push_50_t5 <- inline_RpnCalc_handle_stack_push_50_t6 Add inline_RpnCalc_handle_stack_push_50_t7
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 002db Instruction { source: "inline_RpnCalc_handle_stack_push_50_t5 <- inline_RpnCalc_handle_stack_push_50_t6 Add inline_RpnCalc_handle_stack_push_50_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 002dc Instruction { source: "inline_RpnCalc_handle_stack_push_50_t5 <- inline_RpnCalc_handle_stack_push_50_t6 Add inline_RpnCalc_handle_stack_push_50_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x38), Register(0x38)], resolved: None }
30 14 38 38 
# 002e0 Instruction { source: "inline_RpnCalc_handle_stack_push_50_t5 <- inline_RpnCalc_handle_stack_push_50_t6 Add inline_RpnCalc_handle_stack_push_50_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_50_t4 <- mem[inline_RpnCalc_handle_stack_push_50_t5] U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 002e1 Instruction { source: "inline_RpnCalc_handle_stack_push_50_t4 <- mem[inline_RpnCalc_handle_stack_push_50_t5] U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x38), Register(0x38)], resolved: None }
22 38 38 
# inline_RpnCalc_handle_stack_push_50_t3 <- inline_RpnCalc_handle_stack_push_50_t4 Add inline_RpnCalc_handle_stack_push_50_t4
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 002e4 Instruction { source: "inline_RpnCalc_handle_stack_push_50_t3 <- inline_RpnCalc_handle_stack_push_50_t4 Add inline_RpnCalc_handle_stack_push_50_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 002e5 Instruction { source: "inline_RpnCalc_handle_stack_push_50_t3 <- inline_RpnCalc_handle_stack_push_50_t4 Add inline_RpnCalc_handle_stack_push_50_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_1, args: [Register(0x38), Register(0x38), Register(0x38)], resolved: None }
30 38 38 38 
# 002e9 Instruction { source: "inline_RpnCalc_handle_stack_push_50_t3 <- inline_RpnCalc_handle_stack_push_50_t4 Add inline_RpnCalc_handle_stack_push_50_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_50_t3 <- inline_RpnCalc_handle_stack_push_50_t3 Add inline_RpnCalc_handle_stack_push_50_t3
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))"] }
# 002ea Instruction { source: "inline_RpnCalc_handle_stack_push_50_t3 <- inline_RpnCalc_handle_stack_push_50_t3 Add inline_RpnCalc_handle_stack_push_50_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 002eb Instruction { source: "inline_RpnCalc_handle_stack_push_50_t3 <- inline_RpnCalc_handle_stack_push_50_t3 Add inline_RpnCalc_handle_stack_push_50_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x38), Register(0x38), Register(0x38)], resolved: None }
30 38 38 38 
# 002ef Instruction { source: "inline_RpnCalc_handle_stack_push_50_t3 <- inline_RpnCalc_handle_stack_push_50_t3 Add inline_RpnCalc_handle_stack_push_50_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_50_t1 <- inline_RpnCalc_handle_stack_push_50_t2 Add inline_RpnCalc_handle_stack_push_50_t3
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))"] }
# 002f0 Instruction { source: "inline_RpnCalc_handle_stack_push_50_t1 <- inline_RpnCalc_handle_stack_push_50_t2 Add inline_RpnCalc_handle_stack_push_50_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 002f1 Instruction { source: "inline_RpnCalc_handle_stack_push_50_t1 <- inline_RpnCalc_handle_stack_push_50_t2 Add inline_RpnCalc_handle_stack_push_50_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_1, args: [Register(0x18), Register(0x38), Register(0x18)], resolved: None }
30 18 38 18 
# 002f5 Instruction { source: "inline_RpnCalc_handle_stack_push_50_t1 <- inline_RpnCalc_handle_stack_push_50_t2 Add inline_RpnCalc_handle_stack_push_50_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_50_t9 <- inline_RpnCalc_handle_stack_push_50_n U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_50_t9 <- inline_RpnCalc_handle_stack_push_50_n U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# mem[inline_RpnCalc_handle_stack_push_50_t1] <- inline_RpnCalc_handle_stack_push_50_t9 U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }"] }
# 002f6 Instruction { source: "mem[inline_RpnCalc_handle_stack_push_50_t1] <- inline_RpnCalc_handle_stack_push_50_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_1, args: [Register(0x10), Register(0x18)], resolved: None }
23 10 18 
# 002f9 Instruction { source: "mem[inline_RpnCalc_handle_stack_push_50_t1] <- inline_RpnCalc_handle_stack_push_50_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_RpnCalc_handle_stack_push_50_t11 <- inline_RpnCalc_handle_stack_push_50_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# 002fa Instruction { source: "inline_RpnCalc_handle_stack_push_50_t11 <- inline_RpnCalc_handle_stack_push_50_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x10)], resolved: None }
21 14 10 
# inline_RpnCalc_handle_stack_push_50_t12 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 002fd Instruction { source: "inline_RpnCalc_handle_stack_push_50_t12 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000040=64)], resolved: None }
20 18 40 00 00 00 
# inline_RpnCalc_handle_stack_push_50_t10 <- inline_RpnCalc_handle_stack_push_50_t11 Add inline_RpnCalc_handle_stack_push_50_t12
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 00303 Instruction { source: "inline_RpnCalc_handle_stack_push_50_t10 <- inline_RpnCalc_handle_stack_push_50_t11 Add inline_RpnCalc_handle_stack_push_50_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00304 Instruction { source: "inline_RpnCalc_handle_stack_push_50_t10 <- inline_RpnCalc_handle_stack_push_50_t11 Add inline_RpnCalc_handle_stack_push_50_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x10), Register(0x18), Register(0x10)], resolved: None }
30 10 18 10 
# 00308 Instruction { source: "inline_RpnCalc_handle_stack_push_50_t10 <- inline_RpnCalc_handle_stack_push_50_t11 Add inline_RpnCalc_handle_stack_push_50_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_50_t16 <- inline_RpnCalc_handle_stack_push_50_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_50_t16 <- inline_RpnCalc_handle_stack_push_50_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_stack_push_50_t17 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 00309 Instruction { source: "inline_RpnCalc_handle_stack_push_50_t17 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000040=64)], resolved: None }
20 18 40 00 00 00 
# inline_RpnCalc_handle_stack_push_50_t15 <- inline_RpnCalc_handle_stack_push_50_t16 Add inline_RpnCalc_handle_stack_push_50_t17
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 0030f Instruction { source: "inline_RpnCalc_handle_stack_push_50_t15 <- inline_RpnCalc_handle_stack_push_50_t16 Add inline_RpnCalc_handle_stack_push_50_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00310 Instruction { source: "inline_RpnCalc_handle_stack_push_50_t15 <- inline_RpnCalc_handle_stack_push_50_t16 Add inline_RpnCalc_handle_stack_push_50_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x18), Register(0x14)], resolved: None }
30 14 18 14 
# 00314 Instruction { source: "inline_RpnCalc_handle_stack_push_50_t15 <- inline_RpnCalc_handle_stack_push_50_t16 Add inline_RpnCalc_handle_stack_push_50_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_50_t14 <- mem[inline_RpnCalc_handle_stack_push_50_t15] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 00315 Instruction { source: "inline_RpnCalc_handle_stack_push_50_t14 <- mem[inline_RpnCalc_handle_stack_push_50_t15] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x14), Register(0x14)], resolved: None }
22 14 14 
# inline_RpnCalc_handle_stack_push_50_t18 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 00318 Instruction { source: "inline_RpnCalc_handle_stack_push_50_t18 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000001=1)], resolved: None }
20 18 01 00 00 00 
# inline_RpnCalc_handle_stack_push_50_t13 <- inline_RpnCalc_handle_stack_push_50_t14 Add inline_RpnCalc_handle_stack_push_50_t18
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))"] }
# 0031e Instruction { source: "inline_RpnCalc_handle_stack_push_50_t13 <- inline_RpnCalc_handle_stack_push_50_t14 Add inline_RpnCalc_handle_stack_push_50_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0031f Instruction { source: "inline_RpnCalc_handle_stack_push_50_t13 <- inline_RpnCalc_handle_stack_push_50_t14 Add inline_RpnCalc_handle_stack_push_50_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x18), Register(0x14)], resolved: None }
30 14 18 14 
# 00323 Instruction { source: "inline_RpnCalc_handle_stack_push_50_t13 <- inline_RpnCalc_handle_stack_push_50_t14 Add inline_RpnCalc_handle_stack_push_50_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# mem[inline_RpnCalc_handle_stack_push_50_t10] <- inline_RpnCalc_handle_stack_push_50_t13 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }"] }
# 00324 Instruction { source: "mem[inline_RpnCalc_handle_stack_push_50_t10] <- inline_RpnCalc_handle_stack_push_50_t13 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_1, args: [Register(0x14), Register(0x10)], resolved: None }
23 14 10 
# 00327 Instruction { source: "mem[inline_RpnCalc_handle_stack_push_50_t10] <- inline_RpnCalc_handle_stack_push_50_t13 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto inline_RpnCalc_handle_stack_push_50_function_end_stack_push
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_push_50_function_end_stack_push\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_push_50_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_stack_push_50_function_end_stack_push
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_stack_push_50_function_end_stack_push
# goto RpnCalc_handle_if_end_23
# 	SourceContext { contexts: [] }
# 00328 Instruction { source: "goto RpnCalc_handle_if_end_23\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_23)], resolved: None }
70 74 0b 00 
# :RpnCalc_handle_if_else_0_25
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_0_25
# t46 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t46 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# t47 <- 0n45/0x2du8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }", "Number(U8, 45)", "Number(U8, 45)"] }
# 0032c Instruction { source: "t47 <- 0n45/0x2du8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }\", \"Number(U8, 45)\", \"Number(U8, 45)\"] }", opcode: LoadImm8, args: [Register(0x45), Constant8(0x2d=45)], resolved: None }
04 45 2d 
# if t46 == t47 then 'RpnCalc_handle_if_true_1_26' else 'RpnCalc_handle_if_else_1_27'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }"] }
# 0032f Instruction { source: "if t46 == t47 then 'RpnCalc_handle_if_true_1_26' else 'RpnCalc_handle_if_else_1_27'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }\"] }", opcode: Cmp8, args: [Register(0x1c), Register(0x45)], resolved: None }
15 1c 45 
# 00332 Instruction { source: "if t46 == t47 then 'RpnCalc_handle_if_true_1_26' else 'RpnCalc_handle_if_else_1_27'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_handle_if_true_1_26)], resolved: None }
72 3a 03 00 
# 00336 Instruction { source: "if t46 == t47 then 'RpnCalc_handle_if_true_1_26' else 'RpnCalc_handle_if_else_1_27'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_1_27)], resolved: None }
70 cc 03 00 
# :RpnCalc_handle_if_true_1_26
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_true_1_26
# t48 <- b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"diff\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"b\"), Ident(\"a\")) }", "Arithmetic(Subtract, Ident(\"b\"), Ident(\"a\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "t48 <- b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# t49 <- a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"diff\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"b\"), Ident(\"a\")) }", "Arithmetic(Subtract, Ident(\"b\"), Ident(\"a\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t49 <- a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# diff <- t48 Subtract t49
# 	SourceContext { contexts: ["Assign { target: Ident(\"diff\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"b\"), Ident(\"a\")) }", "Arithmetic(Subtract, Ident(\"b\"), Ident(\"a\"))"] }
# 0033a Instruction { source: "diff <- t48 Subtract t49\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: Copy32, args: [Register(0x10), Register(0x00)], resolved: None }
21 10 00 
# 0033d Instruction { source: "diff <- t48 Subtract t49\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: Invert8, args: [Register(0x00)], resolved: None }
01 00 
# 0033f Instruction { source: "diff <- t48 Subtract t49\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: Invert8, args: [Register(0x01)], resolved: None }
01 01 
# 00341 Instruction { source: "diff <- t48 Subtract t49\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: Invert8, args: [Register(0x02)], resolved: None }
01 02 
# 00343 Instruction { source: "diff <- t48 Subtract t49\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: Invert8, args: [Register(0x03)], resolved: None }
01 03 
# 00345 Instruction { source: "diff <- t48 Subtract t49\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x00), Constant32(0x00000001=1)], resolved: None }
32 00 01 00 00 00 
# 0034b Instruction { source: "diff <- t48 Subtract t49\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0034c Instruction { source: "diff <- t48 Subtract t49\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x00), Register(0x10)], resolved: None }
30 14 00 10 
# 00350 Instruction { source: "diff <- t48 Subtract t49\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t51 <- diff U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] }) }", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] })", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] })", "Ident(\"diff\")", "Ident(\"diff\")"] }
# optimized away noop copy Instruction { source: "t51 <- diff U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Ident(\\\"diff\\\")\", \"Ident(\\\"diff\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# None <= call print_dec32(t51,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] }) }", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] })", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] })"] }
# 00351 Instruction { source: "Arg0[a]=t51 None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Copy32, args: [Register(0x10), Register(0x00)], resolved: None }
21 10 00 
# Registers used by this function: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69}
# Registers used by callee tree: {128, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 200, 201, 202, 203, 204, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238}
# Registers to save: []
# 00354 Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 0035a Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 64 03 00 00 
# 00360 Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: JmpImm, args: [Label24(:print_dec32)], resolved: None }
70 a3 17 00 
# 00364 Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# t53 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Number(U8, 10)", "Number(U8, 10)"] }
# 0036a Instruction { source: "t53 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x3c), Constant8(0x0a=10)], resolved: None }
04 3c 0a 
# inline_RpnCalc_handle_putc_22_c <- t53 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_22_c <- t53 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\"] }", opcode: Copy8, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_putc_22_t1 <- inline_RpnCalc_handle_putc_22_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_22_t1 <- inline_RpnCalc_handle_putc_22_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x3c), Register(0x3c)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_22_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 0036d Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x3c)], resolved: None }
68 3c 
# goto inline_RpnCalc_handle_putc_22_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_22_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_22_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_22_function_end_putc
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_putc_22_function_end_putc
# t55 <- stack U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] })", "Ident(\"stack\")", "Ident(\"stack\")"] }
# 0036f Instruction { source: "t55 <- stack U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] })\", \"Ident(\\\"stack\\\")\", \"Ident(\\\"stack\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x14)], resolved: None }
21 40 14 
# t56 <- diff U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] })", "Ident(\"diff\")", "Ident(\"diff\")"] }
# optimized away noop copy Instruction { source: "t56 <- diff U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] })\", \"Ident(\\\"diff\\\")\", \"Ident(\\\"diff\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_stack_push_51_s <- t55 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_51_s <- t55 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] })\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_stack_push_51_n <- t56 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_51_n <- t56 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] })\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_stack_push_51_t0 <- inline_RpnCalc_handle_stack_push_51_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_51_t0 <- inline_RpnCalc_handle_stack_push_51_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_stack_push_51_values <- inline_RpnCalc_handle_stack_push_51_t0 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# 00372 Instruction { source: "inline_RpnCalc_handle_stack_push_51_values <- inline_RpnCalc_handle_stack_push_51_t0 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0x14), Register(0x18)], resolved: None }
21 14 18 
# inline_RpnCalc_handle_stack_push_51_t2 <- inline_RpnCalc_handle_stack_push_51_values U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_51_t2 <- inline_RpnCalc_handle_stack_push_51_values U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_RpnCalc_handle_stack_push_51_t6 <- inline_RpnCalc_handle_stack_push_51_s U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_51_t6 <- inline_RpnCalc_handle_stack_push_51_s U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_stack_push_51_t7 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 00375 Instruction { source: "inline_RpnCalc_handle_stack_push_51_t7 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x38), Constant32(0x00000040=64)], resolved: None }
20 38 40 00 00 00 
# inline_RpnCalc_handle_stack_push_51_t5 <- inline_RpnCalc_handle_stack_push_51_t6 Add inline_RpnCalc_handle_stack_push_51_t7
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 0037b Instruction { source: "inline_RpnCalc_handle_stack_push_51_t5 <- inline_RpnCalc_handle_stack_push_51_t6 Add inline_RpnCalc_handle_stack_push_51_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0037c Instruction { source: "inline_RpnCalc_handle_stack_push_51_t5 <- inline_RpnCalc_handle_stack_push_51_t6 Add inline_RpnCalc_handle_stack_push_51_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x38), Register(0x38)], resolved: None }
30 14 38 38 
# 00380 Instruction { source: "inline_RpnCalc_handle_stack_push_51_t5 <- inline_RpnCalc_handle_stack_push_51_t6 Add inline_RpnCalc_handle_stack_push_51_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_51_t4 <- mem[inline_RpnCalc_handle_stack_push_51_t5] U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 00381 Instruction { source: "inline_RpnCalc_handle_stack_push_51_t4 <- mem[inline_RpnCalc_handle_stack_push_51_t5] U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x38), Register(0x38)], resolved: None }
22 38 38 
# inline_RpnCalc_handle_stack_push_51_t3 <- inline_RpnCalc_handle_stack_push_51_t4 Add inline_RpnCalc_handle_stack_push_51_t4
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 00384 Instruction { source: "inline_RpnCalc_handle_stack_push_51_t3 <- inline_RpnCalc_handle_stack_push_51_t4 Add inline_RpnCalc_handle_stack_push_51_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00385 Instruction { source: "inline_RpnCalc_handle_stack_push_51_t3 <- inline_RpnCalc_handle_stack_push_51_t4 Add inline_RpnCalc_handle_stack_push_51_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_1, args: [Register(0x38), Register(0x38), Register(0x38)], resolved: None }
30 38 38 38 
# 00389 Instruction { source: "inline_RpnCalc_handle_stack_push_51_t3 <- inline_RpnCalc_handle_stack_push_51_t4 Add inline_RpnCalc_handle_stack_push_51_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_51_t3 <- inline_RpnCalc_handle_stack_push_51_t3 Add inline_RpnCalc_handle_stack_push_51_t3
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))"] }
# 0038a Instruction { source: "inline_RpnCalc_handle_stack_push_51_t3 <- inline_RpnCalc_handle_stack_push_51_t3 Add inline_RpnCalc_handle_stack_push_51_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0038b Instruction { source: "inline_RpnCalc_handle_stack_push_51_t3 <- inline_RpnCalc_handle_stack_push_51_t3 Add inline_RpnCalc_handle_stack_push_51_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x38), Register(0x38), Register(0x38)], resolved: None }
30 38 38 38 
# 0038f Instruction { source: "inline_RpnCalc_handle_stack_push_51_t3 <- inline_RpnCalc_handle_stack_push_51_t3 Add inline_RpnCalc_handle_stack_push_51_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_51_t1 <- inline_RpnCalc_handle_stack_push_51_t2 Add inline_RpnCalc_handle_stack_push_51_t3
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))"] }
# 00390 Instruction { source: "inline_RpnCalc_handle_stack_push_51_t1 <- inline_RpnCalc_handle_stack_push_51_t2 Add inline_RpnCalc_handle_stack_push_51_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00391 Instruction { source: "inline_RpnCalc_handle_stack_push_51_t1 <- inline_RpnCalc_handle_stack_push_51_t2 Add inline_RpnCalc_handle_stack_push_51_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_1, args: [Register(0x18), Register(0x38), Register(0x18)], resolved: None }
30 18 38 18 
# 00395 Instruction { source: "inline_RpnCalc_handle_stack_push_51_t1 <- inline_RpnCalc_handle_stack_push_51_t2 Add inline_RpnCalc_handle_stack_push_51_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_51_t9 <- inline_RpnCalc_handle_stack_push_51_n U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_51_t9 <- inline_RpnCalc_handle_stack_push_51_n U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# mem[inline_RpnCalc_handle_stack_push_51_t1] <- inline_RpnCalc_handle_stack_push_51_t9 U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }"] }
# 00396 Instruction { source: "mem[inline_RpnCalc_handle_stack_push_51_t1] <- inline_RpnCalc_handle_stack_push_51_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_1, args: [Register(0x10), Register(0x18)], resolved: None }
23 10 18 
# 00399 Instruction { source: "mem[inline_RpnCalc_handle_stack_push_51_t1] <- inline_RpnCalc_handle_stack_push_51_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_RpnCalc_handle_stack_push_51_t11 <- inline_RpnCalc_handle_stack_push_51_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# 0039a Instruction { source: "inline_RpnCalc_handle_stack_push_51_t11 <- inline_RpnCalc_handle_stack_push_51_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x10)], resolved: None }
21 14 10 
# inline_RpnCalc_handle_stack_push_51_t12 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 0039d Instruction { source: "inline_RpnCalc_handle_stack_push_51_t12 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000040=64)], resolved: None }
20 18 40 00 00 00 
# inline_RpnCalc_handle_stack_push_51_t10 <- inline_RpnCalc_handle_stack_push_51_t11 Add inline_RpnCalc_handle_stack_push_51_t12
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 003a3 Instruction { source: "inline_RpnCalc_handle_stack_push_51_t10 <- inline_RpnCalc_handle_stack_push_51_t11 Add inline_RpnCalc_handle_stack_push_51_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 003a4 Instruction { source: "inline_RpnCalc_handle_stack_push_51_t10 <- inline_RpnCalc_handle_stack_push_51_t11 Add inline_RpnCalc_handle_stack_push_51_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x10), Register(0x18), Register(0x10)], resolved: None }
30 10 18 10 
# 003a8 Instruction { source: "inline_RpnCalc_handle_stack_push_51_t10 <- inline_RpnCalc_handle_stack_push_51_t11 Add inline_RpnCalc_handle_stack_push_51_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_51_t16 <- inline_RpnCalc_handle_stack_push_51_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_51_t16 <- inline_RpnCalc_handle_stack_push_51_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_stack_push_51_t17 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 003a9 Instruction { source: "inline_RpnCalc_handle_stack_push_51_t17 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000040=64)], resolved: None }
20 18 40 00 00 00 
# inline_RpnCalc_handle_stack_push_51_t15 <- inline_RpnCalc_handle_stack_push_51_t16 Add inline_RpnCalc_handle_stack_push_51_t17
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 003af Instruction { source: "inline_RpnCalc_handle_stack_push_51_t15 <- inline_RpnCalc_handle_stack_push_51_t16 Add inline_RpnCalc_handle_stack_push_51_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 003b0 Instruction { source: "inline_RpnCalc_handle_stack_push_51_t15 <- inline_RpnCalc_handle_stack_push_51_t16 Add inline_RpnCalc_handle_stack_push_51_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x18), Register(0x14)], resolved: None }
30 14 18 14 
# 003b4 Instruction { source: "inline_RpnCalc_handle_stack_push_51_t15 <- inline_RpnCalc_handle_stack_push_51_t16 Add inline_RpnCalc_handle_stack_push_51_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_51_t14 <- mem[inline_RpnCalc_handle_stack_push_51_t15] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 003b5 Instruction { source: "inline_RpnCalc_handle_stack_push_51_t14 <- mem[inline_RpnCalc_handle_stack_push_51_t15] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x14), Register(0x14)], resolved: None }
22 14 14 
# inline_RpnCalc_handle_stack_push_51_t18 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 003b8 Instruction { source: "inline_RpnCalc_handle_stack_push_51_t18 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000001=1)], resolved: None }
20 18 01 00 00 00 
# inline_RpnCalc_handle_stack_push_51_t13 <- inline_RpnCalc_handle_stack_push_51_t14 Add inline_RpnCalc_handle_stack_push_51_t18
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))"] }
# 003be Instruction { source: "inline_RpnCalc_handle_stack_push_51_t13 <- inline_RpnCalc_handle_stack_push_51_t14 Add inline_RpnCalc_handle_stack_push_51_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 003bf Instruction { source: "inline_RpnCalc_handle_stack_push_51_t13 <- inline_RpnCalc_handle_stack_push_51_t14 Add inline_RpnCalc_handle_stack_push_51_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x18), Register(0x14)], resolved: None }
30 14 18 14 
# 003c3 Instruction { source: "inline_RpnCalc_handle_stack_push_51_t13 <- inline_RpnCalc_handle_stack_push_51_t14 Add inline_RpnCalc_handle_stack_push_51_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# mem[inline_RpnCalc_handle_stack_push_51_t10] <- inline_RpnCalc_handle_stack_push_51_t13 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }"] }
# 003c4 Instruction { source: "mem[inline_RpnCalc_handle_stack_push_51_t10] <- inline_RpnCalc_handle_stack_push_51_t13 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_1, args: [Register(0x14), Register(0x10)], resolved: None }
23 14 10 
# 003c7 Instruction { source: "mem[inline_RpnCalc_handle_stack_push_51_t10] <- inline_RpnCalc_handle_stack_push_51_t13 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto inline_RpnCalc_handle_stack_push_51_function_end_stack_push
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_push_51_function_end_stack_push\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_push_51_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_stack_push_51_function_end_stack_push
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_stack_push_51_function_end_stack_push
# goto RpnCalc_handle_if_end_23
# 	SourceContext { contexts: [] }
# 003c8 Instruction { source: "goto RpnCalc_handle_if_end_23\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_23)], resolved: None }
70 74 0b 00 
# :RpnCalc_handle_if_else_1_27
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_1_27
# t57 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t57 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# t58 <- 0n42/0x2au8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }", "Number(U8, 42)", "Number(U8, 42)"] }
# 003cc Instruction { source: "t58 <- 0n42/0x2au8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }\", \"Number(U8, 42)\", \"Number(U8, 42)\"] }", opcode: LoadImm8, args: [Register(0x45), Constant8(0x2a=42)], resolved: None }
04 45 2a 
# if t57 == t58 then 'RpnCalc_handle_if_true_2_28' else 'RpnCalc_handle_if_else_2_29'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }"] }
# 003cf Instruction { source: "if t57 == t58 then 'RpnCalc_handle_if_true_2_28' else 'RpnCalc_handle_if_else_2_29'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }\"] }", opcode: Cmp8, args: [Register(0x1c), Register(0x45)], resolved: None }
15 1c 45 
# 003d2 Instruction { source: "if t57 == t58 then 'RpnCalc_handle_if_true_2_28' else 'RpnCalc_handle_if_else_2_29'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_handle_if_true_2_28)], resolved: None }
72 da 03 00 
# 003d6 Instruction { source: "if t57 == t58 then 'RpnCalc_handle_if_true_2_28' else 'RpnCalc_handle_if_else_2_29'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_2_29)], resolved: None }
70 ad 06 00 
# :RpnCalc_handle_if_true_2_28
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_true_2_28
# t59 <- b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"product\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul32_32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }", "Call(Call { function: \"mul32_32\", parameters: [Ident(\"b\"), Ident(\"a\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "t59 <- b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"product\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul32_32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"mul32_32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# t60 <- a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"product\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul32_32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }", "Call(Call { function: \"mul32_32\", parameters: [Ident(\"b\"), Ident(\"a\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# 003da Instruction { source: "t60 <- a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"product\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul32_32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"mul32_32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x18)], resolved: None }
21 10 18 
# inline_RpnCalc_handle_mul32_32_14_a <- t59 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"product\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul32_32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }", "Call(Call { function: \"mul32_32\", parameters: [Ident(\"b\"), Ident(\"a\")] })"] }
# 003dd Instruction { source: "inline_RpnCalc_handle_mul32_32_14_a <- t59 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"product\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul32_32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"mul32_32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Copy32, args: [Register(0x14), Register(0x10)], resolved: None }
21 14 10 
# inline_RpnCalc_handle_mul32_32_14_b <- t60 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"product\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul32_32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }", "Call(Call { function: \"mul32_32\", parameters: [Ident(\"b\"), Ident(\"a\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_b <- t60 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"product\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul32_32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"mul32_32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_t0 <- inline_RpnCalc_handle_mul32_32_14_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t0 <- inline_RpnCalc_handle_mul32_32_14_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_t1 <- inline_RpnCalc_handle_mul32_32_14_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t1 <- inline_RpnCalc_handle_mul32_32_14_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_a <- inline_RpnCalc_handle_mul32_32_14_t0 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })"] }
# 003e0 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_a <- inline_RpnCalc_handle_mul32_32_14_t0 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0x10), Register(0x14)], resolved: None }
21 10 14 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_b <- inline_RpnCalc_handle_mul32_32_14_t1 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })"] }
# 003e3 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_b <- inline_RpnCalc_handle_mul32_32_14_t1 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0x18), Register(0x38)], resolved: None }
21 18 38 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t0 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t0 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t1 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t1 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t0 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t1
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))"] }
# 003e6 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t0 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0x14), Register(0x38), Register(0x20)], resolved: None }
11 14 38 20 
# 003ea Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t0 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x00=0)], resolved: None }
04 22 00 
# 003ed Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t0 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x23), Constant8(0x00=0)], resolved: None }
04 23 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t3 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 003f0 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t3 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x15), Register(0x3c)], resolved: None }
0b 15 3c 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t2 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t3 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 003f3 Instruction { source: "Zero-pad for inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t2 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x24), Constant32(0x00000000=0)], resolved: None }
20 24 00 00 00 00 
# 003f9 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t2 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x3c), Register(0x24)], resolved: None }
0b 3c 24 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t5 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 003fc Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t5 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x39), Register(0x1c)], resolved: None }
0b 39 1c 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t4 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t5 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 003ff Instruction { source: "Zero-pad for inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t4 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t5 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x28), Constant32(0x00000000=0)], resolved: None }
20 28 00 00 00 00 
# 00405 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t4 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t5 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x28)], resolved: None }
0b 1c 28 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_f <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t2 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t4
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 00408 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_f <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t2 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0x24), Register(0x28), Register(0x24)], resolved: None }
11 24 28 24 
# 0040c Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_f <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t2 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x26), Constant8(0x00=0)], resolved: None }
04 26 00 
# 0040f Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_f <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t2 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x27), Constant8(0x00=0)], resolved: None }
04 27 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t6 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_f[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }", "Index(\"f\", Number(U8, 1))", "Index(\"f\", Number(U8, 1))"] }
# 00412 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t6 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_f[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\", \"Index(\\\"f\\\", Number(U8, 1))\", \"Index(\\\"f\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x25), Register(0x34)], resolved: None }
0b 25 34 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t6 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }"] }
# 00415 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t6 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x34), Register(0x27)], resolved: None }
0b 34 27 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t7 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_f[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }", "Index(\"f\", Number(U8, 0))", "Index(\"f\", Number(U8, 0))"] }
# 00418 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t7 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_f[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\", \"Index(\\\"f\\\", Number(U8, 0))\", \"Index(\\\"f\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x24), Register(0x34)], resolved: None }
0b 24 34 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t7 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }"] }
# 0041b Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t7 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x34), Register(0x26)], resolved: None }
0b 34 26 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t8 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0041e Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t8 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x35), Constant8(0x00=0)], resolved: None }
04 35 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t8 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }"] }
# 00421 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t8 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x35), Register(0x25)], resolved: None }
0b 35 25 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t9 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00424 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t9 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x35), Constant8(0x00=0)], resolved: None }
04 35 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t9 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 00427 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t9 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x35), Register(0x24)], resolved: None }
0b 35 24 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t10 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t10 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t11 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_f U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"f\")", "Ident(\"f\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t11 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_f U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"f\\\")\", \"Ident(\\\"f\\\")\"] }", opcode: Copy32, args: [Register(0x24), Register(0x24)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t10 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t11
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))"] }
# 0042a Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t10 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0042b Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t10 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x20), Register(0x24), Register(0x20)], resolved: None }
30 20 24 20 
# 0042f Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t10 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t12 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t12 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t14 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 00430 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t14 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x39), Register(0x1c)], resolved: None }
0b 39 1c 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t13 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t14 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 00433 Instruction { source: "Zero-pad for inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t13 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t14 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x24), Constant32(0x00000000=0)], resolved: None }
20 24 00 00 00 00 
# 00439 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t13 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t14 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x24)], resolved: None }
0b 1c 24 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t12 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t13
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 0043c Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t12 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0x14), Register(0x24), Register(0x24)], resolved: None }
11 14 24 24 
# 00440 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t12 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x26), Constant8(0x00=0)], resolved: None }
04 26 00 
# 00443 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t12 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x27), Constant8(0x00=0)], resolved: None }
04 27 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t16 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 00446 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t16 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x15), Register(0x3c)], resolved: None }
0b 15 3c 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t15 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t16 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 00449 Instruction { source: "Zero-pad for inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t15 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t16 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x14), Constant32(0x00000000=0)], resolved: None }
20 14 00 00 00 00 
# 0044f Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t15 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t16 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x3c), Register(0x14)], resolved: None }
0b 3c 14 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t17 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t17 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_e <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t15 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t17
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))"] }
# 00452 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_e <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t15 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0x14), Register(0x38), Register(0x14)], resolved: None }
11 14 38 14 
# 00456 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_e <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t15 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x16), Constant8(0x00=0)], resolved: None }
04 16 00 
# 00459 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_e <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t15 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x17), Constant8(0x00=0)], resolved: None }
04 17 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t18 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 0045c Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t18 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0x24), Register(0x38)], resolved: None }
21 24 38 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t19 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_e U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"e\")", "Ident(\"e\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t19 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_e U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"e\\\")\", \"Ident(\\\"e\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t18 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t19
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))"] }
# 0045f Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t18 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00460 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t18 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x38), Register(0x14), Register(0x24)], resolved: None }
30 38 14 24 
# 00464 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t18 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t20 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }", "Index(\"d\", Number(U8, 2))", "Index(\"d\", Number(U8, 2))"] }
# 00465 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t20 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\", \"Index(\\\"d\\\", Number(U8, 2))\", \"Index(\\\"d\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x26), Register(0x3c)], resolved: None }
0b 26 3c 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t20 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }"] }
# 00468 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t20 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\"] }", opcode: Copy8, args: [Register(0x3c), Register(0x27)], resolved: None }
0b 3c 27 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t21 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }", "Index(\"d\", Number(U8, 1))", "Index(\"d\", Number(U8, 1))"] }
# 0046b Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t21 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\", \"Index(\\\"d\\\", Number(U8, 1))\", \"Index(\\\"d\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x25), Register(0x3c)], resolved: None }
0b 25 3c 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t21 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }"] }
# 0046e Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t21 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x3c), Register(0x26)], resolved: None }
0b 3c 26 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t22 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }", "Index(\"d\", Number(U8, 0))", "Index(\"d\", Number(U8, 0))"] }
# 00471 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t22 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\", \"Index(\\\"d\\\", Number(U8, 0))\", \"Index(\\\"d\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x24), Register(0x3c)], resolved: None }
0b 24 3c 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t22 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }"] }
# 00474 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t22 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x3c), Register(0x25)], resolved: None }
0b 3c 25 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t23 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00477 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t23 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x3c), Constant8(0x00=0)], resolved: None }
04 3c 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t23 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 0047a Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t23 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x3c), Register(0x24)], resolved: None }
0b 3c 24 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t25 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_c U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# 0047d Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t25 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_c U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x20), Register(0x14)], resolved: None }
21 20 14 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t26 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 00480 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t26 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0x24), Register(0x38)], resolved: None }
21 24 38 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t24 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t25 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t26
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))"] }
# 00483 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t24 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t25 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00484 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t24 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t25 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x38), Register(0x14)], resolved: None }
30 14 38 14 
# 00488 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t24 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t25 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_mul32_32_14_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t24 U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# 00489 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t24 U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: Copy32, args: [Register(0x14), Register(0x20)], resolved: None }
21 14 20 
# goto inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_function_end_mul16_32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_function_end_mul16_32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_function_end_mul16_32)], resolved: None }
# :inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_function_end_mul16_32
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_function_end_mul16_32
# inline_RpnCalc_handle_mul32_32_14_a_hi <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a_hi\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }", "Number(USIZE, 0)"] }
# 0048c Instruction { source: "inline_RpnCalc_handle_mul32_32_14_a_hi <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a_hi\\\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x14), Constant32(0x00000000=0)], resolved: None }
20 14 00 00 00 00 
# inline_RpnCalc_handle_mul32_32_14_t2 <- inline_RpnCalc_handle_mul32_32_14_a[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a_hi\", Number(U8, 1)), var_type: None, value: Index(\"a\", Number(U8, 3)) }", "Index(\"a\", Number(U8, 3))", "Index(\"a\", Number(U8, 3))"] }
# 00492 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t2 <- inline_RpnCalc_handle_mul32_32_14_a[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a_hi\\\", Number(U8, 1)), var_type: None, value: Index(\\\"a\\\", Number(U8, 3)) }\", \"Index(\\\"a\\\", Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0x13), Register(0x1d)], resolved: None }
0b 13 1d 
# inline_RpnCalc_handle_mul32_32_14_a_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_14_t2 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a_hi\", Number(U8, 1)), var_type: None, value: Index(\"a\", Number(U8, 3)) }"] }
# 00495 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_a_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_14_t2 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a_hi\\\", Number(U8, 1)), var_type: None, value: Index(\\\"a\\\", Number(U8, 3)) }\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x15)], resolved: None }
0b 1d 15 
# inline_RpnCalc_handle_mul32_32_14_t3 <- inline_RpnCalc_handle_mul32_32_14_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a_hi\", Number(U8, 0)), var_type: None, value: Index(\"a\", Number(U8, 2)) }", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 00498 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t3 <- inline_RpnCalc_handle_mul32_32_14_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a_hi\\\", Number(U8, 0)), var_type: None, value: Index(\\\"a\\\", Number(U8, 2)) }\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x12), Register(0x1d)], resolved: None }
0b 12 1d 
# inline_RpnCalc_handle_mul32_32_14_a_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_14_t3 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a_hi\", Number(U8, 0)), var_type: None, value: Index(\"a\", Number(U8, 2)) }"] }
# 0049b Instruction { source: "inline_RpnCalc_handle_mul32_32_14_a_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_14_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a_hi\\\", Number(U8, 0)), var_type: None, value: Index(\\\"a\\\", Number(U8, 2)) }\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x14)], resolved: None }
0b 1d 14 
# inline_RpnCalc_handle_mul32_32_14_b_hi <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"b_hi\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }", "Number(USIZE, 0)"] }
# 0049e Instruction { source: "inline_RpnCalc_handle_mul32_32_14_b_hi <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b_hi\\\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x38), Constant32(0x00000000=0)], resolved: None }
20 38 00 00 00 00 
# inline_RpnCalc_handle_mul32_32_14_t4 <- inline_RpnCalc_handle_mul32_32_14_b[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"b_hi\", Number(U8, 1)), var_type: None, value: Index(\"b\", Number(U8, 3)) }", "Index(\"b\", Number(U8, 3))", "Index(\"b\", Number(U8, 3))"] }
# 004a4 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t4 <- inline_RpnCalc_handle_mul32_32_14_b[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"b_hi\\\", Number(U8, 1)), var_type: None, value: Index(\\\"b\\\", Number(U8, 3)) }\", \"Index(\\\"b\\\", Number(U8, 3))\", \"Index(\\\"b\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0x1b), Register(0x3d)], resolved: None }
0b 1b 3d 
# inline_RpnCalc_handle_mul32_32_14_b_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_14_t4 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"b_hi\", Number(U8, 1)), var_type: None, value: Index(\"b\", Number(U8, 3)) }"] }
# 004a7 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_b_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_14_t4 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"b_hi\\\", Number(U8, 1)), var_type: None, value: Index(\\\"b\\\", Number(U8, 3)) }\"] }", opcode: Copy8, args: [Register(0x3d), Register(0x39)], resolved: None }
0b 3d 39 
# inline_RpnCalc_handle_mul32_32_14_t5 <- inline_RpnCalc_handle_mul32_32_14_b[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"b_hi\", Number(U8, 0)), var_type: None, value: Index(\"b\", Number(U8, 2)) }", "Index(\"b\", Number(U8, 2))", "Index(\"b\", Number(U8, 2))"] }
# 004aa Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t5 <- inline_RpnCalc_handle_mul32_32_14_b[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"b_hi\\\", Number(U8, 0)), var_type: None, value: Index(\\\"b\\\", Number(U8, 2)) }\", \"Index(\\\"b\\\", Number(U8, 2))\", \"Index(\\\"b\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x1a), Register(0x3d)], resolved: None }
0b 1a 3d 
# inline_RpnCalc_handle_mul32_32_14_b_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_14_t5 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"b_hi\", Number(U8, 0)), var_type: None, value: Index(\"b\", Number(U8, 2)) }"] }
# 004ad Instruction { source: "inline_RpnCalc_handle_mul32_32_14_b_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_14_t5 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"b_hi\\\", Number(U8, 0)), var_type: None, value: Index(\\\"b\\\", Number(U8, 2)) }\"] }", opcode: Copy8, args: [Register(0x3d), Register(0x38)], resolved: None }
0b 3d 38 
# inline_RpnCalc_handle_mul32_32_14_t7 <- inline_RpnCalc_handle_mul32_32_14_a_hi U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }", "Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })", "Ident(\"a_hi\")", "Ident(\"a_hi\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t7 <- inline_RpnCalc_handle_mul32_32_14_a_hi U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] }))\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] })\", \"Ident(\\\"a_hi\\\")\", \"Ident(\\\"a_hi\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_t8 <- inline_RpnCalc_handle_mul32_32_14_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }", "Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t8 <- inline_RpnCalc_handle_mul32_32_14_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] }))\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_a <- inline_RpnCalc_handle_mul32_32_14_t7 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }", "Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_a <- inline_RpnCalc_handle_mul32_32_14_t7 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] }))\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_b <- inline_RpnCalc_handle_mul32_32_14_t8 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }", "Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_b <- inline_RpnCalc_handle_mul32_32_14_t8 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] }))\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t0 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t0 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t1 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t1 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t0 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t1
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))"] }
# 004b0 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t0 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0x14), Register(0x18), Register(0x24)], resolved: None }
11 14 18 24 
# 004b4 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t0 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x26), Constant8(0x00=0)], resolved: None }
04 26 00 
# 004b7 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t0 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x27), Constant8(0x00=0)], resolved: None }
04 27 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t3 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 004ba Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t3 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x15), Register(0x3c)], resolved: None }
0b 15 3c 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t2 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t3 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 004bd Instruction { source: "Zero-pad for inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t2 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x28), Constant32(0x00000000=0)], resolved: None }
20 28 00 00 00 00 
# 004c3 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t2 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x3c), Register(0x28)], resolved: None }
0b 3c 28 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t5 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 004c6 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t5 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x19), Register(0x3d)], resolved: None }
0b 19 3d 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t4 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t5 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 004c9 Instruction { source: "Zero-pad for inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t4 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t5 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x2c), Constant32(0x00000000=0)], resolved: None }
20 2c 00 00 00 00 
# 004cf Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t4 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t5 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x3d), Register(0x2c)], resolved: None }
0b 3d 2c 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_f <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t2 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t4
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 004d2 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_f <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t2 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0x28), Register(0x2c), Register(0x28)], resolved: None }
11 28 2c 28 
# 004d6 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_f <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t2 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x2a), Constant8(0x00=0)], resolved: None }
04 2a 00 
# 004d9 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_f <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t2 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x2b), Constant8(0x00=0)], resolved: None }
04 2b 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t6 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_f[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }", "Index(\"f\", Number(U8, 1))", "Index(\"f\", Number(U8, 1))"] }
# 004dc Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t6 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_f[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\", \"Index(\\\"f\\\", Number(U8, 1))\", \"Index(\\\"f\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x29), Register(0x35)], resolved: None }
0b 29 35 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t6 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }"] }
# 004df Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t6 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x35), Register(0x2b)], resolved: None }
0b 35 2b 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t7 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_f[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }", "Index(\"f\", Number(U8, 0))", "Index(\"f\", Number(U8, 0))"] }
# 004e2 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t7 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_f[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\", \"Index(\\\"f\\\", Number(U8, 0))\", \"Index(\\\"f\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x28), Register(0x35)], resolved: None }
0b 28 35 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t7 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }"] }
# 004e5 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t7 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x35), Register(0x2a)], resolved: None }
0b 35 2a 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t8 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 004e8 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t8 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x3e), Constant8(0x00=0)], resolved: None }
04 3e 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t8 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }"] }
# 004eb Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t8 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x3e), Register(0x29)], resolved: None }
0b 3e 29 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t9 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 004ee Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t9 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x3e), Constant8(0x00=0)], resolved: None }
04 3e 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t9 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 004f1 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t9 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x3e), Register(0x28)], resolved: None }
0b 3e 28 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t10 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t10 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x24), Register(0x24)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t11 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_f U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"f\")", "Ident(\"f\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t11 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_f U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"f\\\")\", \"Ident(\\\"f\\\")\"] }", opcode: Copy32, args: [Register(0x28), Register(0x28)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t10 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t11
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))"] }
# 004f4 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t10 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 004f5 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t10 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x24), Register(0x28), Register(0x24)], resolved: None }
30 24 28 24 
# 004f9 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t10 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t12 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t12 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t14 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 004fa Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t14 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x19), Register(0x3d)], resolved: None }
0b 19 3d 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t13 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t14 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 004fd Instruction { source: "Zero-pad for inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t13 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t14 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x28), Constant32(0x00000000=0)], resolved: None }
20 28 00 00 00 00 
# 00503 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t13 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t14 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x3d), Register(0x28)], resolved: None }
0b 3d 28 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t12 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t13
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 00506 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t12 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0x14), Register(0x28), Register(0x28)], resolved: None }
11 14 28 28 
# 0050a Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t12 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x2a), Constant8(0x00=0)], resolved: None }
04 2a 00 
# 0050d Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t12 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x2b), Constant8(0x00=0)], resolved: None }
04 2b 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t16 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 00510 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t16 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x15), Register(0x3c)], resolved: None }
0b 15 3c 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t15 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t16 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 00513 Instruction { source: "Zero-pad for inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t15 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t16 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x14), Constant32(0x00000000=0)], resolved: None }
20 14 00 00 00 00 
# 00519 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t15 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t16 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x3c), Register(0x14)], resolved: None }
0b 3c 14 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t17 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t17 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_e <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t15 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t17
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))"] }
# 0051c Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_e <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t15 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0x14), Register(0x18), Register(0x14)], resolved: None }
11 14 18 14 
# 00520 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_e <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t15 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x16), Constant8(0x00=0)], resolved: None }
04 16 00 
# 00523 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_e <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t15 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x17), Constant8(0x00=0)], resolved: None }
04 17 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t18 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 00526 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t18 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0x28), Register(0x18)], resolved: None }
21 28 18 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t19 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_e U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"e\")", "Ident(\"e\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t19 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_e U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"e\\\")\", \"Ident(\\\"e\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t18 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t19
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))"] }
# 00529 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t18 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0052a Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t18 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x18), Register(0x14), Register(0x28)], resolved: None }
30 18 14 28 
# 0052e Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t18 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t20 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }", "Index(\"d\", Number(U8, 2))", "Index(\"d\", Number(U8, 2))"] }
# 0052f Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t20 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\", \"Index(\\\"d\\\", Number(U8, 2))\", \"Index(\\\"d\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x2a), Register(0x3c)], resolved: None }
0b 2a 3c 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t20 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }"] }
# 00532 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t20 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\"] }", opcode: Copy8, args: [Register(0x3c), Register(0x2b)], resolved: None }
0b 3c 2b 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t21 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }", "Index(\"d\", Number(U8, 1))", "Index(\"d\", Number(U8, 1))"] }
# 00535 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t21 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\", \"Index(\\\"d\\\", Number(U8, 1))\", \"Index(\\\"d\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x29), Register(0x3c)], resolved: None }
0b 29 3c 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t21 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }"] }
# 00538 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t21 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x3c), Register(0x2a)], resolved: None }
0b 3c 2a 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t22 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }", "Index(\"d\", Number(U8, 0))", "Index(\"d\", Number(U8, 0))"] }
# 0053b Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t22 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\", \"Index(\\\"d\\\", Number(U8, 0))\", \"Index(\\\"d\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x28), Register(0x3c)], resolved: None }
0b 28 3c 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t22 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }"] }
# 0053e Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t22 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x3c), Register(0x29)], resolved: None }
0b 3c 29 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t23 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00541 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t23 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x3c), Constant8(0x00=0)], resolved: None }
04 3c 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t23 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 00544 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t23 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x3c), Register(0x28)], resolved: None }
0b 3c 28 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t25 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_c U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# 00547 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t25 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_c U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x24), Register(0x14)], resolved: None }
21 24 14 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t26 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 0054a Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t26 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0x28), Register(0x18)], resolved: None }
21 28 18 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t24 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t25 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t26
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))"] }
# 0054d Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t24 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t25 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0054e Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t24 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t25 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x18), Register(0x14)], resolved: None }
30 14 18 14 
# 00552 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t24 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t25 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_mul32_32_14_t6 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t24 U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# 00553 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t6 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t24 U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: Copy32, args: [Register(0x14), Register(0x28)], resolved: None }
21 14 28 
# goto inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_function_end_mul16_32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_function_end_mul16_32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_function_end_mul16_32)], resolved: None }
# :inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_function_end_mul16_32
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_function_end_mul16_32
# inline_RpnCalc_handle_mul32_32_14_t10 <- inline_RpnCalc_handle_mul32_32_14_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }", "Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t10 <- inline_RpnCalc_handle_mul32_32_14_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] }))\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_t11 <- inline_RpnCalc_handle_mul32_32_14_b_hi U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }", "Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })", "Ident(\"b_hi\")", "Ident(\"b_hi\")"] }
# 00556 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t11 <- inline_RpnCalc_handle_mul32_32_14_b_hi U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] }))\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })\", \"Ident(\\\"b_hi\\\")\", \"Ident(\\\"b_hi\\\")\"] }", opcode: Copy32, args: [Register(0x38), Register(0x14)], resolved: None }
21 38 14 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_a <- inline_RpnCalc_handle_mul32_32_14_t10 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }", "Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_a <- inline_RpnCalc_handle_mul32_32_14_t10 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] }))\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_b <- inline_RpnCalc_handle_mul32_32_14_t11 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }", "Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_b <- inline_RpnCalc_handle_mul32_32_14_t11 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] }))\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t0 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t0 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t1 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t1 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t0 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t1
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))"] }
# 00559 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t0 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0x10), Register(0x14), Register(0x18)], resolved: None }
11 10 14 18 
# 0055d Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t0 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x1a), Constant8(0x00=0)], resolved: None }
04 1a 00 
# 00560 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t0 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x1b), Constant8(0x00=0)], resolved: None }
04 1b 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t3 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 00563 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t3 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x11), Register(0x1d)], resolved: None }
0b 11 1d 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t2 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t3 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 00566 Instruction { source: "Zero-pad for inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t2 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x38), Constant32(0x00000000=0)], resolved: None }
20 38 00 00 00 00 
# 0056c Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t2 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x38)], resolved: None }
0b 1d 38 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t5 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 0056f Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t5 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x15), Register(0x3c)], resolved: None }
0b 15 3c 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t4 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t5 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 00572 Instruction { source: "Zero-pad for inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t4 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t5 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x24), Constant32(0x00000000=0)], resolved: None }
20 24 00 00 00 00 
# 00578 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t4 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t5 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x3c), Register(0x24)], resolved: None }
0b 3c 24 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_f <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t2 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t4
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 0057b Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_f <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t2 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0x38), Register(0x24), Register(0x38)], resolved: None }
11 38 24 38 
# 0057f Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_f <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t2 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x3a), Constant8(0x00=0)], resolved: None }
04 3a 00 
# 00582 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_f <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t2 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x3b), Constant8(0x00=0)], resolved: None }
04 3b 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t6 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_f[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }", "Index(\"f\", Number(U8, 1))", "Index(\"f\", Number(U8, 1))"] }
# 00585 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t6 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_f[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\", \"Index(\\\"f\\\", Number(U8, 1))\", \"Index(\\\"f\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x39), Register(0x1c)], resolved: None }
0b 39 1c 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t6 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }"] }
# 00588 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t6 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x3b)], resolved: None }
0b 1c 3b 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t7 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_f[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }", "Index(\"f\", Number(U8, 0))", "Index(\"f\", Number(U8, 0))"] }
# 0058b Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t7 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_f[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\", \"Index(\\\"f\\\", Number(U8, 0))\", \"Index(\\\"f\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x38), Register(0x1c)], resolved: None }
0b 38 1c 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t7 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }"] }
# 0058e Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t7 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x3a)], resolved: None }
0b 1c 3a 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t8 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00591 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t8 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x34), Constant8(0x00=0)], resolved: None }
04 34 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t8 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }"] }
# 00594 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t8 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x34), Register(0x39)], resolved: None }
0b 34 39 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t9 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00597 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t9 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x34), Constant8(0x00=0)], resolved: None }
04 34 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t9 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 0059a Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t9 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x34), Register(0x38)], resolved: None }
0b 34 38 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t10 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t10 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t11 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_f U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"f\")", "Ident(\"f\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t11 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_f U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"f\\\")\", \"Ident(\\\"f\\\")\"] }", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t10 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t11
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))"] }
# 0059d Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t10 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0059e Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t10 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x18), Register(0x38), Register(0x18)], resolved: None }
30 18 38 18 
# 005a2 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t10 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t12 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t12 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t14 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 005a3 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t14 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x15), Register(0x3c)], resolved: None }
0b 15 3c 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t13 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t14 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 005a6 Instruction { source: "Zero-pad for inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t13 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t14 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x38), Constant32(0x00000000=0)], resolved: None }
20 38 00 00 00 00 
# 005ac Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t13 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t14 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x3c), Register(0x38)], resolved: None }
0b 3c 38 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t12 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t13
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 005af Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t12 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0x10), Register(0x38), Register(0x38)], resolved: None }
11 10 38 38 
# 005b3 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t12 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x3a), Constant8(0x00=0)], resolved: None }
04 3a 00 
# 005b6 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t12 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x3b), Constant8(0x00=0)], resolved: None }
04 3b 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t16 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 005b9 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t16 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x11), Register(0x1d)], resolved: None }
0b 11 1d 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t15 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t16 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 005bc Instruction { source: "Zero-pad for inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t15 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t16 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x10), Constant32(0x00000000=0)], resolved: None }
20 10 00 00 00 00 
# 005c2 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t15 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t16 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x10)], resolved: None }
0b 1d 10 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t17 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t17 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_e <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t15 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t17
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))"] }
# 005c5 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_e <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t15 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0x10), Register(0x14), Register(0x10)], resolved: None }
11 10 14 10 
# 005c9 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_e <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t15 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x12), Constant8(0x00=0)], resolved: None }
04 12 00 
# 005cc Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_e <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t15 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x13), Constant8(0x00=0)], resolved: None }
04 13 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t18 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 005cf Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t18 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0x38), Register(0x14)], resolved: None }
21 38 14 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t19 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_e U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"e\")", "Ident(\"e\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t19 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_e U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"e\\\")\", \"Ident(\\\"e\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t18 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t19
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))"] }
# 005d2 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t18 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 005d3 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t18 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x10), Register(0x38)], resolved: None }
30 14 10 38 
# 005d7 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t18 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t20 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }", "Index(\"d\", Number(U8, 2))", "Index(\"d\", Number(U8, 2))"] }
# 005d8 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t20 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\", \"Index(\\\"d\\\", Number(U8, 2))\", \"Index(\\\"d\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x3a), Register(0x1d)], resolved: None }
0b 3a 1d 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t20 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }"] }
# 005db Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t20 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x3b)], resolved: None }
0b 1d 3b 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t21 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }", "Index(\"d\", Number(U8, 1))", "Index(\"d\", Number(U8, 1))"] }
# 005de Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t21 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\", \"Index(\\\"d\\\", Number(U8, 1))\", \"Index(\\\"d\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x39), Register(0x1d)], resolved: None }
0b 39 1d 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t21 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }"] }
# 005e1 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t21 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x3a)], resolved: None }
0b 1d 3a 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t22 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }", "Index(\"d\", Number(U8, 0))", "Index(\"d\", Number(U8, 0))"] }
# 005e4 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t22 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\", \"Index(\\\"d\\\", Number(U8, 0))\", \"Index(\\\"d\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x38), Register(0x1d)], resolved: None }
0b 38 1d 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t22 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }"] }
# 005e7 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t22 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x39)], resolved: None }
0b 1d 39 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t23 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 005ea Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t23 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x1d), Constant8(0x00=0)], resolved: None }
04 1d 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t23 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 005ed Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t23 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x38)], resolved: None }
0b 1d 38 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t25 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_c U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# 005f0 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t25 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_c U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x10)], resolved: None }
21 18 10 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t26 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 005f3 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t26 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0x38), Register(0x14)], resolved: None }
21 38 14 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t24 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t25 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t26
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))"] }
# 005f6 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t24 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t25 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 005f7 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t24 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t25 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x10), Register(0x14), Register(0x10)], resolved: None }
30 10 14 10 
# 005fb Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t24 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t25 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_mul32_32_14_t9 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t24 U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t9 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t24 U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# goto inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_function_end_mul16_32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_function_end_mul16_32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_function_end_mul16_32)], resolved: None }
# :inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_function_end_mul16_32
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_function_end_mul16_32
# inline_RpnCalc_handle_mul32_32_14_d <- inline_RpnCalc_handle_mul32_32_14_t6 Add inline_RpnCalc_handle_mul32_32_14_t9
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }", "Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))"] }
# 005fc Instruction { source: "inline_RpnCalc_handle_mul32_32_14_d <- inline_RpnCalc_handle_mul32_32_14_t6 Add inline_RpnCalc_handle_mul32_32_14_t9\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] }))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 005fd Instruction { source: "inline_RpnCalc_handle_mul32_32_14_d <- inline_RpnCalc_handle_mul32_32_14_t6 Add inline_RpnCalc_handle_mul32_32_14_t9\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] }))\"] }", opcode: AddCarry32_1, args: [Register(0x28), Register(0x10), Register(0x10)], resolved: None }
30 28 10 10 
# 00601 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_d <- inline_RpnCalc_handle_mul32_32_14_t6 Add inline_RpnCalc_handle_mul32_32_14_t9\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] }))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_mul32_32_14_t12 <- inline_RpnCalc_handle_mul32_32_14_d[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 1)) }", "Index(\"d\", Number(U8, 1))", "Index(\"d\", Number(U8, 1))"] }
# 00602 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t12 <- inline_RpnCalc_handle_mul32_32_14_d[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\", \"Index(\\\"d\\\", Number(U8, 1))\", \"Index(\\\"d\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x11), Register(0x1d)], resolved: None }
0b 11 1d 
# inline_RpnCalc_handle_mul32_32_14_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_14_t12 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 1)) }"] }
# 00605 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_14_t12 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x13)], resolved: None }
0b 1d 13 
# inline_RpnCalc_handle_mul32_32_14_t13 <- inline_RpnCalc_handle_mul32_32_14_d[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 0)) }", "Index(\"d\", Number(U8, 0))", "Index(\"d\", Number(U8, 0))"] }
# 00608 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t13 <- inline_RpnCalc_handle_mul32_32_14_d[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\", \"Index(\\\"d\\\", Number(U8, 0))\", \"Index(\\\"d\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x10), Register(0x1d)], resolved: None }
0b 10 1d 
# inline_RpnCalc_handle_mul32_32_14_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_14_t13 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 0)) }"] }
# 0060b Instruction { source: "inline_RpnCalc_handle_mul32_32_14_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_14_t13 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x12)], resolved: None }
0b 1d 12 
# inline_RpnCalc_handle_mul32_32_14_t14 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0060e Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t14 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x3c), Constant8(0x00=0)], resolved: None }
04 3c 00 
# inline_RpnCalc_handle_mul32_32_14_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_14_t14 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }"] }
# 00611 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_14_t14 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x3c), Register(0x11)], resolved: None }
0b 3c 11 
# inline_RpnCalc_handle_mul32_32_14_t15 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00614 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t15 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x3c), Constant8(0x00=0)], resolved: None }
04 3c 00 
# inline_RpnCalc_handle_mul32_32_14_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_14_t15 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 00617 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_14_t15 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x3c), Register(0x10)], resolved: None }
0b 3c 10 
# inline_RpnCalc_handle_mul32_32_14_t17 <- inline_RpnCalc_handle_mul32_32_14_c U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# 0061a Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t17 <- inline_RpnCalc_handle_mul32_32_14_c U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x20), Register(0x14)], resolved: None }
21 20 14 
# inline_RpnCalc_handle_mul32_32_14_t18 <- inline_RpnCalc_handle_mul32_32_14_d U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t18 <- inline_RpnCalc_handle_mul32_32_14_d U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_t16 <- inline_RpnCalc_handle_mul32_32_14_t17 Add inline_RpnCalc_handle_mul32_32_14_t18
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))"] }
# 0061d Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t16 <- inline_RpnCalc_handle_mul32_32_14_t17 Add inline_RpnCalc_handle_mul32_32_14_t18\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0061e Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t16 <- inline_RpnCalc_handle_mul32_32_14_t17 Add inline_RpnCalc_handle_mul32_32_14_t18\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x10), Register(0x10)], resolved: None }
30 14 10 10 
# 00622 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t16 <- inline_RpnCalc_handle_mul32_32_14_t17 Add inline_RpnCalc_handle_mul32_32_14_t18\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# product <- inline_RpnCalc_handle_mul32_32_14_t16 U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# 00623 Instruction { source: "product <- inline_RpnCalc_handle_mul32_32_14_t16 U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: Copy32, args: [Register(0x10), Register(0x14)], resolved: None }
21 10 14 
# goto inline_RpnCalc_handle_mul32_32_14_function_end_mul32_32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_mul32_32_14_function_end_mul32_32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_mul32_32_14_function_end_mul32_32)], resolved: None }
# :inline_RpnCalc_handle_mul32_32_14_function_end_mul32_32
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_mul32_32_14_function_end_mul32_32
# t62 <- product U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"product\")] }) }", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"product\")] })", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"product\")] })", "Ident(\"product\")", "Ident(\"product\")"] }
# 00626 Instruction { source: "t62 <- product U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Ident(\\\"product\\\")\", \"Ident(\\\"product\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x10)], resolved: None }
21 14 10 
# None <= call print_dec32(t62,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"product\")] }) }", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"product\")] })", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"product\")] })"] }
# 00629 Instruction { source: "Arg0[a]=t62 None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Copy32, args: [Register(0x10), Register(0x00)], resolved: None }
21 10 00 
# Registers used by this function: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69}
# Registers used by callee tree: {128, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 200, 201, 202, 203, 204, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238}
# Registers to save: []
# 0062c Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 00632 Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 3c 06 00 00 
# 00638 Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: JmpImm, args: [Label24(:print_dec32)], resolved: None }
70 a3 17 00 
# 0063c Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# t64 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Number(U8, 10)", "Number(U8, 10)"] }
# 00642 Instruction { source: "t64 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x1d), Constant8(0x0a=10)], resolved: None }
04 1d 0a 
# inline_RpnCalc_handle_putc_23_c <- t64 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_23_c <- t64 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# inline_RpnCalc_handle_putc_23_t1 <- inline_RpnCalc_handle_putc_23_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_23_t1 <- inline_RpnCalc_handle_putc_23_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_23_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 00645 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x1d)], resolved: None }
68 1d 
# goto inline_RpnCalc_handle_putc_23_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_23_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_23_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_23_function_end_putc
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_putc_23_function_end_putc
# t66 <- stack U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] })", "Ident(\"stack\")", "Ident(\"stack\")"] }
# 00647 Instruction { source: "t66 <- stack U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] })\", \"Ident(\\\"stack\\\")\", \"Ident(\\\"stack\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x10)], resolved: None }
21 40 10 
# t67 <- product U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] })", "Ident(\"product\")", "Ident(\"product\")"] }
# 0064a Instruction { source: "t67 <- product U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] })\", \"Ident(\\\"product\\\")\", \"Ident(\\\"product\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x18)], resolved: None }
21 14 18 
# inline_RpnCalc_handle_stack_push_52_s <- t66 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] })"] }
# 0064d Instruction { source: "inline_RpnCalc_handle_stack_push_52_s <- t66 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] })\"] }", opcode: Copy32, args: [Register(0x10), Register(0x14)], resolved: None }
21 10 14 
# inline_RpnCalc_handle_stack_push_52_n <- t67 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] })"] }
# 00650 Instruction { source: "inline_RpnCalc_handle_stack_push_52_n <- t67 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] })\"] }", opcode: Copy32, args: [Register(0x18), Register(0x10)], resolved: None }
21 18 10 
# inline_RpnCalc_handle_stack_push_52_t0 <- inline_RpnCalc_handle_stack_push_52_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_52_t0 <- inline_RpnCalc_handle_stack_push_52_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_stack_push_52_values <- inline_RpnCalc_handle_stack_push_52_t0 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# 00653 Instruction { source: "inline_RpnCalc_handle_stack_push_52_values <- inline_RpnCalc_handle_stack_push_52_t0 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0x14), Register(0x18)], resolved: None }
21 14 18 
# inline_RpnCalc_handle_stack_push_52_t2 <- inline_RpnCalc_handle_stack_push_52_values U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_52_t2 <- inline_RpnCalc_handle_stack_push_52_values U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_RpnCalc_handle_stack_push_52_t6 <- inline_RpnCalc_handle_stack_push_52_s U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_52_t6 <- inline_RpnCalc_handle_stack_push_52_s U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_stack_push_52_t7 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 00656 Instruction { source: "inline_RpnCalc_handle_stack_push_52_t7 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x38), Constant32(0x00000040=64)], resolved: None }
20 38 40 00 00 00 
# inline_RpnCalc_handle_stack_push_52_t5 <- inline_RpnCalc_handle_stack_push_52_t6 Add inline_RpnCalc_handle_stack_push_52_t7
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 0065c Instruction { source: "inline_RpnCalc_handle_stack_push_52_t5 <- inline_RpnCalc_handle_stack_push_52_t6 Add inline_RpnCalc_handle_stack_push_52_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0065d Instruction { source: "inline_RpnCalc_handle_stack_push_52_t5 <- inline_RpnCalc_handle_stack_push_52_t6 Add inline_RpnCalc_handle_stack_push_52_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x38), Register(0x38)], resolved: None }
30 14 38 38 
# 00661 Instruction { source: "inline_RpnCalc_handle_stack_push_52_t5 <- inline_RpnCalc_handle_stack_push_52_t6 Add inline_RpnCalc_handle_stack_push_52_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_52_t4 <- mem[inline_RpnCalc_handle_stack_push_52_t5] U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 00662 Instruction { source: "inline_RpnCalc_handle_stack_push_52_t4 <- mem[inline_RpnCalc_handle_stack_push_52_t5] U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x38), Register(0x38)], resolved: None }
22 38 38 
# inline_RpnCalc_handle_stack_push_52_t3 <- inline_RpnCalc_handle_stack_push_52_t4 Add inline_RpnCalc_handle_stack_push_52_t4
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 00665 Instruction { source: "inline_RpnCalc_handle_stack_push_52_t3 <- inline_RpnCalc_handle_stack_push_52_t4 Add inline_RpnCalc_handle_stack_push_52_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00666 Instruction { source: "inline_RpnCalc_handle_stack_push_52_t3 <- inline_RpnCalc_handle_stack_push_52_t4 Add inline_RpnCalc_handle_stack_push_52_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_1, args: [Register(0x38), Register(0x38), Register(0x38)], resolved: None }
30 38 38 38 
# 0066a Instruction { source: "inline_RpnCalc_handle_stack_push_52_t3 <- inline_RpnCalc_handle_stack_push_52_t4 Add inline_RpnCalc_handle_stack_push_52_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_52_t3 <- inline_RpnCalc_handle_stack_push_52_t3 Add inline_RpnCalc_handle_stack_push_52_t3
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))"] }
# 0066b Instruction { source: "inline_RpnCalc_handle_stack_push_52_t3 <- inline_RpnCalc_handle_stack_push_52_t3 Add inline_RpnCalc_handle_stack_push_52_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0066c Instruction { source: "inline_RpnCalc_handle_stack_push_52_t3 <- inline_RpnCalc_handle_stack_push_52_t3 Add inline_RpnCalc_handle_stack_push_52_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x38), Register(0x38), Register(0x38)], resolved: None }
30 38 38 38 
# 00670 Instruction { source: "inline_RpnCalc_handle_stack_push_52_t3 <- inline_RpnCalc_handle_stack_push_52_t3 Add inline_RpnCalc_handle_stack_push_52_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_52_t1 <- inline_RpnCalc_handle_stack_push_52_t2 Add inline_RpnCalc_handle_stack_push_52_t3
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))"] }
# 00671 Instruction { source: "inline_RpnCalc_handle_stack_push_52_t1 <- inline_RpnCalc_handle_stack_push_52_t2 Add inline_RpnCalc_handle_stack_push_52_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00672 Instruction { source: "inline_RpnCalc_handle_stack_push_52_t1 <- inline_RpnCalc_handle_stack_push_52_t2 Add inline_RpnCalc_handle_stack_push_52_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_1, args: [Register(0x18), Register(0x38), Register(0x18)], resolved: None }
30 18 38 18 
# 00676 Instruction { source: "inline_RpnCalc_handle_stack_push_52_t1 <- inline_RpnCalc_handle_stack_push_52_t2 Add inline_RpnCalc_handle_stack_push_52_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_52_t9 <- inline_RpnCalc_handle_stack_push_52_n U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_52_t9 <- inline_RpnCalc_handle_stack_push_52_n U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# mem[inline_RpnCalc_handle_stack_push_52_t1] <- inline_RpnCalc_handle_stack_push_52_t9 U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }"] }
# 00677 Instruction { source: "mem[inline_RpnCalc_handle_stack_push_52_t1] <- inline_RpnCalc_handle_stack_push_52_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_1, args: [Register(0x10), Register(0x18)], resolved: None }
23 10 18 
# 0067a Instruction { source: "mem[inline_RpnCalc_handle_stack_push_52_t1] <- inline_RpnCalc_handle_stack_push_52_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_RpnCalc_handle_stack_push_52_t11 <- inline_RpnCalc_handle_stack_push_52_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# 0067b Instruction { source: "inline_RpnCalc_handle_stack_push_52_t11 <- inline_RpnCalc_handle_stack_push_52_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x10)], resolved: None }
21 14 10 
# inline_RpnCalc_handle_stack_push_52_t12 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 0067e Instruction { source: "inline_RpnCalc_handle_stack_push_52_t12 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000040=64)], resolved: None }
20 18 40 00 00 00 
# inline_RpnCalc_handle_stack_push_52_t10 <- inline_RpnCalc_handle_stack_push_52_t11 Add inline_RpnCalc_handle_stack_push_52_t12
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 00684 Instruction { source: "inline_RpnCalc_handle_stack_push_52_t10 <- inline_RpnCalc_handle_stack_push_52_t11 Add inline_RpnCalc_handle_stack_push_52_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00685 Instruction { source: "inline_RpnCalc_handle_stack_push_52_t10 <- inline_RpnCalc_handle_stack_push_52_t11 Add inline_RpnCalc_handle_stack_push_52_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x10), Register(0x18), Register(0x10)], resolved: None }
30 10 18 10 
# 00689 Instruction { source: "inline_RpnCalc_handle_stack_push_52_t10 <- inline_RpnCalc_handle_stack_push_52_t11 Add inline_RpnCalc_handle_stack_push_52_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_52_t16 <- inline_RpnCalc_handle_stack_push_52_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_52_t16 <- inline_RpnCalc_handle_stack_push_52_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_stack_push_52_t17 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 0068a Instruction { source: "inline_RpnCalc_handle_stack_push_52_t17 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000040=64)], resolved: None }
20 18 40 00 00 00 
# inline_RpnCalc_handle_stack_push_52_t15 <- inline_RpnCalc_handle_stack_push_52_t16 Add inline_RpnCalc_handle_stack_push_52_t17
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 00690 Instruction { source: "inline_RpnCalc_handle_stack_push_52_t15 <- inline_RpnCalc_handle_stack_push_52_t16 Add inline_RpnCalc_handle_stack_push_52_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00691 Instruction { source: "inline_RpnCalc_handle_stack_push_52_t15 <- inline_RpnCalc_handle_stack_push_52_t16 Add inline_RpnCalc_handle_stack_push_52_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x18), Register(0x14)], resolved: None }
30 14 18 14 
# 00695 Instruction { source: "inline_RpnCalc_handle_stack_push_52_t15 <- inline_RpnCalc_handle_stack_push_52_t16 Add inline_RpnCalc_handle_stack_push_52_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_52_t14 <- mem[inline_RpnCalc_handle_stack_push_52_t15] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 00696 Instruction { source: "inline_RpnCalc_handle_stack_push_52_t14 <- mem[inline_RpnCalc_handle_stack_push_52_t15] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x14), Register(0x14)], resolved: None }
22 14 14 
# inline_RpnCalc_handle_stack_push_52_t18 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 00699 Instruction { source: "inline_RpnCalc_handle_stack_push_52_t18 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000001=1)], resolved: None }
20 18 01 00 00 00 
# inline_RpnCalc_handle_stack_push_52_t13 <- inline_RpnCalc_handle_stack_push_52_t14 Add inline_RpnCalc_handle_stack_push_52_t18
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))"] }
# 0069f Instruction { source: "inline_RpnCalc_handle_stack_push_52_t13 <- inline_RpnCalc_handle_stack_push_52_t14 Add inline_RpnCalc_handle_stack_push_52_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 006a0 Instruction { source: "inline_RpnCalc_handle_stack_push_52_t13 <- inline_RpnCalc_handle_stack_push_52_t14 Add inline_RpnCalc_handle_stack_push_52_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x18), Register(0x14)], resolved: None }
30 14 18 14 
# 006a4 Instruction { source: "inline_RpnCalc_handle_stack_push_52_t13 <- inline_RpnCalc_handle_stack_push_52_t14 Add inline_RpnCalc_handle_stack_push_52_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# mem[inline_RpnCalc_handle_stack_push_52_t10] <- inline_RpnCalc_handle_stack_push_52_t13 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }"] }
# 006a5 Instruction { source: "mem[inline_RpnCalc_handle_stack_push_52_t10] <- inline_RpnCalc_handle_stack_push_52_t13 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_1, args: [Register(0x14), Register(0x10)], resolved: None }
23 14 10 
# 006a8 Instruction { source: "mem[inline_RpnCalc_handle_stack_push_52_t10] <- inline_RpnCalc_handle_stack_push_52_t13 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto inline_RpnCalc_handle_stack_push_52_function_end_stack_push
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_push_52_function_end_stack_push\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_push_52_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_stack_push_52_function_end_stack_push
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_stack_push_52_function_end_stack_push
# goto RpnCalc_handle_if_end_23
# 	SourceContext { contexts: [] }
# 006a9 Instruction { source: "goto RpnCalc_handle_if_end_23\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_23)], resolved: None }
70 74 0b 00 
# :RpnCalc_handle_if_else_2_29
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_2_29
# t68 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t68 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# t69 <- 0n47/0x2fu8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }", "Number(U8, 47)", "Number(U8, 47)"] }
# 006ad Instruction { source: "t69 <- 0n47/0x2fu8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }\", \"Number(U8, 47)\", \"Number(U8, 47)\"] }", opcode: LoadImm8, args: [Register(0x45), Constant8(0x2f=47)], resolved: None }
04 45 2f 
# if t68 == t69 then 'RpnCalc_handle_if_true_3_30' else 'RpnCalc_handle_if_else_3_31'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }"] }
# 006b0 Instruction { source: "if t68 == t69 then 'RpnCalc_handle_if_true_3_30' else 'RpnCalc_handle_if_else_3_31'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }\"] }", opcode: Cmp8, args: [Register(0x1c), Register(0x45)], resolved: None }
15 1c 45 
# 006b3 Instruction { source: "if t68 == t69 then 'RpnCalc_handle_if_true_3_30' else 'RpnCalc_handle_if_else_3_31'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_handle_if_true_3_30)], resolved: None }
72 bb 06 00 
# 006b7 Instruction { source: "if t68 == t69 then 'RpnCalc_handle_if_true_3_30' else 'RpnCalc_handle_if_else_3_31'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_3_31)], resolved: None }
70 61 07 00 
# :RpnCalc_handle_if_true_3_30
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_true_3_30
# t70 <- b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"quotient\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"div32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }", "Call(Call { function: \"div32\", parameters: [Ident(\"b\"), Ident(\"a\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "t70 <- b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# t71 <- a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"quotient\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"div32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }", "Call(Call { function: \"div32\", parameters: [Ident(\"b\"), Ident(\"a\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t71 <- a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# Some(quotient) <= call div32(t70,t71,)
# 	SourceContext { contexts: ["Assign { target: Ident(\"quotient\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"div32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }", "Call(Call { function: \"div32\", parameters: [Ident(\"b\"), Ident(\"a\")] })"] }
# 006bb Instruction { source: "Arg0[a]=t70 Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Copy32, args: [Register(0x14), Register(0x00)], resolved: None }
21 14 00 
# 006be Instruction { source: "Arg1[b]=t71 Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Copy32, args: [Register(0x10), Register(0x04)], resolved: None }
21 10 04 
# Registers used by this function: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69}
# Registers used by callee tree: {72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 200, 201, 202, 203, 204, 208, 209, 210, 211, 212, 213, 214, 215}
# Registers to save: []
# 006c1 Instruction { source: "PseudoCall(Label24(:div32))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 006c7 Instruction { source: "PseudoCall(Label24(:div32))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c d1 06 00 00 
# 006cd Instruction { source: "PseudoCall(Label24(:div32))", opcode: JmpImm, args: [Label24(:div32)], resolved: None }
70 81 0b 00 
# 006d1 Instruction { source: "PseudoCall(Label24(:div32))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 006d7 Instruction { source: "Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Copy32, args: [Register(0x00), Register(0x14)], resolved: None }
21 00 14 
# t73 <- quotient U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"quotient\")] }) }", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"quotient\")] })", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"quotient\")] })", "Ident(\"quotient\")", "Ident(\"quotient\")"] }
# 006da Instruction { source: "t73 <- quotient U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Ident(\\\"quotient\\\")\", \"Ident(\\\"quotient\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x10)], resolved: None }
21 14 10 
# None <= call print_dec32(t73,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"quotient\")] }) }", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"quotient\")] })", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"quotient\")] })"] }
# 006dd Instruction { source: "Arg0[a]=t73 None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Copy32, args: [Register(0x10), Register(0x00)], resolved: None }
21 10 00 
# Registers used by this function: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69}
# Registers used by callee tree: {128, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 200, 201, 202, 203, 204, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238}
# Registers to save: []
# 006e0 Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 006e6 Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c f0 06 00 00 
# 006ec Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: JmpImm, args: [Label24(:print_dec32)], resolved: None }
70 a3 17 00 
# 006f0 Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# t75 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Number(U8, 10)", "Number(U8, 10)"] }
# 006f6 Instruction { source: "t75 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x1d), Constant8(0x0a=10)], resolved: None }
04 1d 0a 
# inline_RpnCalc_handle_putc_24_c <- t75 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_24_c <- t75 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# inline_RpnCalc_handle_putc_24_t1 <- inline_RpnCalc_handle_putc_24_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_24_t1 <- inline_RpnCalc_handle_putc_24_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_24_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 006f9 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x1d)], resolved: None }
68 1d 
# goto inline_RpnCalc_handle_putc_24_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_24_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_24_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_24_function_end_putc
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_putc_24_function_end_putc
# t77 <- stack U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] })", "Ident(\"stack\")", "Ident(\"stack\")"] }
# 006fb Instruction { source: "t77 <- stack U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] })\", \"Ident(\\\"stack\\\")\", \"Ident(\\\"stack\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x10)], resolved: None }
21 40 10 
# t78 <- quotient U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] })", "Ident(\"quotient\")", "Ident(\"quotient\")"] }
# 006fe Instruction { source: "t78 <- quotient U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] })\", \"Ident(\\\"quotient\\\")\", \"Ident(\\\"quotient\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x18)], resolved: None }
21 14 18 
# inline_RpnCalc_handle_stack_push_53_s <- t77 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] })"] }
# 00701 Instruction { source: "inline_RpnCalc_handle_stack_push_53_s <- t77 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] })\"] }", opcode: Copy32, args: [Register(0x10), Register(0x14)], resolved: None }
21 10 14 
# inline_RpnCalc_handle_stack_push_53_n <- t78 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] })"] }
# 00704 Instruction { source: "inline_RpnCalc_handle_stack_push_53_n <- t78 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] })\"] }", opcode: Copy32, args: [Register(0x18), Register(0x10)], resolved: None }
21 18 10 
# inline_RpnCalc_handle_stack_push_53_t0 <- inline_RpnCalc_handle_stack_push_53_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_53_t0 <- inline_RpnCalc_handle_stack_push_53_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_stack_push_53_values <- inline_RpnCalc_handle_stack_push_53_t0 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# 00707 Instruction { source: "inline_RpnCalc_handle_stack_push_53_values <- inline_RpnCalc_handle_stack_push_53_t0 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0x14), Register(0x18)], resolved: None }
21 14 18 
# inline_RpnCalc_handle_stack_push_53_t2 <- inline_RpnCalc_handle_stack_push_53_values U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_53_t2 <- inline_RpnCalc_handle_stack_push_53_values U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_RpnCalc_handle_stack_push_53_t6 <- inline_RpnCalc_handle_stack_push_53_s U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_53_t6 <- inline_RpnCalc_handle_stack_push_53_s U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_stack_push_53_t7 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 0070a Instruction { source: "inline_RpnCalc_handle_stack_push_53_t7 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x38), Constant32(0x00000040=64)], resolved: None }
20 38 40 00 00 00 
# inline_RpnCalc_handle_stack_push_53_t5 <- inline_RpnCalc_handle_stack_push_53_t6 Add inline_RpnCalc_handle_stack_push_53_t7
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 00710 Instruction { source: "inline_RpnCalc_handle_stack_push_53_t5 <- inline_RpnCalc_handle_stack_push_53_t6 Add inline_RpnCalc_handle_stack_push_53_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00711 Instruction { source: "inline_RpnCalc_handle_stack_push_53_t5 <- inline_RpnCalc_handle_stack_push_53_t6 Add inline_RpnCalc_handle_stack_push_53_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x38), Register(0x38)], resolved: None }
30 14 38 38 
# 00715 Instruction { source: "inline_RpnCalc_handle_stack_push_53_t5 <- inline_RpnCalc_handle_stack_push_53_t6 Add inline_RpnCalc_handle_stack_push_53_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_53_t4 <- mem[inline_RpnCalc_handle_stack_push_53_t5] U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 00716 Instruction { source: "inline_RpnCalc_handle_stack_push_53_t4 <- mem[inline_RpnCalc_handle_stack_push_53_t5] U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x38), Register(0x38)], resolved: None }
22 38 38 
# inline_RpnCalc_handle_stack_push_53_t3 <- inline_RpnCalc_handle_stack_push_53_t4 Add inline_RpnCalc_handle_stack_push_53_t4
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 00719 Instruction { source: "inline_RpnCalc_handle_stack_push_53_t3 <- inline_RpnCalc_handle_stack_push_53_t4 Add inline_RpnCalc_handle_stack_push_53_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0071a Instruction { source: "inline_RpnCalc_handle_stack_push_53_t3 <- inline_RpnCalc_handle_stack_push_53_t4 Add inline_RpnCalc_handle_stack_push_53_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_1, args: [Register(0x38), Register(0x38), Register(0x38)], resolved: None }
30 38 38 38 
# 0071e Instruction { source: "inline_RpnCalc_handle_stack_push_53_t3 <- inline_RpnCalc_handle_stack_push_53_t4 Add inline_RpnCalc_handle_stack_push_53_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_53_t3 <- inline_RpnCalc_handle_stack_push_53_t3 Add inline_RpnCalc_handle_stack_push_53_t3
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))"] }
# 0071f Instruction { source: "inline_RpnCalc_handle_stack_push_53_t3 <- inline_RpnCalc_handle_stack_push_53_t3 Add inline_RpnCalc_handle_stack_push_53_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00720 Instruction { source: "inline_RpnCalc_handle_stack_push_53_t3 <- inline_RpnCalc_handle_stack_push_53_t3 Add inline_RpnCalc_handle_stack_push_53_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x38), Register(0x38), Register(0x38)], resolved: None }
30 38 38 38 
# 00724 Instruction { source: "inline_RpnCalc_handle_stack_push_53_t3 <- inline_RpnCalc_handle_stack_push_53_t3 Add inline_RpnCalc_handle_stack_push_53_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_53_t1 <- inline_RpnCalc_handle_stack_push_53_t2 Add inline_RpnCalc_handle_stack_push_53_t3
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))"] }
# 00725 Instruction { source: "inline_RpnCalc_handle_stack_push_53_t1 <- inline_RpnCalc_handle_stack_push_53_t2 Add inline_RpnCalc_handle_stack_push_53_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00726 Instruction { source: "inline_RpnCalc_handle_stack_push_53_t1 <- inline_RpnCalc_handle_stack_push_53_t2 Add inline_RpnCalc_handle_stack_push_53_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_1, args: [Register(0x18), Register(0x38), Register(0x18)], resolved: None }
30 18 38 18 
# 0072a Instruction { source: "inline_RpnCalc_handle_stack_push_53_t1 <- inline_RpnCalc_handle_stack_push_53_t2 Add inline_RpnCalc_handle_stack_push_53_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_53_t9 <- inline_RpnCalc_handle_stack_push_53_n U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_53_t9 <- inline_RpnCalc_handle_stack_push_53_n U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# mem[inline_RpnCalc_handle_stack_push_53_t1] <- inline_RpnCalc_handle_stack_push_53_t9 U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }"] }
# 0072b Instruction { source: "mem[inline_RpnCalc_handle_stack_push_53_t1] <- inline_RpnCalc_handle_stack_push_53_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_1, args: [Register(0x10), Register(0x18)], resolved: None }
23 10 18 
# 0072e Instruction { source: "mem[inline_RpnCalc_handle_stack_push_53_t1] <- inline_RpnCalc_handle_stack_push_53_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_RpnCalc_handle_stack_push_53_t11 <- inline_RpnCalc_handle_stack_push_53_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# 0072f Instruction { source: "inline_RpnCalc_handle_stack_push_53_t11 <- inline_RpnCalc_handle_stack_push_53_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x10)], resolved: None }
21 14 10 
# inline_RpnCalc_handle_stack_push_53_t12 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 00732 Instruction { source: "inline_RpnCalc_handle_stack_push_53_t12 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000040=64)], resolved: None }
20 18 40 00 00 00 
# inline_RpnCalc_handle_stack_push_53_t10 <- inline_RpnCalc_handle_stack_push_53_t11 Add inline_RpnCalc_handle_stack_push_53_t12
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 00738 Instruction { source: "inline_RpnCalc_handle_stack_push_53_t10 <- inline_RpnCalc_handle_stack_push_53_t11 Add inline_RpnCalc_handle_stack_push_53_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00739 Instruction { source: "inline_RpnCalc_handle_stack_push_53_t10 <- inline_RpnCalc_handle_stack_push_53_t11 Add inline_RpnCalc_handle_stack_push_53_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x10), Register(0x18), Register(0x10)], resolved: None }
30 10 18 10 
# 0073d Instruction { source: "inline_RpnCalc_handle_stack_push_53_t10 <- inline_RpnCalc_handle_stack_push_53_t11 Add inline_RpnCalc_handle_stack_push_53_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_53_t16 <- inline_RpnCalc_handle_stack_push_53_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_53_t16 <- inline_RpnCalc_handle_stack_push_53_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_stack_push_53_t17 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 0073e Instruction { source: "inline_RpnCalc_handle_stack_push_53_t17 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000040=64)], resolved: None }
20 18 40 00 00 00 
# inline_RpnCalc_handle_stack_push_53_t15 <- inline_RpnCalc_handle_stack_push_53_t16 Add inline_RpnCalc_handle_stack_push_53_t17
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 00744 Instruction { source: "inline_RpnCalc_handle_stack_push_53_t15 <- inline_RpnCalc_handle_stack_push_53_t16 Add inline_RpnCalc_handle_stack_push_53_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00745 Instruction { source: "inline_RpnCalc_handle_stack_push_53_t15 <- inline_RpnCalc_handle_stack_push_53_t16 Add inline_RpnCalc_handle_stack_push_53_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x18), Register(0x14)], resolved: None }
30 14 18 14 
# 00749 Instruction { source: "inline_RpnCalc_handle_stack_push_53_t15 <- inline_RpnCalc_handle_stack_push_53_t16 Add inline_RpnCalc_handle_stack_push_53_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_53_t14 <- mem[inline_RpnCalc_handle_stack_push_53_t15] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 0074a Instruction { source: "inline_RpnCalc_handle_stack_push_53_t14 <- mem[inline_RpnCalc_handle_stack_push_53_t15] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x14), Register(0x14)], resolved: None }
22 14 14 
# inline_RpnCalc_handle_stack_push_53_t18 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 0074d Instruction { source: "inline_RpnCalc_handle_stack_push_53_t18 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000001=1)], resolved: None }
20 18 01 00 00 00 
# inline_RpnCalc_handle_stack_push_53_t13 <- inline_RpnCalc_handle_stack_push_53_t14 Add inline_RpnCalc_handle_stack_push_53_t18
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))"] }
# 00753 Instruction { source: "inline_RpnCalc_handle_stack_push_53_t13 <- inline_RpnCalc_handle_stack_push_53_t14 Add inline_RpnCalc_handle_stack_push_53_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00754 Instruction { source: "inline_RpnCalc_handle_stack_push_53_t13 <- inline_RpnCalc_handle_stack_push_53_t14 Add inline_RpnCalc_handle_stack_push_53_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x18), Register(0x14)], resolved: None }
30 14 18 14 
# 00758 Instruction { source: "inline_RpnCalc_handle_stack_push_53_t13 <- inline_RpnCalc_handle_stack_push_53_t14 Add inline_RpnCalc_handle_stack_push_53_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# mem[inline_RpnCalc_handle_stack_push_53_t10] <- inline_RpnCalc_handle_stack_push_53_t13 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }"] }
# 00759 Instruction { source: "mem[inline_RpnCalc_handle_stack_push_53_t10] <- inline_RpnCalc_handle_stack_push_53_t13 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_1, args: [Register(0x14), Register(0x10)], resolved: None }
23 14 10 
# 0075c Instruction { source: "mem[inline_RpnCalc_handle_stack_push_53_t10] <- inline_RpnCalc_handle_stack_push_53_t13 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto inline_RpnCalc_handle_stack_push_53_function_end_stack_push
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_push_53_function_end_stack_push\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_push_53_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_stack_push_53_function_end_stack_push
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_stack_push_53_function_end_stack_push
# goto RpnCalc_handle_if_end_23
# 	SourceContext { contexts: [] }
# 0075d Instruction { source: "goto RpnCalc_handle_if_end_23\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_23)], resolved: None }
70 74 0b 00 
# :RpnCalc_handle_if_else_3_31
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_3_31
# t79 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t79 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# t80 <- 0n115/0x73u8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }", "Number(U8, 115)", "Number(U8, 115)"] }
# 00761 Instruction { source: "t80 <- 0n115/0x73u8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }\", \"Number(U8, 115)\", \"Number(U8, 115)\"] }", opcode: LoadImm8, args: [Register(0x45), Constant8(0x73=115)], resolved: None }
04 45 73 
# if t79 == t80 then 'RpnCalc_handle_if_true_4_32' else 'RpnCalc_handle_if_else_4_33'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }"] }
# 00764 Instruction { source: "if t79 == t80 then 'RpnCalc_handle_if_true_4_32' else 'RpnCalc_handle_if_else_4_33'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }\"] }", opcode: Cmp8, args: [Register(0x1c), Register(0x45)], resolved: None }
15 1c 45 
# 00767 Instruction { source: "if t79 == t80 then 'RpnCalc_handle_if_true_4_32' else 'RpnCalc_handle_if_else_4_33'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_handle_if_true_4_32)], resolved: None }
72 6f 07 00 
# 0076b Instruction { source: "if t79 == t80 then 'RpnCalc_handle_if_true_4_32' else 'RpnCalc_handle_if_else_4_33'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_4_33)], resolved: None }
70 2e 08 00 
# :RpnCalc_handle_if_true_4_32
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_true_4_32
# t82 <- stack U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] })", "Ident(\"stack\")", "Ident(\"stack\")"] }
# 0076f Instruction { source: "t82 <- stack U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] })\", \"Ident(\\\"stack\\\")\", \"Ident(\\\"stack\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x18)], resolved: None }
21 40 18 
# t83 <- a U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t83 <- a U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_stack_push_54_s <- t82 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_54_s <- t82 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_RpnCalc_handle_stack_push_54_n <- t83 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_54_n <- t83 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_stack_push_54_t0 <- inline_RpnCalc_handle_stack_push_54_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_54_t0 <- inline_RpnCalc_handle_stack_push_54_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_RpnCalc_handle_stack_push_54_values <- inline_RpnCalc_handle_stack_push_54_t0 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# 00772 Instruction { source: "inline_RpnCalc_handle_stack_push_54_values <- inline_RpnCalc_handle_stack_push_54_t0 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0x18), Register(0x38)], resolved: None }
21 18 38 
# inline_RpnCalc_handle_stack_push_54_t2 <- inline_RpnCalc_handle_stack_push_54_values U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_54_t2 <- inline_RpnCalc_handle_stack_push_54_values U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_stack_push_54_t6 <- inline_RpnCalc_handle_stack_push_54_s U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_54_t6 <- inline_RpnCalc_handle_stack_push_54_s U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_RpnCalc_handle_stack_push_54_t7 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 00775 Instruction { source: "inline_RpnCalc_handle_stack_push_54_t7 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x20), Constant32(0x00000040=64)], resolved: None }
20 20 40 00 00 00 
# inline_RpnCalc_handle_stack_push_54_t5 <- inline_RpnCalc_handle_stack_push_54_t6 Add inline_RpnCalc_handle_stack_push_54_t7
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 0077b Instruction { source: "inline_RpnCalc_handle_stack_push_54_t5 <- inline_RpnCalc_handle_stack_push_54_t6 Add inline_RpnCalc_handle_stack_push_54_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0077c Instruction { source: "inline_RpnCalc_handle_stack_push_54_t5 <- inline_RpnCalc_handle_stack_push_54_t6 Add inline_RpnCalc_handle_stack_push_54_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x18), Register(0x20), Register(0x20)], resolved: None }
30 18 20 20 
# 00780 Instruction { source: "inline_RpnCalc_handle_stack_push_54_t5 <- inline_RpnCalc_handle_stack_push_54_t6 Add inline_RpnCalc_handle_stack_push_54_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_54_t4 <- mem[inline_RpnCalc_handle_stack_push_54_t5] U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 00781 Instruction { source: "inline_RpnCalc_handle_stack_push_54_t4 <- mem[inline_RpnCalc_handle_stack_push_54_t5] U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x20), Register(0x20)], resolved: None }
22 20 20 
# inline_RpnCalc_handle_stack_push_54_t3 <- inline_RpnCalc_handle_stack_push_54_t4 Add inline_RpnCalc_handle_stack_push_54_t4
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 00784 Instruction { source: "inline_RpnCalc_handle_stack_push_54_t3 <- inline_RpnCalc_handle_stack_push_54_t4 Add inline_RpnCalc_handle_stack_push_54_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00785 Instruction { source: "inline_RpnCalc_handle_stack_push_54_t3 <- inline_RpnCalc_handle_stack_push_54_t4 Add inline_RpnCalc_handle_stack_push_54_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_1, args: [Register(0x20), Register(0x20), Register(0x20)], resolved: None }
30 20 20 20 
# 00789 Instruction { source: "inline_RpnCalc_handle_stack_push_54_t3 <- inline_RpnCalc_handle_stack_push_54_t4 Add inline_RpnCalc_handle_stack_push_54_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_54_t3 <- inline_RpnCalc_handle_stack_push_54_t3 Add inline_RpnCalc_handle_stack_push_54_t3
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))"] }
# 0078a Instruction { source: "inline_RpnCalc_handle_stack_push_54_t3 <- inline_RpnCalc_handle_stack_push_54_t3 Add inline_RpnCalc_handle_stack_push_54_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0078b Instruction { source: "inline_RpnCalc_handle_stack_push_54_t3 <- inline_RpnCalc_handle_stack_push_54_t3 Add inline_RpnCalc_handle_stack_push_54_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x20), Register(0x20), Register(0x20)], resolved: None }
30 20 20 20 
# 0078f Instruction { source: "inline_RpnCalc_handle_stack_push_54_t3 <- inline_RpnCalc_handle_stack_push_54_t3 Add inline_RpnCalc_handle_stack_push_54_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_54_t1 <- inline_RpnCalc_handle_stack_push_54_t2 Add inline_RpnCalc_handle_stack_push_54_t3
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))"] }
# 00790 Instruction { source: "inline_RpnCalc_handle_stack_push_54_t1 <- inline_RpnCalc_handle_stack_push_54_t2 Add inline_RpnCalc_handle_stack_push_54_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00791 Instruction { source: "inline_RpnCalc_handle_stack_push_54_t1 <- inline_RpnCalc_handle_stack_push_54_t2 Add inline_RpnCalc_handle_stack_push_54_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_1, args: [Register(0x38), Register(0x20), Register(0x38)], resolved: None }
30 38 20 38 
# 00795 Instruction { source: "inline_RpnCalc_handle_stack_push_54_t1 <- inline_RpnCalc_handle_stack_push_54_t2 Add inline_RpnCalc_handle_stack_push_54_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_54_t9 <- inline_RpnCalc_handle_stack_push_54_n U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_54_t9 <- inline_RpnCalc_handle_stack_push_54_n U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# mem[inline_RpnCalc_handle_stack_push_54_t1] <- inline_RpnCalc_handle_stack_push_54_t9 U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }"] }
# 00796 Instruction { source: "mem[inline_RpnCalc_handle_stack_push_54_t1] <- inline_RpnCalc_handle_stack_push_54_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_1, args: [Register(0x10), Register(0x38)], resolved: None }
23 10 38 
# 00799 Instruction { source: "mem[inline_RpnCalc_handle_stack_push_54_t1] <- inline_RpnCalc_handle_stack_push_54_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_RpnCalc_handle_stack_push_54_t11 <- inline_RpnCalc_handle_stack_push_54_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# 0079a Instruction { source: "inline_RpnCalc_handle_stack_push_54_t11 <- inline_RpnCalc_handle_stack_push_54_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x10)], resolved: None }
21 18 10 
# inline_RpnCalc_handle_stack_push_54_t12 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 0079d Instruction { source: "inline_RpnCalc_handle_stack_push_54_t12 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x38), Constant32(0x00000040=64)], resolved: None }
20 38 40 00 00 00 
# inline_RpnCalc_handle_stack_push_54_t10 <- inline_RpnCalc_handle_stack_push_54_t11 Add inline_RpnCalc_handle_stack_push_54_t12
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 007a3 Instruction { source: "inline_RpnCalc_handle_stack_push_54_t10 <- inline_RpnCalc_handle_stack_push_54_t11 Add inline_RpnCalc_handle_stack_push_54_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 007a4 Instruction { source: "inline_RpnCalc_handle_stack_push_54_t10 <- inline_RpnCalc_handle_stack_push_54_t11 Add inline_RpnCalc_handle_stack_push_54_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x10), Register(0x38), Register(0x10)], resolved: None }
30 10 38 10 
# 007a8 Instruction { source: "inline_RpnCalc_handle_stack_push_54_t10 <- inline_RpnCalc_handle_stack_push_54_t11 Add inline_RpnCalc_handle_stack_push_54_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_54_t16 <- inline_RpnCalc_handle_stack_push_54_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_54_t16 <- inline_RpnCalc_handle_stack_push_54_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_RpnCalc_handle_stack_push_54_t17 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 007a9 Instruction { source: "inline_RpnCalc_handle_stack_push_54_t17 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x38), Constant32(0x00000040=64)], resolved: None }
20 38 40 00 00 00 
# inline_RpnCalc_handle_stack_push_54_t15 <- inline_RpnCalc_handle_stack_push_54_t16 Add inline_RpnCalc_handle_stack_push_54_t17
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 007af Instruction { source: "inline_RpnCalc_handle_stack_push_54_t15 <- inline_RpnCalc_handle_stack_push_54_t16 Add inline_RpnCalc_handle_stack_push_54_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 007b0 Instruction { source: "inline_RpnCalc_handle_stack_push_54_t15 <- inline_RpnCalc_handle_stack_push_54_t16 Add inline_RpnCalc_handle_stack_push_54_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x18), Register(0x38), Register(0x18)], resolved: None }
30 18 38 18 
# 007b4 Instruction { source: "inline_RpnCalc_handle_stack_push_54_t15 <- inline_RpnCalc_handle_stack_push_54_t16 Add inline_RpnCalc_handle_stack_push_54_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_54_t14 <- mem[inline_RpnCalc_handle_stack_push_54_t15] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 007b5 Instruction { source: "inline_RpnCalc_handle_stack_push_54_t14 <- mem[inline_RpnCalc_handle_stack_push_54_t15] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x18), Register(0x18)], resolved: None }
22 18 18 
# inline_RpnCalc_handle_stack_push_54_t18 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 007b8 Instruction { source: "inline_RpnCalc_handle_stack_push_54_t18 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x38), Constant32(0x00000001=1)], resolved: None }
20 38 01 00 00 00 
# inline_RpnCalc_handle_stack_push_54_t13 <- inline_RpnCalc_handle_stack_push_54_t14 Add inline_RpnCalc_handle_stack_push_54_t18
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))"] }
# 007be Instruction { source: "inline_RpnCalc_handle_stack_push_54_t13 <- inline_RpnCalc_handle_stack_push_54_t14 Add inline_RpnCalc_handle_stack_push_54_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 007bf Instruction { source: "inline_RpnCalc_handle_stack_push_54_t13 <- inline_RpnCalc_handle_stack_push_54_t14 Add inline_RpnCalc_handle_stack_push_54_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x18), Register(0x38), Register(0x18)], resolved: None }
30 18 38 18 
# 007c3 Instruction { source: "inline_RpnCalc_handle_stack_push_54_t13 <- inline_RpnCalc_handle_stack_push_54_t14 Add inline_RpnCalc_handle_stack_push_54_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# mem[inline_RpnCalc_handle_stack_push_54_t10] <- inline_RpnCalc_handle_stack_push_54_t13 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }"] }
# 007c4 Instruction { source: "mem[inline_RpnCalc_handle_stack_push_54_t10] <- inline_RpnCalc_handle_stack_push_54_t13 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_1, args: [Register(0x18), Register(0x10)], resolved: None }
23 18 10 
# 007c7 Instruction { source: "mem[inline_RpnCalc_handle_stack_push_54_t10] <- inline_RpnCalc_handle_stack_push_54_t13 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto inline_RpnCalc_handle_stack_push_54_function_end_stack_push
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_push_54_function_end_stack_push\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_push_54_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_stack_push_54_function_end_stack_push
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_stack_push_54_function_end_stack_push
# t85 <- stack U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] })", "Ident(\"stack\")", "Ident(\"stack\")"] }
# 007c8 Instruction { source: "t85 <- stack U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] })\", \"Ident(\\\"stack\\\")\", \"Ident(\\\"stack\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x10)], resolved: None }
21 40 10 
# t86 <- b U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# 007cb Instruction { source: "t86 <- b U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x18)], resolved: None }
21 14 18 
# inline_RpnCalc_handle_stack_push_55_s <- t85 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] })"] }
# 007ce Instruction { source: "inline_RpnCalc_handle_stack_push_55_s <- t85 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0x10), Register(0x14)], resolved: None }
21 10 14 
# inline_RpnCalc_handle_stack_push_55_n <- t86 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] })"] }
# 007d1 Instruction { source: "inline_RpnCalc_handle_stack_push_55_n <- t86 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0x18), Register(0x10)], resolved: None }
21 18 10 
# inline_RpnCalc_handle_stack_push_55_t0 <- inline_RpnCalc_handle_stack_push_55_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_55_t0 <- inline_RpnCalc_handle_stack_push_55_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_stack_push_55_values <- inline_RpnCalc_handle_stack_push_55_t0 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# 007d4 Instruction { source: "inline_RpnCalc_handle_stack_push_55_values <- inline_RpnCalc_handle_stack_push_55_t0 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0x14), Register(0x18)], resolved: None }
21 14 18 
# inline_RpnCalc_handle_stack_push_55_t2 <- inline_RpnCalc_handle_stack_push_55_values U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_55_t2 <- inline_RpnCalc_handle_stack_push_55_values U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_RpnCalc_handle_stack_push_55_t6 <- inline_RpnCalc_handle_stack_push_55_s U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_55_t6 <- inline_RpnCalc_handle_stack_push_55_s U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_stack_push_55_t7 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 007d7 Instruction { source: "inline_RpnCalc_handle_stack_push_55_t7 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x38), Constant32(0x00000040=64)], resolved: None }
20 38 40 00 00 00 
# inline_RpnCalc_handle_stack_push_55_t5 <- inline_RpnCalc_handle_stack_push_55_t6 Add inline_RpnCalc_handle_stack_push_55_t7
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 007dd Instruction { source: "inline_RpnCalc_handle_stack_push_55_t5 <- inline_RpnCalc_handle_stack_push_55_t6 Add inline_RpnCalc_handle_stack_push_55_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 007de Instruction { source: "inline_RpnCalc_handle_stack_push_55_t5 <- inline_RpnCalc_handle_stack_push_55_t6 Add inline_RpnCalc_handle_stack_push_55_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x38), Register(0x38)], resolved: None }
30 14 38 38 
# 007e2 Instruction { source: "inline_RpnCalc_handle_stack_push_55_t5 <- inline_RpnCalc_handle_stack_push_55_t6 Add inline_RpnCalc_handle_stack_push_55_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_55_t4 <- mem[inline_RpnCalc_handle_stack_push_55_t5] U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 007e3 Instruction { source: "inline_RpnCalc_handle_stack_push_55_t4 <- mem[inline_RpnCalc_handle_stack_push_55_t5] U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x38), Register(0x38)], resolved: None }
22 38 38 
# inline_RpnCalc_handle_stack_push_55_t3 <- inline_RpnCalc_handle_stack_push_55_t4 Add inline_RpnCalc_handle_stack_push_55_t4
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 007e6 Instruction { source: "inline_RpnCalc_handle_stack_push_55_t3 <- inline_RpnCalc_handle_stack_push_55_t4 Add inline_RpnCalc_handle_stack_push_55_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 007e7 Instruction { source: "inline_RpnCalc_handle_stack_push_55_t3 <- inline_RpnCalc_handle_stack_push_55_t4 Add inline_RpnCalc_handle_stack_push_55_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_1, args: [Register(0x38), Register(0x38), Register(0x38)], resolved: None }
30 38 38 38 
# 007eb Instruction { source: "inline_RpnCalc_handle_stack_push_55_t3 <- inline_RpnCalc_handle_stack_push_55_t4 Add inline_RpnCalc_handle_stack_push_55_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_55_t3 <- inline_RpnCalc_handle_stack_push_55_t3 Add inline_RpnCalc_handle_stack_push_55_t3
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))"] }
# 007ec Instruction { source: "inline_RpnCalc_handle_stack_push_55_t3 <- inline_RpnCalc_handle_stack_push_55_t3 Add inline_RpnCalc_handle_stack_push_55_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 007ed Instruction { source: "inline_RpnCalc_handle_stack_push_55_t3 <- inline_RpnCalc_handle_stack_push_55_t3 Add inline_RpnCalc_handle_stack_push_55_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x38), Register(0x38), Register(0x38)], resolved: None }
30 38 38 38 
# 007f1 Instruction { source: "inline_RpnCalc_handle_stack_push_55_t3 <- inline_RpnCalc_handle_stack_push_55_t3 Add inline_RpnCalc_handle_stack_push_55_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_55_t1 <- inline_RpnCalc_handle_stack_push_55_t2 Add inline_RpnCalc_handle_stack_push_55_t3
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))"] }
# 007f2 Instruction { source: "inline_RpnCalc_handle_stack_push_55_t1 <- inline_RpnCalc_handle_stack_push_55_t2 Add inline_RpnCalc_handle_stack_push_55_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 007f3 Instruction { source: "inline_RpnCalc_handle_stack_push_55_t1 <- inline_RpnCalc_handle_stack_push_55_t2 Add inline_RpnCalc_handle_stack_push_55_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_1, args: [Register(0x18), Register(0x38), Register(0x18)], resolved: None }
30 18 38 18 
# 007f7 Instruction { source: "inline_RpnCalc_handle_stack_push_55_t1 <- inline_RpnCalc_handle_stack_push_55_t2 Add inline_RpnCalc_handle_stack_push_55_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_55_t9 <- inline_RpnCalc_handle_stack_push_55_n U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_55_t9 <- inline_RpnCalc_handle_stack_push_55_n U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# mem[inline_RpnCalc_handle_stack_push_55_t1] <- inline_RpnCalc_handle_stack_push_55_t9 U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }"] }
# 007f8 Instruction { source: "mem[inline_RpnCalc_handle_stack_push_55_t1] <- inline_RpnCalc_handle_stack_push_55_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_1, args: [Register(0x10), Register(0x18)], resolved: None }
23 10 18 
# 007fb Instruction { source: "mem[inline_RpnCalc_handle_stack_push_55_t1] <- inline_RpnCalc_handle_stack_push_55_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_RpnCalc_handle_stack_push_55_t11 <- inline_RpnCalc_handle_stack_push_55_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# 007fc Instruction { source: "inline_RpnCalc_handle_stack_push_55_t11 <- inline_RpnCalc_handle_stack_push_55_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x10)], resolved: None }
21 14 10 
# inline_RpnCalc_handle_stack_push_55_t12 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 007ff Instruction { source: "inline_RpnCalc_handle_stack_push_55_t12 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000040=64)], resolved: None }
20 18 40 00 00 00 
# inline_RpnCalc_handle_stack_push_55_t10 <- inline_RpnCalc_handle_stack_push_55_t11 Add inline_RpnCalc_handle_stack_push_55_t12
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 00805 Instruction { source: "inline_RpnCalc_handle_stack_push_55_t10 <- inline_RpnCalc_handle_stack_push_55_t11 Add inline_RpnCalc_handle_stack_push_55_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00806 Instruction { source: "inline_RpnCalc_handle_stack_push_55_t10 <- inline_RpnCalc_handle_stack_push_55_t11 Add inline_RpnCalc_handle_stack_push_55_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x10), Register(0x18), Register(0x10)], resolved: None }
30 10 18 10 
# 0080a Instruction { source: "inline_RpnCalc_handle_stack_push_55_t10 <- inline_RpnCalc_handle_stack_push_55_t11 Add inline_RpnCalc_handle_stack_push_55_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_55_t16 <- inline_RpnCalc_handle_stack_push_55_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_55_t16 <- inline_RpnCalc_handle_stack_push_55_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_stack_push_55_t17 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 0080b Instruction { source: "inline_RpnCalc_handle_stack_push_55_t17 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000040=64)], resolved: None }
20 18 40 00 00 00 
# inline_RpnCalc_handle_stack_push_55_t15 <- inline_RpnCalc_handle_stack_push_55_t16 Add inline_RpnCalc_handle_stack_push_55_t17
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 00811 Instruction { source: "inline_RpnCalc_handle_stack_push_55_t15 <- inline_RpnCalc_handle_stack_push_55_t16 Add inline_RpnCalc_handle_stack_push_55_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00812 Instruction { source: "inline_RpnCalc_handle_stack_push_55_t15 <- inline_RpnCalc_handle_stack_push_55_t16 Add inline_RpnCalc_handle_stack_push_55_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x18), Register(0x14)], resolved: None }
30 14 18 14 
# 00816 Instruction { source: "inline_RpnCalc_handle_stack_push_55_t15 <- inline_RpnCalc_handle_stack_push_55_t16 Add inline_RpnCalc_handle_stack_push_55_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_55_t14 <- mem[inline_RpnCalc_handle_stack_push_55_t15] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 00817 Instruction { source: "inline_RpnCalc_handle_stack_push_55_t14 <- mem[inline_RpnCalc_handle_stack_push_55_t15] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x14), Register(0x14)], resolved: None }
22 14 14 
# inline_RpnCalc_handle_stack_push_55_t18 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 0081a Instruction { source: "inline_RpnCalc_handle_stack_push_55_t18 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000001=1)], resolved: None }
20 18 01 00 00 00 
# inline_RpnCalc_handle_stack_push_55_t13 <- inline_RpnCalc_handle_stack_push_55_t14 Add inline_RpnCalc_handle_stack_push_55_t18
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))"] }
# 00820 Instruction { source: "inline_RpnCalc_handle_stack_push_55_t13 <- inline_RpnCalc_handle_stack_push_55_t14 Add inline_RpnCalc_handle_stack_push_55_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00821 Instruction { source: "inline_RpnCalc_handle_stack_push_55_t13 <- inline_RpnCalc_handle_stack_push_55_t14 Add inline_RpnCalc_handle_stack_push_55_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x18), Register(0x14)], resolved: None }
30 14 18 14 
# 00825 Instruction { source: "inline_RpnCalc_handle_stack_push_55_t13 <- inline_RpnCalc_handle_stack_push_55_t14 Add inline_RpnCalc_handle_stack_push_55_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# mem[inline_RpnCalc_handle_stack_push_55_t10] <- inline_RpnCalc_handle_stack_push_55_t13 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }"] }
# 00826 Instruction { source: "mem[inline_RpnCalc_handle_stack_push_55_t10] <- inline_RpnCalc_handle_stack_push_55_t13 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_1, args: [Register(0x14), Register(0x10)], resolved: None }
23 14 10 
# 00829 Instruction { source: "mem[inline_RpnCalc_handle_stack_push_55_t10] <- inline_RpnCalc_handle_stack_push_55_t13 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto inline_RpnCalc_handle_stack_push_55_function_end_stack_push
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_push_55_function_end_stack_push\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_push_55_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_stack_push_55_function_end_stack_push
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_stack_push_55_function_end_stack_push
# goto RpnCalc_handle_if_end_23
# 	SourceContext { contexts: [] }
# 0082a Instruction { source: "goto RpnCalc_handle_if_end_23\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_23)], resolved: None }
70 74 0b 00 
# :RpnCalc_handle_if_else_4_33
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_4_33
# t87 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# 0082e Instruction { source: "t87 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1d)], resolved: None }
0b 1c 1d 
# t88 <- 0n113/0x71u8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }", "Number(U8, 113)", "Number(U8, 113)"] }
# 00831 Instruction { source: "t88 <- 0n113/0x71u8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }\", \"Number(U8, 113)\", \"Number(U8, 113)\"] }", opcode: LoadImm8, args: [Register(0x3c), Constant8(0x71=113)], resolved: None }
04 3c 71 
# if t87 == t88 then 'RpnCalc_handle_if_true_5_34' else 'RpnCalc_handle_if_else_5_35'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }"] }
# 00834 Instruction { source: "if t87 == t88 then 'RpnCalc_handle_if_true_5_34' else 'RpnCalc_handle_if_else_5_35'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }\"] }", opcode: Cmp8, args: [Register(0x1d), Register(0x3c)], resolved: None }
15 1d 3c 
# 00837 Instruction { source: "if t87 == t88 then 'RpnCalc_handle_if_true_5_34' else 'RpnCalc_handle_if_else_5_35'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_handle_if_true_5_34)], resolved: None }
72 3f 08 00 
# 0083b Instruction { source: "if t87 == t88 then 'RpnCalc_handle_if_true_5_34' else 'RpnCalc_handle_if_else_5_35'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_5_35)], resolved: None }
70 4b 08 00 
# :RpnCalc_handle_if_true_5_34
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_true_5_34
# t89 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0083f Instruction { source: "t89 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x1d), Constant8(0x00=0)], resolved: None }
04 1d 00 
# return Some(t89)
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }"] }
# 00842 Instruction { source: "return Some(t89)\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x00)], resolved: None }
0b 1d 00 
# 00845 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# goto RpnCalc_handle_if_end_23
# 	SourceContext { contexts: [] }
# 00847 Instruction { source: "goto RpnCalc_handle_if_end_23\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_23)], resolved: None }
70 74 0b 00 
# :RpnCalc_handle_if_else_5_35
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_5_35
# t90 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# 0084b Instruction { source: "t90 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1d)], resolved: None }
0b 1c 1d 
# t91 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 0084e Instruction { source: "t91 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x3c), Constant8(0x0a=10)], resolved: None }
04 3c 0a 
# if t90 == t91 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }"] }
# 00851 Instruction { source: "if t90 == t91 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\"] }", opcode: Cmp8, args: [Register(0x1d), Register(0x3c)], resolved: None }
15 1d 3c 
# 00854 Instruction { source: "if t90 == t91 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_handle_if_true_6_36)], resolved: None }
72 5c 08 00 
# 00858 Instruction { source: "if t90 == t91 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_6_37)], resolved: None }
70 10 09 00 
# :RpnCalc_handle_if_true_6_36
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_true_6_36
# t93 <- c U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# 0085c Instruction { source: "t93 <- c U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x10)], resolved: None }
21 18 10 
# inline_RpnCalc_handle_RpnCalc_push_pending_58_c <- t93 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_c <- t93 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_58_t2 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_c U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }", "PtrFieldDeref(\"c\", \"have_num\")", "PtrFieldDeref(\"c\", \"have_num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_t2 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_c U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_58_t3 <- 0n72/0x00000048u32 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }", "PtrFieldDeref(\"c\", \"have_num\")", "PtrFieldDeref(\"c\", \"have_num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))", "Number(USIZE, 72)", "Number(USIZE, 72)"] }
# 0085f Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_t3 <- 0n72/0x00000048u32 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\", \"Number(USIZE, 72)\", \"Number(USIZE, 72)\"] }", opcode: LoadImm32, args: [Register(0x14), Constant32(0x00000048=72)], resolved: None }
20 14 48 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_58_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_58_t3
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }", "PtrFieldDeref(\"c\", \"have_num\")", "PtrFieldDeref(\"c\", \"have_num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))"] }
# 00865 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_58_t3\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00866 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_58_t3\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: AddCarry32_1, args: [Register(0x10), Register(0x14), Register(0x14)], resolved: None }
30 10 14 14 
# 0086a Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_58_t3\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_58_t0 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_58_t1] U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }", "PtrFieldDeref(\"c\", \"have_num\")", "PtrFieldDeref(\"c\", \"have_num\")"] }
# 0086b Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_t0 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_58_t1] U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\"] }", opcode: Load8, args: [Register(0x14), Register(0x3c)], resolved: None }
05 14 3c 
# inline_RpnCalc_handle_RpnCalc_push_pending_58_t4 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0086e Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_t4 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x3d), Constant8(0x00=0)], resolved: None }
04 3d 00 
# if inline_RpnCalc_handle_RpnCalc_push_pending_58_t0 != inline_RpnCalc_handle_RpnCalc_push_pending_58_t4 then 'inline_RpnCalc_handle_RpnCalc_push_pending_58_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_58_RpnCalc_push_pending_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }"] }
# 00871 Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_58_t0 != inline_RpnCalc_handle_RpnCalc_push_pending_58_t4 then 'inline_RpnCalc_handle_RpnCalc_push_pending_58_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_58_RpnCalc_push_pending_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x3c), Register(0x3d)], resolved: None }
15 3c 3d 
# 00874 Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_58_t0 != inline_RpnCalc_handle_RpnCalc_push_pending_58_t4 then 'inline_RpnCalc_handle_RpnCalc_push_pending_58_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_58_RpnCalc_push_pending_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_58_RpnCalc_push_pending_if_else_0_2)], resolved: None }
72 0c 09 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_58_t0 != inline_RpnCalc_handle_RpnCalc_push_pending_58_t4 then 'inline_RpnCalc_handle_RpnCalc_push_pending_58_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_58_RpnCalc_push_pending_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_58_RpnCalc_push_pending_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_58_RpnCalc_push_pending_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }"] }
# inline_RpnCalc_handle_RpnCalc_push_pending_58_RpnCalc_push_pending_if_true_0_1
# inline_RpnCalc_handle_RpnCalc_push_pending_58_t7 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_c U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_t7 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_c U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Stack\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Stack\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_58_t6 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_t7 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))"] }
# 00878 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_t6 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_t7 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\"] }", opcode: Copy32, args: [Register(0x10), Register(0x18)], resolved: None }
21 10 18 
# inline_RpnCalc_handle_RpnCalc_push_pending_58_t10 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_c U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_t10 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_c U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_58_t11 <- 0n68/0x00000044u32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Number(USIZE, 68)", "Number(USIZE, 68)"] }
# 0087b Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_t11 <- 0n68/0x00000044u32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Number(USIZE, 68)\", \"Number(USIZE, 68)\"] }", opcode: LoadImm32, args: [Register(0x14), Constant32(0x00000044=68)], resolved: None }
20 14 44 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_58_t9 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_t10 Add inline_RpnCalc_handle_RpnCalc_push_pending_58_t11
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))"] }
# 00881 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_t9 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_t10 Add inline_RpnCalc_handle_RpnCalc_push_pending_58_t11\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00882 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_t9 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_t10 Add inline_RpnCalc_handle_RpnCalc_push_pending_58_t11\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_1, args: [Register(0x10), Register(0x14), Register(0x14)], resolved: None }
30 10 14 14 
# 00886 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_t9 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_t10 Add inline_RpnCalc_handle_RpnCalc_push_pending_58_t11\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_58_t8 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_58_t9] U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")"] }
# 00887 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_t8 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_58_t9] U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\"] }", opcode: Load32, args: [Register(0x14), Register(0x14)], resolved: None }
22 14 14 
# inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_s <- inline_RpnCalc_handle_RpnCalc_push_pending_58_t6 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_s <- inline_RpnCalc_handle_RpnCalc_push_pending_58_t6 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_n <- inline_RpnCalc_handle_RpnCalc_push_pending_58_t8 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_n <- inline_RpnCalc_handle_RpnCalc_push_pending_58_t8 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t0 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t0 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_values <- inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t0 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# 0088a Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_values <- inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t0 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0x18), Register(0x38)], resolved: None }
21 18 38 
# inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t2 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_values U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t2 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_values U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t6 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_s U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t6 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_s U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t7 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 0088d Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t7 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x20), Constant32(0x00000040=64)], resolved: None }
20 20 40 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t5 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t6 Add inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t7
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 00893 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t5 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t6 Add inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00894 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t5 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t6 Add inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x18), Register(0x20), Register(0x20)], resolved: None }
30 18 20 20 
# 00898 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t5 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t6 Add inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t4 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t5] U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 00899 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t4 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t5] U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x20), Register(0x20)], resolved: None }
22 20 20 
# inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t4 Add inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t4
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 0089c Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t4 Add inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0089d Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t4 Add inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_1, args: [Register(0x20), Register(0x20), Register(0x20)], resolved: None }
30 20 20 20 
# 008a1 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t4 Add inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t3 Add inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t3
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))"] }
# 008a2 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t3 Add inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 008a3 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t3 Add inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x20), Register(0x20), Register(0x20)], resolved: None }
30 20 20 20 
# 008a7 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t3 Add inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t3
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))"] }
# 008a8 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 008a9 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_1, args: [Register(0x38), Register(0x20), Register(0x38)], resolved: None }
30 38 20 38 
# 008ad Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t9 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_n U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t9 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_n U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t1] <- inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t9 U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }"] }
# 008ae Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t1] <- inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_1, args: [Register(0x14), Register(0x38)], resolved: None }
23 14 38 
# 008b1 Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t1] <- inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t11 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# 008b2 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t11 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x14)], resolved: None }
21 18 14 
# inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t12 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 008b5 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t12 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x38), Constant32(0x00000040=64)], resolved: None }
20 38 40 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t10 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t11 Add inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t12
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 008bb Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t10 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t11 Add inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 008bc Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t10 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t11 Add inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x38), Register(0x14)], resolved: None }
30 14 38 14 
# 008c0 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t10 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t11 Add inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t16 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t16 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t17 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 008c1 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t17 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x38), Constant32(0x00000040=64)], resolved: None }
20 38 40 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t15 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t16 Add inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t17
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 008c7 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t15 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t16 Add inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 008c8 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t15 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t16 Add inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x18), Register(0x38), Register(0x18)], resolved: None }
30 18 38 18 
# 008cc Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t15 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t16 Add inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t14 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t15] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 008cd Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t14 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t15] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x18), Register(0x18)], resolved: None }
22 18 18 
# inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t18 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 008d0 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t18 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x38), Constant32(0x00000001=1)], resolved: None }
20 38 01 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t13 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t14 Add inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t18
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))"] }
# 008d6 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t13 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t14 Add inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 008d7 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t13 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t14 Add inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x18), Register(0x38), Register(0x18)], resolved: None }
30 18 38 18 
# 008db Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t13 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t14 Add inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t10] <- inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t13 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }"] }
# 008dc Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t10] <- inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t13 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_1, args: [Register(0x18), Register(0x14)], resolved: None }
23 18 14 
# 008df Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t10] <- inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_t13 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_function_end_stack_push
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_function_end_stack_push\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_function_end_stack_push
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_58_inline_RpnCalc_push_pending_stack_push_56_function_end_stack_push
# inline_RpnCalc_handle_RpnCalc_push_pending_58_t13 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_t13 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_58_t14 <- 0n68/0x00000044u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Number(USIZE, 68)", "Number(USIZE, 68)"] }
# 008e0 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_t14 <- 0n68/0x00000044u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Number(USIZE, 68)\", \"Number(USIZE, 68)\"] }", opcode: LoadImm32, args: [Register(0x14), Constant32(0x00000044=68)], resolved: None }
20 14 44 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_58_t12 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_t13 Add inline_RpnCalc_handle_RpnCalc_push_pending_58_t14
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))"] }
# 008e6 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_t12 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_t13 Add inline_RpnCalc_handle_RpnCalc_push_pending_58_t14\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 008e7 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_t12 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_t13 Add inline_RpnCalc_handle_RpnCalc_push_pending_58_t14\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_1, args: [Register(0x10), Register(0x14), Register(0x14)], resolved: None }
30 10 14 14 
# 008eb Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_t12 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_t13 Add inline_RpnCalc_handle_RpnCalc_push_pending_58_t14\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_58_t15 <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 008ec Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_t15 <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000000=0)], resolved: None }
20 18 00 00 00 00 
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_58_t12] <- inline_RpnCalc_handle_RpnCalc_push_pending_58_t15 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }"] }
# 008f2 Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_58_t12] <- inline_RpnCalc_handle_RpnCalc_push_pending_58_t15 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\"] }", opcode: Store32_1, args: [Register(0x18), Register(0x14)], resolved: None }
23 18 14 
# 008f5 Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_58_t12] <- inline_RpnCalc_handle_RpnCalc_push_pending_58_t15 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_RpnCalc_handle_RpnCalc_push_pending_58_t17 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_t17 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_58_t18 <- 0n72/0x00000048u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))", "Number(USIZE, 72)", "Number(USIZE, 72)"] }
# 008f6 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_t18 <- 0n72/0x00000048u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\", \"Number(USIZE, 72)\", \"Number(USIZE, 72)\"] }", opcode: LoadImm32, args: [Register(0x14), Constant32(0x00000048=72)], resolved: None }
20 14 48 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_58_t16 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_t17 Add inline_RpnCalc_handle_RpnCalc_push_pending_58_t18
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))"] }
# 008fc Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_t16 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_t17 Add inline_RpnCalc_handle_RpnCalc_push_pending_58_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 008fd Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_t16 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_t17 Add inline_RpnCalc_handle_RpnCalc_push_pending_58_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: AddCarry32_1, args: [Register(0x10), Register(0x14), Register(0x10)], resolved: None }
30 10 14 10 
# 00901 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_t16 <- inline_RpnCalc_handle_RpnCalc_push_pending_58_t17 Add inline_RpnCalc_handle_RpnCalc_push_pending_58_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_58_t19 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00902 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_58_t19 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x3c), Constant8(0x00=0)], resolved: None }
04 3c 00 
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_58_t16] <- inline_RpnCalc_handle_RpnCalc_push_pending_58_t19 U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }"] }
# 00905 Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_58_t16] <- inline_RpnCalc_handle_RpnCalc_push_pending_58_t19 U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\"] }", opcode: Store8, args: [Register(0x3c), Register(0x10)], resolved: None }
06 3c 10 
# goto inline_RpnCalc_handle_RpnCalc_push_pending_58_RpnCalc_push_pending_if_end_0
# 	SourceContext { contexts: [] }
# 00908 Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_58_RpnCalc_push_pending_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_58_RpnCalc_push_pending_if_end_0)], resolved: None }
70 0c 09 00 
# :inline_RpnCalc_handle_RpnCalc_push_pending_58_RpnCalc_push_pending_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_58_RpnCalc_push_pending_if_else_0_2
# :inline_RpnCalc_handle_RpnCalc_push_pending_58_RpnCalc_push_pending_if_end_0
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_58_RpnCalc_push_pending_if_end_0
# goto inline_RpnCalc_handle_RpnCalc_push_pending_58_function_end_RpnCalc_push_pending
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_58_function_end_RpnCalc_push_pending\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_58_function_end_RpnCalc_push_pending)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_58_function_end_RpnCalc_push_pending
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_58_function_end_RpnCalc_push_pending
# goto RpnCalc_handle_if_end_23
# 	SourceContext { contexts: [] }
# 0090c Instruction { source: "goto RpnCalc_handle_if_end_23\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_23)], resolved: None }
70 74 0b 00 
# :RpnCalc_handle_if_else_6_37
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_6_37
# t94 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 32) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# 00910 Instruction { source: "t94 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 32) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1d)], resolved: None }
0b 1c 1d 
# t95 <- 0n32/0x20u8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 32) }", "Number(U8, 32)", "Number(U8, 32)"] }
# 00913 Instruction { source: "t95 <- 0n32/0x20u8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 32) }\", \"Number(U8, 32)\", \"Number(U8, 32)\"] }", opcode: LoadImm8, args: [Register(0x3c), Constant8(0x20=32)], resolved: None }
04 3c 20 
# if t94 == t95 then 'RpnCalc_handle_if_true_7_38' else 'RpnCalc_handle_if_else_7_39'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 32) }"] }
# 00916 Instruction { source: "if t94 == t95 then 'RpnCalc_handle_if_true_7_38' else 'RpnCalc_handle_if_else_7_39'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 32) }\"] }", opcode: Cmp8, args: [Register(0x1d), Register(0x3c)], resolved: None }
15 1d 3c 
# 00919 Instruction { source: "if t94 == t95 then 'RpnCalc_handle_if_true_7_38' else 'RpnCalc_handle_if_else_7_39'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 32) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_handle_if_true_7_38)], resolved: None }
72 21 09 00 
# 0091d Instruction { source: "if t94 == t95 then 'RpnCalc_handle_if_true_7_38' else 'RpnCalc_handle_if_else_7_39'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 32) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_7_39)], resolved: None }
70 d5 09 00 
# :RpnCalc_handle_if_true_7_38
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_true_7_38
# t97 <- c U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# 00921 Instruction { source: "t97 <- c U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x10)], resolved: None }
21 18 10 
# inline_RpnCalc_handle_RpnCalc_push_pending_59_c <- t97 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_c <- t97 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_59_t2 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_c U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }", "PtrFieldDeref(\"c\", \"have_num\")", "PtrFieldDeref(\"c\", \"have_num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_t2 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_c U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_59_t3 <- 0n72/0x00000048u32 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }", "PtrFieldDeref(\"c\", \"have_num\")", "PtrFieldDeref(\"c\", \"have_num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))", "Number(USIZE, 72)", "Number(USIZE, 72)"] }
# 00924 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_t3 <- 0n72/0x00000048u32 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\", \"Number(USIZE, 72)\", \"Number(USIZE, 72)\"] }", opcode: LoadImm32, args: [Register(0x14), Constant32(0x00000048=72)], resolved: None }
20 14 48 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_59_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_59_t3
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }", "PtrFieldDeref(\"c\", \"have_num\")", "PtrFieldDeref(\"c\", \"have_num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))"] }
# 0092a Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_59_t3\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0092b Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_59_t3\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: AddCarry32_1, args: [Register(0x10), Register(0x14), Register(0x14)], resolved: None }
30 10 14 14 
# 0092f Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_59_t3\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_59_t0 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_59_t1] U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }", "PtrFieldDeref(\"c\", \"have_num\")", "PtrFieldDeref(\"c\", \"have_num\")"] }
# 00930 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_t0 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_59_t1] U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\"] }", opcode: Load8, args: [Register(0x14), Register(0x3c)], resolved: None }
05 14 3c 
# inline_RpnCalc_handle_RpnCalc_push_pending_59_t4 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00933 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_t4 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x3d), Constant8(0x00=0)], resolved: None }
04 3d 00 
# if inline_RpnCalc_handle_RpnCalc_push_pending_59_t0 != inline_RpnCalc_handle_RpnCalc_push_pending_59_t4 then 'inline_RpnCalc_handle_RpnCalc_push_pending_59_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_59_RpnCalc_push_pending_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }"] }
# 00936 Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_59_t0 != inline_RpnCalc_handle_RpnCalc_push_pending_59_t4 then 'inline_RpnCalc_handle_RpnCalc_push_pending_59_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_59_RpnCalc_push_pending_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x3c), Register(0x3d)], resolved: None }
15 3c 3d 
# 00939 Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_59_t0 != inline_RpnCalc_handle_RpnCalc_push_pending_59_t4 then 'inline_RpnCalc_handle_RpnCalc_push_pending_59_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_59_RpnCalc_push_pending_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_59_RpnCalc_push_pending_if_else_0_2)], resolved: None }
72 d1 09 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_59_t0 != inline_RpnCalc_handle_RpnCalc_push_pending_59_t4 then 'inline_RpnCalc_handle_RpnCalc_push_pending_59_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_59_RpnCalc_push_pending_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_59_RpnCalc_push_pending_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_59_RpnCalc_push_pending_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }"] }
# inline_RpnCalc_handle_RpnCalc_push_pending_59_RpnCalc_push_pending_if_true_0_1
# inline_RpnCalc_handle_RpnCalc_push_pending_59_t7 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_c U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_t7 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_c U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Stack\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Stack\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_59_t6 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_t7 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))"] }
# 0093d Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_t6 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_t7 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\"] }", opcode: Copy32, args: [Register(0x10), Register(0x18)], resolved: None }
21 10 18 
# inline_RpnCalc_handle_RpnCalc_push_pending_59_t10 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_c U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_t10 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_c U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_59_t11 <- 0n68/0x00000044u32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Number(USIZE, 68)", "Number(USIZE, 68)"] }
# 00940 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_t11 <- 0n68/0x00000044u32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Number(USIZE, 68)\", \"Number(USIZE, 68)\"] }", opcode: LoadImm32, args: [Register(0x14), Constant32(0x00000044=68)], resolved: None }
20 14 44 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_59_t9 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_t10 Add inline_RpnCalc_handle_RpnCalc_push_pending_59_t11
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))"] }
# 00946 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_t9 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_t10 Add inline_RpnCalc_handle_RpnCalc_push_pending_59_t11\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00947 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_t9 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_t10 Add inline_RpnCalc_handle_RpnCalc_push_pending_59_t11\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_1, args: [Register(0x10), Register(0x14), Register(0x14)], resolved: None }
30 10 14 14 
# 0094b Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_t9 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_t10 Add inline_RpnCalc_handle_RpnCalc_push_pending_59_t11\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_59_t8 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_59_t9] U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")"] }
# 0094c Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_t8 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_59_t9] U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\"] }", opcode: Load32, args: [Register(0x14), Register(0x14)], resolved: None }
22 14 14 
# inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_s <- inline_RpnCalc_handle_RpnCalc_push_pending_59_t6 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_s <- inline_RpnCalc_handle_RpnCalc_push_pending_59_t6 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_n <- inline_RpnCalc_handle_RpnCalc_push_pending_59_t8 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_n <- inline_RpnCalc_handle_RpnCalc_push_pending_59_t8 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t0 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t0 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_values <- inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t0 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# 0094f Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_values <- inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t0 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0x18), Register(0x38)], resolved: None }
21 18 38 
# inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t2 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_values U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t2 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_values U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t6 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_s U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t6 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_s U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t7 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 00952 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t7 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x20), Constant32(0x00000040=64)], resolved: None }
20 20 40 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t5 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t6 Add inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t7
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 00958 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t5 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t6 Add inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00959 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t5 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t6 Add inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x18), Register(0x20), Register(0x20)], resolved: None }
30 18 20 20 
# 0095d Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t5 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t6 Add inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t4 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t5] U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 0095e Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t4 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t5] U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x20), Register(0x20)], resolved: None }
22 20 20 
# inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t4 Add inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t4
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 00961 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t4 Add inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00962 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t4 Add inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_1, args: [Register(0x20), Register(0x20), Register(0x20)], resolved: None }
30 20 20 20 
# 00966 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t4 Add inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t3 Add inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t3
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))"] }
# 00967 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t3 Add inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00968 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t3 Add inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x20), Register(0x20), Register(0x20)], resolved: None }
30 20 20 20 
# 0096c Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t3 Add inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t3
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))"] }
# 0096d Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0096e Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_1, args: [Register(0x38), Register(0x20), Register(0x38)], resolved: None }
30 38 20 38 
# 00972 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t9 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_n U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t9 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_n U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t1] <- inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t9 U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }"] }
# 00973 Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t1] <- inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_1, args: [Register(0x14), Register(0x38)], resolved: None }
23 14 38 
# 00976 Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t1] <- inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t11 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# 00977 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t11 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x14)], resolved: None }
21 18 14 
# inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t12 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 0097a Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t12 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x38), Constant32(0x00000040=64)], resolved: None }
20 38 40 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t10 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t11 Add inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t12
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 00980 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t10 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t11 Add inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00981 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t10 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t11 Add inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x38), Register(0x14)], resolved: None }
30 14 38 14 
# 00985 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t10 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t11 Add inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t16 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t16 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t17 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 00986 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t17 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x38), Constant32(0x00000040=64)], resolved: None }
20 38 40 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t15 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t16 Add inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t17
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 0098c Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t15 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t16 Add inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0098d Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t15 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t16 Add inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x18), Register(0x38), Register(0x18)], resolved: None }
30 18 38 18 
# 00991 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t15 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t16 Add inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t14 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t15] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 00992 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t14 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t15] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x18), Register(0x18)], resolved: None }
22 18 18 
# inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t18 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 00995 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t18 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x38), Constant32(0x00000001=1)], resolved: None }
20 38 01 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t13 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t14 Add inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t18
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))"] }
# 0099b Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t13 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t14 Add inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0099c Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t13 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t14 Add inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x18), Register(0x38), Register(0x18)], resolved: None }
30 18 38 18 
# 009a0 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t13 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t14 Add inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t10] <- inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t13 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }"] }
# 009a1 Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t10] <- inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t13 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_1, args: [Register(0x18), Register(0x14)], resolved: None }
23 18 14 
# 009a4 Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t10] <- inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_t13 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_function_end_stack_push
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_function_end_stack_push\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_function_end_stack_push
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_59_inline_RpnCalc_push_pending_stack_push_56_function_end_stack_push
# inline_RpnCalc_handle_RpnCalc_push_pending_59_t13 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_t13 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_59_t14 <- 0n68/0x00000044u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Number(USIZE, 68)", "Number(USIZE, 68)"] }
# 009a5 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_t14 <- 0n68/0x00000044u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Number(USIZE, 68)\", \"Number(USIZE, 68)\"] }", opcode: LoadImm32, args: [Register(0x14), Constant32(0x00000044=68)], resolved: None }
20 14 44 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_59_t12 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_t13 Add inline_RpnCalc_handle_RpnCalc_push_pending_59_t14
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))"] }
# 009ab Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_t12 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_t13 Add inline_RpnCalc_handle_RpnCalc_push_pending_59_t14\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 009ac Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_t12 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_t13 Add inline_RpnCalc_handle_RpnCalc_push_pending_59_t14\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_1, args: [Register(0x10), Register(0x14), Register(0x14)], resolved: None }
30 10 14 14 
# 009b0 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_t12 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_t13 Add inline_RpnCalc_handle_RpnCalc_push_pending_59_t14\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_59_t15 <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 009b1 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_t15 <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000000=0)], resolved: None }
20 18 00 00 00 00 
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_59_t12] <- inline_RpnCalc_handle_RpnCalc_push_pending_59_t15 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }"] }
# 009b7 Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_59_t12] <- inline_RpnCalc_handle_RpnCalc_push_pending_59_t15 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\"] }", opcode: Store32_1, args: [Register(0x18), Register(0x14)], resolved: None }
23 18 14 
# 009ba Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_59_t12] <- inline_RpnCalc_handle_RpnCalc_push_pending_59_t15 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_RpnCalc_handle_RpnCalc_push_pending_59_t17 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_t17 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_59_t18 <- 0n72/0x00000048u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))", "Number(USIZE, 72)", "Number(USIZE, 72)"] }
# 009bb Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_t18 <- 0n72/0x00000048u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\", \"Number(USIZE, 72)\", \"Number(USIZE, 72)\"] }", opcode: LoadImm32, args: [Register(0x14), Constant32(0x00000048=72)], resolved: None }
20 14 48 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_59_t16 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_t17 Add inline_RpnCalc_handle_RpnCalc_push_pending_59_t18
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))"] }
# 009c1 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_t16 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_t17 Add inline_RpnCalc_handle_RpnCalc_push_pending_59_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 009c2 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_t16 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_t17 Add inline_RpnCalc_handle_RpnCalc_push_pending_59_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: AddCarry32_1, args: [Register(0x10), Register(0x14), Register(0x10)], resolved: None }
30 10 14 10 
# 009c6 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_t16 <- inline_RpnCalc_handle_RpnCalc_push_pending_59_t17 Add inline_RpnCalc_handle_RpnCalc_push_pending_59_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_59_t19 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 009c7 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_59_t19 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x3c), Constant8(0x00=0)], resolved: None }
04 3c 00 
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_59_t16] <- inline_RpnCalc_handle_RpnCalc_push_pending_59_t19 U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }"] }
# 009ca Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_59_t16] <- inline_RpnCalc_handle_RpnCalc_push_pending_59_t19 U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\"] }", opcode: Store8, args: [Register(0x3c), Register(0x10)], resolved: None }
06 3c 10 
# goto inline_RpnCalc_handle_RpnCalc_push_pending_59_RpnCalc_push_pending_if_end_0
# 	SourceContext { contexts: [] }
# 009cd Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_59_RpnCalc_push_pending_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_59_RpnCalc_push_pending_if_end_0)], resolved: None }
70 d1 09 00 
# :inline_RpnCalc_handle_RpnCalc_push_pending_59_RpnCalc_push_pending_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_59_RpnCalc_push_pending_if_else_0_2
# :inline_RpnCalc_handle_RpnCalc_push_pending_59_RpnCalc_push_pending_if_end_0
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_59_RpnCalc_push_pending_if_end_0
# goto inline_RpnCalc_handle_RpnCalc_push_pending_59_function_end_RpnCalc_push_pending
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_59_function_end_RpnCalc_push_pending\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_59_function_end_RpnCalc_push_pending)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_59_function_end_RpnCalc_push_pending
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_59_function_end_RpnCalc_push_pending
# goto RpnCalc_handle_if_end_23
# 	SourceContext { contexts: [] }
# 009d1 Instruction { source: "goto RpnCalc_handle_if_end_23\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_23)], resolved: None }
70 74 0b 00 
# :RpnCalc_handle_if_else_7_39
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_7_39
# t98 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 99) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# 009d5 Instruction { source: "t98 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 99) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1d)], resolved: None }
0b 1c 1d 
# t99 <- 0n99/0x63u8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 99) }", "Number(U8, 99)", "Number(U8, 99)"] }
# 009d8 Instruction { source: "t99 <- 0n99/0x63u8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 99) }\", \"Number(U8, 99)\", \"Number(U8, 99)\"] }", opcode: LoadImm8, args: [Register(0x3c), Constant8(0x63=99)], resolved: None }
04 3c 63 
# if t98 == t99 then 'RpnCalc_handle_if_true_8_40' else 'RpnCalc_handle_if_else_8_41'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 99) }"] }
# 009db Instruction { source: "if t98 == t99 then 'RpnCalc_handle_if_true_8_40' else 'RpnCalc_handle_if_else_8_41'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 99) }\"] }", opcode: Cmp8, args: [Register(0x1d), Register(0x3c)], resolved: None }
15 1d 3c 
# 009de Instruction { source: "if t98 == t99 then 'RpnCalc_handle_if_true_8_40' else 'RpnCalc_handle_if_else_8_41'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 99) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_handle_if_true_8_40)], resolved: None }
72 e6 09 00 
# 009e2 Instruction { source: "if t98 == t99 then 'RpnCalc_handle_if_true_8_40' else 'RpnCalc_handle_if_else_8_41'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 99) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_8_41)], resolved: None }
70 1c 0a 00 
# :RpnCalc_handle_if_true_8_40
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_true_8_40
# t101 <- c U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# 009e6 Instruction { source: "t101 <- c U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"RpnCalc_init\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_init\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"RpnCalc_init\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x10)], resolved: None }
21 18 10 
# inline_RpnCalc_handle_RpnCalc_init_46_c <- t101 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_46_c <- t101 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"RpnCalc_init\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_init\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"RpnCalc_init\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_init_46_t0 <- inline_RpnCalc_handle_RpnCalc_init_46_c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"s\"), var_type: Some(Ptr(Struct(\"Stack\"))), value: AddressOf(PtrFieldDeref(\"c\", \"stack\")) }", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_46_t0 <- inline_RpnCalc_handle_RpnCalc_init_46_c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"s\\\"), var_type: Some(Ptr(Struct(\\\"Stack\\\"))), value: AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Stack\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Stack\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_init_46_s <- inline_RpnCalc_handle_RpnCalc_init_46_t0 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"s\"), var_type: Some(Ptr(Struct(\"Stack\"))), value: AddressOf(PtrFieldDeref(\"c\", \"stack\")) }", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))"] }
# 009e9 Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_46_s <- inline_RpnCalc_handle_RpnCalc_init_46_t0 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"s\\\"), var_type: Some(Ptr(Struct(\\\"Stack\\\"))), value: AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\"] }", opcode: Copy32, args: [Register(0x10), Register(0x14)], resolved: None }
21 10 14 
# inline_RpnCalc_handle_RpnCalc_init_46_t2 <- inline_RpnCalc_handle_RpnCalc_init_46_s U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] }) }", "Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] })", "Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] })", "Ident(\"s\")", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_46_t2 <- inline_RpnCalc_handle_RpnCalc_init_46_s U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_init\\\", parameters: [Ident(\\\"s\\\")] }) }\", \"Call(Call { function: \\\"stack_init\\\", parameters: [Ident(\\\"s\\\")] })\", \"Call(Call { function: \\\"stack_init\\\", parameters: [Ident(\\\"s\\\")] })\", \"Ident(\\\"s\\\")\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_init_46_inline_RpnCalc_init_stack_init_45_s <- inline_RpnCalc_handle_RpnCalc_init_46_t2 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] }) }", "Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] })", "Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_46_inline_RpnCalc_init_stack_init_45_s <- inline_RpnCalc_handle_RpnCalc_init_46_t2 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_init\\\", parameters: [Ident(\\\"s\\\")] }) }\", \"Call(Call { function: \\\"stack_init\\\", parameters: [Ident(\\\"s\\\")] })\", \"Call(Call { function: \\\"stack_init\\\", parameters: [Ident(\\\"s\\\")] })\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_init_46_inline_RpnCalc_init_stack_init_45_t1 <- inline_RpnCalc_handle_RpnCalc_init_46_inline_RpnCalc_init_stack_init_45_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_46_inline_RpnCalc_init_stack_init_45_t1 <- inline_RpnCalc_handle_RpnCalc_init_46_inline_RpnCalc_init_stack_init_45_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_init_46_inline_RpnCalc_init_stack_init_45_t2 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 009ec Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_46_inline_RpnCalc_init_stack_init_45_t2 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000040=64)], resolved: None }
20 18 40 00 00 00 
# inline_RpnCalc_handle_RpnCalc_init_46_inline_RpnCalc_init_stack_init_45_t0 <- inline_RpnCalc_handle_RpnCalc_init_46_inline_RpnCalc_init_stack_init_45_t1 Add inline_RpnCalc_handle_RpnCalc_init_46_inline_RpnCalc_init_stack_init_45_t2
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 009f2 Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_46_inline_RpnCalc_init_stack_init_45_t0 <- inline_RpnCalc_handle_RpnCalc_init_46_inline_RpnCalc_init_stack_init_45_t1 Add inline_RpnCalc_handle_RpnCalc_init_46_inline_RpnCalc_init_stack_init_45_t2\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 009f3 Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_46_inline_RpnCalc_init_stack_init_45_t0 <- inline_RpnCalc_handle_RpnCalc_init_46_inline_RpnCalc_init_stack_init_45_t1 Add inline_RpnCalc_handle_RpnCalc_init_46_inline_RpnCalc_init_stack_init_45_t2\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x18), Register(0x14)], resolved: None }
30 14 18 14 
# 009f7 Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_46_inline_RpnCalc_init_stack_init_45_t0 <- inline_RpnCalc_handle_RpnCalc_init_46_inline_RpnCalc_init_stack_init_45_t1 Add inline_RpnCalc_handle_RpnCalc_init_46_inline_RpnCalc_init_stack_init_45_t2\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_init_46_inline_RpnCalc_init_stack_init_45_t3 <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Number(USIZE, 0) }", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 009f8 Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_46_inline_RpnCalc_init_stack_init_45_t3 <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000000=0)], resolved: None }
20 18 00 00 00 00 
# mem[inline_RpnCalc_handle_RpnCalc_init_46_inline_RpnCalc_init_stack_init_45_t0] <- inline_RpnCalc_handle_RpnCalc_init_46_inline_RpnCalc_init_stack_init_45_t3 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Number(USIZE, 0) }"] }
# 009fe Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_init_46_inline_RpnCalc_init_stack_init_45_t0] <- inline_RpnCalc_handle_RpnCalc_init_46_inline_RpnCalc_init_stack_init_45_t3 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Number(USIZE, 0) }\"] }", opcode: Store32_1, args: [Register(0x18), Register(0x14)], resolved: None }
23 18 14 
# 00a01 Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_init_46_inline_RpnCalc_init_stack_init_45_t0] <- inline_RpnCalc_handle_RpnCalc_init_46_inline_RpnCalc_init_stack_init_45_t3 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Number(USIZE, 0) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto inline_RpnCalc_handle_RpnCalc_init_46_inline_RpnCalc_init_stack_init_45_function_end_stack_init
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_init_46_inline_RpnCalc_init_stack_init_45_function_end_stack_init\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_init_46_inline_RpnCalc_init_stack_init_45_function_end_stack_init)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_init_46_inline_RpnCalc_init_stack_init_45_function_end_stack_init
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_RpnCalc_init_46_inline_RpnCalc_init_stack_init_45_function_end_stack_init
# inline_RpnCalc_handle_RpnCalc_init_46_t4 <- inline_RpnCalc_handle_RpnCalc_init_46_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_46_t4 <- inline_RpnCalc_handle_RpnCalc_init_46_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_init_46_t5 <- 0n68/0x00000044u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Number(USIZE, 68)", "Number(USIZE, 68)"] }
# 00a02 Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_46_t5 <- 0n68/0x00000044u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Number(USIZE, 68)\", \"Number(USIZE, 68)\"] }", opcode: LoadImm32, args: [Register(0x14), Constant32(0x00000044=68)], resolved: None }
20 14 44 00 00 00 
# inline_RpnCalc_handle_RpnCalc_init_46_t3 <- inline_RpnCalc_handle_RpnCalc_init_46_t4 Add inline_RpnCalc_handle_RpnCalc_init_46_t5
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))"] }
# 00a08 Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_46_t3 <- inline_RpnCalc_handle_RpnCalc_init_46_t4 Add inline_RpnCalc_handle_RpnCalc_init_46_t5\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00a09 Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_46_t3 <- inline_RpnCalc_handle_RpnCalc_init_46_t4 Add inline_RpnCalc_handle_RpnCalc_init_46_t5\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_1, args: [Register(0x10), Register(0x14), Register(0x10)], resolved: None }
30 10 14 10 
# 00a0d Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_46_t3 <- inline_RpnCalc_handle_RpnCalc_init_46_t4 Add inline_RpnCalc_handle_RpnCalc_init_46_t5\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_init_46_t6 <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 00a0e Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_46_t6 <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x14), Constant32(0x00000000=0)], resolved: None }
20 14 00 00 00 00 
# mem[inline_RpnCalc_handle_RpnCalc_init_46_t3] <- inline_RpnCalc_handle_RpnCalc_init_46_t6 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }"] }
# 00a14 Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_init_46_t3] <- inline_RpnCalc_handle_RpnCalc_init_46_t6 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\"] }", opcode: Store32_1, args: [Register(0x14), Register(0x10)], resolved: None }
23 14 10 
# 00a17 Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_init_46_t3] <- inline_RpnCalc_handle_RpnCalc_init_46_t6 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto inline_RpnCalc_handle_RpnCalc_init_46_function_end_RpnCalc_init
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_init_46_function_end_RpnCalc_init\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_init_46_function_end_RpnCalc_init)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_init_46_function_end_RpnCalc_init
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_RpnCalc_init_46_function_end_RpnCalc_init
# goto RpnCalc_handle_if_end_23
# 	SourceContext { contexts: [] }
# 00a18 Instruction { source: "goto RpnCalc_handle_if_end_23\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_23)], resolved: None }
70 74 0b 00 
# :RpnCalc_handle_if_else_8_41
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_8_41
# t102 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 100) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# 00a1c Instruction { source: "t102 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 100) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1d)], resolved: None }
0b 1c 1d 
# t103 <- 0n100/0x64u8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 100) }", "Number(U8, 100)", "Number(U8, 100)"] }
# 00a1f Instruction { source: "t103 <- 0n100/0x64u8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 100) }\", \"Number(U8, 100)\", \"Number(U8, 100)\"] }", opcode: LoadImm8, args: [Register(0x3c), Constant8(0x64=100)], resolved: None }
04 3c 64 
# if t102 == t103 then 'RpnCalc_handle_if_true_9_42' else 'RpnCalc_handle_if_else_9_43'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 100) }"] }
# 00a22 Instruction { source: "if t102 == t103 then 'RpnCalc_handle_if_true_9_42' else 'RpnCalc_handle_if_else_9_43'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 100) }\"] }", opcode: Cmp8, args: [Register(0x1d), Register(0x3c)], resolved: None }
15 1d 3c 
# 00a25 Instruction { source: "if t102 == t103 then 'RpnCalc_handle_if_true_9_42' else 'RpnCalc_handle_if_else_9_43'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 100) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_handle_if_true_9_42)], resolved: None }
72 2d 0a 00 
# 00a29 Instruction { source: "if t102 == t103 then 'RpnCalc_handle_if_true_9_42' else 'RpnCalc_handle_if_else_9_43'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 100) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_9_43)], resolved: None }
70 ac 0a 00 
# :RpnCalc_handle_if_true_9_42
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_true_9_42
# i <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: Some(Number(U8)), value: Number(U8, 0) }", "Number(U8, 0)"] }
# 00a2d Instruction { source: "i <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: Some(Number(U8)), value: Number(U8, 0) }\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x1d), Constant8(0x00=0)], resolved: None }
04 1d 00 
# :RpnCalc_handle_while_predicate_44
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }"] }
# RpnCalc_handle_while_predicate_44
# t104 <- i U8
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }", "Ident(\"i\")", "Ident(\"i\")"] }
# optimized away noop copy Instruction { source: "t104 <- i U8\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Ident(\\\"stack_count\\\") }, while_true: [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Ident(\\\"stack_count\\\") }\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# t105 <- stack_count U8
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }", "Ident(\"stack_count\")", "Ident(\"stack_count\")"] }
# 00a30 Instruction { source: "t105 <- stack_count U8\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Ident(\\\"stack_count\\\") }, while_true: [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Ident(\\\"stack_count\\\") }\", \"Ident(\\\"stack_count\\\")\", \"Ident(\\\"stack_count\\\")\"] }", opcode: Copy8, args: [Register(0x3e), Register(0x3c)], resolved: None }
0b 3e 3c 
# if t104 < t105 then 'RpnCalc_handle_while_body_45' else 'RpnCalc_handle_while_end_46'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }"] }
# 00a33 Instruction { source: "if t104 < t105 then 'RpnCalc_handle_while_body_45' else 'RpnCalc_handle_while_end_46'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Ident(\\\"stack_count\\\") }, while_true: [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Ident(\\\"stack_count\\\") }\"] }", opcode: Cmp8, args: [Register(0x3c), Register(0x1d)], resolved: None }
15 3c 1d 
# 00a36 Instruction { source: "if t104 < t105 then 'RpnCalc_handle_while_body_45' else 'RpnCalc_handle_while_end_46'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Ident(\\\"stack_count\\\") }, while_true: [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Ident(\\\"stack_count\\\") }\"] }", opcode: JcImm, args: [Label24(RpnCalc_handle_while_end_46)], resolved: None }
71 a8 0a 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t104 < t105 then 'RpnCalc_handle_while_body_45' else 'RpnCalc_handle_while_end_46'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Ident(\\\"stack_count\\\") }, while_true: [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Ident(\\\"stack_count\\\") }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_while_body_45)], resolved: None }
# :RpnCalc_handle_while_body_45
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }"] }
# RpnCalc_handle_while_body_45
# t107 <- i U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }", "Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] })", "Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] })", "Ident(\"i\")", "Ident(\"i\")"] }
# optimized away noop copy Instruction { source: "t107 <- i U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# None <= call print_dec8(t107,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }", "Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] })", "Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] })"] }
# 00a3a Instruction { source: "Arg0[a]=t107 None <= call print_dec8(t107,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x00)], resolved: None }
0b 1d 00 
# Registers used by this function: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69}
# Registers used by callee tree: {128, 236, 237, 238}
# Registers to save: []
# 00a3d Instruction { source: "PseudoCall(Label24(:print_dec8))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 00a43 Instruction { source: "PseudoCall(Label24(:print_dec8))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 4d 0a 00 00 
# 00a49 Instruction { source: "PseudoCall(Label24(:print_dec8))", opcode: JmpImm, args: [Label24(:print_dec8)], resolved: None }
70 83 19 00 
# 00a4d Instruction { source: "PseudoCall(Label24(:print_dec8))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# t109 <- 0n58/0x3au8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 58)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 58)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 58)] })", "Number(U8, 58)", "Number(U8, 58)"] }
# 00a53 Instruction { source: "t109 <- 0n58/0x3au8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] })\", \"Number(U8, 58)\", \"Number(U8, 58)\"] }", opcode: LoadImm8, args: [Register(0x3c), Constant8(0x3a=58)], resolved: None }
04 3c 3a 
# inline_RpnCalc_handle_putc_25_c <- t109 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 58)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 58)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 58)] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_25_c <- t109 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] })\"] }", opcode: Copy8, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_putc_25_t1 <- inline_RpnCalc_handle_putc_25_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_25_t1 <- inline_RpnCalc_handle_putc_25_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x3c), Register(0x3c)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_25_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 00a56 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x3c)], resolved: None }
68 3c 
# goto inline_RpnCalc_handle_putc_25_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_25_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_25_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_25_function_end_putc
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_putc_25_function_end_putc
# t112 <- stack U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }", "Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] })", "Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] })", "Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })", "Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })", "Ident(\"stack\")", "Ident(\"stack\")"] }
# 00a58 Instruction { source: "t112 <- stack U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })\", \"Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })\", \"Ident(\\\"stack\\\")\", \"Ident(\\\"stack\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x14)], resolved: None }
21 40 14 
# t114 <- i U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }", "Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] })", "Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] })", "Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })", "Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })", "Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }", "Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }", "Ident(\"i\")", "Ident(\"i\")"] }
# optimized away noop copy Instruction { source: "t114 <- i U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })\", \"Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# t113 U32 <- t114 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }", "Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] })", "Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] })", "Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })", "Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })", "Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }", "Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }"] }
# 00a5b Instruction { source: "Zero-pad for t113 U32 <- t114 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })\", \"Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }\"] }", opcode: LoadImm32, args: [Register(0x38), Constant32(0x00000000=0)], resolved: None }
20 38 00 00 00 00 
# 00a61 Instruction { source: "t113 U32 <- t114 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })\", \"Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x38)], resolved: None }
0b 1d 38 
# inline_RpnCalc_handle_stack_get_44_s <- t112 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }", "Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] })", "Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] })", "Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })", "Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })"] }
# 00a64 Instruction { source: "inline_RpnCalc_handle_stack_get_44_s <- t112 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })\", \"Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })\"] }", opcode: Copy32, args: [Register(0x14), Register(0x18)], resolved: None }
21 14 18 
# inline_RpnCalc_handle_stack_get_44_n <- t113 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }", "Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] })", "Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] })", "Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })", "Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })"] }
# 00a67 Instruction { source: "inline_RpnCalc_handle_stack_get_44_n <- t113 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })\", \"Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })\"] }", opcode: Copy32, args: [Register(0x38), Register(0x14)], resolved: None }
21 38 14 
# inline_RpnCalc_handle_stack_get_44_t0 <- inline_RpnCalc_handle_stack_get_44_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_get_44_t0 <- inline_RpnCalc_handle_stack_get_44_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_RpnCalc_handle_stack_get_44_values <- inline_RpnCalc_handle_stack_get_44_t0 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_get_44_values <- inline_RpnCalc_handle_stack_get_44_t0 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_RpnCalc_handle_stack_get_44_t3 <- inline_RpnCalc_handle_stack_get_44_values U32
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", Ident(\"n\"))) }", "Index(\"values\", Ident(\"n\"))", "Index(\"values\", Ident(\"n\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4)))", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_get_44_t3 <- inline_RpnCalc_handle_stack_get_44_values U32\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", Ident(\\\"n\\\"))) }\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4)))\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_RpnCalc_handle_stack_get_44_t5 <- inline_RpnCalc_handle_stack_get_44_n U32
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", Ident(\"n\"))) }", "Index(\"values\", Ident(\"n\"))", "Index(\"values\", Ident(\"n\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4)))", "Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))", "Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_get_44_t5 <- inline_RpnCalc_handle_stack_get_44_n U32\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", Ident(\\\"n\\\"))) }\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_stack_get_44_t4 <- inline_RpnCalc_handle_stack_get_44_t5 Add inline_RpnCalc_handle_stack_get_44_t5
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", Ident(\"n\"))) }", "Index(\"values\", Ident(\"n\"))", "Index(\"values\", Ident(\"n\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4)))", "Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))", "Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 00a6a Instruction { source: "inline_RpnCalc_handle_stack_get_44_t4 <- inline_RpnCalc_handle_stack_get_44_t5 Add inline_RpnCalc_handle_stack_get_44_t5\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", Ident(\\\"n\\\"))) }\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00a6b Instruction { source: "inline_RpnCalc_handle_stack_get_44_t4 <- inline_RpnCalc_handle_stack_get_44_t5 Add inline_RpnCalc_handle_stack_get_44_t5\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", Ident(\\\"n\\\"))) }\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x14), Register(0x14)], resolved: None }
30 14 14 14 
# 00a6f Instruction { source: "inline_RpnCalc_handle_stack_get_44_t4 <- inline_RpnCalc_handle_stack_get_44_t5 Add inline_RpnCalc_handle_stack_get_44_t5\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", Ident(\\\"n\\\"))) }\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_get_44_t4 <- inline_RpnCalc_handle_stack_get_44_t4 Add inline_RpnCalc_handle_stack_get_44_t4
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", Ident(\"n\"))) }", "Index(\"values\", Ident(\"n\"))", "Index(\"values\", Ident(\"n\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4)))", "Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))", "Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))"] }
# 00a70 Instruction { source: "inline_RpnCalc_handle_stack_get_44_t4 <- inline_RpnCalc_handle_stack_get_44_t4 Add inline_RpnCalc_handle_stack_get_44_t4\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", Ident(\\\"n\\\"))) }\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00a71 Instruction { source: "inline_RpnCalc_handle_stack_get_44_t4 <- inline_RpnCalc_handle_stack_get_44_t4 Add inline_RpnCalc_handle_stack_get_44_t4\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", Ident(\\\"n\\\"))) }\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x14), Register(0x14)], resolved: None }
30 14 14 14 
# 00a75 Instruction { source: "inline_RpnCalc_handle_stack_get_44_t4 <- inline_RpnCalc_handle_stack_get_44_t4 Add inline_RpnCalc_handle_stack_get_44_t4\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", Ident(\\\"n\\\"))) }\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_get_44_t2 <- inline_RpnCalc_handle_stack_get_44_t3 Add inline_RpnCalc_handle_stack_get_44_t4
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", Ident(\"n\"))) }", "Index(\"values\", Ident(\"n\"))", "Index(\"values\", Ident(\"n\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4)))"] }
# 00a76 Instruction { source: "inline_RpnCalc_handle_stack_get_44_t2 <- inline_RpnCalc_handle_stack_get_44_t3 Add inline_RpnCalc_handle_stack_get_44_t4\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", Ident(\\\"n\\\"))) }\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00a77 Instruction { source: "inline_RpnCalc_handle_stack_get_44_t2 <- inline_RpnCalc_handle_stack_get_44_t3 Add inline_RpnCalc_handle_stack_get_44_t4\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", Ident(\\\"n\\\"))) }\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_1, args: [Register(0x18), Register(0x14), Register(0x14)], resolved: None }
30 18 14 14 
# 00a7b Instruction { source: "inline_RpnCalc_handle_stack_get_44_t2 <- inline_RpnCalc_handle_stack_get_44_t3 Add inline_RpnCalc_handle_stack_get_44_t4\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", Ident(\\\"n\\\"))) }\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_get_44_t1 <- mem[inline_RpnCalc_handle_stack_get_44_t2] U32
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", Ident(\"n\"))) }", "Index(\"values\", Ident(\"n\"))", "Index(\"values\", Ident(\"n\"))"] }
# 00a7c Instruction { source: "inline_RpnCalc_handle_stack_get_44_t1 <- mem[inline_RpnCalc_handle_stack_get_44_t2] U32\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", Ident(\\\"n\\\"))) }\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\"] }", opcode: Load32, args: [Register(0x14), Register(0x14)], resolved: None }
22 14 14 
# t111 <- inline_RpnCalc_handle_stack_get_44_t1 U32
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", Ident(\"n\"))) }"] }
# optimized away noop copy Instruction { source: "t111 <- inline_RpnCalc_handle_stack_get_44_t1 U32\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", Ident(\\\"n\\\"))) }\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# goto inline_RpnCalc_handle_stack_get_44_function_end_stack_get
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", Ident(\"n\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_get_44_function_end_stack_get\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", Ident(\\\"n\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_get_44_function_end_stack_get)], resolved: None }
# :inline_RpnCalc_handle_stack_get_44_function_end_stack_get
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_stack_get_44_function_end_stack_get
# None <= call print_dec32(t111,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }", "Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] })", "Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] })"] }
# 00a7f Instruction { source: "Arg0[a]=t111 None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Copy32, args: [Register(0x14), Register(0x00)], resolved: None }
21 14 00 
# Registers used by this function: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69}
# Registers used by callee tree: {128, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 200, 201, 202, 203, 204, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238}
# Registers to save: []
# 00a82 Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 00a88 Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 92 0a 00 00 
# 00a8e Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: JmpImm, args: [Label24(:print_dec32)], resolved: None }
70 a3 17 00 
# 00a92 Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# t116 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Number(U8, 10)", "Number(U8, 10)"] }
# 00a98 Instruction { source: "t116 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x3c), Constant8(0x0a=10)], resolved: None }
04 3c 0a 
# inline_RpnCalc_handle_putc_26_c <- t116 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_26_c <- t116 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\"] }", opcode: Copy8, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_putc_26_t1 <- inline_RpnCalc_handle_putc_26_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_26_t1 <- inline_RpnCalc_handle_putc_26_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x3c), Register(0x3c)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_26_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 00a9b Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x3c)], resolved: None }
68 3c 
# goto inline_RpnCalc_handle_putc_26_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_26_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_26_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_26_function_end_putc
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_putc_26_function_end_putc
# t117 <- i U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"i\"), Number(U8, 1))", "Ident(\"i\")", "Ident(\"i\")"] }
# optimized away noop copy Instruction { source: "t117 <- i U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1))\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# t118 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"i\"), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 00a9d Instruction { source: "t118 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x3c), Constant8(0x01=1)], resolved: None }
04 3c 01 
# i <- t117 Add t118
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"i\"), Number(U8, 1))"] }
# 00aa0 Instruction { source: "i <- t117 Add t118\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1))\"] }", opcode: Add8NoCarryIn, args: [Register(0x1d), Register(0x3c), Register(0x1d)], resolved: None }
14 1d 3c 1d 
# goto RpnCalc_handle_while_predicate_44
# 	SourceContext { contexts: [] }
# 00aa4 Instruction { source: "goto RpnCalc_handle_while_predicate_44\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_while_predicate_44)], resolved: None }
70 30 0a 00 
# :RpnCalc_handle_while_end_46
# 	SourceContext { contexts: [] }
# RpnCalc_handle_while_end_46
# goto RpnCalc_handle_if_end_23
# 	SourceContext { contexts: [] }
# 00aa8 Instruction { source: "goto RpnCalc_handle_if_end_23\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_23)], resolved: None }
70 74 0b 00 
# :RpnCalc_handle_if_else_9_43
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_9_43
# t119 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# 00aac Instruction { source: "t119 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1d)], resolved: None }
0b 1c 1d 
# t120 <- 0n57/0x39u8 
# 	SourceContext { contexts: ["Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }", "Number(U8, 57)", "Number(U8, 57)"] }
# 00aaf Instruction { source: "t120 <- 0n57/0x39u8 \n\tSourceContext { contexts: [\"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\", \"Number(U8, 57)\", \"Number(U8, 57)\"] }", opcode: LoadImm8, args: [Register(0x3c), Constant8(0x39=57)], resolved: None }
04 3c 39 
# if t119 <= t120 then 'RpnCalc_handle_if_true_10_47' else 'RpnCalc_handle_if_else_10_48'
# 	SourceContext { contexts: ["Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }"] }
# 00ab2 Instruction { source: "if t119 <= t120 then 'RpnCalc_handle_if_true_10_47' else 'RpnCalc_handle_if_else_10_48'\n\tSourceContext { contexts: [\"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\"] }", opcode: Cmp8, args: [Register(0x1d), Register(0x3c)], resolved: None }
15 1d 3c 
# 00ab5 Instruction { source: "if t119 <= t120 then 'RpnCalc_handle_if_true_10_47' else 'RpnCalc_handle_if_else_10_48'\n\tSourceContext { contexts: [\"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\"] }", opcode: JcImm, args: [Label24(RpnCalc_handle_if_true_10_47)], resolved: None }
71 bd 0a 00 
# 00ab9 Instruction { source: "if t119 <= t120 then 'RpnCalc_handle_if_true_10_47' else 'RpnCalc_handle_if_else_10_48'\n\tSourceContext { contexts: [\"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_10_48)], resolved: None }
70 74 0b 00 
# :RpnCalc_handle_if_true_10_47
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_true_10_47
# t121 <- ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 48) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# 00abd Instruction { source: "t121 <- ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 48) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1d)], resolved: None }
0b 1c 1d 
# t122 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 48) }", "Number(U8, 48)", "Number(U8, 48)"] }
# 00ac0 Instruction { source: "t122 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 48) }\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0x3c), Constant8(0x30=48)], resolved: None }
04 3c 30 
# if t121 >= t122 then 'RpnCalc_handle_if_true_0_50' else 'RpnCalc_handle_if_else_0_51'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 48) }"] }
# 00ac3 Instruction { source: "if t121 >= t122 then 'RpnCalc_handle_if_true_0_50' else 'RpnCalc_handle_if_else_0_51'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 48) }\"] }", opcode: Cmp8, args: [Register(0x3c), Register(0x1d)], resolved: None }
15 3c 1d 
# 00ac6 Instruction { source: "if t121 >= t122 then 'RpnCalc_handle_if_true_0_50' else 'RpnCalc_handle_if_else_0_51'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 48) }\"] }", opcode: JcImm, args: [Label24(RpnCalc_handle_if_true_0_50)], resolved: None }
71 ce 0a 00 
# 00aca Instruction { source: "if t121 >= t122 then 'RpnCalc_handle_if_true_0_50' else 'RpnCalc_handle_if_else_0_51'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 48) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_0_51)], resolved: None }
70 70 0b 00 
# :RpnCalc_handle_if_true_0_50
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }])], else_block: [] }"] }
# RpnCalc_handle_if_true_0_50
# t124 <- c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 1) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# 00ace Instruction { source: "t124 <- c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x10)], resolved: None }
21 18 10 
# t125 <- 0n72/0x00000048u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 1) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))", "Number(USIZE, 72)", "Number(USIZE, 72)"] }
# 00ad1 Instruction { source: "t125 <- 0n72/0x00000048u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\", \"Number(USIZE, 72)\", \"Number(USIZE, 72)\"] }", opcode: LoadImm32, args: [Register(0x14), Constant32(0x00000048=72)], resolved: None }
20 14 48 00 00 00 
# t123 <- t124 Add t125
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 1) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))"] }
# 00ad7 Instruction { source: "t123 <- t124 Add t125\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00ad8 Instruction { source: "t123 <- t124 Add t125\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: AddCarry32_1, args: [Register(0x10), Register(0x14), Register(0x10)], resolved: None }
30 10 14 10 
# 00adc Instruction { source: "t123 <- t124 Add t125\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t126 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 1) }", "Number(U8, 1)", "Number(U8, 1)"] }
# 00add Instruction { source: "t126 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x3c), Constant8(0x01=1)], resolved: None }
04 3c 01 
# mem[t123] <- t126 U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 1) }"] }
# 00ae0 Instruction { source: "mem[t123] <- t126 U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }\"] }", opcode: Store8, args: [Register(0x3c), Register(0x10)], resolved: None }
06 3c 10 
# t128 <- c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# 00ae3 Instruction { source: "t128 <- c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x10)], resolved: None }
21 18 10 
# t129 <- 0n68/0x00000044u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Number(USIZE, 68)", "Number(USIZE, 68)"] }
# 00ae6 Instruction { source: "t129 <- 0n68/0x00000044u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Number(USIZE, 68)\", \"Number(USIZE, 68)\"] }", opcode: LoadImm32, args: [Register(0x14), Constant32(0x00000044=68)], resolved: None }
20 14 44 00 00 00 
# t127 <- t128 Add t129
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))"] }
# 00aec Instruction { source: "t127 <- t128 Add t129\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00aed Instruction { source: "t127 <- t128 Add t129\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_1, args: [Register(0x10), Register(0x14), Register(0x24)], resolved: None }
30 10 14 24 
# 00af1 Instruction { source: "t127 <- t128 Add t129\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t133 <- c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# 00af2 Instruction { source: "t133 <- c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x10)], resolved: None }
21 18 10 
# t134 <- 0n68/0x00000044u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Number(USIZE, 68)", "Number(USIZE, 68)"] }
# 00af5 Instruction { source: "t134 <- 0n68/0x00000044u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Number(USIZE, 68)\", \"Number(USIZE, 68)\"] }", opcode: LoadImm32, args: [Register(0x14), Constant32(0x00000044=68)], resolved: None }
20 14 44 00 00 00 
# t132 <- t133 Add t134
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))"] }
# 00afb Instruction { source: "t132 <- t133 Add t134\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00afc Instruction { source: "t132 <- t133 Add t134\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_1, args: [Register(0x10), Register(0x14), Register(0x10)], resolved: None }
30 10 14 10 
# 00b00 Instruction { source: "t132 <- t133 Add t134\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t131 <- mem[t132] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")"] }
# 00b01 Instruction { source: "t131 <- mem[t132] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\"] }", opcode: Load32, args: [Register(0x10), Register(0x10)], resolved: None }
22 10 10 
# inline_RpnCalc_handle_mul32_by10_15_a <- t131 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_a <- t131 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_15_t0 <- inline_RpnCalc_handle_mul32_by10_15_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }", "Arithmetic(Add, Ident(\"a\"), Ident(\"a\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_t0 <- inline_RpnCalc_handle_mul32_by10_15_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_15_t1 <- inline_RpnCalc_handle_mul32_by10_15_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }", "Arithmetic(Add, Ident(\"a\"), Ident(\"a\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# 00b04 Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_t1 <- inline_RpnCalc_handle_mul32_by10_15_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x14)], resolved: None }
21 10 14 
# inline_RpnCalc_handle_mul32_by10_15_a <- inline_RpnCalc_handle_mul32_by10_15_t0 Add inline_RpnCalc_handle_mul32_by10_15_t1
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }", "Arithmetic(Add, Ident(\"a\"), Ident(\"a\"))"] }
# 00b07 Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_a <- inline_RpnCalc_handle_mul32_by10_15_t0 Add inline_RpnCalc_handle_mul32_by10_15_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00b08 Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_a <- inline_RpnCalc_handle_mul32_by10_15_t0 Add inline_RpnCalc_handle_mul32_by10_15_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x10), Register(0x14), Register(0x10)], resolved: None }
30 10 14 10 
# 00b0c Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_a <- inline_RpnCalc_handle_mul32_by10_15_t0 Add inline_RpnCalc_handle_mul32_by10_15_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_mul32_by10_15_t2 <- inline_RpnCalc_handle_mul32_by10_15_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }", "Arithmetic(Add, Ident(\"a\"), Ident(\"a\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_t2 <- inline_RpnCalc_handle_mul32_by10_15_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_15_t3 <- inline_RpnCalc_handle_mul32_by10_15_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }", "Arithmetic(Add, Ident(\"a\"), Ident(\"a\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# 00b0d Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_t3 <- inline_RpnCalc_handle_mul32_by10_15_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x14)], resolved: None }
21 10 14 
# inline_RpnCalc_handle_mul32_by10_15_b <- inline_RpnCalc_handle_mul32_by10_15_t2 Add inline_RpnCalc_handle_mul32_by10_15_t3
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }", "Arithmetic(Add, Ident(\"a\"), Ident(\"a\"))"] }
# 00b10 Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_b <- inline_RpnCalc_handle_mul32_by10_15_t2 Add inline_RpnCalc_handle_mul32_by10_15_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00b11 Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_b <- inline_RpnCalc_handle_mul32_by10_15_t2 Add inline_RpnCalc_handle_mul32_by10_15_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x10), Register(0x14), Register(0x14)], resolved: None }
30 10 14 14 
# 00b15 Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_b <- inline_RpnCalc_handle_mul32_by10_15_t2 Add inline_RpnCalc_handle_mul32_by10_15_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_mul32_by10_15_t4 <- inline_RpnCalc_handle_mul32_by10_15_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: None, value: Arithmetic(Add, Ident(\"b\"), Ident(\"b\")) }", "Arithmetic(Add, Ident(\"b\"), Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_t4 <- inline_RpnCalc_handle_mul32_by10_15_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_15_t5 <- inline_RpnCalc_handle_mul32_by10_15_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: None, value: Arithmetic(Add, Ident(\"b\"), Ident(\"b\")) }", "Arithmetic(Add, Ident(\"b\"), Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# 00b16 Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_t5 <- inline_RpnCalc_handle_mul32_by10_15_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x20)], resolved: None }
21 14 20 
# inline_RpnCalc_handle_mul32_by10_15_b <- inline_RpnCalc_handle_mul32_by10_15_t4 Add inline_RpnCalc_handle_mul32_by10_15_t5
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: None, value: Arithmetic(Add, Ident(\"b\"), Ident(\"b\")) }", "Arithmetic(Add, Ident(\"b\"), Ident(\"b\"))"] }
# 00b19 Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_b <- inline_RpnCalc_handle_mul32_by10_15_t4 Add inline_RpnCalc_handle_mul32_by10_15_t5\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00b1a Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_b <- inline_RpnCalc_handle_mul32_by10_15_t4 Add inline_RpnCalc_handle_mul32_by10_15_t5\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x20), Register(0x14)], resolved: None }
30 14 20 14 
# 00b1e Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_b <- inline_RpnCalc_handle_mul32_by10_15_t4 Add inline_RpnCalc_handle_mul32_by10_15_t5\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_mul32_by10_15_t7 <- inline_RpnCalc_handle_mul32_by10_15_b U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }", "Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))", "Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_t7 <- inline_RpnCalc_handle_mul32_by10_15_b U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_15_t8 <- inline_RpnCalc_handle_mul32_by10_15_a U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }", "Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))", "Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_t8 <- inline_RpnCalc_handle_mul32_by10_15_a U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_15_t6 <- inline_RpnCalc_handle_mul32_by10_15_t7 Add inline_RpnCalc_handle_mul32_by10_15_t8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }", "Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))", "Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))"] }
# 00b1f Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_t6 <- inline_RpnCalc_handle_mul32_by10_15_t7 Add inline_RpnCalc_handle_mul32_by10_15_t8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00b20 Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_t6 <- inline_RpnCalc_handle_mul32_by10_15_t7 Add inline_RpnCalc_handle_mul32_by10_15_t8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x10), Register(0x10)], resolved: None }
30 14 10 10 
# 00b24 Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_t6 <- inline_RpnCalc_handle_mul32_by10_15_t7 Add inline_RpnCalc_handle_mul32_by10_15_t8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t130 <- inline_RpnCalc_handle_mul32_by10_15_t6 U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }"] }
# optimized away noop copy Instruction { source: "t130 <- inline_RpnCalc_handle_mul32_by10_15_t6 U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))) }\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# goto inline_RpnCalc_handle_mul32_by10_15_function_end_mul32_by10
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_mul32_by10_15_function_end_mul32_by10\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_mul32_by10_15_function_end_mul32_by10)], resolved: None }
# :inline_RpnCalc_handle_mul32_by10_15_function_end_mul32_by10
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_mul32_by10_15_function_end_mul32_by10
# mem[t127] <- t130 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }"] }
# 00b25 Instruction { source: "mem[t127] <- t130 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\"] }", opcode: Store32_1, args: [Register(0x10), Register(0x24)], resolved: None }
23 10 24 
# 00b28 Instruction { source: "mem[t127] <- t130 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# t136 <- c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# 00b29 Instruction { source: "t136 <- c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x10)], resolved: None }
21 18 10 
# t137 <- 0n68/0x00000044u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Number(USIZE, 68)", "Number(USIZE, 68)"] }
# 00b2c Instruction { source: "t137 <- 0n68/0x00000044u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Number(USIZE, 68)\", \"Number(USIZE, 68)\"] }", opcode: LoadImm32, args: [Register(0x14), Constant32(0x00000044=68)], resolved: None }
20 14 44 00 00 00 
# t135 <- t136 Add t137
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))"] }
# 00b32 Instruction { source: "t135 <- t136 Add t137\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00b33 Instruction { source: "t135 <- t136 Add t137\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_1, args: [Register(0x10), Register(0x14), Register(0x10)], resolved: None }
30 10 14 10 
# 00b37 Instruction { source: "t135 <- t136 Add t137\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t141 <- c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# 00b38 Instruction { source: "t141 <- c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x18), Register(0x14)], resolved: None }
21 18 14 
# t142 <- 0n68/0x00000044u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Number(USIZE, 68)", "Number(USIZE, 68)"] }
# 00b3b Instruction { source: "t142 <- 0n68/0x00000044u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Number(USIZE, 68)\", \"Number(USIZE, 68)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000044=68)], resolved: None }
20 18 44 00 00 00 
# t140 <- t141 Add t142
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))"] }
# 00b41 Instruction { source: "t140 <- t141 Add t142\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00b42 Instruction { source: "t140 <- t141 Add t142\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x18), Register(0x14)], resolved: None }
30 14 18 14 
# 00b46 Instruction { source: "t140 <- t141 Add t142\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t139 <- mem[t140] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")"] }
# 00b47 Instruction { source: "t139 <- mem[t140] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\"] }", opcode: Load32, args: [Register(0x14), Register(0x14)], resolved: None }
22 14 14 
# t145 <- ch U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Ident(\"ch\")", "Ident(\"ch\")"] }
# 00b4a Instruction { source: "t145 <- ch U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x3d)], resolved: None }
0b 1c 3d 
# t146 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Number(U8, 48)", "Number(U8, 48)"] }
# 00b4d Instruction { source: "t146 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x30=48)], resolved: None }
04 1c 30 
# t144 <- t145 Subtract t146
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))"] }
# 00b50 Instruction { source: "t144 <- t145 Subtract t146\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x00)], resolved: None }
0b 1c 00 
# 00b53 Instruction { source: "t144 <- t145 Subtract t146\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 00b55 Instruction { source: "t144 <- t145 Subtract t146\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\"] }", opcode: Add8NoCarryIn, args: [Register(0x3d), Register(0x00), Register(0x3d)], resolved: None }
14 3d 00 3d 
# t143 U32 <- t144 U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }"] }
# 00b59 Instruction { source: "Zero-pad for t143 U32 <- t144 U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000000=0)], resolved: None }
20 18 00 00 00 00 
# 00b5f Instruction { source: "t143 U32 <- t144 U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }\"] }", opcode: Copy8, args: [Register(0x3d), Register(0x18)], resolved: None }
0b 3d 18 
# t138 <- t139 Add t143
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })"] }
# 00b62 Instruction { source: "t138 <- t139 Add t143\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00b63 Instruction { source: "t138 <- t139 Add t143\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x18), Register(0x14)], resolved: None }
30 14 18 14 
# 00b67 Instruction { source: "t138 <- t139 Add t143\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# mem[t135] <- t138 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }"] }
# 00b68 Instruction { source: "mem[t135] <- t138 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\"] }", opcode: Store32_1, args: [Register(0x14), Register(0x10)], resolved: None }
23 14 10 
# 00b6b Instruction { source: "mem[t135] <- t138 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto RpnCalc_handle_if_end_49
# 	SourceContext { contexts: [] }
# 00b6c Instruction { source: "goto RpnCalc_handle_if_end_49\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_49)], resolved: None }
70 70 0b 00 
# :RpnCalc_handle_if_else_0_51
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_0_51
# :RpnCalc_handle_if_end_49
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_end_49
# goto RpnCalc_handle_if_end_23
# 	SourceContext { contexts: [] }
# 00b70 Instruction { source: "goto RpnCalc_handle_if_end_23\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_23)], resolved: None }
70 74 0b 00 
# :RpnCalc_handle_if_else_10_48
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_10_48
# :RpnCalc_handle_if_end_23
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_end_23
# t147 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 1)) }", "Number(U8, 1)", "Number(U8, 1)"] }
# 00b74 Instruction { source: "t147 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 1)) }\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x1d), Constant8(0x01=1)], resolved: None }
04 1d 01 
# return Some(t147)
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 1)) }"] }
# 00b77 Instruction { source: "return Some(t147)\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x1d), Register(0x00)], resolved: None }
0b 1d 00 
# 00b7a Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# :function_end_RpnCalc_handle
# 	SourceContext { contexts: [] }
# function_end_RpnCalc_handle
# Unreachable
# 	SourceContext { contexts: [] }
# 00b7c Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
# :div32
# Ret Some(U32)
# Arg0=a
# Arg1=b
# Var __frame_pointer (__frame_pointer) Reg(U32) Some([12, 13, 14, 15])
# Var a (Arg0 a Number(USIZE)) Reg(U32) Some([72, 73, 74, 75])
# Var b (Arg1 b Number(USIZE)) Reg(U32) Some([76, 77, 78, 79])
# Var hi (Local hi Number(USIZE) Reg(U32)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_div32_div16_39_a (Arg0 a Number(USIZE)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_div32_div16_39_b (Arg1 b Number(USIZE)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_div32_div16_39_hi (Local hi Number(USIZE) Reg(U32)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_div32_div16_39_inline_div16_mul16_32_6_a (Arg0 a Number(USIZE)) Reg(U32) Some([84, 85, 86, 87])
# Var inline_div32_div16_39_inline_div16_mul16_32_6_b (Arg1 b Number(USIZE)) Reg(U32) Some([88, 89, 90, 91])
# Var inline_div32_div16_39_inline_div16_mul16_32_6_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([92, 93, 94, 95])
# Var inline_div32_div16_39_inline_div16_mul16_32_6_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([96, 97, 98, 99])
# Var inline_div32_div16_39_inline_div16_mul16_32_6_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([84, 85, 86, 87])
# Var inline_div32_div16_39_inline_div16_mul16_32_6_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([96, 97, 98, 99])
# Var inline_div32_div16_39_inline_div16_mul16_32_6_t0 (t0 Ident("a")) Reg(U32) Some([84, 85, 86, 87])
# Var inline_div32_div16_39_inline_div16_mul16_32_6_t1 (t1 Ident("b")) Reg(U32) Some([88, 89, 90, 91])
# Var inline_div32_div16_39_inline_div16_mul16_32_6_t10 (t10 Ident("c")) Reg(U32) Some([92, 93, 94, 95])
# Var inline_div32_div16_39_inline_div16_mul16_32_6_t11 (t11 Ident("f")) Reg(U32) Some([96, 97, 98, 99])
# Var inline_div32_div16_39_inline_div16_mul16_32_6_t12 (t12 Ident("a")) Reg(U32) Some([84, 85, 86, 87])
# Var inline_div32_div16_39_inline_div16_mul16_32_6_t13 (t13 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([96, 97, 98, 99])
# Var inline_div32_div16_39_inline_div16_mul16_32_6_t14 (t14 Index("b", Number(U8, 1))) Reg(U8) Some([100])
# Var inline_div32_div16_39_inline_div16_mul16_32_6_t15 (t15 Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_div32_div16_39_inline_div16_mul16_32_6_t16 (t16 Index("a", Number(U8, 1))) Reg(U8) Some([101])
# Var inline_div32_div16_39_inline_div16_mul16_32_6_t17 (t17 Ident("b")) Reg(U32) Some([88, 89, 90, 91])
# Var inline_div32_div16_39_inline_div16_mul16_32_6_t18 (t18 Ident("d")) Reg(U32) Some([88, 89, 90, 91])
# Var inline_div32_div16_39_inline_div16_mul16_32_6_t19 (t19 Ident("e")) Reg(U32) Some([84, 85, 86, 87])
# Var inline_div32_div16_39_inline_div16_mul16_32_6_t2 (t2 Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([96, 97, 98, 99])
# Var inline_div32_div16_39_inline_div16_mul16_32_6_t20 (t20 Index("d", Number(U8, 2))) Reg(U8) Some([101])
# Var inline_div32_div16_39_inline_div16_mul16_32_6_t21 (t21 Index("d", Number(U8, 1))) Reg(U8) Some([101])
# Var inline_div32_div16_39_inline_div16_mul16_32_6_t22 (t22 Index("d", Number(U8, 0))) Reg(U8) Some([101])
# Var inline_div32_div16_39_inline_div16_mul16_32_6_t23 (t23 Number(U8, 0)) Reg(U8) Some([101])
# Var inline_div32_div16_39_inline_div16_mul16_32_6_t24 (t24 Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([84, 85, 86, 87])
# Var inline_div32_div16_39_inline_div16_mul16_32_6_t25 (t25 Ident("c")) Reg(U32) Some([84, 85, 86, 87])
# Var inline_div32_div16_39_inline_div16_mul16_32_6_t26 (t26 Ident("d")) Reg(U32) Some([88, 89, 90, 91])
# Var inline_div32_div16_39_inline_div16_mul16_32_6_t3 (t3 Index("a", Number(U8, 1))) Reg(U8) Some([101])
# Var inline_div32_div16_39_inline_div16_mul16_32_6_t4 (t4 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([104, 105, 106, 107])
# Var inline_div32_div16_39_inline_div16_mul16_32_6_t5 (t5 Index("b", Number(U8, 1))) Reg(U8) Some([100])
# Var inline_div32_div16_39_inline_div16_mul16_32_6_t6 (t6 Index("f", Number(U8, 1))) Reg(U8) Some([108])
# Var inline_div32_div16_39_inline_div16_mul16_32_6_t7 (t7 Index("f", Number(U8, 0))) Reg(U8) Some([108])
# Var inline_div32_div16_39_inline_div16_mul16_32_6_t8 (t8 Number(U8, 0)) Reg(U8) Some([109])
# Var inline_div32_div16_39_inline_div16_mul16_32_6_t9 (t9 Number(U8, 0)) Reg(U8) Some([109])
# Var inline_div32_div16_39_inline_div16_shiftright1_38_a (Arg0 a Number(USIZE)) Reg(U32) Some([84, 85, 86, 87])
# Var inline_div32_div16_39_inline_div16_shiftright1_38_t0 (t0 Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))) Reg(U8) Some([100])
# Var inline_div32_div16_39_inline_div16_shiftright1_38_t1 (t1 Index("a", Number(U8, 0))) Reg(U8) Some([101])
# Var inline_div32_div16_39_inline_div16_shiftright1_38_t10 (t10 Index("a", Number(U8, 3))) Reg(U8) Some([101])
# Var inline_div32_div16_39_inline_div16_shiftright1_38_t11 (t11 Number(U8, 1)) Reg(U8) Some([100])
# Var inline_div32_div16_39_inline_div16_shiftright1_38_t12 (t12 Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))) Reg(U8) Some([100])
# Var inline_div32_div16_39_inline_div16_shiftright1_38_t13 (t13 Index("a", Number(U8, 0))) Reg(U8) Some([101])
# Var inline_div32_div16_39_inline_div16_shiftright1_38_t14 (t14 Number(U8, 127)) Reg(U8) Some([100])
# Var inline_div32_div16_39_inline_div16_shiftright1_38_t15 (t15 Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))) Reg(U8) Some([100])
# Var inline_div32_div16_39_inline_div16_shiftright1_38_t16 (t16 Index("a", Number(U8, 0))) Reg(U8) Some([101])
# Var inline_div32_div16_39_inline_div16_shiftright1_38_t17 (t17 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) Reg(U8) Some([100])
# Var inline_div32_div16_39_inline_div16_shiftright1_38_t18 (t18 Index("a", Number(U8, 1))) Reg(U8) Some([100])
# Var inline_div32_div16_39_inline_div16_shiftright1_38_t19 (t19 Number(U8, 128)) Reg(U8) Some([110])
# Var inline_div32_div16_39_inline_div16_shiftright1_38_t2 (t2 Number(U8, 1)) Reg(U8) Some([100])
# Var inline_div32_div16_39_inline_div16_shiftright1_38_t20 (t20 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))) Reg(U8) Some([100])
# Var inline_div32_div16_39_inline_div16_shiftright1_38_t21 (t21 Index("a", Number(U8, 1))) Reg(U8) Some([101])
# Var inline_div32_div16_39_inline_div16_shiftright1_38_t22 (t22 Number(U8, 127)) Reg(U8) Some([100])
# Var inline_div32_div16_39_inline_div16_shiftright1_38_t23 (t23 Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))) Reg(U8) Some([100])
# Var inline_div32_div16_39_inline_div16_shiftright1_38_t24 (t24 Index("a", Number(U8, 1))) Reg(U8) Some([101])
# Var inline_div32_div16_39_inline_div16_shiftright1_38_t25 (t25 Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) Reg(U8) Some([100])
# Var inline_div32_div16_39_inline_div16_shiftright1_38_t26 (t26 Index("a", Number(U8, 2))) Reg(U8) Some([100])
# Var inline_div32_div16_39_inline_div16_shiftright1_38_t27 (t27 Number(U8, 128)) Reg(U8) Some([110])
# Var inline_div32_div16_39_inline_div16_shiftright1_38_t28 (t28 Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))) Reg(U8) Some([100])
# Var inline_div32_div16_39_inline_div16_shiftright1_38_t29 (t29 Index("a", Number(U8, 2))) Reg(U8) Some([101])
# Var inline_div32_div16_39_inline_div16_shiftright1_38_t3 (t3 Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))) Reg(U8) Some([100])
# Var inline_div32_div16_39_inline_div16_shiftright1_38_t30 (t30 Number(U8, 127)) Reg(U8) Some([100])
# Var inline_div32_div16_39_inline_div16_shiftright1_38_t31 (t31 Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))) Reg(U8) Some([100])
# Var inline_div32_div16_39_inline_div16_shiftright1_38_t32 (t32 Index("a", Number(U8, 2))) Reg(U8) Some([101])
# Var inline_div32_div16_39_inline_div16_shiftright1_38_t33 (t33 Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) Reg(U8) Some([100])
# Var inline_div32_div16_39_inline_div16_shiftright1_38_t34 (t34 Index("a", Number(U8, 3))) Reg(U8) Some([100])
# Var inline_div32_div16_39_inline_div16_shiftright1_38_t35 (t35 Number(U8, 128)) Reg(U8) Some([110])
# Var inline_div32_div16_39_inline_div16_shiftright1_38_t36 (t36 Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))) Reg(U8) Some([100])
# Var inline_div32_div16_39_inline_div16_shiftright1_38_t37 (t37 Index("a", Number(U8, 3))) Reg(U8) Some([101])
# Var inline_div32_div16_39_inline_div16_shiftright1_38_t38 (t38 Number(U8, 127)) Reg(U8) Some([100])
# Var inline_div32_div16_39_inline_div16_shiftright1_38_t39 (t39 Ident("a")) Reg(U32) Some([84, 85, 86, 87])
# Var inline_div32_div16_39_inline_div16_shiftright1_38_t4 (t4 Index("a", Number(U8, 1))) Reg(U8) Some([101])
# Var inline_div32_div16_39_inline_div16_shiftright1_38_t5 (t5 Number(U8, 1)) Reg(U8) Some([100])
# Var inline_div32_div16_39_inline_div16_shiftright1_38_t6 (t6 Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))) Reg(U8) Some([100])
# Var inline_div32_div16_39_inline_div16_shiftright1_38_t7 (t7 Index("a", Number(U8, 2))) Reg(U8) Some([101])
# Var inline_div32_div16_39_inline_div16_shiftright1_38_t8 (t8 Number(U8, 1)) Reg(U8) Some([100])
# Var inline_div32_div16_39_inline_div16_shiftright1_38_t9 (t9 Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))) Reg(U8) Some([100])
# Var inline_div32_div16_39_lo (Local lo Number(USIZE) Reg(U32)) Reg(U32) Some([112, 113, 114, 115])
# Var inline_div32_div16_39_mid (Local mid Number(USIZE) Reg(U32)) Reg(U32) Some([116, 117, 118, 119])
# Var inline_div32_div16_39_r (Local r Number(USIZE) Reg(U32)) Reg(U32) Some([84, 85, 86, 87])
# Var inline_div32_div16_39_t0 (t0 Ident("a")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_div32_div16_39_t1 (t1 Ident("b")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_div32_div16_39_t10 (t10 Ident("hi")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_div32_div16_39_t11 (t11 Arithmetic(Add, Ident("lo"), Ident("hi"))) Reg(U32) Some([84, 85, 86, 87])
# Var inline_div32_div16_39_t12 (t12 Ident("lo")) Reg(U32) Some([84, 85, 86, 87])
# Var inline_div32_div16_39_t13 (t13 Ident("hi")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_div32_div16_39_t14 (t14 Ident("mid")) Reg(U32) Some([84, 85, 86, 87])
# Var inline_div32_div16_39_t15 (t15 Ident("b")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_div32_div16_39_t16 (t16 Index("x", Number(U8, 2))) Reg(U8) Some([101])
# Var inline_div32_div16_39_t17 (t17 Number(U8, 0)) Reg(U8) Some([100])
# Var inline_div32_div16_39_t18 (t18 Ident("mid")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_div32_div16_39_t19 (t19 Number(USIZE, 1)) Reg(U32) Some([84, 85, 86, 87])
# Var inline_div32_div16_39_t2 (t2 Number(USIZE, 0)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_div32_div16_39_t20 (t20 Index("x", Number(U8, 3))) Reg(U8) Some([101])
# Var inline_div32_div16_39_t21 (t21 Number(U8, 0)) Reg(U8) Some([100])
# Var inline_div32_div16_39_t22 (t22 Ident("mid")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_div32_div16_39_t23 (t23 Number(USIZE, 1)) Reg(U32) Some([84, 85, 86, 87])
# Var inline_div32_div16_39_t24 (t24 Ident("x")) Reg(U32) Some([84, 85, 86, 87])
# Var inline_div32_div16_39_t25 (t25 Ident("a")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_div32_div16_39_t26 (t26 Ident("mid")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_div32_div16_39_t27 (t27 Number(USIZE, 1)) Reg(U32) Some([84, 85, 86, 87])
# Var inline_div32_div16_39_t28 (t28 Ident("x")) Reg(U32) Some([84, 85, 86, 87])
# Var inline_div32_div16_39_t29 (t29 Ident("a")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_div32_div16_39_t3 (t3 Ident("a")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_div32_div16_39_t30 (t30 Ident("mid")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_div32_div16_39_t31 (t31 Ident("a")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_div32_div16_39_t32 (t32 Ident("x")) Reg(U32) Some([84, 85, 86, 87])
# Var inline_div32_div16_39_t33 (t33 Ident("r")) Reg(U32) Some([84, 85, 86, 87])
# Var inline_div32_div16_39_t34 (t34 Ident("b")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_div32_div16_39_t35 (t35 Ident("mid")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_div32_div16_39_t36 (t36 Ident("mid")) Reg(U32) Some([84, 85, 86, 87])
# Var inline_div32_div16_39_t37 (t37 Number(USIZE, 1)) Reg(U32) Some([88, 89, 90, 91])
# Var inline_div32_div16_39_t38 (t38 Ident("lo")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_div32_div16_39_t4 (t4 Number(USIZE, 256)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_div32_div16_39_t5 (t5 Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_div32_div16_39_t6 (t6 Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0)))) Reg(U8) Some([120])
# Var inline_div32_div16_39_t7 (t7 Index("a", Number(U8, 0))) Reg(U8) Some([120])
# Var inline_div32_div16_39_t8 (t8 Index("b", Number(U8, 0))) Reg(U8) Some([121])
# Var inline_div32_div16_39_t9 (t9 Ident("lo")) Reg(U32) Some([84, 85, 86, 87])
# Var inline_div32_div16_39_x (Local x Number(USIZE) Reg(U32)) Reg(U32) Some([84, 85, 86, 87])
# Var inline_div32_shiftright1_40_a (Arg0 a Number(USIZE)) Reg(U32) Some([84, 85, 86, 87])
# Var inline_div32_shiftright1_40_t0 (t0 Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))) Reg(U8) Some([100])
# Var inline_div32_shiftright1_40_t1 (t1 Index("a", Number(U8, 0))) Reg(U8) Some([101])
# Var inline_div32_shiftright1_40_t10 (t10 Index("a", Number(U8, 3))) Reg(U8) Some([101])
# Var inline_div32_shiftright1_40_t11 (t11 Number(U8, 1)) Reg(U8) Some([100])
# Var inline_div32_shiftright1_40_t12 (t12 Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))) Reg(U8) Some([100])
# Var inline_div32_shiftright1_40_t13 (t13 Index("a", Number(U8, 0))) Reg(U8) Some([101])
# Var inline_div32_shiftright1_40_t14 (t14 Number(U8, 127)) Reg(U8) Some([100])
# Var inline_div32_shiftright1_40_t15 (t15 Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))) Reg(U8) Some([100])
# Var inline_div32_shiftright1_40_t16 (t16 Index("a", Number(U8, 0))) Reg(U8) Some([101])
# Var inline_div32_shiftright1_40_t17 (t17 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) Reg(U8) Some([100])
# Var inline_div32_shiftright1_40_t18 (t18 Index("a", Number(U8, 1))) Reg(U8) Some([100])
# Var inline_div32_shiftright1_40_t19 (t19 Number(U8, 128)) Reg(U8) Some([110])
# Var inline_div32_shiftright1_40_t2 (t2 Number(U8, 1)) Reg(U8) Some([100])
# Var inline_div32_shiftright1_40_t20 (t20 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))) Reg(U8) Some([100])
# Var inline_div32_shiftright1_40_t21 (t21 Index("a", Number(U8, 1))) Reg(U8) Some([101])
# Var inline_div32_shiftright1_40_t22 (t22 Number(U8, 127)) Reg(U8) Some([100])
# Var inline_div32_shiftright1_40_t23 (t23 Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))) Reg(U8) Some([100])
# Var inline_div32_shiftright1_40_t24 (t24 Index("a", Number(U8, 1))) Reg(U8) Some([101])
# Var inline_div32_shiftright1_40_t25 (t25 Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) Reg(U8) Some([100])
# Var inline_div32_shiftright1_40_t26 (t26 Index("a", Number(U8, 2))) Reg(U8) Some([100])
# Var inline_div32_shiftright1_40_t27 (t27 Number(U8, 128)) Reg(U8) Some([110])
# Var inline_div32_shiftright1_40_t28 (t28 Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))) Reg(U8) Some([100])
# Var inline_div32_shiftright1_40_t29 (t29 Index("a", Number(U8, 2))) Reg(U8) Some([101])
# Var inline_div32_shiftright1_40_t3 (t3 Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))) Reg(U8) Some([100])
# Var inline_div32_shiftright1_40_t30 (t30 Number(U8, 127)) Reg(U8) Some([100])
# Var inline_div32_shiftright1_40_t31 (t31 Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))) Reg(U8) Some([100])
# Var inline_div32_shiftright1_40_t32 (t32 Index("a", Number(U8, 2))) Reg(U8) Some([101])
# Var inline_div32_shiftright1_40_t33 (t33 Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) Reg(U8) Some([100])
# Var inline_div32_shiftright1_40_t34 (t34 Index("a", Number(U8, 3))) Reg(U8) Some([100])
# Var inline_div32_shiftright1_40_t35 (t35 Number(U8, 128)) Reg(U8) Some([110])
# Var inline_div32_shiftright1_40_t36 (t36 Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))) Reg(U8) Some([100])
# Var inline_div32_shiftright1_40_t37 (t37 Index("a", Number(U8, 3))) Reg(U8) Some([101])
# Var inline_div32_shiftright1_40_t38 (t38 Number(U8, 127)) Reg(U8) Some([100])
# Var inline_div32_shiftright1_40_t39 (t39 Ident("a")) Reg(U32) Some([84, 85, 86, 87])
# Var inline_div32_shiftright1_40_t4 (t4 Index("a", Number(U8, 1))) Reg(U8) Some([101])
# Var inline_div32_shiftright1_40_t5 (t5 Number(U8, 1)) Reg(U8) Some([100])
# Var inline_div32_shiftright1_40_t6 (t6 Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))) Reg(U8) Some([100])
# Var inline_div32_shiftright1_40_t7 (t7 Index("a", Number(U8, 2))) Reg(U8) Some([101])
# Var inline_div32_shiftright1_40_t8 (t8 Number(U8, 1)) Reg(U8) Some([100])
# Var inline_div32_shiftright1_40_t9 (t9 Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))) Reg(U8) Some([100])
# Var inline_div32_shiftright1_41_a (Arg0 a Number(USIZE)) Reg(U32) Some([84, 85, 86, 87])
# Var inline_div32_shiftright1_41_t0 (t0 Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))) Reg(U8) Some([100])
# Var inline_div32_shiftright1_41_t1 (t1 Index("a", Number(U8, 0))) Reg(U8) Some([101])
# Var inline_div32_shiftright1_41_t10 (t10 Index("a", Number(U8, 3))) Reg(U8) Some([101])
# Var inline_div32_shiftright1_41_t11 (t11 Number(U8, 1)) Reg(U8) Some([100])
# Var inline_div32_shiftright1_41_t12 (t12 Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))) Reg(U8) Some([100])
# Var inline_div32_shiftright1_41_t13 (t13 Index("a", Number(U8, 0))) Reg(U8) Some([101])
# Var inline_div32_shiftright1_41_t14 (t14 Number(U8, 127)) Reg(U8) Some([100])
# Var inline_div32_shiftright1_41_t15 (t15 Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))) Reg(U8) Some([100])
# Var inline_div32_shiftright1_41_t16 (t16 Index("a", Number(U8, 0))) Reg(U8) Some([101])
# Var inline_div32_shiftright1_41_t17 (t17 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) Reg(U8) Some([100])
# Var inline_div32_shiftright1_41_t18 (t18 Index("a", Number(U8, 1))) Reg(U8) Some([100])
# Var inline_div32_shiftright1_41_t19 (t19 Number(U8, 128)) Reg(U8) Some([110])
# Var inline_div32_shiftright1_41_t2 (t2 Number(U8, 1)) Reg(U8) Some([100])
# Var inline_div32_shiftright1_41_t20 (t20 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))) Reg(U8) Some([100])
# Var inline_div32_shiftright1_41_t21 (t21 Index("a", Number(U8, 1))) Reg(U8) Some([101])
# Var inline_div32_shiftright1_41_t22 (t22 Number(U8, 127)) Reg(U8) Some([100])
# Var inline_div32_shiftright1_41_t23 (t23 Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))) Reg(U8) Some([100])
# Var inline_div32_shiftright1_41_t24 (t24 Index("a", Number(U8, 1))) Reg(U8) Some([101])
# Var inline_div32_shiftright1_41_t25 (t25 Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) Reg(U8) Some([100])
# Var inline_div32_shiftright1_41_t26 (t26 Index("a", Number(U8, 2))) Reg(U8) Some([100])
# Var inline_div32_shiftright1_41_t27 (t27 Number(U8, 128)) Reg(U8) Some([110])
# Var inline_div32_shiftright1_41_t28 (t28 Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))) Reg(U8) Some([100])
# Var inline_div32_shiftright1_41_t29 (t29 Index("a", Number(U8, 2))) Reg(U8) Some([101])
# Var inline_div32_shiftright1_41_t3 (t3 Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))) Reg(U8) Some([100])
# Var inline_div32_shiftright1_41_t30 (t30 Number(U8, 127)) Reg(U8) Some([100])
# Var inline_div32_shiftright1_41_t31 (t31 Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))) Reg(U8) Some([100])
# Var inline_div32_shiftright1_41_t32 (t32 Index("a", Number(U8, 2))) Reg(U8) Some([101])
# Var inline_div32_shiftright1_41_t33 (t33 Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) Reg(U8) Some([100])
# Var inline_div32_shiftright1_41_t34 (t34 Index("a", Number(U8, 3))) Reg(U8) Some([100])
# Var inline_div32_shiftright1_41_t35 (t35 Number(U8, 128)) Reg(U8) Some([110])
# Var inline_div32_shiftright1_41_t36 (t36 Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))) Reg(U8) Some([100])
# Var inline_div32_shiftright1_41_t37 (t37 Index("a", Number(U8, 3))) Reg(U8) Some([101])
# Var inline_div32_shiftright1_41_t38 (t38 Number(U8, 127)) Reg(U8) Some([100])
# Var inline_div32_shiftright1_41_t39 (t39 Ident("a")) Reg(U32) Some([84, 85, 86, 87])
# Var inline_div32_shiftright1_41_t4 (t4 Index("a", Number(U8, 1))) Reg(U8) Some([101])
# Var inline_div32_shiftright1_41_t5 (t5 Number(U8, 1)) Reg(U8) Some([100])
# Var inline_div32_shiftright1_41_t6 (t6 Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))) Reg(U8) Some([100])
# Var inline_div32_shiftright1_41_t7 (t7 Index("a", Number(U8, 2))) Reg(U8) Some([101])
# Var inline_div32_shiftright1_41_t8 (t8 Number(U8, 1)) Reg(U8) Some([100])
# Var inline_div32_shiftright1_41_t9 (t9 Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))) Reg(U8) Some([100])
# Var lo (Local lo Number(USIZE) Reg(U32)) Reg(U32) Some([96, 97, 98, 99])
# Var mid (Local mid Number(USIZE) Reg(U32)) Reg(U32) Some([84, 85, 86, 87])
# Var r (Local r Number(USIZE) Reg(U32)) Reg(U32) Some([88, 89, 90, 91])
# Var t0 (Stack size negated) Reg(U32) Some([80, 81, 82, 83])
# Var t1 (t1 Ident("a")) Reg(U32) Some([72, 73, 74, 75])
# Var t10 (Stack size) Reg(U32) Some([72, 73, 74, 75])
# Var t11 (t11 Ident("lo")) Reg(U32) Some([84, 85, 86, 87])
# Var t12 (t12 Ident("hi")) Reg(U32) Some([80, 81, 82, 83])
# Var t13 (t13 Call(Call { function: "shiftright1", parameters: [Ident("lo")] })) Reg(U32) Some([104, 105, 106, 107])
# Var t14 (t14 Ident("lo")) Reg(U32) Some([84, 85, 86, 87])
# Var t15 (t15 Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) Reg(U32) Some([84, 85, 86, 87])
# Var t16 (t16 Ident("hi")) Reg(U32) Some([80, 81, 82, 83])
# Var t17 (t17 Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })) Reg(U8) Some([122])
# Var t18 (t18 Ident("mid")) Reg(U32) Some([84, 85, 86, 87])
# Var t19 (t19 Ident("b")) Reg(U32) Some([76, 77, 78, 79])
# Var t2 (t2 Ident("b")) Reg(U32) Some([76, 77, 78, 79])
# Var t20 (t20 AddressOf(Ident("x64"))) Reg(U32) Some([88, 89, 90, 91])
# Var t21 (t21 Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))) Reg(U32) Some([88, 89, 90, 91])
# Var t22 (t22 Ident("__frame_pointer")) Reg(U32) Some([124, 125, 126, 127])
# Var t23 (t23 Number(USIZE, 0)) Reg(U32) Some([88, 89, 90, 91])
# Var t24 (t24 LocalFieldDeref("x64", "hi")) Reg(U32) Some([88, 89, 90, 91])
# Var t25 (t25 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }) Reg(U32) Some([88, 89, 90, 91])
# Var t26 (t26 Ident("__frame_pointer")) Reg(U32) Some([124, 125, 126, 127])
# Var t27 (t27 Number(USIZE, 4)) Reg(U32) Some([88, 89, 90, 91])
# Var t28 (t28 Number(USIZE, 0)) Reg(U32) Some([92, 93, 94, 95])
# Var t29 (t29 Ident("mid")) Reg(U32) Some([80, 81, 82, 83])
# Var t3 (t3 Number(USIZE, 0)) Reg(U32) Some([72, 73, 74, 75])
# Var t30 (t30 Number(USIZE, 1)) Reg(U32) Some([84, 85, 86, 87])
# Var t31 (t31 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident("__frame_pointer") }) Reg(U32) Some([124, 125, 126, 127])
# Var t32 (t32 Ident("x")) Reg(U32) Some([88, 89, 90, 91])
# Var t33 (t33 Ident("a")) Reg(U32) Some([72, 73, 74, 75])
# Var t34 (t34 Ident("mid")) Reg(U32) Some([80, 81, 82, 83])
# Var t35 (t35 Number(USIZE, 1)) Reg(U32) Some([84, 85, 86, 87])
# Var t36 (t36 Ident("x")) Reg(U32) Some([88, 89, 90, 91])
# Var t37 (t37 Ident("a")) Reg(U32) Some([72, 73, 74, 75])
# Var t38 (t38 Ident("mid")) Reg(U32) Some([72, 73, 74, 75])
# Var t39 (Stack size) Reg(U32) Some([76, 77, 78, 79])
# Var t4 (Stack size) Reg(U32) Some([76, 77, 78, 79])
# Var t40 (t40 Ident("a")) Reg(U32) Some([72, 73, 74, 75])
# Var t41 (t41 Ident("x")) Reg(U32) Some([88, 89, 90, 91])
# Var t42 (t42 Ident("r")) Reg(U32) Some([88, 89, 90, 91])
# Var t43 (t43 Ident("b")) Reg(U32) Some([76, 77, 78, 79])
# Var t44 (t44 Ident("mid")) Reg(U32) Some([72, 73, 74, 75])
# Var t45 (Stack size) Reg(U32) Some([76, 77, 78, 79])
# Var t46 (t46 Ident("mid")) Reg(U32) Some([84, 85, 86, 87])
# Var t47 (t47 Number(USIZE, 1)) Reg(U32) Some([88, 89, 90, 91])
# Var t48 (t48 Ident("lo")) Reg(U32) Some([72, 73, 74, 75])
# Var t49 (Stack size) Reg(U32) Some([76, 77, 78, 79])
# Var t5 (t5 Ident("a")) Reg(U32) Some([72, 73, 74, 75])
# Var t6 (t6 Number(USIZE, 65536)) Reg(U32) Some([80, 81, 82, 83])
# Var t7 (t7 Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) Reg(U32) Some([76, 77, 78, 79])
# Var t8 (t8 Ident("a")) Reg(U32) Some([72, 73, 74, 75])
# Var t9 (t9 Ident("b")) Reg(U32) Some([76, 77, 78, 79])
# Var x (Local x Number(USIZE) Reg(U32)) Reg(U32) Some([88, 89, 90, 91])
# Var x64 (Local x64 Struct("U64") FrameOffset(0)) FrameOffset(0) None
# 00b81 Instruction { source: "reserve 8 bytes of stack space for locals", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffff8=4294967288)], resolved: None }
32 0c f8 ff ff ff 
# 00b87 Instruction { source: "Save function parameter 'a' registers [0, 1, 2, 3] to locals [72, 73, 74, 75].", opcode: Copy32, args: [Register(0x00), Register(0x48)], resolved: None }
21 00 48 
# 00b8a Instruction { source: "Save function parameter 'b' registers [4, 5, 6, 7] to locals [76, 77, 78, 79].", opcode: Copy32, args: [Register(0x04), Register(0x4c)], resolved: None }
21 04 4c 
# t0 <- 0xfffffff8u32 
# 	SourceContext { contexts: [] }
# 00b8d Instruction { source: "t0 <- 0xfffffff8u32 \n\tSourceContext { contexts: [] }", opcode: LoadImm32, args: [Register(0x50), Constant32(0xfffffff8=4294967288)], resolved: None }
20 50 f8 ff ff ff 
# __frame_pointer <- __frame_pointer Add t0
# 	SourceContext { contexts: [] }
# 00b93 Instruction { source: "__frame_pointer <- __frame_pointer Add t0\n\tSourceContext { contexts: [] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00b94 Instruction { source: "__frame_pointer <- __frame_pointer Add t0\n\tSourceContext { contexts: [] }", opcode: AddCarry32_1, args: [Register(0x0c), Register(0x50), Register(0x0c)], resolved: None }
30 0c 50 0c 
# 00b98 Instruction { source: "__frame_pointer <- __frame_pointer Add t0\n\tSourceContext { contexts: [] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t1 <- a U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t1 <- a U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# t2 <- b U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "t2 <- b U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# if t1 < t2 then 'div32_if_true_0_1' else 'div32_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }"] }
# 00b99 Instruction { source: "if t1 < t2 then 'div32_if_true_0_1' else 'div32_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8, args: [Register(0x4f), Register(0x4b)], resolved: None }
15 4f 4b 
# 00b9c Instruction { source: "if t1 < t2 then 'div32_if_true_0_1' else 'div32_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x4e), Register(0x4a)], resolved: None }
16 4e 4a 
# 00b9f Instruction { source: "if t1 < t2 then 'div32_if_true_0_1' else 'div32_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x4d), Register(0x49)], resolved: None }
16 4d 49 
# 00ba2 Instruction { source: "if t1 < t2 then 'div32_if_true_0_1' else 'div32_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x4c), Register(0x48)], resolved: None }
16 4c 48 
# 00ba5 Instruction { source: "if t1 < t2 then 'div32_if_true_0_1' else 'div32_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: JcImm, args: [Label24(div32_if_else_0_2)], resolved: None }
71 ca 0b 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t1 < t2 then 'div32_if_true_0_1' else 'div32_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: JmpImm, args: [Label24(div32_if_true_0_1)], resolved: None }
# :div32_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }"] }
# div32_if_true_0_1
# t3 <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Return { value: Some(Number(USIZE, 0)) }", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 00ba9 Instruction { source: "t3 <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Return { value: Some(Number(USIZE, 0)) }\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x48), Constant32(0x00000000=0)], resolved: None }
20 48 00 00 00 00 
# t4 <- 0n8/0x00000008u32 
# 	SourceContext { contexts: ["Return { value: Some(Number(USIZE, 0)) }"] }
# 00baf Instruction { source: "t4 <- 0n8/0x00000008u32 \n\tSourceContext { contexts: [\"Return { value: Some(Number(USIZE, 0)) }\"] }", opcode: LoadImm32, args: [Register(0x4c), Constant32(0x00000008=8)], resolved: None }
20 4c 08 00 00 00 
# __frame_pointer <- __frame_pointer Add t4
# 	SourceContext { contexts: ["Return { value: Some(Number(USIZE, 0)) }"] }
# 00bb5 Instruction { source: "__frame_pointer <- __frame_pointer Add t4\n\tSourceContext { contexts: [\"Return { value: Some(Number(USIZE, 0)) }\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00bb6 Instruction { source: "__frame_pointer <- __frame_pointer Add t4\n\tSourceContext { contexts: [\"Return { value: Some(Number(USIZE, 0)) }\"] }", opcode: AddCarry32_1, args: [Register(0x0c), Register(0x4c), Register(0x0c)], resolved: None }
30 0c 4c 0c 
# 00bba Instruction { source: "__frame_pointer <- __frame_pointer Add t4\n\tSourceContext { contexts: [\"Return { value: Some(Number(USIZE, 0)) }\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# return Some(t3)
# 	SourceContext { contexts: ["Return { value: Some(Number(USIZE, 0)) }"] }
# 00bbb Instruction { source: "return Some(t3)\n\tSourceContext { contexts: [\"Return { value: Some(Number(USIZE, 0)) }\"] }", opcode: Copy32, args: [Register(0x48), Register(0x00)], resolved: None }
21 48 00 
# 00bbe Instruction { source: "Dealloc 8 bytes from stack", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000008=8)], resolved: None }
32 0c 08 00 00 00 
# 00bc4 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# goto div32_if_end_0
# 	SourceContext { contexts: [] }
# 00bc6 Instruction { source: "goto div32_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(div32_if_end_0)], resolved: None }
70 ca 0b 00 
# :div32_if_else_0_2
# 	SourceContext { contexts: [] }
# div32_if_else_0_2
# :div32_if_end_0
# 	SourceContext { contexts: [] }
# div32_if_end_0
# t5 <- a U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 65536) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t5 <- a U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# t6 <- 0n65536/0x00010000u32 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 65536) }", "Number(USIZE, 65536)", "Number(USIZE, 65536)"] }
# 00bca Instruction { source: "t6 <- 0n65536/0x00010000u32 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }\", \"Number(USIZE, 65536)\", \"Number(USIZE, 65536)\"] }", opcode: LoadImm32, args: [Register(0x50), Constant32(0x00010000=65536)], resolved: None }
20 50 00 00 01 00 
# if t5 < t6 then 'div32_if_true_0_4' else 'div32_if_else_0_5'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 65536) }"] }
# 00bd0 Instruction { source: "if t5 < t6 then 'div32_if_true_0_4' else 'div32_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }\"] }", opcode: Cmp8, args: [Register(0x53), Register(0x4b)], resolved: None }
15 53 4b 
# 00bd3 Instruction { source: "if t5 < t6 then 'div32_if_true_0_4' else 'div32_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }\"] }", opcode: Cmp8IfZero, args: [Register(0x52), Register(0x4a)], resolved: None }
16 52 4a 
# 00bd6 Instruction { source: "if t5 < t6 then 'div32_if_true_0_4' else 'div32_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }\"] }", opcode: Cmp8IfZero, args: [Register(0x51), Register(0x49)], resolved: None }
16 51 49 
# 00bd9 Instruction { source: "if t5 < t6 then 'div32_if_true_0_4' else 'div32_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }\"] }", opcode: Cmp8IfZero, args: [Register(0x50), Register(0x48)], resolved: None }
16 50 48 
# 00bdc Instruction { source: "if t5 < t6 then 'div32_if_true_0_4' else 'div32_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }\"] }", opcode: JcImm, args: [Label24(div32_if_else_0_5)], resolved: None }
71 e2 0e 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t5 < t6 then 'div32_if_true_0_4' else 'div32_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }\"] }", opcode: JmpImm, args: [Label24(div32_if_true_0_4)], resolved: None }
# :div32_if_true_0_4
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }])], else_block: [] }"] }
# div32_if_true_0_4
# t8 <- a U32
# 	SourceContext { contexts: ["Return { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }", "Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })", "Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t8 <- a U32\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }\", \"Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# t9 <- b U32
# 	SourceContext { contexts: ["Return { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }", "Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })", "Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "t9 <- b U32\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }\", \"Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_div32_div16_39_a <- t8 U32
# 	SourceContext { contexts: ["Return { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }", "Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })", "Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_39_a <- t8 U32\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }\", \"Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_div32_div16_39_b <- t9 U32
# 	SourceContext { contexts: ["Return { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }", "Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })", "Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_39_b <- t9 U32\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }\", \"Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_div32_div16_39_t0 <- inline_div32_div16_39_a U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_39_t0 <- inline_div32_div16_39_a U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_div32_div16_39_t1 <- inline_div32_div16_39_b U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_39_t1 <- inline_div32_div16_39_b U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# if inline_div32_div16_39_t0 < inline_div32_div16_39_t1 then 'inline_div32_div16_39_div16_if_true_0_1' else 'inline_div32_div16_39_div16_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }"] }
# 00be0 Instruction { source: "if inline_div32_div16_39_t0 < inline_div32_div16_39_t1 then 'inline_div32_div16_39_div16_if_true_0_1' else 'inline_div32_div16_39_div16_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8, args: [Register(0x4f), Register(0x4b)], resolved: None }
15 4f 4b 
# 00be3 Instruction { source: "if inline_div32_div16_39_t0 < inline_div32_div16_39_t1 then 'inline_div32_div16_39_div16_if_true_0_1' else 'inline_div32_div16_39_div16_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x4e), Register(0x4a)], resolved: None }
16 4e 4a 
# 00be6 Instruction { source: "if inline_div32_div16_39_t0 < inline_div32_div16_39_t1 then 'inline_div32_div16_39_div16_if_true_0_1' else 'inline_div32_div16_39_div16_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x4d), Register(0x49)], resolved: None }
16 4d 49 
# 00be9 Instruction { source: "if inline_div32_div16_39_t0 < inline_div32_div16_39_t1 then 'inline_div32_div16_39_div16_if_true_0_1' else 'inline_div32_div16_39_div16_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x4c), Register(0x48)], resolved: None }
16 4c 48 
# 00bec Instruction { source: "if inline_div32_div16_39_t0 < inline_div32_div16_39_t1 then 'inline_div32_div16_39_div16_if_true_0_1' else 'inline_div32_div16_39_div16_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: JcImm, args: [Label24(inline_div32_div16_39_div16_if_else_0_2)], resolved: None }
71 01 0c 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_39_t0 < inline_div32_div16_39_t1 then 'inline_div32_div16_39_div16_if_true_0_1' else 'inline_div32_div16_39_div16_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_39_div16_if_true_0_1)], resolved: None }
# :inline_div32_div16_39_div16_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }"] }
# inline_div32_div16_39_div16_if_true_0_1
# inline_div32_div16_39_t2 <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Return { value: Some(Number(USIZE, 0)) }", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 00bf0 Instruction { source: "inline_div32_div16_39_t2 <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Return { value: Some(Number(USIZE, 0)) }\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x48), Constant32(0x00000000=0)], resolved: None }
20 48 00 00 00 00 
# t7 <- inline_div32_div16_39_t2 U32
# 	SourceContext { contexts: ["Return { value: Some(Number(USIZE, 0)) }"] }
# 00bf6 Instruction { source: "t7 <- inline_div32_div16_39_t2 U32\n\tSourceContext { contexts: [\"Return { value: Some(Number(USIZE, 0)) }\"] }", opcode: Copy32, args: [Register(0x48), Register(0x4c)], resolved: None }
21 48 4c 
# goto inline_div32_div16_39_function_end_div16
# 	SourceContext { contexts: ["Return { value: Some(Number(USIZE, 0)) }"] }
# 00bf9 Instruction { source: "goto inline_div32_div16_39_function_end_div16\n\tSourceContext { contexts: [\"Return { value: Some(Number(USIZE, 0)) }\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_39_function_end_div16)], resolved: None }
70 c7 0e 00 
# goto inline_div32_div16_39_div16_if_end_0
# 	SourceContext { contexts: [] }
# 00bfd Instruction { source: "goto inline_div32_div16_39_div16_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_div32_div16_39_div16_if_end_0)], resolved: None }
70 01 0c 00 
# :inline_div32_div16_39_div16_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_div32_div16_39_div16_if_else_0_2
# :inline_div32_div16_39_div16_if_end_0
# 	SourceContext { contexts: [] }
# inline_div32_div16_39_div16_if_end_0
# inline_div32_div16_39_t3 <- inline_div32_div16_39_a U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_39_t3 <- inline_div32_div16_39_a U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_div32_div16_39_t4 <- 0n256/0x00000100u32 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }", "Number(USIZE, 256)", "Number(USIZE, 256)"] }
# 00c01 Instruction { source: "inline_div32_div16_39_t4 <- 0n256/0x00000100u32 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\", \"Number(USIZE, 256)\", \"Number(USIZE, 256)\"] }", opcode: LoadImm32, args: [Register(0x50), Constant32(0x00000100=256)], resolved: None }
20 50 00 01 00 00 
# if inline_div32_div16_39_t3 < inline_div32_div16_39_t4 then 'inline_div32_div16_39_div16_if_true_0_4' else 'inline_div32_div16_39_div16_if_else_0_5'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }"] }
# 00c07 Instruction { source: "if inline_div32_div16_39_t3 < inline_div32_div16_39_t4 then 'inline_div32_div16_39_div16_if_true_0_4' else 'inline_div32_div16_39_div16_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\"] }", opcode: Cmp8, args: [Register(0x53), Register(0x4b)], resolved: None }
15 53 4b 
# 00c0a Instruction { source: "if inline_div32_div16_39_t3 < inline_div32_div16_39_t4 then 'inline_div32_div16_39_div16_if_true_0_4' else 'inline_div32_div16_39_div16_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\"] }", opcode: Cmp8IfZero, args: [Register(0x52), Register(0x4a)], resolved: None }
16 52 4a 
# 00c0d Instruction { source: "if inline_div32_div16_39_t3 < inline_div32_div16_39_t4 then 'inline_div32_div16_39_div16_if_true_0_4' else 'inline_div32_div16_39_div16_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\"] }", opcode: Cmp8IfZero, args: [Register(0x51), Register(0x49)], resolved: None }
16 51 49 
# 00c10 Instruction { source: "if inline_div32_div16_39_t3 < inline_div32_div16_39_t4 then 'inline_div32_div16_39_div16_if_true_0_4' else 'inline_div32_div16_39_div16_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\"] }", opcode: Cmp8IfZero, args: [Register(0x50), Register(0x48)], resolved: None }
16 50 48 
# 00c13 Instruction { source: "if inline_div32_div16_39_t3 < inline_div32_div16_39_t4 then 'inline_div32_div16_39_div16_if_true_0_4' else 'inline_div32_div16_39_div16_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\"] }", opcode: JcImm, args: [Label24(inline_div32_div16_39_div16_if_else_0_5)], resolved: None }
71 35 0c 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_39_t3 < inline_div32_div16_39_t4 then 'inline_div32_div16_39_div16_if_true_0_4' else 'inline_div32_div16_39_div16_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_39_div16_if_true_0_4)], resolved: None }
# :inline_div32_div16_39_div16_if_true_0_4
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }) }])], else_block: [] }"] }
# inline_div32_div16_39_div16_if_true_0_4
# inline_div32_div16_39_t7 <- inline_div32_div16_39_a[0x00..0x01] U8
# 	SourceContext { contexts: ["Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }) }", "Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }", "Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }", "Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0)))", "Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0)))", "Index(\"a\", Number(U8, 0))", "Index(\"a\", Number(U8, 0))"] }
# 00c17 Instruction { source: "inline_div32_div16_39_t7 <- inline_div32_div16_39_a[0x00..0x01] U8\n\tSourceContext { contexts: [\"Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }\", \"Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0)))\", \"Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0)))\", \"Index(\\\"a\\\", Number(U8, 0))\", \"Index(\\\"a\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x48), Register(0x78)], resolved: None }
0b 48 78 
# inline_div32_div16_39_t8 <- inline_div32_div16_39_b[0x00..0x01] U8
# 	SourceContext { contexts: ["Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }) }", "Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }", "Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }", "Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0)))", "Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0)))", "Index(\"b\", Number(U8, 0))", "Index(\"b\", Number(U8, 0))"] }
# 00c1a Instruction { source: "inline_div32_div16_39_t8 <- inline_div32_div16_39_b[0x00..0x01] U8\n\tSourceContext { contexts: [\"Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }\", \"Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0)))\", \"Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0)))\", \"Index(\\\"b\\\", Number(U8, 0))\", \"Index(\\\"b\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x4c), Register(0x79)], resolved: None }
0b 4c 79 
# inline_div32_div16_39_t6 <- inline_div32_div16_39_t7 Divide inline_div32_div16_39_t8
# 	SourceContext { contexts: ["Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }) }", "Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }", "Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }", "Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0)))", "Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0)))"] }
# 00c1d Instruction { source: "inline_div32_div16_39_t6 <- inline_div32_div16_39_t7 Divide inline_div32_div16_39_t8\n\tSourceContext { contexts: [\"Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }\", \"Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0)))\", \"Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0)))\"] }", opcode: Divide8, args: [Register(0x78), Register(0x79), Register(0x78)], resolved: None }
17 78 79 78 
# inline_div32_div16_39_t5 U32 <- inline_div32_div16_39_t6 U8
# 	SourceContext { contexts: ["Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }) }", "Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }", "Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }"] }
# 00c21 Instruction { source: "Zero-pad for inline_div32_div16_39_t5 U32 <- inline_div32_div16_39_t6 U8\n\tSourceContext { contexts: [\"Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }\"] }", opcode: LoadImm32, args: [Register(0x48), Constant32(0x00000000=0)], resolved: None }
20 48 00 00 00 00 
# 00c27 Instruction { source: "inline_div32_div16_39_t5 U32 <- inline_div32_div16_39_t6 U8\n\tSourceContext { contexts: [\"Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }\"] }", opcode: Copy8, args: [Register(0x78), Register(0x48)], resolved: None }
0b 78 48 
# t7 <- inline_div32_div16_39_t5 U32
# 	SourceContext { contexts: ["Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }) }"] }
# 00c2a Instruction { source: "t7 <- inline_div32_div16_39_t5 U32\n\tSourceContext { contexts: [\"Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }) }\"] }", opcode: Copy32, args: [Register(0x48), Register(0x4c)], resolved: None }
21 48 4c 
# goto inline_div32_div16_39_function_end_div16
# 	SourceContext { contexts: ["Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }) }"] }
# 00c2d Instruction { source: "goto inline_div32_div16_39_function_end_div16\n\tSourceContext { contexts: [\"Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }) }\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_39_function_end_div16)], resolved: None }
70 c7 0e 00 
# goto inline_div32_div16_39_div16_if_end_3
# 	SourceContext { contexts: [] }
# 00c31 Instruction { source: "goto inline_div32_div16_39_div16_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_div32_div16_39_div16_if_end_3)], resolved: None }
70 35 0c 00 
# :inline_div32_div16_39_div16_if_else_0_5
# 	SourceContext { contexts: [] }
# inline_div32_div16_39_div16_if_else_0_5
# :inline_div32_div16_39_div16_if_end_3
# 	SourceContext { contexts: [] }
# inline_div32_div16_39_div16_if_end_3
# inline_div32_div16_39_lo <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"lo\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }", "Number(USIZE, 0)"] }
# 00c35 Instruction { source: "inline_div32_div16_39_lo <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lo\\\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x70), Constant32(0x00000000=0)], resolved: None }
20 70 00 00 00 00 
# inline_div32_div16_39_hi <- 0n65535/0x0000ffffu32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 65535) }", "Number(USIZE, 65535)"] }
# 00c3b Instruction { source: "inline_div32_div16_39_hi <- 0n65535/0x0000ffffu32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 65535) }\", \"Number(USIZE, 65535)\"] }", opcode: LoadImm32, args: [Register(0x50), Constant32(0x0000ffff=65535)], resolved: None }
20 50 ff ff 00 00 
# :inline_div32_div16_39_div16_while_predicate_6
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }, Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }] }"] }
# inline_div32_div16_39_div16_while_predicate_6
# inline_div32_div16_39_t9 <- inline_div32_div16_39_lo U32
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }, Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }", "Ident(\"lo\")", "Ident(\"lo\")"] }
# 00c41 Instruction { source: "inline_div32_div16_39_t9 <- inline_div32_div16_39_lo U32\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] }) }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\", \"Ident(\\\"lo\\\")\", \"Ident(\\\"lo\\\")\"] }", opcode: Copy32, args: [Register(0x70), Register(0x54)], resolved: None }
21 70 54 
# inline_div32_div16_39_t10 <- inline_div32_div16_39_hi U32
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }, Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }", "Ident(\"hi\")", "Ident(\"hi\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_39_t10 <- inline_div32_div16_39_hi U32\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] }) }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\", \"Ident(\\\"hi\\\")\", \"Ident(\\\"hi\\\")\"] }", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# if inline_div32_div16_39_t9 < inline_div32_div16_39_t10 then 'inline_div32_div16_39_div16_while_body_7' else 'inline_div32_div16_39_div16_while_end_8'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }, Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }"] }
# 00c44 Instruction { source: "if inline_div32_div16_39_t9 < inline_div32_div16_39_t10 then 'inline_div32_div16_39_div16_while_body_7' else 'inline_div32_div16_39_div16_while_end_8'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] }) }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\"] }", opcode: Cmp8, args: [Register(0x53), Register(0x57)], resolved: None }
15 53 57 
# 00c47 Instruction { source: "if inline_div32_div16_39_t9 < inline_div32_div16_39_t10 then 'inline_div32_div16_39_div16_while_body_7' else 'inline_div32_div16_39_div16_while_end_8'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] }) }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x52), Register(0x56)], resolved: None }
16 52 56 
# 00c4a Instruction { source: "if inline_div32_div16_39_t9 < inline_div32_div16_39_t10 then 'inline_div32_div16_39_div16_while_body_7' else 'inline_div32_div16_39_div16_while_end_8'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] }) }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x51), Register(0x55)], resolved: None }
16 51 55 
# 00c4d Instruction { source: "if inline_div32_div16_39_t9 < inline_div32_div16_39_t10 then 'inline_div32_div16_39_div16_while_body_7' else 'inline_div32_div16_39_div16_while_end_8'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] }) }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x50), Register(0x54)], resolved: None }
16 50 54 
# 00c50 Instruction { source: "if inline_div32_div16_39_t9 < inline_div32_div16_39_t10 then 'inline_div32_div16_39_div16_while_body_7' else 'inline_div32_div16_39_div16_while_end_8'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] }) }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\"] }", opcode: JcImm, args: [Label24(inline_div32_div16_39_div16_while_end_8)], resolved: None }
71 bd 0e 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_39_t9 < inline_div32_div16_39_t10 then 'inline_div32_div16_39_div16_while_body_7' else 'inline_div32_div16_39_div16_while_end_8'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] }) }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_39_div16_while_body_7)], resolved: None }
# :inline_div32_div16_39_div16_while_body_7
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }, Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }] }"] }
# inline_div32_div16_39_div16_while_body_7
# inline_div32_div16_39_t12 <- inline_div32_div16_39_lo U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }", "Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] })", "Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))", "Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))", "Ident(\"lo\")", "Ident(\"lo\")"] }
# 00c54 Instruction { source: "inline_div32_div16_39_t12 <- inline_div32_div16_39_lo U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] }) }\", \"Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] })\", \"Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))\", \"Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))\", \"Ident(\\\"lo\\\")\", \"Ident(\\\"lo\\\")\"] }", opcode: Copy32, args: [Register(0x70), Register(0x54)], resolved: None }
21 70 54 
# inline_div32_div16_39_t13 <- inline_div32_div16_39_hi U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }", "Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] })", "Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))", "Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))", "Ident(\"hi\")", "Ident(\"hi\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_39_t13 <- inline_div32_div16_39_hi U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] }) }\", \"Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] })\", \"Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))\", \"Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))\", \"Ident(\\\"hi\\\")\", \"Ident(\\\"hi\\\")\"] }", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_div32_div16_39_t11 <- inline_div32_div16_39_t12 Add inline_div32_div16_39_t13
# 	SourceContext { contexts: ["Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }", "Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] })", "Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))", "Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))"] }
# 00c57 Instruction { source: "inline_div32_div16_39_t11 <- inline_div32_div16_39_t12 Add inline_div32_div16_39_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] }) }\", \"Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] })\", \"Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))\", \"Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00c58 Instruction { source: "inline_div32_div16_39_t11 <- inline_div32_div16_39_t12 Add inline_div32_div16_39_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] }) }\", \"Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] })\", \"Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))\", \"Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x54), Register(0x50), Register(0x54)], resolved: None }
30 54 50 54 
# 00c5c Instruction { source: "inline_div32_div16_39_t11 <- inline_div32_div16_39_t12 Add inline_div32_div16_39_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] }) }\", \"Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] })\", \"Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))\", \"Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_div32_div16_39_inline_div16_shiftright1_38_a <- inline_div32_div16_39_t11 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }", "Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] })"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_39_inline_div16_shiftright1_38_a <- inline_div32_div16_39_t11 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] }) }\", \"Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] })\"] }", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_div32_div16_39_inline_div16_shiftright1_38_t1 <- inline_div32_div16_39_inline_div16_shiftright1_38_a[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))", "Index(\"a\", Number(U8, 0))", "Index(\"a\", Number(U8, 0))"] }
# 00c5d Instruction { source: "inline_div32_div16_39_inline_div16_shiftright1_38_t1 <- inline_div32_div16_39_inline_div16_shiftright1_38_a[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 0))\", \"Index(\\\"a\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x54), Register(0x65)], resolved: None }
0b 54 65 
# inline_div32_div16_39_inline_div16_shiftright1_38_t2 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 00c60 Instruction { source: "inline_div32_div16_39_inline_div16_shiftright1_38_t2 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x64), Constant8(0x01=1)], resolved: None }
04 64 01 
# inline_div32_div16_39_inline_div16_shiftright1_38_t0 <- inline_div32_div16_39_inline_div16_shiftright1_38_t1 RotateRight inline_div32_div16_39_inline_div16_shiftright1_38_t2
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))"] }
# 00c63 Instruction { source: "inline_div32_div16_39_inline_div16_shiftright1_38_t0 <- inline_div32_div16_39_inline_div16_shiftright1_38_t1 RotateRight inline_div32_div16_39_inline_div16_shiftright1_38_t2\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0x64), Register(0x65), Register(0x64)], resolved: None }
1e 04 64 65 64 
# inline_div32_div16_39_inline_div16_shiftright1_38_a[0x00..0x01] <- inline_div32_div16_39_inline_div16_shiftright1_38_t0 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1)) }"] }
# 00c68 Instruction { source: "inline_div32_div16_39_inline_div16_shiftright1_38_a[0x00..0x01] <- inline_div32_div16_39_inline_div16_shiftright1_38_t0 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x64), Register(0x54)], resolved: None }
0b 64 54 
# inline_div32_div16_39_inline_div16_shiftright1_38_t4 <- inline_div32_div16_39_inline_div16_shiftright1_38_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 00c6b Instruction { source: "inline_div32_div16_39_inline_div16_shiftright1_38_t4 <- inline_div32_div16_39_inline_div16_shiftright1_38_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x55), Register(0x65)], resolved: None }
0b 55 65 
# inline_div32_div16_39_inline_div16_shiftright1_38_t5 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 00c6e Instruction { source: "inline_div32_div16_39_inline_div16_shiftright1_38_t5 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x64), Constant8(0x01=1)], resolved: None }
04 64 01 
# inline_div32_div16_39_inline_div16_shiftright1_38_t3 <- inline_div32_div16_39_inline_div16_shiftright1_38_t4 RotateRight inline_div32_div16_39_inline_div16_shiftright1_38_t5
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))"] }
# 00c71 Instruction { source: "inline_div32_div16_39_inline_div16_shiftright1_38_t3 <- inline_div32_div16_39_inline_div16_shiftright1_38_t4 RotateRight inline_div32_div16_39_inline_div16_shiftright1_38_t5\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0x64), Register(0x65), Register(0x64)], resolved: None }
1e 04 64 65 64 
# inline_div32_div16_39_inline_div16_shiftright1_38_a[0x01..0x02] <- inline_div32_div16_39_inline_div16_shiftright1_38_t3 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1)) }"] }
# 00c76 Instruction { source: "inline_div32_div16_39_inline_div16_shiftright1_38_a[0x01..0x02] <- inline_div32_div16_39_inline_div16_shiftright1_38_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x64), Register(0x55)], resolved: None }
0b 64 55 
# inline_div32_div16_39_inline_div16_shiftright1_38_t7 <- inline_div32_div16_39_inline_div16_shiftright1_38_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 00c79 Instruction { source: "inline_div32_div16_39_inline_div16_shiftright1_38_t7 <- inline_div32_div16_39_inline_div16_shiftright1_38_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x56), Register(0x65)], resolved: None }
0b 56 65 
# inline_div32_div16_39_inline_div16_shiftright1_38_t8 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 00c7c Instruction { source: "inline_div32_div16_39_inline_div16_shiftright1_38_t8 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x64), Constant8(0x01=1)], resolved: None }
04 64 01 
# inline_div32_div16_39_inline_div16_shiftright1_38_t6 <- inline_div32_div16_39_inline_div16_shiftright1_38_t7 RotateRight inline_div32_div16_39_inline_div16_shiftright1_38_t8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))"] }
# 00c7f Instruction { source: "inline_div32_div16_39_inline_div16_shiftright1_38_t6 <- inline_div32_div16_39_inline_div16_shiftright1_38_t7 RotateRight inline_div32_div16_39_inline_div16_shiftright1_38_t8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0x64), Register(0x65), Register(0x64)], resolved: None }
1e 04 64 65 64 
# inline_div32_div16_39_inline_div16_shiftright1_38_a[0x02..0x03] <- inline_div32_div16_39_inline_div16_shiftright1_38_t6 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1)) }"] }
# 00c84 Instruction { source: "inline_div32_div16_39_inline_div16_shiftright1_38_a[0x02..0x03] <- inline_div32_div16_39_inline_div16_shiftright1_38_t6 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x64), Register(0x56)], resolved: None }
0b 64 56 
# inline_div32_div16_39_inline_div16_shiftright1_38_t10 <- inline_div32_div16_39_inline_div16_shiftright1_38_a[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))", "Index(\"a\", Number(U8, 3))", "Index(\"a\", Number(U8, 3))"] }
# 00c87 Instruction { source: "inline_div32_div16_39_inline_div16_shiftright1_38_t10 <- inline_div32_div16_39_inline_div16_shiftright1_38_a[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0x57), Register(0x65)], resolved: None }
0b 57 65 
# inline_div32_div16_39_inline_div16_shiftright1_38_t11 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 00c8a Instruction { source: "inline_div32_div16_39_inline_div16_shiftright1_38_t11 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x64), Constant8(0x01=1)], resolved: None }
04 64 01 
# inline_div32_div16_39_inline_div16_shiftright1_38_t9 <- inline_div32_div16_39_inline_div16_shiftright1_38_t10 RotateRight inline_div32_div16_39_inline_div16_shiftright1_38_t11
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))"] }
# 00c8d Instruction { source: "inline_div32_div16_39_inline_div16_shiftright1_38_t9 <- inline_div32_div16_39_inline_div16_shiftright1_38_t10 RotateRight inline_div32_div16_39_inline_div16_shiftright1_38_t11\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0x64), Register(0x65), Register(0x64)], resolved: None }
1e 04 64 65 64 
# inline_div32_div16_39_inline_div16_shiftright1_38_a[0x03..0x04] <- inline_div32_div16_39_inline_div16_shiftright1_38_t9 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1)) }"] }
# 00c92 Instruction { source: "inline_div32_div16_39_inline_div16_shiftright1_38_a[0x03..0x04] <- inline_div32_div16_39_inline_div16_shiftright1_38_t9 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x64), Register(0x57)], resolved: None }
0b 64 57 
# inline_div32_div16_39_inline_div16_shiftright1_38_t13 <- inline_div32_div16_39_inline_div16_shiftright1_38_a[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))", "Index(\"a\", Number(U8, 0))", "Index(\"a\", Number(U8, 0))"] }
# 00c95 Instruction { source: "inline_div32_div16_39_inline_div16_shiftright1_38_t13 <- inline_div32_div16_39_inline_div16_shiftright1_38_a[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\", \"Index(\\\"a\\\", Number(U8, 0))\", \"Index(\\\"a\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x54), Register(0x65)], resolved: None }
0b 54 65 
# inline_div32_div16_39_inline_div16_shiftright1_38_t14 <- 0n127/0x7fu8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))", "Number(U8, 127)", "Number(U8, 127)"] }
# 00c98 Instruction { source: "inline_div32_div16_39_inline_div16_shiftright1_38_t14 <- 0n127/0x7fu8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\", \"Number(U8, 127)\", \"Number(U8, 127)\"] }", opcode: LoadImm8, args: [Register(0x64), Constant8(0x7f=127)], resolved: None }
04 64 7f 
# inline_div32_div16_39_inline_div16_shiftright1_38_t12 <- inline_div32_div16_39_inline_div16_shiftright1_38_t13 BitwiseAnd inline_div32_div16_39_inline_div16_shiftright1_38_t14
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))"] }
# 00c9b Instruction { source: "inline_div32_div16_39_inline_div16_shiftright1_38_t12 <- inline_div32_div16_39_inline_div16_shiftright1_38_t13 BitwiseAnd inline_div32_div16_39_inline_div16_shiftright1_38_t14\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\"] }", opcode: And8, args: [Register(0x65), Register(0x64), Register(0x64)], resolved: None }
1b 65 64 64 
# inline_div32_div16_39_inline_div16_shiftright1_38_a[0x00..0x01] <- inline_div32_div16_39_inline_div16_shiftright1_38_t12 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127)) }"] }
# 00c9f Instruction { source: "inline_div32_div16_39_inline_div16_shiftright1_38_a[0x00..0x01] <- inline_div32_div16_39_inline_div16_shiftright1_38_t12 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127)) }\"] }", opcode: Copy8, args: [Register(0x64), Register(0x54)], resolved: None }
0b 64 54 
# inline_div32_div16_39_inline_div16_shiftright1_38_t16 <- inline_div32_div16_39_inline_div16_shiftright1_38_a[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Index(\"a\", Number(U8, 0))", "Index(\"a\", Number(U8, 0))"] }
# 00ca2 Instruction { source: "inline_div32_div16_39_inline_div16_shiftright1_38_t16 <- inline_div32_div16_39_inline_div16_shiftright1_38_a[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Index(\\\"a\\\", Number(U8, 0))\", \"Index(\\\"a\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x54), Register(0x65)], resolved: None }
0b 54 65 
# inline_div32_div16_39_inline_div16_shiftright1_38_t18 <- inline_div32_div16_39_inline_div16_shiftright1_38_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 00ca5 Instruction { source: "inline_div32_div16_39_inline_div16_shiftright1_38_t18 <- inline_div32_div16_39_inline_div16_shiftright1_38_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x55), Register(0x64)], resolved: None }
0b 55 64 
# inline_div32_div16_39_inline_div16_shiftright1_38_t19 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))", "Number(U8, 128)", "Number(U8, 128)"] }
# 00ca8 Instruction { source: "inline_div32_div16_39_inline_div16_shiftright1_38_t19 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x6e), Constant8(0x80=128)], resolved: None }
04 6e 80 
# inline_div32_div16_39_inline_div16_shiftright1_38_t17 <- inline_div32_div16_39_inline_div16_shiftright1_38_t18 BitwiseAnd inline_div32_div16_39_inline_div16_shiftright1_38_t19
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))"] }
# 00cab Instruction { source: "inline_div32_div16_39_inline_div16_shiftright1_38_t17 <- inline_div32_div16_39_inline_div16_shiftright1_38_t18 BitwiseAnd inline_div32_div16_39_inline_div16_shiftright1_38_t19\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\"] }", opcode: And8, args: [Register(0x64), Register(0x6e), Register(0x64)], resolved: None }
1b 64 6e 64 
# inline_div32_div16_39_inline_div16_shiftright1_38_t15 <- inline_div32_div16_39_inline_div16_shiftright1_38_t16 BitwiseOr inline_div32_div16_39_inline_div16_shiftright1_38_t17
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))"] }
# 00caf Instruction { source: "inline_div32_div16_39_inline_div16_shiftright1_38_t15 <- inline_div32_div16_39_inline_div16_shiftright1_38_t16 BitwiseOr inline_div32_div16_39_inline_div16_shiftright1_38_t17\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\"] }", opcode: Or8, args: [Register(0x65), Register(0x64), Register(0x64)], resolved: None }
1c 65 64 64 
# inline_div32_div16_39_inline_div16_shiftright1_38_a[0x00..0x01] <- inline_div32_div16_39_inline_div16_shiftright1_38_t15 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }"] }
# 00cb3 Instruction { source: "inline_div32_div16_39_inline_div16_shiftright1_38_a[0x00..0x01] <- inline_div32_div16_39_inline_div16_shiftright1_38_t15 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\"] }", opcode: Copy8, args: [Register(0x64), Register(0x54)], resolved: None }
0b 64 54 
# inline_div32_div16_39_inline_div16_shiftright1_38_t21 <- inline_div32_div16_39_inline_div16_shiftright1_38_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 00cb6 Instruction { source: "inline_div32_div16_39_inline_div16_shiftright1_38_t21 <- inline_div32_div16_39_inline_div16_shiftright1_38_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x55), Register(0x65)], resolved: None }
0b 55 65 
# inline_div32_div16_39_inline_div16_shiftright1_38_t22 <- 0n127/0x7fu8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))", "Number(U8, 127)", "Number(U8, 127)"] }
# 00cb9 Instruction { source: "inline_div32_div16_39_inline_div16_shiftright1_38_t22 <- 0n127/0x7fu8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\", \"Number(U8, 127)\", \"Number(U8, 127)\"] }", opcode: LoadImm8, args: [Register(0x64), Constant8(0x7f=127)], resolved: None }
04 64 7f 
# inline_div32_div16_39_inline_div16_shiftright1_38_t20 <- inline_div32_div16_39_inline_div16_shiftright1_38_t21 BitwiseAnd inline_div32_div16_39_inline_div16_shiftright1_38_t22
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))"] }
# 00cbc Instruction { source: "inline_div32_div16_39_inline_div16_shiftright1_38_t20 <- inline_div32_div16_39_inline_div16_shiftright1_38_t21 BitwiseAnd inline_div32_div16_39_inline_div16_shiftright1_38_t22\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\"] }", opcode: And8, args: [Register(0x65), Register(0x64), Register(0x64)], resolved: None }
1b 65 64 64 
# inline_div32_div16_39_inline_div16_shiftright1_38_a[0x01..0x02] <- inline_div32_div16_39_inline_div16_shiftright1_38_t20 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127)) }"] }
# 00cc0 Instruction { source: "inline_div32_div16_39_inline_div16_shiftright1_38_a[0x01..0x02] <- inline_div32_div16_39_inline_div16_shiftright1_38_t20 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127)) }\"] }", opcode: Copy8, args: [Register(0x64), Register(0x55)], resolved: None }
0b 64 55 
# inline_div32_div16_39_inline_div16_shiftright1_38_t24 <- inline_div32_div16_39_inline_div16_shiftright1_38_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 00cc3 Instruction { source: "inline_div32_div16_39_inline_div16_shiftright1_38_t24 <- inline_div32_div16_39_inline_div16_shiftright1_38_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x55), Register(0x65)], resolved: None }
0b 55 65 
# inline_div32_div16_39_inline_div16_shiftright1_38_t26 <- inline_div32_div16_39_inline_div16_shiftright1_38_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 00cc6 Instruction { source: "inline_div32_div16_39_inline_div16_shiftright1_38_t26 <- inline_div32_div16_39_inline_div16_shiftright1_38_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x56), Register(0x64)], resolved: None }
0b 56 64 
# inline_div32_div16_39_inline_div16_shiftright1_38_t27 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))", "Number(U8, 128)", "Number(U8, 128)"] }
# 00cc9 Instruction { source: "inline_div32_div16_39_inline_div16_shiftright1_38_t27 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x6e), Constant8(0x80=128)], resolved: None }
04 6e 80 
# inline_div32_div16_39_inline_div16_shiftright1_38_t25 <- inline_div32_div16_39_inline_div16_shiftright1_38_t26 BitwiseAnd inline_div32_div16_39_inline_div16_shiftright1_38_t27
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))"] }
# 00ccc Instruction { source: "inline_div32_div16_39_inline_div16_shiftright1_38_t25 <- inline_div32_div16_39_inline_div16_shiftright1_38_t26 BitwiseAnd inline_div32_div16_39_inline_div16_shiftright1_38_t27\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\"] }", opcode: And8, args: [Register(0x64), Register(0x6e), Register(0x64)], resolved: None }
1b 64 6e 64 
# inline_div32_div16_39_inline_div16_shiftright1_38_t23 <- inline_div32_div16_39_inline_div16_shiftright1_38_t24 BitwiseOr inline_div32_div16_39_inline_div16_shiftright1_38_t25
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))"] }
# 00cd0 Instruction { source: "inline_div32_div16_39_inline_div16_shiftright1_38_t23 <- inline_div32_div16_39_inline_div16_shiftright1_38_t24 BitwiseOr inline_div32_div16_39_inline_div16_shiftright1_38_t25\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\"] }", opcode: Or8, args: [Register(0x65), Register(0x64), Register(0x64)], resolved: None }
1c 65 64 64 
# inline_div32_div16_39_inline_div16_shiftright1_38_a[0x01..0x02] <- inline_div32_div16_39_inline_div16_shiftright1_38_t23 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }"] }
# 00cd4 Instruction { source: "inline_div32_div16_39_inline_div16_shiftright1_38_a[0x01..0x02] <- inline_div32_div16_39_inline_div16_shiftright1_38_t23 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\"] }", opcode: Copy8, args: [Register(0x64), Register(0x55)], resolved: None }
0b 64 55 
# inline_div32_div16_39_inline_div16_shiftright1_38_t29 <- inline_div32_div16_39_inline_div16_shiftright1_38_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 00cd7 Instruction { source: "inline_div32_div16_39_inline_div16_shiftright1_38_t29 <- inline_div32_div16_39_inline_div16_shiftright1_38_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x56), Register(0x65)], resolved: None }
0b 56 65 
# inline_div32_div16_39_inline_div16_shiftright1_38_t30 <- 0n127/0x7fu8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))", "Number(U8, 127)", "Number(U8, 127)"] }
# 00cda Instruction { source: "inline_div32_div16_39_inline_div16_shiftright1_38_t30 <- 0n127/0x7fu8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\", \"Number(U8, 127)\", \"Number(U8, 127)\"] }", opcode: LoadImm8, args: [Register(0x64), Constant8(0x7f=127)], resolved: None }
04 64 7f 
# inline_div32_div16_39_inline_div16_shiftright1_38_t28 <- inline_div32_div16_39_inline_div16_shiftright1_38_t29 BitwiseAnd inline_div32_div16_39_inline_div16_shiftright1_38_t30
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))"] }
# 00cdd Instruction { source: "inline_div32_div16_39_inline_div16_shiftright1_38_t28 <- inline_div32_div16_39_inline_div16_shiftright1_38_t29 BitwiseAnd inline_div32_div16_39_inline_div16_shiftright1_38_t30\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\"] }", opcode: And8, args: [Register(0x65), Register(0x64), Register(0x64)], resolved: None }
1b 65 64 64 
# inline_div32_div16_39_inline_div16_shiftright1_38_a[0x02..0x03] <- inline_div32_div16_39_inline_div16_shiftright1_38_t28 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127)) }"] }
# 00ce1 Instruction { source: "inline_div32_div16_39_inline_div16_shiftright1_38_a[0x02..0x03] <- inline_div32_div16_39_inline_div16_shiftright1_38_t28 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127)) }\"] }", opcode: Copy8, args: [Register(0x64), Register(0x56)], resolved: None }
0b 64 56 
# inline_div32_div16_39_inline_div16_shiftright1_38_t32 <- inline_div32_div16_39_inline_div16_shiftright1_38_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 00ce4 Instruction { source: "inline_div32_div16_39_inline_div16_shiftright1_38_t32 <- inline_div32_div16_39_inline_div16_shiftright1_38_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x56), Register(0x65)], resolved: None }
0b 56 65 
# inline_div32_div16_39_inline_div16_shiftright1_38_t34 <- inline_div32_div16_39_inline_div16_shiftright1_38_a[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))", "Index(\"a\", Number(U8, 3))", "Index(\"a\", Number(U8, 3))"] }
# 00ce7 Instruction { source: "inline_div32_div16_39_inline_div16_shiftright1_38_t34 <- inline_div32_div16_39_inline_div16_shiftright1_38_a[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\", \"Index(\\\"a\\\", Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0x57), Register(0x64)], resolved: None }
0b 57 64 
# inline_div32_div16_39_inline_div16_shiftright1_38_t35 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))", "Number(U8, 128)", "Number(U8, 128)"] }
# 00cea Instruction { source: "inline_div32_div16_39_inline_div16_shiftright1_38_t35 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x6e), Constant8(0x80=128)], resolved: None }
04 6e 80 
# inline_div32_div16_39_inline_div16_shiftright1_38_t33 <- inline_div32_div16_39_inline_div16_shiftright1_38_t34 BitwiseAnd inline_div32_div16_39_inline_div16_shiftright1_38_t35
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))"] }
# 00ced Instruction { source: "inline_div32_div16_39_inline_div16_shiftright1_38_t33 <- inline_div32_div16_39_inline_div16_shiftright1_38_t34 BitwiseAnd inline_div32_div16_39_inline_div16_shiftright1_38_t35\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\"] }", opcode: And8, args: [Register(0x64), Register(0x6e), Register(0x64)], resolved: None }
1b 64 6e 64 
# inline_div32_div16_39_inline_div16_shiftright1_38_t31 <- inline_div32_div16_39_inline_div16_shiftright1_38_t32 BitwiseOr inline_div32_div16_39_inline_div16_shiftright1_38_t33
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))"] }
# 00cf1 Instruction { source: "inline_div32_div16_39_inline_div16_shiftright1_38_t31 <- inline_div32_div16_39_inline_div16_shiftright1_38_t32 BitwiseOr inline_div32_div16_39_inline_div16_shiftright1_38_t33\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\"] }", opcode: Or8, args: [Register(0x65), Register(0x64), Register(0x64)], resolved: None }
1c 65 64 64 
# inline_div32_div16_39_inline_div16_shiftright1_38_a[0x02..0x03] <- inline_div32_div16_39_inline_div16_shiftright1_38_t31 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }"] }
# 00cf5 Instruction { source: "inline_div32_div16_39_inline_div16_shiftright1_38_a[0x02..0x03] <- inline_div32_div16_39_inline_div16_shiftright1_38_t31 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\"] }", opcode: Copy8, args: [Register(0x64), Register(0x56)], resolved: None }
0b 64 56 
# inline_div32_div16_39_inline_div16_shiftright1_38_t37 <- inline_div32_div16_39_inline_div16_shiftright1_38_a[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))", "Index(\"a\", Number(U8, 3))", "Index(\"a\", Number(U8, 3))"] }
# 00cf8 Instruction { source: "inline_div32_div16_39_inline_div16_shiftright1_38_t37 <- inline_div32_div16_39_inline_div16_shiftright1_38_a[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\", \"Index(\\\"a\\\", Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0x57), Register(0x65)], resolved: None }
0b 57 65 
# inline_div32_div16_39_inline_div16_shiftright1_38_t38 <- 0n127/0x7fu8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))", "Number(U8, 127)", "Number(U8, 127)"] }
# 00cfb Instruction { source: "inline_div32_div16_39_inline_div16_shiftright1_38_t38 <- 0n127/0x7fu8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\", \"Number(U8, 127)\", \"Number(U8, 127)\"] }", opcode: LoadImm8, args: [Register(0x64), Constant8(0x7f=127)], resolved: None }
04 64 7f 
# inline_div32_div16_39_inline_div16_shiftright1_38_t36 <- inline_div32_div16_39_inline_div16_shiftright1_38_t37 BitwiseAnd inline_div32_div16_39_inline_div16_shiftright1_38_t38
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))"] }
# 00cfe Instruction { source: "inline_div32_div16_39_inline_div16_shiftright1_38_t36 <- inline_div32_div16_39_inline_div16_shiftright1_38_t37 BitwiseAnd inline_div32_div16_39_inline_div16_shiftright1_38_t38\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\"] }", opcode: And8, args: [Register(0x65), Register(0x64), Register(0x64)], resolved: None }
1b 65 64 64 
# inline_div32_div16_39_inline_div16_shiftright1_38_a[0x03..0x04] <- inline_div32_div16_39_inline_div16_shiftright1_38_t36 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127)) }"] }
# 00d02 Instruction { source: "inline_div32_div16_39_inline_div16_shiftright1_38_a[0x03..0x04] <- inline_div32_div16_39_inline_div16_shiftright1_38_t36 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127)) }\"] }", opcode: Copy8, args: [Register(0x64), Register(0x57)], resolved: None }
0b 64 57 
# inline_div32_div16_39_inline_div16_shiftright1_38_t39 <- inline_div32_div16_39_inline_div16_shiftright1_38_a U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"a\")) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_39_inline_div16_shiftright1_38_t39 <- inline_div32_div16_39_inline_div16_shiftright1_38_a U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"a\\\")) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_div32_div16_39_mid <- inline_div32_div16_39_inline_div16_shiftright1_38_t39 U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"a\")) }"] }
# 00d05 Instruction { source: "inline_div32_div16_39_mid <- inline_div32_div16_39_inline_div16_shiftright1_38_t39 U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"a\\\")) }\"] }", opcode: Copy32, args: [Register(0x54), Register(0x74)], resolved: None }
21 54 74 
# goto inline_div32_div16_39_inline_div16_shiftright1_38_function_end_shiftright1
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"a\")) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_div32_div16_39_inline_div16_shiftright1_38_function_end_shiftright1\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"a\\\")) }\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_39_inline_div16_shiftright1_38_function_end_shiftright1)], resolved: None }
# :inline_div32_div16_39_inline_div16_shiftright1_38_function_end_shiftright1
# 	SourceContext { contexts: [] }
# inline_div32_div16_39_inline_div16_shiftright1_38_function_end_shiftright1
# inline_div32_div16_39_t14 <- inline_div32_div16_39_mid U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] })", "Ident(\"mid\")", "Ident(\"mid\")"] }
# 00d08 Instruction { source: "inline_div32_div16_39_t14 <- inline_div32_div16_39_mid U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] })\", \"Ident(\\\"mid\\\")\", \"Ident(\\\"mid\\\")\"] }", opcode: Copy32, args: [Register(0x74), Register(0x54)], resolved: None }
21 74 54 
# inline_div32_div16_39_t15 <- inline_div32_div16_39_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_39_t15 <- inline_div32_div16_39_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_div32_div16_39_inline_div16_mul16_32_6_a <- inline_div32_div16_39_t14 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] })"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_39_inline_div16_mul16_32_6_a <- inline_div32_div16_39_t14 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_div32_div16_39_inline_div16_mul16_32_6_b <- inline_div32_div16_39_t15 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] })"] }
# 00d0b Instruction { source: "inline_div32_div16_39_inline_div16_mul16_32_6_b <- inline_div32_div16_39_t15 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x58)], resolved: None }
21 4c 58 
# inline_div32_div16_39_inline_div16_mul16_32_6_t0 <- inline_div32_div16_39_inline_div16_mul16_32_6_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_39_inline_div16_mul16_32_6_t0 <- inline_div32_div16_39_inline_div16_mul16_32_6_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_div32_div16_39_inline_div16_mul16_32_6_t1 <- inline_div32_div16_39_inline_div16_mul16_32_6_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_39_inline_div16_mul16_32_6_t1 <- inline_div32_div16_39_inline_div16_mul16_32_6_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x58), Register(0x58)], resolved: None }
# inline_div32_div16_39_inline_div16_mul16_32_6_c <- inline_div32_div16_39_inline_div16_mul16_32_6_t0 Multiply inline_div32_div16_39_inline_div16_mul16_32_6_t1
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))"] }
# 00d0e Instruction { source: "inline_div32_div16_39_inline_div16_mul16_32_6_c <- inline_div32_div16_39_inline_div16_mul16_32_6_t0 Multiply inline_div32_div16_39_inline_div16_mul16_32_6_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0x54), Register(0x58), Register(0x5c)], resolved: None }
11 54 58 5c 
# 00d12 Instruction { source: "inline_div32_div16_39_inline_div16_mul16_32_6_c <- inline_div32_div16_39_inline_div16_mul16_32_6_t0 Multiply inline_div32_div16_39_inline_div16_mul16_32_6_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x5e), Constant8(0x00=0)], resolved: None }
04 5e 00 
# 00d15 Instruction { source: "inline_div32_div16_39_inline_div16_mul16_32_6_c <- inline_div32_div16_39_inline_div16_mul16_32_6_t0 Multiply inline_div32_div16_39_inline_div16_mul16_32_6_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x5f), Constant8(0x00=0)], resolved: None }
04 5f 00 
# inline_div32_div16_39_inline_div16_mul16_32_6_t3 <- inline_div32_div16_39_inline_div16_mul16_32_6_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 00d18 Instruction { source: "inline_div32_div16_39_inline_div16_mul16_32_6_t3 <- inline_div32_div16_39_inline_div16_mul16_32_6_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x55), Register(0x65)], resolved: None }
0b 55 65 
# inline_div32_div16_39_inline_div16_mul16_32_6_t2 U32 <- inline_div32_div16_39_inline_div16_mul16_32_6_t3 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 00d1b Instruction { source: "Zero-pad for inline_div32_div16_39_inline_div16_mul16_32_6_t2 U32 <- inline_div32_div16_39_inline_div16_mul16_32_6_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x60), Constant32(0x00000000=0)], resolved: None }
20 60 00 00 00 00 
# 00d21 Instruction { source: "inline_div32_div16_39_inline_div16_mul16_32_6_t2 U32 <- inline_div32_div16_39_inline_div16_mul16_32_6_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x65), Register(0x60)], resolved: None }
0b 65 60 
# inline_div32_div16_39_inline_div16_mul16_32_6_t5 <- inline_div32_div16_39_inline_div16_mul16_32_6_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 00d24 Instruction { source: "inline_div32_div16_39_inline_div16_mul16_32_6_t5 <- inline_div32_div16_39_inline_div16_mul16_32_6_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x59), Register(0x64)], resolved: None }
0b 59 64 
# inline_div32_div16_39_inline_div16_mul16_32_6_t4 U32 <- inline_div32_div16_39_inline_div16_mul16_32_6_t5 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 00d27 Instruction { source: "Zero-pad for inline_div32_div16_39_inline_div16_mul16_32_6_t4 U32 <- inline_div32_div16_39_inline_div16_mul16_32_6_t5 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x68), Constant32(0x00000000=0)], resolved: None }
20 68 00 00 00 00 
# 00d2d Instruction { source: "inline_div32_div16_39_inline_div16_mul16_32_6_t4 U32 <- inline_div32_div16_39_inline_div16_mul16_32_6_t5 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x64), Register(0x68)], resolved: None }
0b 64 68 
# inline_div32_div16_39_inline_div16_mul16_32_6_f <- inline_div32_div16_39_inline_div16_mul16_32_6_t2 Multiply inline_div32_div16_39_inline_div16_mul16_32_6_t4
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 00d30 Instruction { source: "inline_div32_div16_39_inline_div16_mul16_32_6_f <- inline_div32_div16_39_inline_div16_mul16_32_6_t2 Multiply inline_div32_div16_39_inline_div16_mul16_32_6_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0x60), Register(0x68), Register(0x60)], resolved: None }
11 60 68 60 
# 00d34 Instruction { source: "inline_div32_div16_39_inline_div16_mul16_32_6_f <- inline_div32_div16_39_inline_div16_mul16_32_6_t2 Multiply inline_div32_div16_39_inline_div16_mul16_32_6_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x62), Constant8(0x00=0)], resolved: None }
04 62 00 
# 00d37 Instruction { source: "inline_div32_div16_39_inline_div16_mul16_32_6_f <- inline_div32_div16_39_inline_div16_mul16_32_6_t2 Multiply inline_div32_div16_39_inline_div16_mul16_32_6_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x63), Constant8(0x00=0)], resolved: None }
04 63 00 
# inline_div32_div16_39_inline_div16_mul16_32_6_t6 <- inline_div32_div16_39_inline_div16_mul16_32_6_f[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }", "Index(\"f\", Number(U8, 1))", "Index(\"f\", Number(U8, 1))"] }
# 00d3a Instruction { source: "inline_div32_div16_39_inline_div16_mul16_32_6_t6 <- inline_div32_div16_39_inline_div16_mul16_32_6_f[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\", \"Index(\\\"f\\\", Number(U8, 1))\", \"Index(\\\"f\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x61), Register(0x6c)], resolved: None }
0b 61 6c 
# inline_div32_div16_39_inline_div16_mul16_32_6_f[0x03..0x04] <- inline_div32_div16_39_inline_div16_mul16_32_6_t6 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }"] }
# 00d3d Instruction { source: "inline_div32_div16_39_inline_div16_mul16_32_6_f[0x03..0x04] <- inline_div32_div16_39_inline_div16_mul16_32_6_t6 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x63)], resolved: None }
0b 6c 63 
# inline_div32_div16_39_inline_div16_mul16_32_6_t7 <- inline_div32_div16_39_inline_div16_mul16_32_6_f[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }", "Index(\"f\", Number(U8, 0))", "Index(\"f\", Number(U8, 0))"] }
# 00d40 Instruction { source: "inline_div32_div16_39_inline_div16_mul16_32_6_t7 <- inline_div32_div16_39_inline_div16_mul16_32_6_f[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\", \"Index(\\\"f\\\", Number(U8, 0))\", \"Index(\\\"f\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x60), Register(0x6c)], resolved: None }
0b 60 6c 
# inline_div32_div16_39_inline_div16_mul16_32_6_f[0x02..0x03] <- inline_div32_div16_39_inline_div16_mul16_32_6_t7 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }"] }
# 00d43 Instruction { source: "inline_div32_div16_39_inline_div16_mul16_32_6_f[0x02..0x03] <- inline_div32_div16_39_inline_div16_mul16_32_6_t7 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x6c), Register(0x62)], resolved: None }
0b 6c 62 
# inline_div32_div16_39_inline_div16_mul16_32_6_t8 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00d46 Instruction { source: "inline_div32_div16_39_inline_div16_mul16_32_6_t8 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x6d), Constant8(0x00=0)], resolved: None }
04 6d 00 
# inline_div32_div16_39_inline_div16_mul16_32_6_f[0x01..0x02] <- inline_div32_div16_39_inline_div16_mul16_32_6_t8 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }"] }
# 00d49 Instruction { source: "inline_div32_div16_39_inline_div16_mul16_32_6_f[0x01..0x02] <- inline_div32_div16_39_inline_div16_mul16_32_6_t8 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x6d), Register(0x61)], resolved: None }
0b 6d 61 
# inline_div32_div16_39_inline_div16_mul16_32_6_t9 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00d4c Instruction { source: "inline_div32_div16_39_inline_div16_mul16_32_6_t9 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x6d), Constant8(0x00=0)], resolved: None }
04 6d 00 
# inline_div32_div16_39_inline_div16_mul16_32_6_f[0x00..0x01] <- inline_div32_div16_39_inline_div16_mul16_32_6_t9 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 00d4f Instruction { source: "inline_div32_div16_39_inline_div16_mul16_32_6_f[0x00..0x01] <- inline_div32_div16_39_inline_div16_mul16_32_6_t9 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x6d), Register(0x60)], resolved: None }
0b 6d 60 
# inline_div32_div16_39_inline_div16_mul16_32_6_t10 <- inline_div32_div16_39_inline_div16_mul16_32_6_c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_39_inline_div16_mul16_32_6_t10 <- inline_div32_div16_39_inline_div16_mul16_32_6_c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_div32_div16_39_inline_div16_mul16_32_6_t11 <- inline_div32_div16_39_inline_div16_mul16_32_6_f U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"f\")", "Ident(\"f\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_39_inline_div16_mul16_32_6_t11 <- inline_div32_div16_39_inline_div16_mul16_32_6_f U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"f\\\")\", \"Ident(\\\"f\\\")\"] }", opcode: Copy32, args: [Register(0x60), Register(0x60)], resolved: None }
# inline_div32_div16_39_inline_div16_mul16_32_6_c <- inline_div32_div16_39_inline_div16_mul16_32_6_t10 Add inline_div32_div16_39_inline_div16_mul16_32_6_t11
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))"] }
# 00d52 Instruction { source: "inline_div32_div16_39_inline_div16_mul16_32_6_c <- inline_div32_div16_39_inline_div16_mul16_32_6_t10 Add inline_div32_div16_39_inline_div16_mul16_32_6_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00d53 Instruction { source: "inline_div32_div16_39_inline_div16_mul16_32_6_c <- inline_div32_div16_39_inline_div16_mul16_32_6_t10 Add inline_div32_div16_39_inline_div16_mul16_32_6_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x5c), Register(0x60), Register(0x5c)], resolved: None }
30 5c 60 5c 
# 00d57 Instruction { source: "inline_div32_div16_39_inline_div16_mul16_32_6_c <- inline_div32_div16_39_inline_div16_mul16_32_6_t10 Add inline_div32_div16_39_inline_div16_mul16_32_6_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_div32_div16_39_inline_div16_mul16_32_6_t12 <- inline_div32_div16_39_inline_div16_mul16_32_6_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_39_inline_div16_mul16_32_6_t12 <- inline_div32_div16_39_inline_div16_mul16_32_6_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_div32_div16_39_inline_div16_mul16_32_6_t14 <- inline_div32_div16_39_inline_div16_mul16_32_6_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 00d58 Instruction { source: "inline_div32_div16_39_inline_div16_mul16_32_6_t14 <- inline_div32_div16_39_inline_div16_mul16_32_6_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x59), Register(0x64)], resolved: None }
0b 59 64 
# inline_div32_div16_39_inline_div16_mul16_32_6_t13 U32 <- inline_div32_div16_39_inline_div16_mul16_32_6_t14 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 00d5b Instruction { source: "Zero-pad for inline_div32_div16_39_inline_div16_mul16_32_6_t13 U32 <- inline_div32_div16_39_inline_div16_mul16_32_6_t14 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x60), Constant32(0x00000000=0)], resolved: None }
20 60 00 00 00 00 
# 00d61 Instruction { source: "inline_div32_div16_39_inline_div16_mul16_32_6_t13 U32 <- inline_div32_div16_39_inline_div16_mul16_32_6_t14 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x64), Register(0x60)], resolved: None }
0b 64 60 
# inline_div32_div16_39_inline_div16_mul16_32_6_d <- inline_div32_div16_39_inline_div16_mul16_32_6_t12 Multiply inline_div32_div16_39_inline_div16_mul16_32_6_t13
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 00d64 Instruction { source: "inline_div32_div16_39_inline_div16_mul16_32_6_d <- inline_div32_div16_39_inline_div16_mul16_32_6_t12 Multiply inline_div32_div16_39_inline_div16_mul16_32_6_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0x54), Register(0x60), Register(0x60)], resolved: None }
11 54 60 60 
# 00d68 Instruction { source: "inline_div32_div16_39_inline_div16_mul16_32_6_d <- inline_div32_div16_39_inline_div16_mul16_32_6_t12 Multiply inline_div32_div16_39_inline_div16_mul16_32_6_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x62), Constant8(0x00=0)], resolved: None }
04 62 00 
# 00d6b Instruction { source: "inline_div32_div16_39_inline_div16_mul16_32_6_d <- inline_div32_div16_39_inline_div16_mul16_32_6_t12 Multiply inline_div32_div16_39_inline_div16_mul16_32_6_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x63), Constant8(0x00=0)], resolved: None }
04 63 00 
# inline_div32_div16_39_inline_div16_mul16_32_6_t16 <- inline_div32_div16_39_inline_div16_mul16_32_6_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 00d6e Instruction { source: "inline_div32_div16_39_inline_div16_mul16_32_6_t16 <- inline_div32_div16_39_inline_div16_mul16_32_6_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x55), Register(0x65)], resolved: None }
0b 55 65 
# inline_div32_div16_39_inline_div16_mul16_32_6_t15 U32 <- inline_div32_div16_39_inline_div16_mul16_32_6_t16 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 00d71 Instruction { source: "Zero-pad for inline_div32_div16_39_inline_div16_mul16_32_6_t15 U32 <- inline_div32_div16_39_inline_div16_mul16_32_6_t16 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x54), Constant32(0x00000000=0)], resolved: None }
20 54 00 00 00 00 
# 00d77 Instruction { source: "inline_div32_div16_39_inline_div16_mul16_32_6_t15 U32 <- inline_div32_div16_39_inline_div16_mul16_32_6_t16 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x65), Register(0x54)], resolved: None }
0b 65 54 
# inline_div32_div16_39_inline_div16_mul16_32_6_t17 <- inline_div32_div16_39_inline_div16_mul16_32_6_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_39_inline_div16_mul16_32_6_t17 <- inline_div32_div16_39_inline_div16_mul16_32_6_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x58), Register(0x58)], resolved: None }
# inline_div32_div16_39_inline_div16_mul16_32_6_e <- inline_div32_div16_39_inline_div16_mul16_32_6_t15 Multiply inline_div32_div16_39_inline_div16_mul16_32_6_t17
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))"] }
# 00d7a Instruction { source: "inline_div32_div16_39_inline_div16_mul16_32_6_e <- inline_div32_div16_39_inline_div16_mul16_32_6_t15 Multiply inline_div32_div16_39_inline_div16_mul16_32_6_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0x54), Register(0x58), Register(0x54)], resolved: None }
11 54 58 54 
# 00d7e Instruction { source: "inline_div32_div16_39_inline_div16_mul16_32_6_e <- inline_div32_div16_39_inline_div16_mul16_32_6_t15 Multiply inline_div32_div16_39_inline_div16_mul16_32_6_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x56), Constant8(0x00=0)], resolved: None }
04 56 00 
# 00d81 Instruction { source: "inline_div32_div16_39_inline_div16_mul16_32_6_e <- inline_div32_div16_39_inline_div16_mul16_32_6_t15 Multiply inline_div32_div16_39_inline_div16_mul16_32_6_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x57), Constant8(0x00=0)], resolved: None }
04 57 00 
# inline_div32_div16_39_inline_div16_mul16_32_6_t18 <- inline_div32_div16_39_inline_div16_mul16_32_6_d U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 00d84 Instruction { source: "inline_div32_div16_39_inline_div16_mul16_32_6_t18 <- inline_div32_div16_39_inline_div16_mul16_32_6_d U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0x60), Register(0x58)], resolved: None }
21 60 58 
# inline_div32_div16_39_inline_div16_mul16_32_6_t19 <- inline_div32_div16_39_inline_div16_mul16_32_6_e U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"e\")", "Ident(\"e\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_39_inline_div16_mul16_32_6_t19 <- inline_div32_div16_39_inline_div16_mul16_32_6_e U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"e\\\")\", \"Ident(\\\"e\\\")\"] }", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_div32_div16_39_inline_div16_mul16_32_6_d <- inline_div32_div16_39_inline_div16_mul16_32_6_t18 Add inline_div32_div16_39_inline_div16_mul16_32_6_t19
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))"] }
# 00d87 Instruction { source: "inline_div32_div16_39_inline_div16_mul16_32_6_d <- inline_div32_div16_39_inline_div16_mul16_32_6_t18 Add inline_div32_div16_39_inline_div16_mul16_32_6_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00d88 Instruction { source: "inline_div32_div16_39_inline_div16_mul16_32_6_d <- inline_div32_div16_39_inline_div16_mul16_32_6_t18 Add inline_div32_div16_39_inline_div16_mul16_32_6_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x58), Register(0x54), Register(0x60)], resolved: None }
30 58 54 60 
# 00d8c Instruction { source: "inline_div32_div16_39_inline_div16_mul16_32_6_d <- inline_div32_div16_39_inline_div16_mul16_32_6_t18 Add inline_div32_div16_39_inline_div16_mul16_32_6_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_div32_div16_39_inline_div16_mul16_32_6_t20 <- inline_div32_div16_39_inline_div16_mul16_32_6_d[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }", "Index(\"d\", Number(U8, 2))", "Index(\"d\", Number(U8, 2))"] }
# 00d8d Instruction { source: "inline_div32_div16_39_inline_div16_mul16_32_6_t20 <- inline_div32_div16_39_inline_div16_mul16_32_6_d[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\", \"Index(\\\"d\\\", Number(U8, 2))\", \"Index(\\\"d\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x62), Register(0x65)], resolved: None }
0b 62 65 
# inline_div32_div16_39_inline_div16_mul16_32_6_d[0x03..0x04] <- inline_div32_div16_39_inline_div16_mul16_32_6_t20 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }"] }
# 00d90 Instruction { source: "inline_div32_div16_39_inline_div16_mul16_32_6_d[0x03..0x04] <- inline_div32_div16_39_inline_div16_mul16_32_6_t20 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\"] }", opcode: Copy8, args: [Register(0x65), Register(0x63)], resolved: None }
0b 65 63 
# inline_div32_div16_39_inline_div16_mul16_32_6_t21 <- inline_div32_div16_39_inline_div16_mul16_32_6_d[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }", "Index(\"d\", Number(U8, 1))", "Index(\"d\", Number(U8, 1))"] }
# 00d93 Instruction { source: "inline_div32_div16_39_inline_div16_mul16_32_6_t21 <- inline_div32_div16_39_inline_div16_mul16_32_6_d[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\", \"Index(\\\"d\\\", Number(U8, 1))\", \"Index(\\\"d\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x61), Register(0x65)], resolved: None }
0b 61 65 
# inline_div32_div16_39_inline_div16_mul16_32_6_d[0x02..0x03] <- inline_div32_div16_39_inline_div16_mul16_32_6_t21 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }"] }
# 00d96 Instruction { source: "inline_div32_div16_39_inline_div16_mul16_32_6_d[0x02..0x03] <- inline_div32_div16_39_inline_div16_mul16_32_6_t21 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x65), Register(0x62)], resolved: None }
0b 65 62 
# inline_div32_div16_39_inline_div16_mul16_32_6_t22 <- inline_div32_div16_39_inline_div16_mul16_32_6_d[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }", "Index(\"d\", Number(U8, 0))", "Index(\"d\", Number(U8, 0))"] }
# 00d99 Instruction { source: "inline_div32_div16_39_inline_div16_mul16_32_6_t22 <- inline_div32_div16_39_inline_div16_mul16_32_6_d[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\", \"Index(\\\"d\\\", Number(U8, 0))\", \"Index(\\\"d\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x60), Register(0x65)], resolved: None }
0b 60 65 
# inline_div32_div16_39_inline_div16_mul16_32_6_d[0x01..0x02] <- inline_div32_div16_39_inline_div16_mul16_32_6_t22 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }"] }
# 00d9c Instruction { source: "inline_div32_div16_39_inline_div16_mul16_32_6_d[0x01..0x02] <- inline_div32_div16_39_inline_div16_mul16_32_6_t22 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x65), Register(0x61)], resolved: None }
0b 65 61 
# inline_div32_div16_39_inline_div16_mul16_32_6_t23 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00d9f Instruction { source: "inline_div32_div16_39_inline_div16_mul16_32_6_t23 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x65), Constant8(0x00=0)], resolved: None }
04 65 00 
# inline_div32_div16_39_inline_div16_mul16_32_6_d[0x00..0x01] <- inline_div32_div16_39_inline_div16_mul16_32_6_t23 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 00da2 Instruction { source: "inline_div32_div16_39_inline_div16_mul16_32_6_d[0x00..0x01] <- inline_div32_div16_39_inline_div16_mul16_32_6_t23 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x65), Register(0x60)], resolved: None }
0b 65 60 
# inline_div32_div16_39_inline_div16_mul16_32_6_t25 <- inline_div32_div16_39_inline_div16_mul16_32_6_c U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# 00da5 Instruction { source: "inline_div32_div16_39_inline_div16_mul16_32_6_t25 <- inline_div32_div16_39_inline_div16_mul16_32_6_c U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x54)], resolved: None }
21 5c 54 
# inline_div32_div16_39_inline_div16_mul16_32_6_t26 <- inline_div32_div16_39_inline_div16_mul16_32_6_d U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 00da8 Instruction { source: "inline_div32_div16_39_inline_div16_mul16_32_6_t26 <- inline_div32_div16_39_inline_div16_mul16_32_6_d U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0x60), Register(0x58)], resolved: None }
21 60 58 
# inline_div32_div16_39_inline_div16_mul16_32_6_t24 <- inline_div32_div16_39_inline_div16_mul16_32_6_t25 Add inline_div32_div16_39_inline_div16_mul16_32_6_t26
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))"] }
# 00dab Instruction { source: "inline_div32_div16_39_inline_div16_mul16_32_6_t24 <- inline_div32_div16_39_inline_div16_mul16_32_6_t25 Add inline_div32_div16_39_inline_div16_mul16_32_6_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00dac Instruction { source: "inline_div32_div16_39_inline_div16_mul16_32_6_t24 <- inline_div32_div16_39_inline_div16_mul16_32_6_t25 Add inline_div32_div16_39_inline_div16_mul16_32_6_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x54), Register(0x58), Register(0x54)], resolved: None }
30 54 58 54 
# 00db0 Instruction { source: "inline_div32_div16_39_inline_div16_mul16_32_6_t24 <- inline_div32_div16_39_inline_div16_mul16_32_6_t25 Add inline_div32_div16_39_inline_div16_mul16_32_6_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_div32_div16_39_x <- inline_div32_div16_39_inline_div16_mul16_32_6_t24 U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_39_x <- inline_div32_div16_39_inline_div16_mul16_32_6_t24 U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# goto inline_div32_div16_39_inline_div16_mul16_32_6_function_end_mul16_32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_div32_div16_39_inline_div16_mul16_32_6_function_end_mul16_32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_39_inline_div16_mul16_32_6_function_end_mul16_32)], resolved: None }
# :inline_div32_div16_39_inline_div16_mul16_32_6_function_end_mul16_32
# 	SourceContext { contexts: [] }
# inline_div32_div16_39_inline_div16_mul16_32_6_function_end_mul16_32
# inline_div32_div16_39_t16 <- inline_div32_div16_39_x[0x02..0x03] U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }", "Index(\"x\", Number(U8, 2))", "Index(\"x\", Number(U8, 2))"] }
# 00db1 Instruction { source: "inline_div32_div16_39_t16 <- inline_div32_div16_39_x[0x02..0x03] U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }\", \"Index(\\\"x\\\", Number(U8, 2))\", \"Index(\\\"x\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x56), Register(0x65)], resolved: None }
0b 56 65 
# inline_div32_div16_39_t17 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00db4 Instruction { source: "inline_div32_div16_39_t17 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x64), Constant8(0x00=0)], resolved: None }
04 64 00 
# if inline_div32_div16_39_t16 > inline_div32_div16_39_t17 then 'inline_div32_div16_39_div16_if_true_0_10' else 'inline_div32_div16_39_div16_if_else_0_11'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }"] }
# 00db7 Instruction { source: "if inline_div32_div16_39_t16 > inline_div32_div16_39_t17 then 'inline_div32_div16_39_div16_if_true_0_10' else 'inline_div32_div16_39_div16_if_else_0_11'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x65), Register(0x64)], resolved: None }
15 65 64 
# 00dba Instruction { source: "if inline_div32_div16_39_t16 > inline_div32_div16_39_t17 then 'inline_div32_div16_39_div16_if_true_0_10' else 'inline_div32_div16_39_div16_if_else_0_11'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }\"] }", opcode: JcImm, args: [Label24(inline_div32_div16_39_div16_if_else_0_11)], resolved: None }
71 e6 0d 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_39_t16 > inline_div32_div16_39_t17 then 'inline_div32_div16_39_div16_if_true_0_10' else 'inline_div32_div16_39_div16_if_else_0_11'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_39_div16_if_true_0_10)], resolved: None }
# :inline_div32_div16_39_div16_if_true_0_10
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }"] }
# inline_div32_div16_39_div16_if_true_0_10
# inline_div32_div16_39_t18 <- inline_div32_div16_39_mid U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))", "Ident(\"mid\")", "Ident(\"mid\")"] }
# 00dbe Instruction { source: "inline_div32_div16_39_t18 <- inline_div32_div16_39_mid U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\", \"Ident(\\\"mid\\\")\", \"Ident(\\\"mid\\\")\"] }", opcode: Copy32, args: [Register(0x74), Register(0x50)], resolved: None }
21 74 50 
# inline_div32_div16_39_t19 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 00dc1 Instruction { source: "inline_div32_div16_39_t19 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x54), Constant32(0x00000001=1)], resolved: None }
20 54 01 00 00 00 
# inline_div32_div16_39_hi <- inline_div32_div16_39_t18 Subtract inline_div32_div16_39_t19
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))"] }
# 00dc7 Instruction { source: "inline_div32_div16_39_hi <- inline_div32_div16_39_t18 Subtract inline_div32_div16_39_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Copy32, args: [Register(0x54), Register(0x00)], resolved: None }
21 54 00 
# 00dca Instruction { source: "inline_div32_div16_39_hi <- inline_div32_div16_39_t18 Subtract inline_div32_div16_39_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x00)], resolved: None }
01 00 
# 00dcc Instruction { source: "inline_div32_div16_39_hi <- inline_div32_div16_39_t18 Subtract inline_div32_div16_39_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x01)], resolved: None }
01 01 
# 00dce Instruction { source: "inline_div32_div16_39_hi <- inline_div32_div16_39_t18 Subtract inline_div32_div16_39_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x02)], resolved: None }
01 02 
# 00dd0 Instruction { source: "inline_div32_div16_39_hi <- inline_div32_div16_39_t18 Subtract inline_div32_div16_39_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x03)], resolved: None }
01 03 
# 00dd2 Instruction { source: "inline_div32_div16_39_hi <- inline_div32_div16_39_t18 Subtract inline_div32_div16_39_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x00), Constant32(0x00000001=1)], resolved: None }
32 00 01 00 00 00 
# 00dd8 Instruction { source: "inline_div32_div16_39_hi <- inline_div32_div16_39_t18 Subtract inline_div32_div16_39_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00dd9 Instruction { source: "inline_div32_div16_39_hi <- inline_div32_div16_39_t18 Subtract inline_div32_div16_39_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x50), Register(0x00), Register(0x50)], resolved: None }
30 50 00 50 
# 00ddd Instruction { source: "inline_div32_div16_39_hi <- inline_div32_div16_39_t18 Subtract inline_div32_div16_39_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# goto inline_div32_div16_39_div16_while_predicate_6
# 	SourceContext { contexts: ["Continue"] }
# 00dde Instruction { source: "goto inline_div32_div16_39_div16_while_predicate_6\n\tSourceContext { contexts: [\"Continue\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_39_div16_while_predicate_6)], resolved: None }
70 41 0c 00 
# goto inline_div32_div16_39_div16_if_end_9
# 	SourceContext { contexts: [] }
# 00de2 Instruction { source: "goto inline_div32_div16_39_div16_if_end_9\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_div32_div16_39_div16_if_end_9)], resolved: None }
70 e6 0d 00 
# :inline_div32_div16_39_div16_if_else_0_11
# 	SourceContext { contexts: [] }
# inline_div32_div16_39_div16_if_else_0_11
# :inline_div32_div16_39_div16_if_end_9
# 	SourceContext { contexts: [] }
# inline_div32_div16_39_div16_if_end_9
# inline_div32_div16_39_t20 <- inline_div32_div16_39_x[0x03..0x04] U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }", "Index(\"x\", Number(U8, 3))", "Index(\"x\", Number(U8, 3))"] }
# 00de6 Instruction { source: "inline_div32_div16_39_t20 <- inline_div32_div16_39_x[0x03..0x04] U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }\", \"Index(\\\"x\\\", Number(U8, 3))\", \"Index(\\\"x\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0x57), Register(0x65)], resolved: None }
0b 57 65 
# inline_div32_div16_39_t21 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00de9 Instruction { source: "inline_div32_div16_39_t21 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x64), Constant8(0x00=0)], resolved: None }
04 64 00 
# if inline_div32_div16_39_t20 > inline_div32_div16_39_t21 then 'inline_div32_div16_39_div16_if_true_0_13' else 'inline_div32_div16_39_div16_if_else_0_14'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }"] }
# 00dec Instruction { source: "if inline_div32_div16_39_t20 > inline_div32_div16_39_t21 then 'inline_div32_div16_39_div16_if_true_0_13' else 'inline_div32_div16_39_div16_if_else_0_14'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x65), Register(0x64)], resolved: None }
15 65 64 
# 00def Instruction { source: "if inline_div32_div16_39_t20 > inline_div32_div16_39_t21 then 'inline_div32_div16_39_div16_if_true_0_13' else 'inline_div32_div16_39_div16_if_else_0_14'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }\"] }", opcode: JcImm, args: [Label24(inline_div32_div16_39_div16_if_else_0_14)], resolved: None }
71 1b 0e 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_39_t20 > inline_div32_div16_39_t21 then 'inline_div32_div16_39_div16_if_true_0_13' else 'inline_div32_div16_39_div16_if_else_0_14'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_39_div16_if_true_0_13)], resolved: None }
# :inline_div32_div16_39_div16_if_true_0_13
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }"] }
# inline_div32_div16_39_div16_if_true_0_13
# inline_div32_div16_39_t22 <- inline_div32_div16_39_mid U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))", "Ident(\"mid\")", "Ident(\"mid\")"] }
# 00df3 Instruction { source: "inline_div32_div16_39_t22 <- inline_div32_div16_39_mid U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\", \"Ident(\\\"mid\\\")\", \"Ident(\\\"mid\\\")\"] }", opcode: Copy32, args: [Register(0x74), Register(0x50)], resolved: None }
21 74 50 
# inline_div32_div16_39_t23 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 00df6 Instruction { source: "inline_div32_div16_39_t23 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x54), Constant32(0x00000001=1)], resolved: None }
20 54 01 00 00 00 
# inline_div32_div16_39_hi <- inline_div32_div16_39_t22 Subtract inline_div32_div16_39_t23
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))"] }
# 00dfc Instruction { source: "inline_div32_div16_39_hi <- inline_div32_div16_39_t22 Subtract inline_div32_div16_39_t23\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Copy32, args: [Register(0x54), Register(0x00)], resolved: None }
21 54 00 
# 00dff Instruction { source: "inline_div32_div16_39_hi <- inline_div32_div16_39_t22 Subtract inline_div32_div16_39_t23\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x00)], resolved: None }
01 00 
# 00e01 Instruction { source: "inline_div32_div16_39_hi <- inline_div32_div16_39_t22 Subtract inline_div32_div16_39_t23\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x01)], resolved: None }
01 01 
# 00e03 Instruction { source: "inline_div32_div16_39_hi <- inline_div32_div16_39_t22 Subtract inline_div32_div16_39_t23\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x02)], resolved: None }
01 02 
# 00e05 Instruction { source: "inline_div32_div16_39_hi <- inline_div32_div16_39_t22 Subtract inline_div32_div16_39_t23\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x03)], resolved: None }
01 03 
# 00e07 Instruction { source: "inline_div32_div16_39_hi <- inline_div32_div16_39_t22 Subtract inline_div32_div16_39_t23\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x00), Constant32(0x00000001=1)], resolved: None }
32 00 01 00 00 00 
# 00e0d Instruction { source: "inline_div32_div16_39_hi <- inline_div32_div16_39_t22 Subtract inline_div32_div16_39_t23\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00e0e Instruction { source: "inline_div32_div16_39_hi <- inline_div32_div16_39_t22 Subtract inline_div32_div16_39_t23\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x50), Register(0x00), Register(0x50)], resolved: None }
30 50 00 50 
# 00e12 Instruction { source: "inline_div32_div16_39_hi <- inline_div32_div16_39_t22 Subtract inline_div32_div16_39_t23\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# goto inline_div32_div16_39_div16_while_predicate_6
# 	SourceContext { contexts: ["Continue"] }
# 00e13 Instruction { source: "goto inline_div32_div16_39_div16_while_predicate_6\n\tSourceContext { contexts: [\"Continue\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_39_div16_while_predicate_6)], resolved: None }
70 41 0c 00 
# goto inline_div32_div16_39_div16_if_end_12
# 	SourceContext { contexts: [] }
# 00e17 Instruction { source: "goto inline_div32_div16_39_div16_if_end_12\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_div32_div16_39_div16_if_end_12)], resolved: None }
70 1b 0e 00 
# :inline_div32_div16_39_div16_if_else_0_14
# 	SourceContext { contexts: [] }
# inline_div32_div16_39_div16_if_else_0_14
# :inline_div32_div16_39_div16_if_end_12
# 	SourceContext { contexts: [] }
# inline_div32_div16_39_div16_if_end_12
# inline_div32_div16_39_t24 <- inline_div32_div16_39_x U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }", "Ident(\"x\")", "Ident(\"x\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_39_t24 <- inline_div32_div16_39_x U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\", \"Ident(\\\"x\\\")\", \"Ident(\\\"x\\\")\"] }", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_div32_div16_39_t25 <- inline_div32_div16_39_a U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_39_t25 <- inline_div32_div16_39_a U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# if inline_div32_div16_39_t24 > inline_div32_div16_39_t25 then 'inline_div32_div16_39_div16_if_true_0_16' else 'inline_div32_div16_39_div16_if_else_0_17'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }"] }
# 00e1b Instruction { source: "if inline_div32_div16_39_t24 > inline_div32_div16_39_t25 then 'inline_div32_div16_39_div16_if_true_0_16' else 'inline_div32_div16_39_div16_if_else_0_17'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8, args: [Register(0x57), Register(0x4b)], resolved: None }
15 57 4b 
# 00e1e Instruction { source: "if inline_div32_div16_39_t24 > inline_div32_div16_39_t25 then 'inline_div32_div16_39_div16_if_true_0_16' else 'inline_div32_div16_39_div16_if_else_0_17'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x56), Register(0x4a)], resolved: None }
16 56 4a 
# 00e21 Instruction { source: "if inline_div32_div16_39_t24 > inline_div32_div16_39_t25 then 'inline_div32_div16_39_div16_if_true_0_16' else 'inline_div32_div16_39_div16_if_else_0_17'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x55), Register(0x49)], resolved: None }
16 55 49 
# 00e24 Instruction { source: "if inline_div32_div16_39_t24 > inline_div32_div16_39_t25 then 'inline_div32_div16_39_div16_if_true_0_16' else 'inline_div32_div16_39_div16_if_else_0_17'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x54), Register(0x48)], resolved: None }
16 54 48 
# 00e27 Instruction { source: "if inline_div32_div16_39_t24 > inline_div32_div16_39_t25 then 'inline_div32_div16_39_div16_if_true_0_16' else 'inline_div32_div16_39_div16_if_else_0_17'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: JcImm, args: [Label24(inline_div32_div16_39_div16_if_else_0_17)], resolved: None }
71 53 0e 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_39_t24 > inline_div32_div16_39_t25 then 'inline_div32_div16_39_div16_if_true_0_16' else 'inline_div32_div16_39_div16_if_else_0_17'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_39_div16_if_true_0_16)], resolved: None }
# :inline_div32_div16_39_div16_if_true_0_16
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }"] }
# inline_div32_div16_39_div16_if_true_0_16
# inline_div32_div16_39_t26 <- inline_div32_div16_39_mid U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))", "Ident(\"mid\")", "Ident(\"mid\")"] }
# 00e2b Instruction { source: "inline_div32_div16_39_t26 <- inline_div32_div16_39_mid U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\", \"Ident(\\\"mid\\\")\", \"Ident(\\\"mid\\\")\"] }", opcode: Copy32, args: [Register(0x74), Register(0x50)], resolved: None }
21 74 50 
# inline_div32_div16_39_t27 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 00e2e Instruction { source: "inline_div32_div16_39_t27 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x54), Constant32(0x00000001=1)], resolved: None }
20 54 01 00 00 00 
# inline_div32_div16_39_hi <- inline_div32_div16_39_t26 Subtract inline_div32_div16_39_t27
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))"] }
# 00e34 Instruction { source: "inline_div32_div16_39_hi <- inline_div32_div16_39_t26 Subtract inline_div32_div16_39_t27\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Copy32, args: [Register(0x54), Register(0x00)], resolved: None }
21 54 00 
# 00e37 Instruction { source: "inline_div32_div16_39_hi <- inline_div32_div16_39_t26 Subtract inline_div32_div16_39_t27\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x00)], resolved: None }
01 00 
# 00e39 Instruction { source: "inline_div32_div16_39_hi <- inline_div32_div16_39_t26 Subtract inline_div32_div16_39_t27\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x01)], resolved: None }
01 01 
# 00e3b Instruction { source: "inline_div32_div16_39_hi <- inline_div32_div16_39_t26 Subtract inline_div32_div16_39_t27\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x02)], resolved: None }
01 02 
# 00e3d Instruction { source: "inline_div32_div16_39_hi <- inline_div32_div16_39_t26 Subtract inline_div32_div16_39_t27\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x03)], resolved: None }
01 03 
# 00e3f Instruction { source: "inline_div32_div16_39_hi <- inline_div32_div16_39_t26 Subtract inline_div32_div16_39_t27\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x00), Constant32(0x00000001=1)], resolved: None }
32 00 01 00 00 00 
# 00e45 Instruction { source: "inline_div32_div16_39_hi <- inline_div32_div16_39_t26 Subtract inline_div32_div16_39_t27\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00e46 Instruction { source: "inline_div32_div16_39_hi <- inline_div32_div16_39_t26 Subtract inline_div32_div16_39_t27\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x50), Register(0x00), Register(0x50)], resolved: None }
30 50 00 50 
# 00e4a Instruction { source: "inline_div32_div16_39_hi <- inline_div32_div16_39_t26 Subtract inline_div32_div16_39_t27\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# goto inline_div32_div16_39_div16_while_predicate_6
# 	SourceContext { contexts: ["Continue"] }
# 00e4b Instruction { source: "goto inline_div32_div16_39_div16_while_predicate_6\n\tSourceContext { contexts: [\"Continue\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_39_div16_while_predicate_6)], resolved: None }
70 41 0c 00 
# goto inline_div32_div16_39_div16_if_end_15
# 	SourceContext { contexts: [] }
# 00e4f Instruction { source: "goto inline_div32_div16_39_div16_if_end_15\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_div32_div16_39_div16_if_end_15)], resolved: None }
70 53 0e 00 
# :inline_div32_div16_39_div16_if_else_0_17
# 	SourceContext { contexts: [] }
# inline_div32_div16_39_div16_if_else_0_17
# :inline_div32_div16_39_div16_if_end_15
# 	SourceContext { contexts: [] }
# inline_div32_div16_39_div16_if_end_15
# inline_div32_div16_39_t28 <- inline_div32_div16_39_x U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }", "Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }", "Ident(\"x\")", "Ident(\"x\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_39_t28 <- inline_div32_div16_39_x U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\", \"Ident(\\\"x\\\")\", \"Ident(\\\"x\\\")\"] }", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_div32_div16_39_t29 <- inline_div32_div16_39_a U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }", "Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_39_t29 <- inline_div32_div16_39_a U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# if inline_div32_div16_39_t28 == inline_div32_div16_39_t29 then 'inline_div32_div16_39_div16_if_true_0_19' else 'inline_div32_div16_39_div16_if_else_0_20'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }", "Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }"] }
# 00e53 Instruction { source: "if inline_div32_div16_39_t28 == inline_div32_div16_39_t29 then 'inline_div32_div16_39_div16_if_true_0_19' else 'inline_div32_div16_39_div16_if_else_0_20'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8, args: [Register(0x57), Register(0x4b)], resolved: None }
15 57 4b 
# 00e56 Instruction { source: "if inline_div32_div16_39_t28 == inline_div32_div16_39_t29 then 'inline_div32_div16_39_div16_if_true_0_19' else 'inline_div32_div16_39_div16_if_else_0_20'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x56), Register(0x4a)], resolved: None }
16 56 4a 
# 00e59 Instruction { source: "if inline_div32_div16_39_t28 == inline_div32_div16_39_t29 then 'inline_div32_div16_39_div16_if_true_0_19' else 'inline_div32_div16_39_div16_if_else_0_20'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x55), Register(0x49)], resolved: None }
16 55 49 
# 00e5c Instruction { source: "if inline_div32_div16_39_t28 == inline_div32_div16_39_t29 then 'inline_div32_div16_39_div16_if_true_0_19' else 'inline_div32_div16_39_div16_if_else_0_20'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x54), Register(0x48)], resolved: None }
16 54 48 
# 00e5f Instruction { source: "if inline_div32_div16_39_t28 == inline_div32_div16_39_t29 then 'inline_div32_div16_39_div16_if_true_0_19' else 'inline_div32_div16_39_div16_if_else_0_20'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: JzImm, args: [Label24(inline_div32_div16_39_div16_if_true_0_19)], resolved: None }
72 67 0e 00 
# 00e63 Instruction { source: "if inline_div32_div16_39_t28 == inline_div32_div16_39_t29 then 'inline_div32_div16_39_div16_if_true_0_19' else 'inline_div32_div16_39_div16_if_else_0_20'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_39_div16_if_else_0_20)], resolved: None }
70 75 0e 00 
# :inline_div32_div16_39_div16_if_true_0_19
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }"] }
# inline_div32_div16_39_div16_if_true_0_19
# inline_div32_div16_39_t30 <- inline_div32_div16_39_mid U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"mid\")) }", "Ident(\"mid\")", "Ident(\"mid\")"] }
# 00e67 Instruction { source: "inline_div32_div16_39_t30 <- inline_div32_div16_39_mid U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\", \"Ident(\\\"mid\\\")\", \"Ident(\\\"mid\\\")\"] }", opcode: Copy32, args: [Register(0x74), Register(0x48)], resolved: None }
21 74 48 
# t7 <- inline_div32_div16_39_t30 U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"mid\")) }"] }
# 00e6a Instruction { source: "t7 <- inline_div32_div16_39_t30 U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\"] }", opcode: Copy32, args: [Register(0x48), Register(0x4c)], resolved: None }
21 48 4c 
# goto inline_div32_div16_39_function_end_div16
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"mid\")) }"] }
# 00e6d Instruction { source: "goto inline_div32_div16_39_function_end_div16\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_39_function_end_div16)], resolved: None }
70 c7 0e 00 
# goto inline_div32_div16_39_div16_if_end_18
# 	SourceContext { contexts: [] }
# 00e71 Instruction { source: "goto inline_div32_div16_39_div16_if_end_18\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_div32_div16_39_div16_if_end_18)], resolved: None }
70 75 0e 00 
# :inline_div32_div16_39_div16_if_else_0_20
# 	SourceContext { contexts: [] }
# inline_div32_div16_39_div16_if_else_0_20
# :inline_div32_div16_39_div16_if_end_18
# 	SourceContext { contexts: [] }
# inline_div32_div16_39_div16_if_end_18
# inline_div32_div16_39_t31 <- inline_div32_div16_39_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }", "Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_39_t31 <- inline_div32_div16_39_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_div32_div16_39_t32 <- inline_div32_div16_39_x U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }", "Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\"))", "Ident(\"x\")", "Ident(\"x\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_39_t32 <- inline_div32_div16_39_x U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\", \"Ident(\\\"x\\\")\", \"Ident(\\\"x\\\")\"] }", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_div32_div16_39_r <- inline_div32_div16_39_t31 Subtract inline_div32_div16_39_t32
# 	SourceContext { contexts: ["Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }", "Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\"))"] }
# 00e75 Instruction { source: "inline_div32_div16_39_r <- inline_div32_div16_39_t31 Subtract inline_div32_div16_39_t32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: Copy32, args: [Register(0x54), Register(0x00)], resolved: None }
21 54 00 
# 00e78 Instruction { source: "inline_div32_div16_39_r <- inline_div32_div16_39_t31 Subtract inline_div32_div16_39_t32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: Invert8, args: [Register(0x00)], resolved: None }
01 00 
# 00e7a Instruction { source: "inline_div32_div16_39_r <- inline_div32_div16_39_t31 Subtract inline_div32_div16_39_t32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: Invert8, args: [Register(0x01)], resolved: None }
01 01 
# 00e7c Instruction { source: "inline_div32_div16_39_r <- inline_div32_div16_39_t31 Subtract inline_div32_div16_39_t32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: Invert8, args: [Register(0x02)], resolved: None }
01 02 
# 00e7e Instruction { source: "inline_div32_div16_39_r <- inline_div32_div16_39_t31 Subtract inline_div32_div16_39_t32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: Invert8, args: [Register(0x03)], resolved: None }
01 03 
# 00e80 Instruction { source: "inline_div32_div16_39_r <- inline_div32_div16_39_t31 Subtract inline_div32_div16_39_t32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x00), Constant32(0x00000001=1)], resolved: None }
32 00 01 00 00 00 
# 00e86 Instruction { source: "inline_div32_div16_39_r <- inline_div32_div16_39_t31 Subtract inline_div32_div16_39_t32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00e87 Instruction { source: "inline_div32_div16_39_r <- inline_div32_div16_39_t31 Subtract inline_div32_div16_39_t32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x48), Register(0x00), Register(0x54)], resolved: None }
30 48 00 54 
# 00e8b Instruction { source: "inline_div32_div16_39_r <- inline_div32_div16_39_t31 Subtract inline_div32_div16_39_t32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_div32_div16_39_t33 <- inline_div32_div16_39_r U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }", "Ident(\"r\")", "Ident(\"r\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_39_t33 <- inline_div32_div16_39_r U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\", \"Ident(\\\"r\\\")\", \"Ident(\\\"r\\\")\"] }", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_div32_div16_39_t34 <- inline_div32_div16_39_b U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_39_t34 <- inline_div32_div16_39_b U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# if inline_div32_div16_39_t33 < inline_div32_div16_39_t34 then 'inline_div32_div16_39_div16_if_true_0_22' else 'inline_div32_div16_39_div16_if_else_0_23'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }"] }
# 00e8c Instruction { source: "if inline_div32_div16_39_t33 < inline_div32_div16_39_t34 then 'inline_div32_div16_39_div16_if_true_0_22' else 'inline_div32_div16_39_div16_if_else_0_23'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8, args: [Register(0x4f), Register(0x57)], resolved: None }
15 4f 57 
# 00e8f Instruction { source: "if inline_div32_div16_39_t33 < inline_div32_div16_39_t34 then 'inline_div32_div16_39_div16_if_true_0_22' else 'inline_div32_div16_39_div16_if_else_0_23'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x4e), Register(0x56)], resolved: None }
16 4e 56 
# 00e92 Instruction { source: "if inline_div32_div16_39_t33 < inline_div32_div16_39_t34 then 'inline_div32_div16_39_div16_if_true_0_22' else 'inline_div32_div16_39_div16_if_else_0_23'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x4d), Register(0x55)], resolved: None }
16 4d 55 
# 00e95 Instruction { source: "if inline_div32_div16_39_t33 < inline_div32_div16_39_t34 then 'inline_div32_div16_39_div16_if_true_0_22' else 'inline_div32_div16_39_div16_if_else_0_23'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x4c), Register(0x54)], resolved: None }
16 4c 54 
# 00e98 Instruction { source: "if inline_div32_div16_39_t33 < inline_div32_div16_39_t34 then 'inline_div32_div16_39_div16_if_true_0_22' else 'inline_div32_div16_39_div16_if_else_0_23'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: JcImm, args: [Label24(inline_div32_div16_39_div16_if_else_0_23)], resolved: None }
71 aa 0e 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_39_t33 < inline_div32_div16_39_t34 then 'inline_div32_div16_39_div16_if_true_0_22' else 'inline_div32_div16_39_div16_if_else_0_23'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_39_div16_if_true_0_22)], resolved: None }
# :inline_div32_div16_39_div16_if_true_0_22
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }"] }
# inline_div32_div16_39_div16_if_true_0_22
# inline_div32_div16_39_t35 <- inline_div32_div16_39_mid U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"mid\")) }", "Ident(\"mid\")", "Ident(\"mid\")"] }
# 00e9c Instruction { source: "inline_div32_div16_39_t35 <- inline_div32_div16_39_mid U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\", \"Ident(\\\"mid\\\")\", \"Ident(\\\"mid\\\")\"] }", opcode: Copy32, args: [Register(0x74), Register(0x48)], resolved: None }
21 74 48 
# t7 <- inline_div32_div16_39_t35 U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"mid\")) }"] }
# 00e9f Instruction { source: "t7 <- inline_div32_div16_39_t35 U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\"] }", opcode: Copy32, args: [Register(0x48), Register(0x4c)], resolved: None }
21 48 4c 
# goto inline_div32_div16_39_function_end_div16
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"mid\")) }"] }
# 00ea2 Instruction { source: "goto inline_div32_div16_39_function_end_div16\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_39_function_end_div16)], resolved: None }
70 c7 0e 00 
# goto inline_div32_div16_39_div16_if_end_21
# 	SourceContext { contexts: [] }
# 00ea6 Instruction { source: "goto inline_div32_div16_39_div16_if_end_21\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_div32_div16_39_div16_if_end_21)], resolved: None }
70 aa 0e 00 
# :inline_div32_div16_39_div16_if_else_0_23
# 	SourceContext { contexts: [] }
# inline_div32_div16_39_div16_if_else_0_23
# :inline_div32_div16_39_div16_if_end_21
# 	SourceContext { contexts: [] }
# inline_div32_div16_39_div16_if_end_21
# inline_div32_div16_39_t36 <- inline_div32_div16_39_mid U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"mid\"), Number(U8, 1))", "Ident(\"mid\")", "Ident(\"mid\")"] }
# 00eaa Instruction { source: "inline_div32_div16_39_t36 <- inline_div32_div16_39_mid U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1))\", \"Ident(\\\"mid\\\")\", \"Ident(\\\"mid\\\")\"] }", opcode: Copy32, args: [Register(0x74), Register(0x54)], resolved: None }
21 74 54 
# inline_div32_div16_39_t37 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"mid\"), Number(U8, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 00ead Instruction { source: "inline_div32_div16_39_t37 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x58), Constant32(0x00000001=1)], resolved: None }
20 58 01 00 00 00 
# inline_div32_div16_39_lo <- inline_div32_div16_39_t36 Add inline_div32_div16_39_t37
# 	SourceContext { contexts: ["Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"mid\"), Number(U8, 1))"] }
# 00eb3 Instruction { source: "inline_div32_div16_39_lo <- inline_div32_div16_39_t36 Add inline_div32_div16_39_t37\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00eb4 Instruction { source: "inline_div32_div16_39_lo <- inline_div32_div16_39_t36 Add inline_div32_div16_39_t37\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x54), Register(0x58), Register(0x70)], resolved: None }
30 54 58 70 
# 00eb8 Instruction { source: "inline_div32_div16_39_lo <- inline_div32_div16_39_t36 Add inline_div32_div16_39_t37\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# goto inline_div32_div16_39_div16_while_predicate_6
# 	SourceContext { contexts: [] }
# 00eb9 Instruction { source: "goto inline_div32_div16_39_div16_while_predicate_6\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_div32_div16_39_div16_while_predicate_6)], resolved: None }
70 41 0c 00 
# :inline_div32_div16_39_div16_while_end_8
# 	SourceContext { contexts: [] }
# inline_div32_div16_39_div16_while_end_8
# inline_div32_div16_39_t38 <- inline_div32_div16_39_lo U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"lo\")) }", "Ident(\"lo\")", "Ident(\"lo\")"] }
# 00ebd Instruction { source: "inline_div32_div16_39_t38 <- inline_div32_div16_39_lo U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"lo\\\")) }\", \"Ident(\\\"lo\\\")\", \"Ident(\\\"lo\\\")\"] }", opcode: Copy32, args: [Register(0x70), Register(0x48)], resolved: None }
21 70 48 
# t7 <- inline_div32_div16_39_t38 U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"lo\")) }"] }
# 00ec0 Instruction { source: "t7 <- inline_div32_div16_39_t38 U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"lo\\\")) }\"] }", opcode: Copy32, args: [Register(0x48), Register(0x4c)], resolved: None }
21 48 4c 
# goto inline_div32_div16_39_function_end_div16
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"lo\")) }"] }
# 00ec3 Instruction { source: "goto inline_div32_div16_39_function_end_div16\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"lo\\\")) }\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_39_function_end_div16)], resolved: None }
70 c7 0e 00 
# :inline_div32_div16_39_function_end_div16
# 	SourceContext { contexts: [] }
# inline_div32_div16_39_function_end_div16
# t10 <- 0n8/0x00000008u32 
# 	SourceContext { contexts: ["Return { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }"] }
# 00ec7 Instruction { source: "t10 <- 0n8/0x00000008u32 \n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }\"] }", opcode: LoadImm32, args: [Register(0x48), Constant32(0x00000008=8)], resolved: None }
20 48 08 00 00 00 
# __frame_pointer <- __frame_pointer Add t10
# 	SourceContext { contexts: ["Return { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }"] }
# 00ecd Instruction { source: "__frame_pointer <- __frame_pointer Add t10\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00ece Instruction { source: "__frame_pointer <- __frame_pointer Add t10\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }\"] }", opcode: AddCarry32_1, args: [Register(0x0c), Register(0x48), Register(0x0c)], resolved: None }
30 0c 48 0c 
# 00ed2 Instruction { source: "__frame_pointer <- __frame_pointer Add t10\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# return Some(t7)
# 	SourceContext { contexts: ["Return { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }"] }
# 00ed3 Instruction { source: "return Some(t7)\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x00)], resolved: None }
21 4c 00 
# 00ed6 Instruction { source: "Dealloc 8 bytes from stack", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000008=8)], resolved: None }
32 0c 08 00 00 00 
# 00edc Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# goto div32_if_end_3
# 	SourceContext { contexts: [] }
# 00ede Instruction { source: "goto div32_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(div32_if_end_3)], resolved: None }
70 e2 0e 00 
# :div32_if_else_0_5
# 	SourceContext { contexts: [] }
# div32_if_else_0_5
# :div32_if_end_3
# 	SourceContext { contexts: [] }
# div32_if_end_3
# lo <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"lo\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }", "Number(USIZE, 0)"] }
# 00ee2 Instruction { source: "lo <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lo\\\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x60), Constant32(0x00000000=0)], resolved: None }
20 60 00 00 00 00 
# hi <- 0xffffffffu32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 4294967295) }", "Number(USIZE, 4294967295)"] }
# 00ee8 Instruction { source: "hi <- 0xffffffffu32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 4294967295) }\", \"Number(USIZE, 4294967295)\"] }", opcode: LoadImm32, args: [Register(0x50), Constant32(0xffffffff=4294967295)], resolved: None }
20 50 ff ff ff ff 
# :div32_while_predicate_6
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }, Declare { scope: Local, name: \"x64\", var_type: Struct(\"U64\") }, VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\"x64\", \"lo\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }] }"] }
# div32_while_predicate_6
# t11 <- lo U32
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }, Declare { scope: Local, name: \"x64\", var_type: Struct(\"U64\") }, VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\"x64\", \"lo\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }", "Ident(\"lo\")", "Ident(\"lo\")"] }
# 00eee Instruction { source: "t11 <- lo U32\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })) }, Declare { scope: Local, name: \\\"x64\\\", var_type: Struct(\\\"U64\\\") }, VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\\\"x64\\\", \\\"lo\\\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\", \"Ident(\\\"lo\\\")\", \"Ident(\\\"lo\\\")\"] }", opcode: Copy32, args: [Register(0x60), Register(0x54)], resolved: None }
21 60 54 
# t12 <- hi U32
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }, Declare { scope: Local, name: \"x64\", var_type: Struct(\"U64\") }, VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\"x64\", \"lo\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }", "Ident(\"hi\")", "Ident(\"hi\")"] }
# optimized away noop copy Instruction { source: "t12 <- hi U32\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })) }, Declare { scope: Local, name: \\\"x64\\\", var_type: Struct(\\\"U64\\\") }, VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\\\"x64\\\", \\\"lo\\\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\", \"Ident(\\\"hi\\\")\", \"Ident(\\\"hi\\\")\"] }", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# if t11 < t12 then 'div32_while_body_7' else 'div32_while_end_8'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }, Declare { scope: Local, name: \"x64\", var_type: Struct(\"U64\") }, VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\"x64\", \"lo\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }"] }
# 00ef1 Instruction { source: "if t11 < t12 then 'div32_while_body_7' else 'div32_while_end_8'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })) }, Declare { scope: Local, name: \\\"x64\\\", var_type: Struct(\\\"U64\\\") }, VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\\\"x64\\\", \\\"lo\\\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\"] }", opcode: Cmp8, args: [Register(0x53), Register(0x57)], resolved: None }
15 53 57 
# 00ef4 Instruction { source: "if t11 < t12 then 'div32_while_body_7' else 'div32_while_end_8'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })) }, Declare { scope: Local, name: \\\"x64\\\", var_type: Struct(\\\"U64\\\") }, VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\\\"x64\\\", \\\"lo\\\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x52), Register(0x56)], resolved: None }
16 52 56 
# 00ef7 Instruction { source: "if t11 < t12 then 'div32_while_body_7' else 'div32_while_end_8'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })) }, Declare { scope: Local, name: \\\"x64\\\", var_type: Struct(\\\"U64\\\") }, VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\\\"x64\\\", \\\"lo\\\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x51), Register(0x55)], resolved: None }
16 51 55 
# 00efa Instruction { source: "if t11 < t12 then 'div32_while_body_7' else 'div32_while_end_8'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })) }, Declare { scope: Local, name: \\\"x64\\\", var_type: Struct(\\\"U64\\\") }, VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\\\"x64\\\", \\\"lo\\\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x50), Register(0x54)], resolved: None }
16 50 54 
# 00efd Instruction { source: "if t11 < t12 then 'div32_while_body_7' else 'div32_while_end_8'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })) }, Declare { scope: Local, name: \\\"x64\\\", var_type: Struct(\\\"U64\\\") }, VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\\\"x64\\\", \\\"lo\\\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\"] }", opcode: JcImm, args: [Label24(div32_while_end_8)], resolved: None }
71 a3 11 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t11 < t12 then 'div32_while_body_7' else 'div32_while_end_8'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })) }, Declare { scope: Local, name: \\\"x64\\\", var_type: Struct(\\\"U64\\\") }, VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\\\"x64\\\", \\\"lo\\\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\"] }", opcode: JmpImm, args: [Label24(div32_while_body_7)], resolved: None }
# :div32_while_body_7
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }, Declare { scope: Local, name: \"x64\", var_type: Struct(\"U64\") }, VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\"x64\", \"lo\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }] }"] }
# div32_while_body_7
# t14 <- lo U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }", "Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] }))", "Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] })", "Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] })", "Ident(\"lo\")", "Ident(\"lo\")"] }
# 00f01 Instruction { source: "t14 <- lo U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] }))\", \"Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] })\", \"Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] })\", \"Ident(\\\"lo\\\")\", \"Ident(\\\"lo\\\")\"] }", opcode: Copy32, args: [Register(0x60), Register(0x54)], resolved: None }
21 60 54 
# inline_div32_shiftright1_40_a <- t14 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }", "Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] }))", "Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] })", "Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] })"] }
# optimized away noop copy Instruction { source: "inline_div32_shiftright1_40_a <- t14 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] }))\", \"Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] })\", \"Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] })\"] }", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_div32_shiftright1_40_t1 <- inline_div32_shiftright1_40_a[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))", "Index(\"a\", Number(U8, 0))", "Index(\"a\", Number(U8, 0))"] }
# 00f04 Instruction { source: "inline_div32_shiftright1_40_t1 <- inline_div32_shiftright1_40_a[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 0))\", \"Index(\\\"a\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x54), Register(0x65)], resolved: None }
0b 54 65 
# inline_div32_shiftright1_40_t2 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 00f07 Instruction { source: "inline_div32_shiftright1_40_t2 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x64), Constant8(0x01=1)], resolved: None }
04 64 01 
# inline_div32_shiftright1_40_t0 <- inline_div32_shiftright1_40_t1 RotateRight inline_div32_shiftright1_40_t2
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))"] }
# 00f0a Instruction { source: "inline_div32_shiftright1_40_t0 <- inline_div32_shiftright1_40_t1 RotateRight inline_div32_shiftright1_40_t2\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0x64), Register(0x65), Register(0x64)], resolved: None }
1e 04 64 65 64 
# inline_div32_shiftright1_40_a[0x00..0x01] <- inline_div32_shiftright1_40_t0 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1)) }"] }
# 00f0f Instruction { source: "inline_div32_shiftright1_40_a[0x00..0x01] <- inline_div32_shiftright1_40_t0 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x64), Register(0x54)], resolved: None }
0b 64 54 
# inline_div32_shiftright1_40_t4 <- inline_div32_shiftright1_40_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 00f12 Instruction { source: "inline_div32_shiftright1_40_t4 <- inline_div32_shiftright1_40_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x55), Register(0x65)], resolved: None }
0b 55 65 
# inline_div32_shiftright1_40_t5 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 00f15 Instruction { source: "inline_div32_shiftright1_40_t5 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x64), Constant8(0x01=1)], resolved: None }
04 64 01 
# inline_div32_shiftright1_40_t3 <- inline_div32_shiftright1_40_t4 RotateRight inline_div32_shiftright1_40_t5
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))"] }
# 00f18 Instruction { source: "inline_div32_shiftright1_40_t3 <- inline_div32_shiftright1_40_t4 RotateRight inline_div32_shiftright1_40_t5\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0x64), Register(0x65), Register(0x64)], resolved: None }
1e 04 64 65 64 
# inline_div32_shiftright1_40_a[0x01..0x02] <- inline_div32_shiftright1_40_t3 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1)) }"] }
# 00f1d Instruction { source: "inline_div32_shiftright1_40_a[0x01..0x02] <- inline_div32_shiftright1_40_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x64), Register(0x55)], resolved: None }
0b 64 55 
# inline_div32_shiftright1_40_t7 <- inline_div32_shiftright1_40_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 00f20 Instruction { source: "inline_div32_shiftright1_40_t7 <- inline_div32_shiftright1_40_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x56), Register(0x65)], resolved: None }
0b 56 65 
# inline_div32_shiftright1_40_t8 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 00f23 Instruction { source: "inline_div32_shiftright1_40_t8 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x64), Constant8(0x01=1)], resolved: None }
04 64 01 
# inline_div32_shiftright1_40_t6 <- inline_div32_shiftright1_40_t7 RotateRight inline_div32_shiftright1_40_t8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))"] }
# 00f26 Instruction { source: "inline_div32_shiftright1_40_t6 <- inline_div32_shiftright1_40_t7 RotateRight inline_div32_shiftright1_40_t8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0x64), Register(0x65), Register(0x64)], resolved: None }
1e 04 64 65 64 
# inline_div32_shiftright1_40_a[0x02..0x03] <- inline_div32_shiftright1_40_t6 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1)) }"] }
# 00f2b Instruction { source: "inline_div32_shiftright1_40_a[0x02..0x03] <- inline_div32_shiftright1_40_t6 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x64), Register(0x56)], resolved: None }
0b 64 56 
# inline_div32_shiftright1_40_t10 <- inline_div32_shiftright1_40_a[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))", "Index(\"a\", Number(U8, 3))", "Index(\"a\", Number(U8, 3))"] }
# 00f2e Instruction { source: "inline_div32_shiftright1_40_t10 <- inline_div32_shiftright1_40_a[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0x57), Register(0x65)], resolved: None }
0b 57 65 
# inline_div32_shiftright1_40_t11 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 00f31 Instruction { source: "inline_div32_shiftright1_40_t11 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x64), Constant8(0x01=1)], resolved: None }
04 64 01 
# inline_div32_shiftright1_40_t9 <- inline_div32_shiftright1_40_t10 RotateRight inline_div32_shiftright1_40_t11
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))"] }
# 00f34 Instruction { source: "inline_div32_shiftright1_40_t9 <- inline_div32_shiftright1_40_t10 RotateRight inline_div32_shiftright1_40_t11\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0x64), Register(0x65), Register(0x64)], resolved: None }
1e 04 64 65 64 
# inline_div32_shiftright1_40_a[0x03..0x04] <- inline_div32_shiftright1_40_t9 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1)) }"] }
# 00f39 Instruction { source: "inline_div32_shiftright1_40_a[0x03..0x04] <- inline_div32_shiftright1_40_t9 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x64), Register(0x57)], resolved: None }
0b 64 57 
# inline_div32_shiftright1_40_t13 <- inline_div32_shiftright1_40_a[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))", "Index(\"a\", Number(U8, 0))", "Index(\"a\", Number(U8, 0))"] }
# 00f3c Instruction { source: "inline_div32_shiftright1_40_t13 <- inline_div32_shiftright1_40_a[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\", \"Index(\\\"a\\\", Number(U8, 0))\", \"Index(\\\"a\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x54), Register(0x65)], resolved: None }
0b 54 65 
# inline_div32_shiftright1_40_t14 <- 0n127/0x7fu8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))", "Number(U8, 127)", "Number(U8, 127)"] }
# 00f3f Instruction { source: "inline_div32_shiftright1_40_t14 <- 0n127/0x7fu8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\", \"Number(U8, 127)\", \"Number(U8, 127)\"] }", opcode: LoadImm8, args: [Register(0x64), Constant8(0x7f=127)], resolved: None }
04 64 7f 
# inline_div32_shiftright1_40_t12 <- inline_div32_shiftright1_40_t13 BitwiseAnd inline_div32_shiftright1_40_t14
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))"] }
# 00f42 Instruction { source: "inline_div32_shiftright1_40_t12 <- inline_div32_shiftright1_40_t13 BitwiseAnd inline_div32_shiftright1_40_t14\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\"] }", opcode: And8, args: [Register(0x65), Register(0x64), Register(0x64)], resolved: None }
1b 65 64 64 
# inline_div32_shiftright1_40_a[0x00..0x01] <- inline_div32_shiftright1_40_t12 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127)) }"] }
# 00f46 Instruction { source: "inline_div32_shiftright1_40_a[0x00..0x01] <- inline_div32_shiftright1_40_t12 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127)) }\"] }", opcode: Copy8, args: [Register(0x64), Register(0x54)], resolved: None }
0b 64 54 
# inline_div32_shiftright1_40_t16 <- inline_div32_shiftright1_40_a[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Index(\"a\", Number(U8, 0))", "Index(\"a\", Number(U8, 0))"] }
# 00f49 Instruction { source: "inline_div32_shiftright1_40_t16 <- inline_div32_shiftright1_40_a[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Index(\\\"a\\\", Number(U8, 0))\", \"Index(\\\"a\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x54), Register(0x65)], resolved: None }
0b 54 65 
# inline_div32_shiftright1_40_t18 <- inline_div32_shiftright1_40_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 00f4c Instruction { source: "inline_div32_shiftright1_40_t18 <- inline_div32_shiftright1_40_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x55), Register(0x64)], resolved: None }
0b 55 64 
# inline_div32_shiftright1_40_t19 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))", "Number(U8, 128)", "Number(U8, 128)"] }
# 00f4f Instruction { source: "inline_div32_shiftright1_40_t19 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x6e), Constant8(0x80=128)], resolved: None }
04 6e 80 
# inline_div32_shiftright1_40_t17 <- inline_div32_shiftright1_40_t18 BitwiseAnd inline_div32_shiftright1_40_t19
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))"] }
# 00f52 Instruction { source: "inline_div32_shiftright1_40_t17 <- inline_div32_shiftright1_40_t18 BitwiseAnd inline_div32_shiftright1_40_t19\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\"] }", opcode: And8, args: [Register(0x64), Register(0x6e), Register(0x64)], resolved: None }
1b 64 6e 64 
# inline_div32_shiftright1_40_t15 <- inline_div32_shiftright1_40_t16 BitwiseOr inline_div32_shiftright1_40_t17
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))"] }
# 00f56 Instruction { source: "inline_div32_shiftright1_40_t15 <- inline_div32_shiftright1_40_t16 BitwiseOr inline_div32_shiftright1_40_t17\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\"] }", opcode: Or8, args: [Register(0x65), Register(0x64), Register(0x64)], resolved: None }
1c 65 64 64 
# inline_div32_shiftright1_40_a[0x00..0x01] <- inline_div32_shiftright1_40_t15 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }"] }
# 00f5a Instruction { source: "inline_div32_shiftright1_40_a[0x00..0x01] <- inline_div32_shiftright1_40_t15 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\"] }", opcode: Copy8, args: [Register(0x64), Register(0x54)], resolved: None }
0b 64 54 
# inline_div32_shiftright1_40_t21 <- inline_div32_shiftright1_40_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 00f5d Instruction { source: "inline_div32_shiftright1_40_t21 <- inline_div32_shiftright1_40_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x55), Register(0x65)], resolved: None }
0b 55 65 
# inline_div32_shiftright1_40_t22 <- 0n127/0x7fu8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))", "Number(U8, 127)", "Number(U8, 127)"] }
# 00f60 Instruction { source: "inline_div32_shiftright1_40_t22 <- 0n127/0x7fu8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\", \"Number(U8, 127)\", \"Number(U8, 127)\"] }", opcode: LoadImm8, args: [Register(0x64), Constant8(0x7f=127)], resolved: None }
04 64 7f 
# inline_div32_shiftright1_40_t20 <- inline_div32_shiftright1_40_t21 BitwiseAnd inline_div32_shiftright1_40_t22
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))"] }
# 00f63 Instruction { source: "inline_div32_shiftright1_40_t20 <- inline_div32_shiftright1_40_t21 BitwiseAnd inline_div32_shiftright1_40_t22\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\"] }", opcode: And8, args: [Register(0x65), Register(0x64), Register(0x64)], resolved: None }
1b 65 64 64 
# inline_div32_shiftright1_40_a[0x01..0x02] <- inline_div32_shiftright1_40_t20 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127)) }"] }
# 00f67 Instruction { source: "inline_div32_shiftright1_40_a[0x01..0x02] <- inline_div32_shiftright1_40_t20 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127)) }\"] }", opcode: Copy8, args: [Register(0x64), Register(0x55)], resolved: None }
0b 64 55 
# inline_div32_shiftright1_40_t24 <- inline_div32_shiftright1_40_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 00f6a Instruction { source: "inline_div32_shiftright1_40_t24 <- inline_div32_shiftright1_40_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x55), Register(0x65)], resolved: None }
0b 55 65 
# inline_div32_shiftright1_40_t26 <- inline_div32_shiftright1_40_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 00f6d Instruction { source: "inline_div32_shiftright1_40_t26 <- inline_div32_shiftright1_40_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x56), Register(0x64)], resolved: None }
0b 56 64 
# inline_div32_shiftright1_40_t27 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))", "Number(U8, 128)", "Number(U8, 128)"] }
# 00f70 Instruction { source: "inline_div32_shiftright1_40_t27 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x6e), Constant8(0x80=128)], resolved: None }
04 6e 80 
# inline_div32_shiftright1_40_t25 <- inline_div32_shiftright1_40_t26 BitwiseAnd inline_div32_shiftright1_40_t27
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))"] }
# 00f73 Instruction { source: "inline_div32_shiftright1_40_t25 <- inline_div32_shiftright1_40_t26 BitwiseAnd inline_div32_shiftright1_40_t27\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\"] }", opcode: And8, args: [Register(0x64), Register(0x6e), Register(0x64)], resolved: None }
1b 64 6e 64 
# inline_div32_shiftright1_40_t23 <- inline_div32_shiftright1_40_t24 BitwiseOr inline_div32_shiftright1_40_t25
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))"] }
# 00f77 Instruction { source: "inline_div32_shiftright1_40_t23 <- inline_div32_shiftright1_40_t24 BitwiseOr inline_div32_shiftright1_40_t25\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\"] }", opcode: Or8, args: [Register(0x65), Register(0x64), Register(0x64)], resolved: None }
1c 65 64 64 
# inline_div32_shiftright1_40_a[0x01..0x02] <- inline_div32_shiftright1_40_t23 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }"] }
# 00f7b Instruction { source: "inline_div32_shiftright1_40_a[0x01..0x02] <- inline_div32_shiftright1_40_t23 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\"] }", opcode: Copy8, args: [Register(0x64), Register(0x55)], resolved: None }
0b 64 55 
# inline_div32_shiftright1_40_t29 <- inline_div32_shiftright1_40_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 00f7e Instruction { source: "inline_div32_shiftright1_40_t29 <- inline_div32_shiftright1_40_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x56), Register(0x65)], resolved: None }
0b 56 65 
# inline_div32_shiftright1_40_t30 <- 0n127/0x7fu8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))", "Number(U8, 127)", "Number(U8, 127)"] }
# 00f81 Instruction { source: "inline_div32_shiftright1_40_t30 <- 0n127/0x7fu8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\", \"Number(U8, 127)\", \"Number(U8, 127)\"] }", opcode: LoadImm8, args: [Register(0x64), Constant8(0x7f=127)], resolved: None }
04 64 7f 
# inline_div32_shiftright1_40_t28 <- inline_div32_shiftright1_40_t29 BitwiseAnd inline_div32_shiftright1_40_t30
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))"] }
# 00f84 Instruction { source: "inline_div32_shiftright1_40_t28 <- inline_div32_shiftright1_40_t29 BitwiseAnd inline_div32_shiftright1_40_t30\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\"] }", opcode: And8, args: [Register(0x65), Register(0x64), Register(0x64)], resolved: None }
1b 65 64 64 
# inline_div32_shiftright1_40_a[0x02..0x03] <- inline_div32_shiftright1_40_t28 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127)) }"] }
# 00f88 Instruction { source: "inline_div32_shiftright1_40_a[0x02..0x03] <- inline_div32_shiftright1_40_t28 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127)) }\"] }", opcode: Copy8, args: [Register(0x64), Register(0x56)], resolved: None }
0b 64 56 
# inline_div32_shiftright1_40_t32 <- inline_div32_shiftright1_40_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 00f8b Instruction { source: "inline_div32_shiftright1_40_t32 <- inline_div32_shiftright1_40_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x56), Register(0x65)], resolved: None }
0b 56 65 
# inline_div32_shiftright1_40_t34 <- inline_div32_shiftright1_40_a[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))", "Index(\"a\", Number(U8, 3))", "Index(\"a\", Number(U8, 3))"] }
# 00f8e Instruction { source: "inline_div32_shiftright1_40_t34 <- inline_div32_shiftright1_40_a[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\", \"Index(\\\"a\\\", Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0x57), Register(0x64)], resolved: None }
0b 57 64 
# inline_div32_shiftright1_40_t35 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))", "Number(U8, 128)", "Number(U8, 128)"] }
# 00f91 Instruction { source: "inline_div32_shiftright1_40_t35 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x6e), Constant8(0x80=128)], resolved: None }
04 6e 80 
# inline_div32_shiftright1_40_t33 <- inline_div32_shiftright1_40_t34 BitwiseAnd inline_div32_shiftright1_40_t35
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))"] }
# 00f94 Instruction { source: "inline_div32_shiftright1_40_t33 <- inline_div32_shiftright1_40_t34 BitwiseAnd inline_div32_shiftright1_40_t35\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\"] }", opcode: And8, args: [Register(0x64), Register(0x6e), Register(0x64)], resolved: None }
1b 64 6e 64 
# inline_div32_shiftright1_40_t31 <- inline_div32_shiftright1_40_t32 BitwiseOr inline_div32_shiftright1_40_t33
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))"] }
# 00f98 Instruction { source: "inline_div32_shiftright1_40_t31 <- inline_div32_shiftright1_40_t32 BitwiseOr inline_div32_shiftright1_40_t33\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\"] }", opcode: Or8, args: [Register(0x65), Register(0x64), Register(0x64)], resolved: None }
1c 65 64 64 
# inline_div32_shiftright1_40_a[0x02..0x03] <- inline_div32_shiftright1_40_t31 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }"] }
# 00f9c Instruction { source: "inline_div32_shiftright1_40_a[0x02..0x03] <- inline_div32_shiftright1_40_t31 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\"] }", opcode: Copy8, args: [Register(0x64), Register(0x56)], resolved: None }
0b 64 56 
# inline_div32_shiftright1_40_t37 <- inline_div32_shiftright1_40_a[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))", "Index(\"a\", Number(U8, 3))", "Index(\"a\", Number(U8, 3))"] }
# 00f9f Instruction { source: "inline_div32_shiftright1_40_t37 <- inline_div32_shiftright1_40_a[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\", \"Index(\\\"a\\\", Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0x57), Register(0x65)], resolved: None }
0b 57 65 
# inline_div32_shiftright1_40_t38 <- 0n127/0x7fu8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))", "Number(U8, 127)", "Number(U8, 127)"] }
# 00fa2 Instruction { source: "inline_div32_shiftright1_40_t38 <- 0n127/0x7fu8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\", \"Number(U8, 127)\", \"Number(U8, 127)\"] }", opcode: LoadImm8, args: [Register(0x64), Constant8(0x7f=127)], resolved: None }
04 64 7f 
# inline_div32_shiftright1_40_t36 <- inline_div32_shiftright1_40_t37 BitwiseAnd inline_div32_shiftright1_40_t38
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))"] }
# 00fa5 Instruction { source: "inline_div32_shiftright1_40_t36 <- inline_div32_shiftright1_40_t37 BitwiseAnd inline_div32_shiftright1_40_t38\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\"] }", opcode: And8, args: [Register(0x65), Register(0x64), Register(0x64)], resolved: None }
1b 65 64 64 
# inline_div32_shiftright1_40_a[0x03..0x04] <- inline_div32_shiftright1_40_t36 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127)) }"] }
# 00fa9 Instruction { source: "inline_div32_shiftright1_40_a[0x03..0x04] <- inline_div32_shiftright1_40_t36 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127)) }\"] }", opcode: Copy8, args: [Register(0x64), Register(0x57)], resolved: None }
0b 64 57 
# inline_div32_shiftright1_40_t39 <- inline_div32_shiftright1_40_a U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"a\")) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_div32_shiftright1_40_t39 <- inline_div32_shiftright1_40_a U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"a\\\")) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# t13 <- inline_div32_shiftright1_40_t39 U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"a\")) }"] }
# 00fac Instruction { source: "t13 <- inline_div32_shiftright1_40_t39 U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"a\\\")) }\"] }", opcode: Copy32, args: [Register(0x54), Register(0x68)], resolved: None }
21 54 68 
# goto inline_div32_shiftright1_40_function_end_shiftright1
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"a\")) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_div32_shiftright1_40_function_end_shiftright1\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"a\\\")) }\"] }", opcode: JmpImm, args: [Label24(inline_div32_shiftright1_40_function_end_shiftright1)], resolved: None }
# :inline_div32_shiftright1_40_function_end_shiftright1
# 	SourceContext { contexts: [] }
# inline_div32_shiftright1_40_function_end_shiftright1
# t16 <- hi U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }", "Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] }))", "Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })", "Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })", "Ident(\"hi\")", "Ident(\"hi\")"] }
# optimized away noop copy Instruction { source: "t16 <- hi U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] }))\", \"Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })\", \"Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })\", \"Ident(\\\"hi\\\")\", \"Ident(\\\"hi\\\")\"] }", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_div32_shiftright1_41_a <- t16 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }", "Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] }))", "Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })", "Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })"] }
# 00faf Instruction { source: "inline_div32_shiftright1_41_a <- t16 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] }))\", \"Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })\", \"Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })\"] }", opcode: Copy32, args: [Register(0x50), Register(0x54)], resolved: None }
21 50 54 
# inline_div32_shiftright1_41_t1 <- inline_div32_shiftright1_41_a[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))", "Index(\"a\", Number(U8, 0))", "Index(\"a\", Number(U8, 0))"] }
# 00fb2 Instruction { source: "inline_div32_shiftright1_41_t1 <- inline_div32_shiftright1_41_a[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 0))\", \"Index(\\\"a\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x54), Register(0x65)], resolved: None }
0b 54 65 
# inline_div32_shiftright1_41_t2 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 00fb5 Instruction { source: "inline_div32_shiftright1_41_t2 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x64), Constant8(0x01=1)], resolved: None }
04 64 01 
# inline_div32_shiftright1_41_t0 <- inline_div32_shiftright1_41_t1 RotateRight inline_div32_shiftright1_41_t2
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))"] }
# 00fb8 Instruction { source: "inline_div32_shiftright1_41_t0 <- inline_div32_shiftright1_41_t1 RotateRight inline_div32_shiftright1_41_t2\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0x64), Register(0x65), Register(0x64)], resolved: None }
1e 04 64 65 64 
# inline_div32_shiftright1_41_a[0x00..0x01] <- inline_div32_shiftright1_41_t0 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1)) }"] }
# 00fbd Instruction { source: "inline_div32_shiftright1_41_a[0x00..0x01] <- inline_div32_shiftright1_41_t0 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x64), Register(0x54)], resolved: None }
0b 64 54 
# inline_div32_shiftright1_41_t4 <- inline_div32_shiftright1_41_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 00fc0 Instruction { source: "inline_div32_shiftright1_41_t4 <- inline_div32_shiftright1_41_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x55), Register(0x65)], resolved: None }
0b 55 65 
# inline_div32_shiftright1_41_t5 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 00fc3 Instruction { source: "inline_div32_shiftright1_41_t5 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x64), Constant8(0x01=1)], resolved: None }
04 64 01 
# inline_div32_shiftright1_41_t3 <- inline_div32_shiftright1_41_t4 RotateRight inline_div32_shiftright1_41_t5
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))"] }
# 00fc6 Instruction { source: "inline_div32_shiftright1_41_t3 <- inline_div32_shiftright1_41_t4 RotateRight inline_div32_shiftright1_41_t5\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0x64), Register(0x65), Register(0x64)], resolved: None }
1e 04 64 65 64 
# inline_div32_shiftright1_41_a[0x01..0x02] <- inline_div32_shiftright1_41_t3 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1)) }"] }
# 00fcb Instruction { source: "inline_div32_shiftright1_41_a[0x01..0x02] <- inline_div32_shiftright1_41_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x64), Register(0x55)], resolved: None }
0b 64 55 
# inline_div32_shiftright1_41_t7 <- inline_div32_shiftright1_41_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 00fce Instruction { source: "inline_div32_shiftright1_41_t7 <- inline_div32_shiftright1_41_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x56), Register(0x65)], resolved: None }
0b 56 65 
# inline_div32_shiftright1_41_t8 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 00fd1 Instruction { source: "inline_div32_shiftright1_41_t8 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x64), Constant8(0x01=1)], resolved: None }
04 64 01 
# inline_div32_shiftright1_41_t6 <- inline_div32_shiftright1_41_t7 RotateRight inline_div32_shiftright1_41_t8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))"] }
# 00fd4 Instruction { source: "inline_div32_shiftright1_41_t6 <- inline_div32_shiftright1_41_t7 RotateRight inline_div32_shiftright1_41_t8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0x64), Register(0x65), Register(0x64)], resolved: None }
1e 04 64 65 64 
# inline_div32_shiftright1_41_a[0x02..0x03] <- inline_div32_shiftright1_41_t6 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1)) }"] }
# 00fd9 Instruction { source: "inline_div32_shiftright1_41_a[0x02..0x03] <- inline_div32_shiftright1_41_t6 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x64), Register(0x56)], resolved: None }
0b 64 56 
# inline_div32_shiftright1_41_t10 <- inline_div32_shiftright1_41_a[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))", "Index(\"a\", Number(U8, 3))", "Index(\"a\", Number(U8, 3))"] }
# 00fdc Instruction { source: "inline_div32_shiftright1_41_t10 <- inline_div32_shiftright1_41_a[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0x57), Register(0x65)], resolved: None }
0b 57 65 
# inline_div32_shiftright1_41_t11 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 00fdf Instruction { source: "inline_div32_shiftright1_41_t11 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x64), Constant8(0x01=1)], resolved: None }
04 64 01 
# inline_div32_shiftright1_41_t9 <- inline_div32_shiftright1_41_t10 RotateRight inline_div32_shiftright1_41_t11
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))"] }
# 00fe2 Instruction { source: "inline_div32_shiftright1_41_t9 <- inline_div32_shiftright1_41_t10 RotateRight inline_div32_shiftright1_41_t11\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0x64), Register(0x65), Register(0x64)], resolved: None }
1e 04 64 65 64 
# inline_div32_shiftright1_41_a[0x03..0x04] <- inline_div32_shiftright1_41_t9 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1)) }"] }
# 00fe7 Instruction { source: "inline_div32_shiftright1_41_a[0x03..0x04] <- inline_div32_shiftright1_41_t9 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x64), Register(0x57)], resolved: None }
0b 64 57 
# inline_div32_shiftright1_41_t13 <- inline_div32_shiftright1_41_a[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))", "Index(\"a\", Number(U8, 0))", "Index(\"a\", Number(U8, 0))"] }
# 00fea Instruction { source: "inline_div32_shiftright1_41_t13 <- inline_div32_shiftright1_41_a[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\", \"Index(\\\"a\\\", Number(U8, 0))\", \"Index(\\\"a\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x54), Register(0x65)], resolved: None }
0b 54 65 
# inline_div32_shiftright1_41_t14 <- 0n127/0x7fu8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))", "Number(U8, 127)", "Number(U8, 127)"] }
# 00fed Instruction { source: "inline_div32_shiftright1_41_t14 <- 0n127/0x7fu8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\", \"Number(U8, 127)\", \"Number(U8, 127)\"] }", opcode: LoadImm8, args: [Register(0x64), Constant8(0x7f=127)], resolved: None }
04 64 7f 
# inline_div32_shiftright1_41_t12 <- inline_div32_shiftright1_41_t13 BitwiseAnd inline_div32_shiftright1_41_t14
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))"] }
# 00ff0 Instruction { source: "inline_div32_shiftright1_41_t12 <- inline_div32_shiftright1_41_t13 BitwiseAnd inline_div32_shiftright1_41_t14\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\"] }", opcode: And8, args: [Register(0x65), Register(0x64), Register(0x64)], resolved: None }
1b 65 64 64 
# inline_div32_shiftright1_41_a[0x00..0x01] <- inline_div32_shiftright1_41_t12 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127)) }"] }
# 00ff4 Instruction { source: "inline_div32_shiftright1_41_a[0x00..0x01] <- inline_div32_shiftright1_41_t12 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127)) }\"] }", opcode: Copy8, args: [Register(0x64), Register(0x54)], resolved: None }
0b 64 54 
# inline_div32_shiftright1_41_t16 <- inline_div32_shiftright1_41_a[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Index(\"a\", Number(U8, 0))", "Index(\"a\", Number(U8, 0))"] }
# 00ff7 Instruction { source: "inline_div32_shiftright1_41_t16 <- inline_div32_shiftright1_41_a[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Index(\\\"a\\\", Number(U8, 0))\", \"Index(\\\"a\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x54), Register(0x65)], resolved: None }
0b 54 65 
# inline_div32_shiftright1_41_t18 <- inline_div32_shiftright1_41_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 00ffa Instruction { source: "inline_div32_shiftright1_41_t18 <- inline_div32_shiftright1_41_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x55), Register(0x64)], resolved: None }
0b 55 64 
# inline_div32_shiftright1_41_t19 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))", "Number(U8, 128)", "Number(U8, 128)"] }
# 00ffd Instruction { source: "inline_div32_shiftright1_41_t19 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x6e), Constant8(0x80=128)], resolved: None }
04 6e 80 
# inline_div32_shiftright1_41_t17 <- inline_div32_shiftright1_41_t18 BitwiseAnd inline_div32_shiftright1_41_t19
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))"] }
# 01000 Instruction { source: "inline_div32_shiftright1_41_t17 <- inline_div32_shiftright1_41_t18 BitwiseAnd inline_div32_shiftright1_41_t19\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\"] }", opcode: And8, args: [Register(0x64), Register(0x6e), Register(0x64)], resolved: None }
1b 64 6e 64 
# inline_div32_shiftright1_41_t15 <- inline_div32_shiftright1_41_t16 BitwiseOr inline_div32_shiftright1_41_t17
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))"] }
# 01004 Instruction { source: "inline_div32_shiftright1_41_t15 <- inline_div32_shiftright1_41_t16 BitwiseOr inline_div32_shiftright1_41_t17\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\"] }", opcode: Or8, args: [Register(0x65), Register(0x64), Register(0x64)], resolved: None }
1c 65 64 64 
# inline_div32_shiftright1_41_a[0x00..0x01] <- inline_div32_shiftright1_41_t15 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }"] }
# 01008 Instruction { source: "inline_div32_shiftright1_41_a[0x00..0x01] <- inline_div32_shiftright1_41_t15 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\"] }", opcode: Copy8, args: [Register(0x64), Register(0x54)], resolved: None }
0b 64 54 
# inline_div32_shiftright1_41_t21 <- inline_div32_shiftright1_41_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 0100b Instruction { source: "inline_div32_shiftright1_41_t21 <- inline_div32_shiftright1_41_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x55), Register(0x65)], resolved: None }
0b 55 65 
# inline_div32_shiftright1_41_t22 <- 0n127/0x7fu8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))", "Number(U8, 127)", "Number(U8, 127)"] }
# 0100e Instruction { source: "inline_div32_shiftright1_41_t22 <- 0n127/0x7fu8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\", \"Number(U8, 127)\", \"Number(U8, 127)\"] }", opcode: LoadImm8, args: [Register(0x64), Constant8(0x7f=127)], resolved: None }
04 64 7f 
# inline_div32_shiftright1_41_t20 <- inline_div32_shiftright1_41_t21 BitwiseAnd inline_div32_shiftright1_41_t22
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))"] }
# 01011 Instruction { source: "inline_div32_shiftright1_41_t20 <- inline_div32_shiftright1_41_t21 BitwiseAnd inline_div32_shiftright1_41_t22\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\"] }", opcode: And8, args: [Register(0x65), Register(0x64), Register(0x64)], resolved: None }
1b 65 64 64 
# inline_div32_shiftright1_41_a[0x01..0x02] <- inline_div32_shiftright1_41_t20 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127)) }"] }
# 01015 Instruction { source: "inline_div32_shiftright1_41_a[0x01..0x02] <- inline_div32_shiftright1_41_t20 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127)) }\"] }", opcode: Copy8, args: [Register(0x64), Register(0x55)], resolved: None }
0b 64 55 
# inline_div32_shiftright1_41_t24 <- inline_div32_shiftright1_41_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 01018 Instruction { source: "inline_div32_shiftright1_41_t24 <- inline_div32_shiftright1_41_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x55), Register(0x65)], resolved: None }
0b 55 65 
# inline_div32_shiftright1_41_t26 <- inline_div32_shiftright1_41_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 0101b Instruction { source: "inline_div32_shiftright1_41_t26 <- inline_div32_shiftright1_41_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x56), Register(0x64)], resolved: None }
0b 56 64 
# inline_div32_shiftright1_41_t27 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))", "Number(U8, 128)", "Number(U8, 128)"] }
# 0101e Instruction { source: "inline_div32_shiftright1_41_t27 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x6e), Constant8(0x80=128)], resolved: None }
04 6e 80 
# inline_div32_shiftright1_41_t25 <- inline_div32_shiftright1_41_t26 BitwiseAnd inline_div32_shiftright1_41_t27
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))"] }
# 01021 Instruction { source: "inline_div32_shiftright1_41_t25 <- inline_div32_shiftright1_41_t26 BitwiseAnd inline_div32_shiftright1_41_t27\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\"] }", opcode: And8, args: [Register(0x64), Register(0x6e), Register(0x64)], resolved: None }
1b 64 6e 64 
# inline_div32_shiftright1_41_t23 <- inline_div32_shiftright1_41_t24 BitwiseOr inline_div32_shiftright1_41_t25
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))"] }
# 01025 Instruction { source: "inline_div32_shiftright1_41_t23 <- inline_div32_shiftright1_41_t24 BitwiseOr inline_div32_shiftright1_41_t25\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\"] }", opcode: Or8, args: [Register(0x65), Register(0x64), Register(0x64)], resolved: None }
1c 65 64 64 
# inline_div32_shiftright1_41_a[0x01..0x02] <- inline_div32_shiftright1_41_t23 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }"] }
# 01029 Instruction { source: "inline_div32_shiftright1_41_a[0x01..0x02] <- inline_div32_shiftright1_41_t23 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\"] }", opcode: Copy8, args: [Register(0x64), Register(0x55)], resolved: None }
0b 64 55 
# inline_div32_shiftright1_41_t29 <- inline_div32_shiftright1_41_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 0102c Instruction { source: "inline_div32_shiftright1_41_t29 <- inline_div32_shiftright1_41_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x56), Register(0x65)], resolved: None }
0b 56 65 
# inline_div32_shiftright1_41_t30 <- 0n127/0x7fu8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))", "Number(U8, 127)", "Number(U8, 127)"] }
# 0102f Instruction { source: "inline_div32_shiftright1_41_t30 <- 0n127/0x7fu8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\", \"Number(U8, 127)\", \"Number(U8, 127)\"] }", opcode: LoadImm8, args: [Register(0x64), Constant8(0x7f=127)], resolved: None }
04 64 7f 
# inline_div32_shiftright1_41_t28 <- inline_div32_shiftright1_41_t29 BitwiseAnd inline_div32_shiftright1_41_t30
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))"] }
# 01032 Instruction { source: "inline_div32_shiftright1_41_t28 <- inline_div32_shiftright1_41_t29 BitwiseAnd inline_div32_shiftright1_41_t30\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\"] }", opcode: And8, args: [Register(0x65), Register(0x64), Register(0x64)], resolved: None }
1b 65 64 64 
# inline_div32_shiftright1_41_a[0x02..0x03] <- inline_div32_shiftright1_41_t28 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127)) }"] }
# 01036 Instruction { source: "inline_div32_shiftright1_41_a[0x02..0x03] <- inline_div32_shiftright1_41_t28 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127)) }\"] }", opcode: Copy8, args: [Register(0x64), Register(0x56)], resolved: None }
0b 64 56 
# inline_div32_shiftright1_41_t32 <- inline_div32_shiftright1_41_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 01039 Instruction { source: "inline_div32_shiftright1_41_t32 <- inline_div32_shiftright1_41_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x56), Register(0x65)], resolved: None }
0b 56 65 
# inline_div32_shiftright1_41_t34 <- inline_div32_shiftright1_41_a[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))", "Index(\"a\", Number(U8, 3))", "Index(\"a\", Number(U8, 3))"] }
# 0103c Instruction { source: "inline_div32_shiftright1_41_t34 <- inline_div32_shiftright1_41_a[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\", \"Index(\\\"a\\\", Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0x57), Register(0x64)], resolved: None }
0b 57 64 
# inline_div32_shiftright1_41_t35 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))", "Number(U8, 128)", "Number(U8, 128)"] }
# 0103f Instruction { source: "inline_div32_shiftright1_41_t35 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x6e), Constant8(0x80=128)], resolved: None }
04 6e 80 
# inline_div32_shiftright1_41_t33 <- inline_div32_shiftright1_41_t34 BitwiseAnd inline_div32_shiftright1_41_t35
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))"] }
# 01042 Instruction { source: "inline_div32_shiftright1_41_t33 <- inline_div32_shiftright1_41_t34 BitwiseAnd inline_div32_shiftright1_41_t35\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\"] }", opcode: And8, args: [Register(0x64), Register(0x6e), Register(0x64)], resolved: None }
1b 64 6e 64 
# inline_div32_shiftright1_41_t31 <- inline_div32_shiftright1_41_t32 BitwiseOr inline_div32_shiftright1_41_t33
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))"] }
# 01046 Instruction { source: "inline_div32_shiftright1_41_t31 <- inline_div32_shiftright1_41_t32 BitwiseOr inline_div32_shiftright1_41_t33\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\"] }", opcode: Or8, args: [Register(0x65), Register(0x64), Register(0x64)], resolved: None }
1c 65 64 64 
# inline_div32_shiftright1_41_a[0x02..0x03] <- inline_div32_shiftright1_41_t31 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }"] }
# 0104a Instruction { source: "inline_div32_shiftright1_41_a[0x02..0x03] <- inline_div32_shiftright1_41_t31 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\"] }", opcode: Copy8, args: [Register(0x64), Register(0x56)], resolved: None }
0b 64 56 
# inline_div32_shiftright1_41_t37 <- inline_div32_shiftright1_41_a[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))", "Index(\"a\", Number(U8, 3))", "Index(\"a\", Number(U8, 3))"] }
# 0104d Instruction { source: "inline_div32_shiftright1_41_t37 <- inline_div32_shiftright1_41_a[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\", \"Index(\\\"a\\\", Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0x57), Register(0x65)], resolved: None }
0b 57 65 
# inline_div32_shiftright1_41_t38 <- 0n127/0x7fu8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))", "Number(U8, 127)", "Number(U8, 127)"] }
# 01050 Instruction { source: "inline_div32_shiftright1_41_t38 <- 0n127/0x7fu8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\", \"Number(U8, 127)\", \"Number(U8, 127)\"] }", opcode: LoadImm8, args: [Register(0x64), Constant8(0x7f=127)], resolved: None }
04 64 7f 
# inline_div32_shiftright1_41_t36 <- inline_div32_shiftright1_41_t37 BitwiseAnd inline_div32_shiftright1_41_t38
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))"] }
# 01053 Instruction { source: "inline_div32_shiftright1_41_t36 <- inline_div32_shiftright1_41_t37 BitwiseAnd inline_div32_shiftright1_41_t38\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\"] }", opcode: And8, args: [Register(0x65), Register(0x64), Register(0x64)], resolved: None }
1b 65 64 64 
# inline_div32_shiftright1_41_a[0x03..0x04] <- inline_div32_shiftright1_41_t36 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127)) }"] }
# 01057 Instruction { source: "inline_div32_shiftright1_41_a[0x03..0x04] <- inline_div32_shiftright1_41_t36 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127)) }\"] }", opcode: Copy8, args: [Register(0x64), Register(0x57)], resolved: None }
0b 64 57 
# inline_div32_shiftright1_41_t39 <- inline_div32_shiftright1_41_a U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"a\")) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_div32_shiftright1_41_t39 <- inline_div32_shiftright1_41_a U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"a\\\")) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# t15 <- inline_div32_shiftright1_41_t39 U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"a\")) }"] }
# optimized away noop copy Instruction { source: "t15 <- inline_div32_shiftright1_41_t39 U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"a\\\")) }\"] }", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# goto inline_div32_shiftright1_41_function_end_shiftright1
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"a\")) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_div32_shiftright1_41_function_end_shiftright1\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"a\\\")) }\"] }", opcode: JmpImm, args: [Label24(inline_div32_shiftright1_41_function_end_shiftright1)], resolved: None }
# :inline_div32_shiftright1_41_function_end_shiftright1
# 	SourceContext { contexts: [] }
# inline_div32_shiftright1_41_function_end_shiftright1
# mid <- t13 Add t15
# 	SourceContext { contexts: ["Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }", "Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] }))"] }
# 0105a Instruction { source: "mid <- t13 Add t15\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] }))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0105b Instruction { source: "mid <- t13 Add t15\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] }))\"] }", opcode: AddCarry32_1, args: [Register(0x68), Register(0x54), Register(0x54)], resolved: None }
30 68 54 54 
# 0105f Instruction { source: "mid <- t13 Add t15\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] }))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t18 <- mid U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })", "Ident(\"mid\")", "Ident(\"mid\")"] }
# optimized away noop copy Instruction { source: "t18 <- mid U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"Ident(\\\"mid\\\")\", \"Ident(\\\"mid\\\")\"] }", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# t19 <- b U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "t19 <- b U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# t22 <- __frame_pointer U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })", "AddressOf(Ident(\"x64\"))", "AddressOf(Ident(\"x64\"))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))", "Ident(\"__frame_pointer\")", "Ident(\"__frame_pointer\")"] }
# 01060 Instruction { source: "t22 <- __frame_pointer U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"AddressOf(Ident(\\\"x64\\\"))\", \"AddressOf(Ident(\\\"x64\\\"))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Ident(\\\"__frame_pointer\\\")\", \"Ident(\\\"__frame_pointer\\\")\"] }", opcode: Copy32, args: [Register(0x0c), Register(0x7c)], resolved: None }
21 0c 7c 
# t23 <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })", "AddressOf(Ident(\"x64\"))", "AddressOf(Ident(\"x64\"))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 01063 Instruction { source: "t23 <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"AddressOf(Ident(\\\"x64\\\"))\", \"AddressOf(Ident(\\\"x64\\\"))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x58), Constant32(0x00000000=0)], resolved: None }
20 58 00 00 00 00 
# t21 <- t22 Add t23
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })", "AddressOf(Ident(\"x64\"))", "AddressOf(Ident(\"x64\"))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))"] }
# 01069 Instruction { source: "t21 <- t22 Add t23\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"AddressOf(Ident(\\\"x64\\\"))\", \"AddressOf(Ident(\\\"x64\\\"))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0106a Instruction { source: "t21 <- t22 Add t23\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"AddressOf(Ident(\\\"x64\\\"))\", \"AddressOf(Ident(\\\"x64\\\"))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\"] }", opcode: AddCarry32_1, args: [Register(0x7c), Register(0x58), Register(0x58)], resolved: None }
30 7c 58 58 
# 0106e Instruction { source: "t21 <- t22 Add t23\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"AddressOf(Ident(\\\"x64\\\"))\", \"AddressOf(Ident(\\\"x64\\\"))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t20 <- t21 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })", "AddressOf(Ident(\"x64\"))", "AddressOf(Ident(\"x64\"))"] }
# optimized away noop copy Instruction { source: "t20 <- t21 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"AddressOf(Ident(\\\"x64\\\"))\", \"AddressOf(Ident(\\\"x64\\\"))\"] }", opcode: Copy32, args: [Register(0x58), Register(0x58)], resolved: None }
# None <= call mul32_64(t18,t19,t20,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })"] }
# 0106f Instruction { source: "Arg0[a]=t18 None <= call mul32_64(t18,t19,t20,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\"] }", opcode: Copy32, args: [Register(0x54), Register(0x00)], resolved: None }
21 54 00 
# 01072 Instruction { source: "Arg1[b]=t19 None <= call mul32_64(t18,t19,t20,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x04)], resolved: None }
21 4c 04 
# 01075 Instruction { source: "Arg2[c]=t20 None <= call mul32_64(t18,t19,t20,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\"] }", opcode: Copy32, args: [Register(0x58), Register(0x08)], resolved: None }
21 58 08 
# Registers used by this function: {72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127}
# Registers used by callee tree: {148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 200, 201, 202, 203, 204, 208, 209, 210, 211, 212, 213, 214, 215}
# Registers to save: []
# 01078 Instruction { source: "PseudoCall(Label24(:mul32_64))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 0107e Instruction { source: "PseudoCall(Label24(:mul32_64))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 88 10 00 00 
# 01084 Instruction { source: "PseudoCall(Label24(:mul32_64))", opcode: JmpImm, args: [Label24(:mul32_64)], resolved: None }
70 c9 12 00 
# 01088 Instruction { source: "PseudoCall(Label24(:mul32_64))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# t26 <- __frame_pointer U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }", "LocalFieldDeref(\"x64\", \"hi\")", "LocalFieldDeref(\"x64\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4))", "Ident(\"__frame_pointer\")", "Ident(\"__frame_pointer\")"] }
# 0108e Instruction { source: "t26 <- __frame_pointer U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }\", \"LocalFieldDeref(\\\"x64\\\", \\\"hi\\\")\", \"LocalFieldDeref(\\\"x64\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4))\", \"Ident(\\\"__frame_pointer\\\")\", \"Ident(\\\"__frame_pointer\\\")\"] }", opcode: Copy32, args: [Register(0x0c), Register(0x7c)], resolved: None }
21 0c 7c 
# t27 <- 0n4/0x00000004u32 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }", "LocalFieldDeref(\"x64\", \"hi\")", "LocalFieldDeref(\"x64\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 01091 Instruction { source: "t27 <- 0n4/0x00000004u32 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }\", \"LocalFieldDeref(\\\"x64\\\", \\\"hi\\\")\", \"LocalFieldDeref(\\\"x64\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: LoadImm32, args: [Register(0x58), Constant32(0x00000004=4)], resolved: None }
20 58 04 00 00 00 
# t25 <- t26 Add t27
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }", "LocalFieldDeref(\"x64\", \"hi\")", "LocalFieldDeref(\"x64\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4))"] }
# 01097 Instruction { source: "t25 <- t26 Add t27\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }\", \"LocalFieldDeref(\\\"x64\\\", \\\"hi\\\")\", \"LocalFieldDeref(\\\"x64\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01098 Instruction { source: "t25 <- t26 Add t27\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }\", \"LocalFieldDeref(\\\"x64\\\", \\\"hi\\\")\", \"LocalFieldDeref(\\\"x64\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x7c), Register(0x58), Register(0x58)], resolved: None }
30 7c 58 58 
# 0109c Instruction { source: "t25 <- t26 Add t27\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }\", \"LocalFieldDeref(\\\"x64\\\", \\\"hi\\\")\", \"LocalFieldDeref(\\\"x64\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t24 <- mem[t25] U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }", "LocalFieldDeref(\"x64\", \"hi\")", "LocalFieldDeref(\"x64\", \"hi\")"] }
# 0109d Instruction { source: "t24 <- mem[t25] U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }\", \"LocalFieldDeref(\\\"x64\\\", \\\"hi\\\")\", \"LocalFieldDeref(\\\"x64\\\", \\\"hi\\\")\"] }", opcode: Load32, args: [Register(0x58), Register(0x58)], resolved: None }
22 58 58 
# t28 <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 010a0 Instruction { source: "t28 <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x5c), Constant32(0x00000000=0)], resolved: None }
20 5c 00 00 00 00 
# if t24 > t28 then 'div32_if_true_0_10' else 'div32_if_else_0_11'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }"] }
# 010a6 Instruction { source: "if t24 > t28 then 'div32_if_true_0_10' else 'div32_if_else_0_11'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }\"] }", opcode: Cmp8, args: [Register(0x5b), Register(0x5f)], resolved: None }
15 5b 5f 
# 010a9 Instruction { source: "if t24 > t28 then 'div32_if_true_0_10' else 'div32_if_else_0_11'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }\"] }", opcode: Cmp8IfZero, args: [Register(0x5a), Register(0x5e)], resolved: None }
16 5a 5e 
# 010ac Instruction { source: "if t24 > t28 then 'div32_if_true_0_10' else 'div32_if_else_0_11'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }\"] }", opcode: Cmp8IfZero, args: [Register(0x59), Register(0x5d)], resolved: None }
16 59 5d 
# 010af Instruction { source: "if t24 > t28 then 'div32_if_true_0_10' else 'div32_if_else_0_11'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }\"] }", opcode: Cmp8IfZero, args: [Register(0x58), Register(0x5c)], resolved: None }
16 58 5c 
# 010b2 Instruction { source: "if t24 > t28 then 'div32_if_true_0_10' else 'div32_if_else_0_11'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }\"] }", opcode: JcImm, args: [Label24(div32_if_else_0_11)], resolved: None }
71 de 10 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t24 > t28 then 'div32_if_true_0_10' else 'div32_if_else_0_11'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }\"] }", opcode: JmpImm, args: [Label24(div32_if_true_0_10)], resolved: None }
# :div32_if_true_0_10
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }"] }
# div32_if_true_0_10
# t29 <- mid U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))", "Ident(\"mid\")", "Ident(\"mid\")"] }
# 010b6 Instruction { source: "t29 <- mid U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\", \"Ident(\\\"mid\\\")\", \"Ident(\\\"mid\\\")\"] }", opcode: Copy32, args: [Register(0x54), Register(0x50)], resolved: None }
21 54 50 
# t30 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 010b9 Instruction { source: "t30 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x54), Constant32(0x00000001=1)], resolved: None }
20 54 01 00 00 00 
# hi <- t29 Subtract t30
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))"] }
# 010bf Instruction { source: "hi <- t29 Subtract t30\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Copy32, args: [Register(0x54), Register(0x00)], resolved: None }
21 54 00 
# 010c2 Instruction { source: "hi <- t29 Subtract t30\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x00)], resolved: None }
01 00 
# 010c4 Instruction { source: "hi <- t29 Subtract t30\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x01)], resolved: None }
01 01 
# 010c6 Instruction { source: "hi <- t29 Subtract t30\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x02)], resolved: None }
01 02 
# 010c8 Instruction { source: "hi <- t29 Subtract t30\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x03)], resolved: None }
01 03 
# 010ca Instruction { source: "hi <- t29 Subtract t30\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x00), Constant32(0x00000001=1)], resolved: None }
32 00 01 00 00 00 
# 010d0 Instruction { source: "hi <- t29 Subtract t30\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 010d1 Instruction { source: "hi <- t29 Subtract t30\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x50), Register(0x00), Register(0x50)], resolved: None }
30 50 00 50 
# 010d5 Instruction { source: "hi <- t29 Subtract t30\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# goto div32_while_predicate_6
# 	SourceContext { contexts: ["Continue"] }
# 010d6 Instruction { source: "goto div32_while_predicate_6\n\tSourceContext { contexts: [\"Continue\"] }", opcode: JmpImm, args: [Label24(div32_while_predicate_6)], resolved: None }
70 ee 0e 00 
# goto div32_if_end_9
# 	SourceContext { contexts: [] }
# 010da Instruction { source: "goto div32_if_end_9\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(div32_if_end_9)], resolved: None }
70 de 10 00 
# :div32_if_else_0_11
# 	SourceContext { contexts: [] }
# div32_if_else_0_11
# :div32_if_end_9
# 	SourceContext { contexts: [] }
# div32_if_end_9
# t31 <- __frame_pointer U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\"x64\", \"lo\") }", "LocalFieldDeref(\"x64\", \"lo\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident(\"__frame_pointer\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident(\"__frame_pointer\") }", "Ident(\"__frame_pointer\")"] }
# 010de Instruction { source: "t31 <- __frame_pointer U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\\\"x64\\\", \\\"lo\\\") }\", \"LocalFieldDeref(\\\"x64\\\", \\\"lo\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident(\\\"__frame_pointer\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident(\\\"__frame_pointer\\\") }\", \"Ident(\\\"__frame_pointer\\\")\"] }", opcode: Copy32, args: [Register(0x0c), Register(0x7c)], resolved: None }
21 0c 7c 
# x <- mem[t31] U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\"x64\", \"lo\") }", "LocalFieldDeref(\"x64\", \"lo\")"] }
# 010e1 Instruction { source: "x <- mem[t31] U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\\\"x64\\\", \\\"lo\\\") }\", \"LocalFieldDeref(\\\"x64\\\", \\\"lo\\\")\"] }", opcode: Load32, args: [Register(0x7c), Register(0x58)], resolved: None }
22 7c 58 
# t32 <- x U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }", "Ident(\"x\")", "Ident(\"x\")"] }
# optimized away noop copy Instruction { source: "t32 <- x U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\", \"Ident(\\\"x\\\")\", \"Ident(\\\"x\\\")\"] }", opcode: Copy32, args: [Register(0x58), Register(0x58)], resolved: None }
# t33 <- a U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t33 <- a U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# if t32 > t33 then 'div32_if_true_0_13' else 'div32_if_else_0_14'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }"] }
# 010e4 Instruction { source: "if t32 > t33 then 'div32_if_true_0_13' else 'div32_if_else_0_14'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8, args: [Register(0x5b), Register(0x4b)], resolved: None }
15 5b 4b 
# 010e7 Instruction { source: "if t32 > t33 then 'div32_if_true_0_13' else 'div32_if_else_0_14'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x5a), Register(0x4a)], resolved: None }
16 5a 4a 
# 010ea Instruction { source: "if t32 > t33 then 'div32_if_true_0_13' else 'div32_if_else_0_14'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x59), Register(0x49)], resolved: None }
16 59 49 
# 010ed Instruction { source: "if t32 > t33 then 'div32_if_true_0_13' else 'div32_if_else_0_14'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x58), Register(0x48)], resolved: None }
16 58 48 
# 010f0 Instruction { source: "if t32 > t33 then 'div32_if_true_0_13' else 'div32_if_else_0_14'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: JcImm, args: [Label24(div32_if_else_0_14)], resolved: None }
71 1c 11 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t32 > t33 then 'div32_if_true_0_13' else 'div32_if_else_0_14'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: JmpImm, args: [Label24(div32_if_true_0_13)], resolved: None }
# :div32_if_true_0_13
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }"] }
# div32_if_true_0_13
# t34 <- mid U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))", "Ident(\"mid\")", "Ident(\"mid\")"] }
# 010f4 Instruction { source: "t34 <- mid U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\", \"Ident(\\\"mid\\\")\", \"Ident(\\\"mid\\\")\"] }", opcode: Copy32, args: [Register(0x54), Register(0x50)], resolved: None }
21 54 50 
# t35 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 010f7 Instruction { source: "t35 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x54), Constant32(0x00000001=1)], resolved: None }
20 54 01 00 00 00 
# hi <- t34 Subtract t35
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))"] }
# 010fd Instruction { source: "hi <- t34 Subtract t35\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Copy32, args: [Register(0x54), Register(0x00)], resolved: None }
21 54 00 
# 01100 Instruction { source: "hi <- t34 Subtract t35\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x00)], resolved: None }
01 00 
# 01102 Instruction { source: "hi <- t34 Subtract t35\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x01)], resolved: None }
01 01 
# 01104 Instruction { source: "hi <- t34 Subtract t35\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x02)], resolved: None }
01 02 
# 01106 Instruction { source: "hi <- t34 Subtract t35\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x03)], resolved: None }
01 03 
# 01108 Instruction { source: "hi <- t34 Subtract t35\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x00), Constant32(0x00000001=1)], resolved: None }
32 00 01 00 00 00 
# 0110e Instruction { source: "hi <- t34 Subtract t35\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0110f Instruction { source: "hi <- t34 Subtract t35\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x50), Register(0x00), Register(0x50)], resolved: None }
30 50 00 50 
# 01113 Instruction { source: "hi <- t34 Subtract t35\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# goto div32_while_predicate_6
# 	SourceContext { contexts: ["Continue"] }
# 01114 Instruction { source: "goto div32_while_predicate_6\n\tSourceContext { contexts: [\"Continue\"] }", opcode: JmpImm, args: [Label24(div32_while_predicate_6)], resolved: None }
70 ee 0e 00 
# goto div32_if_end_12
# 	SourceContext { contexts: [] }
# 01118 Instruction { source: "goto div32_if_end_12\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(div32_if_end_12)], resolved: None }
70 1c 11 00 
# :div32_if_else_0_14
# 	SourceContext { contexts: [] }
# div32_if_else_0_14
# :div32_if_end_12
# 	SourceContext { contexts: [] }
# div32_if_end_12
# t36 <- x U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }", "Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }", "Ident(\"x\")", "Ident(\"x\")"] }
# optimized away noop copy Instruction { source: "t36 <- x U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\", \"Ident(\\\"x\\\")\", \"Ident(\\\"x\\\")\"] }", opcode: Copy32, args: [Register(0x58), Register(0x58)], resolved: None }
# t37 <- a U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }", "Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t37 <- a U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# if t36 == t37 then 'div32_if_true_0_16' else 'div32_if_else_0_17'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }", "Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }"] }
# 0111c Instruction { source: "if t36 == t37 then 'div32_if_true_0_16' else 'div32_if_else_0_17'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8, args: [Register(0x5b), Register(0x4b)], resolved: None }
15 5b 4b 
# 0111f Instruction { source: "if t36 == t37 then 'div32_if_true_0_16' else 'div32_if_else_0_17'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x5a), Register(0x4a)], resolved: None }
16 5a 4a 
# 01122 Instruction { source: "if t36 == t37 then 'div32_if_true_0_16' else 'div32_if_else_0_17'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x59), Register(0x49)], resolved: None }
16 59 49 
# 01125 Instruction { source: "if t36 == t37 then 'div32_if_true_0_16' else 'div32_if_else_0_17'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x58), Register(0x48)], resolved: None }
16 58 48 
# 01128 Instruction { source: "if t36 == t37 then 'div32_if_true_0_16' else 'div32_if_else_0_17'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: JzImm, args: [Label24(div32_if_true_0_16)], resolved: None }
72 30 11 00 
# 0112c Instruction { source: "if t36 == t37 then 'div32_if_true_0_16' else 'div32_if_else_0_17'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: JmpImm, args: [Label24(div32_if_else_0_17)], resolved: None }
70 4e 11 00 
# :div32_if_true_0_16
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }"] }
# div32_if_true_0_16
# t38 <- mid U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"mid\")) }", "Ident(\"mid\")", "Ident(\"mid\")"] }
# 01130 Instruction { source: "t38 <- mid U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\", \"Ident(\\\"mid\\\")\", \"Ident(\\\"mid\\\")\"] }", opcode: Copy32, args: [Register(0x54), Register(0x48)], resolved: None }
21 54 48 
# t39 <- 0n8/0x00000008u32 
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"mid\")) }"] }
# 01133 Instruction { source: "t39 <- 0n8/0x00000008u32 \n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\"] }", opcode: LoadImm32, args: [Register(0x4c), Constant32(0x00000008=8)], resolved: None }
20 4c 08 00 00 00 
# __frame_pointer <- __frame_pointer Add t39
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"mid\")) }"] }
# 01139 Instruction { source: "__frame_pointer <- __frame_pointer Add t39\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0113a Instruction { source: "__frame_pointer <- __frame_pointer Add t39\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\"] }", opcode: AddCarry32_1, args: [Register(0x0c), Register(0x4c), Register(0x0c)], resolved: None }
30 0c 4c 0c 
# 0113e Instruction { source: "__frame_pointer <- __frame_pointer Add t39\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# return Some(t38)
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"mid\")) }"] }
# 0113f Instruction { source: "return Some(t38)\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\"] }", opcode: Copy32, args: [Register(0x48), Register(0x00)], resolved: None }
21 48 00 
# 01142 Instruction { source: "Dealloc 8 bytes from stack", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000008=8)], resolved: None }
32 0c 08 00 00 00 
# 01148 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# goto div32_if_end_15
# 	SourceContext { contexts: [] }
# 0114a Instruction { source: "goto div32_if_end_15\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(div32_if_end_15)], resolved: None }
70 4e 11 00 
# :div32_if_else_0_17
# 	SourceContext { contexts: [] }
# div32_if_else_0_17
# :div32_if_end_15
# 	SourceContext { contexts: [] }
# div32_if_end_15
# t40 <- a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }", "Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t40 <- a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# t41 <- x U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }", "Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\"))", "Ident(\"x\")", "Ident(\"x\")"] }
# optimized away noop copy Instruction { source: "t41 <- x U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\", \"Ident(\\\"x\\\")\", \"Ident(\\\"x\\\")\"] }", opcode: Copy32, args: [Register(0x58), Register(0x58)], resolved: None }
# r <- t40 Subtract t41
# 	SourceContext { contexts: ["Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }", "Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\"))"] }
# 0114e Instruction { source: "r <- t40 Subtract t41\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: Copy32, args: [Register(0x58), Register(0x00)], resolved: None }
21 58 00 
# 01151 Instruction { source: "r <- t40 Subtract t41\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: Invert8, args: [Register(0x00)], resolved: None }
01 00 
# 01153 Instruction { source: "r <- t40 Subtract t41\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: Invert8, args: [Register(0x01)], resolved: None }
01 01 
# 01155 Instruction { source: "r <- t40 Subtract t41\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: Invert8, args: [Register(0x02)], resolved: None }
01 02 
# 01157 Instruction { source: "r <- t40 Subtract t41\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: Invert8, args: [Register(0x03)], resolved: None }
01 03 
# 01159 Instruction { source: "r <- t40 Subtract t41\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x00), Constant32(0x00000001=1)], resolved: None }
32 00 01 00 00 00 
# 0115f Instruction { source: "r <- t40 Subtract t41\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01160 Instruction { source: "r <- t40 Subtract t41\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x48), Register(0x00), Register(0x58)], resolved: None }
30 48 00 58 
# 01164 Instruction { source: "r <- t40 Subtract t41\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t42 <- r U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }", "Ident(\"r\")", "Ident(\"r\")"] }
# optimized away noop copy Instruction { source: "t42 <- r U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\", \"Ident(\\\"r\\\")\", \"Ident(\\\"r\\\")\"] }", opcode: Copy32, args: [Register(0x58), Register(0x58)], resolved: None }
# t43 <- b U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "t43 <- b U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# if t42 < t43 then 'div32_if_true_0_19' else 'div32_if_else_0_20'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }"] }
# 01165 Instruction { source: "if t42 < t43 then 'div32_if_true_0_19' else 'div32_if_else_0_20'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8, args: [Register(0x4f), Register(0x5b)], resolved: None }
15 4f 5b 
# 01168 Instruction { source: "if t42 < t43 then 'div32_if_true_0_19' else 'div32_if_else_0_20'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x4e), Register(0x5a)], resolved: None }
16 4e 5a 
# 0116b Instruction { source: "if t42 < t43 then 'div32_if_true_0_19' else 'div32_if_else_0_20'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x4d), Register(0x59)], resolved: None }
16 4d 59 
# 0116e Instruction { source: "if t42 < t43 then 'div32_if_true_0_19' else 'div32_if_else_0_20'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x4c), Register(0x58)], resolved: None }
16 4c 58 
# 01171 Instruction { source: "if t42 < t43 then 'div32_if_true_0_19' else 'div32_if_else_0_20'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: JcImm, args: [Label24(div32_if_else_0_20)], resolved: None }
71 93 11 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t42 < t43 then 'div32_if_true_0_19' else 'div32_if_else_0_20'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: JmpImm, args: [Label24(div32_if_true_0_19)], resolved: None }
# :div32_if_true_0_19
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }"] }
# div32_if_true_0_19
# t44 <- mid U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"mid\")) }", "Ident(\"mid\")", "Ident(\"mid\")"] }
# 01175 Instruction { source: "t44 <- mid U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\", \"Ident(\\\"mid\\\")\", \"Ident(\\\"mid\\\")\"] }", opcode: Copy32, args: [Register(0x54), Register(0x48)], resolved: None }
21 54 48 
# t45 <- 0n8/0x00000008u32 
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"mid\")) }"] }
# 01178 Instruction { source: "t45 <- 0n8/0x00000008u32 \n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\"] }", opcode: LoadImm32, args: [Register(0x4c), Constant32(0x00000008=8)], resolved: None }
20 4c 08 00 00 00 
# __frame_pointer <- __frame_pointer Add t45
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"mid\")) }"] }
# 0117e Instruction { source: "__frame_pointer <- __frame_pointer Add t45\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0117f Instruction { source: "__frame_pointer <- __frame_pointer Add t45\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\"] }", opcode: AddCarry32_1, args: [Register(0x0c), Register(0x4c), Register(0x0c)], resolved: None }
30 0c 4c 0c 
# 01183 Instruction { source: "__frame_pointer <- __frame_pointer Add t45\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# return Some(t44)
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"mid\")) }"] }
# 01184 Instruction { source: "return Some(t44)\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\"] }", opcode: Copy32, args: [Register(0x48), Register(0x00)], resolved: None }
21 48 00 
# 01187 Instruction { source: "Dealloc 8 bytes from stack", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000008=8)], resolved: None }
32 0c 08 00 00 00 
# 0118d Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# goto div32_if_end_18
# 	SourceContext { contexts: [] }
# 0118f Instruction { source: "goto div32_if_end_18\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(div32_if_end_18)], resolved: None }
70 93 11 00 
# :div32_if_else_0_20
# 	SourceContext { contexts: [] }
# div32_if_else_0_20
# :div32_if_end_18
# 	SourceContext { contexts: [] }
# div32_if_end_18
# t46 <- mid U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"mid\"), Number(U8, 1))", "Ident(\"mid\")", "Ident(\"mid\")"] }
# optimized away noop copy Instruction { source: "t46 <- mid U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1))\", \"Ident(\\\"mid\\\")\", \"Ident(\\\"mid\\\")\"] }", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# t47 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"mid\"), Number(U8, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 01193 Instruction { source: "t47 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x58), Constant32(0x00000001=1)], resolved: None }
20 58 01 00 00 00 
# lo <- t46 Add t47
# 	SourceContext { contexts: ["Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"mid\"), Number(U8, 1))"] }
# 01199 Instruction { source: "lo <- t46 Add t47\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0119a Instruction { source: "lo <- t46 Add t47\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x54), Register(0x58), Register(0x60)], resolved: None }
30 54 58 60 
# 0119e Instruction { source: "lo <- t46 Add t47\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# goto div32_while_predicate_6
# 	SourceContext { contexts: [] }
# 0119f Instruction { source: "goto div32_while_predicate_6\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(div32_while_predicate_6)], resolved: None }
70 ee 0e 00 
# :div32_while_end_8
# 	SourceContext { contexts: [] }
# div32_while_end_8
# t48 <- lo U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"lo\")) }", "Ident(\"lo\")", "Ident(\"lo\")"] }
# 011a3 Instruction { source: "t48 <- lo U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"lo\\\")) }\", \"Ident(\\\"lo\\\")\", \"Ident(\\\"lo\\\")\"] }", opcode: Copy32, args: [Register(0x60), Register(0x48)], resolved: None }
21 60 48 
# t49 <- 0n8/0x00000008u32 
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"lo\")) }"] }
# 011a6 Instruction { source: "t49 <- 0n8/0x00000008u32 \n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"lo\\\")) }\"] }", opcode: LoadImm32, args: [Register(0x4c), Constant32(0x00000008=8)], resolved: None }
20 4c 08 00 00 00 
# __frame_pointer <- __frame_pointer Add t49
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"lo\")) }"] }
# 011ac Instruction { source: "__frame_pointer <- __frame_pointer Add t49\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"lo\\\")) }\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 011ad Instruction { source: "__frame_pointer <- __frame_pointer Add t49\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"lo\\\")) }\"] }", opcode: AddCarry32_1, args: [Register(0x0c), Register(0x4c), Register(0x0c)], resolved: None }
30 0c 4c 0c 
# 011b1 Instruction { source: "__frame_pointer <- __frame_pointer Add t49\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"lo\\\")) }\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# return Some(t48)
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"lo\")) }"] }
# 011b2 Instruction { source: "return Some(t48)\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"lo\\\")) }\"] }", opcode: Copy32, args: [Register(0x48), Register(0x00)], resolved: None }
21 48 00 
# 011b5 Instruction { source: "Dealloc 8 bytes from stack", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000008=8)], resolved: None }
32 0c 08 00 00 00 
# 011bb Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# :function_end_div32
# 	SourceContext { contexts: [] }
# function_end_div32
# Unreachable
# 	SourceContext { contexts: [] }
# 011bd Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
# :lcd_init
# Ret None
# Var t0 (t0 Call(Call { function: "io_write1", parameters: [Number(U8, 3)] })) Reg(U8) Some([130])
# Var t1 (t1 Number(U8, 3)) Reg(U8) Some([130])
# Var t10 (t10 Call(Call { function: "io_write1", parameters: [Number(U8, 0)] })) Reg(U8) Some([130])
# Var t11 (t11 Number(U8, 0)) Reg(U8) Some([130])
# Var t12 (t12 Call(Call { function: "io_write1", parameters: [Number(U8, 1)] })) Reg(U8) Some([130])
# Var t13 (t13 Number(U8, 1)) Reg(U8) Some([130])
# Var t2 (t2 Call(Call { function: "io_write1", parameters: [Number(U8, 2)] })) Reg(U8) Some([130])
# Var t3 (t3 Number(U8, 2)) Reg(U8) Some([130])
# Var t4 (t4 Call(Call { function: "io_write1", parameters: [Number(U8, 8)] })) Reg(U8) Some([130])
# Var t5 (t5 Number(U8, 8)) Reg(U8) Some([130])
# Var t6 (t6 Call(Call { function: "io_write1", parameters: [Number(U8, 2)] })) Reg(U8) Some([130])
# Var t7 (t7 Number(U8, 2)) Reg(U8) Some([130])
# Var t8 (t8 Call(Call { function: "io_write1", parameters: [Number(U8, 8)] })) Reg(U8) Some([130])
# Var t9 (t9 Number(U8, 8)) Reg(U8) Some([130])
# t1 <- 0n3/0x03u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] })", "Number(U8, 3)", "Number(U8, 3)"] }
# 011c2 Instruction { source: "t1 <- 0n3/0x03u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 3)] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 3)] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 3)] })\", \"Number(U8, 3)\", \"Number(U8, 3)\"] }", opcode: LoadImm8, args: [Register(0x82), Constant8(0x03=3)], resolved: None }
04 82 03 
# None <= call io_write1(t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] })"] }
# 011c5 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x82)], resolved: None }
69 82 
# t3 <- 0n2/0x02u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] })", "Number(U8, 2)", "Number(U8, 2)"] }
# 011c7 Instruction { source: "t3 <- 0n2/0x02u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 2)] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 2)] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 2)] })\", \"Number(U8, 2)\", \"Number(U8, 2)\"] }", opcode: LoadImm8, args: [Register(0x82), Constant8(0x02=2)], resolved: None }
04 82 02 
# None <= call io_write1(t3,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] })"] }
# 011ca Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x82)], resolved: None }
69 82 
# t5 <- 0n8/0x08u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 8)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 8)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 8)] })", "Number(U8, 8)", "Number(U8, 8)"] }
# 011cc Instruction { source: "t5 <- 0n8/0x08u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 8)] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 8)] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 8)] })\", \"Number(U8, 8)\", \"Number(U8, 8)\"] }", opcode: LoadImm8, args: [Register(0x82), Constant8(0x08=8)], resolved: None }
04 82 08 
# None <= call io_write1(t5,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 8)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 8)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 8)] })"] }
# 011cf Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x82)], resolved: None }
69 82 
# t7 <- 0n2/0x02u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] })", "Number(U8, 2)", "Number(U8, 2)"] }
# 011d1 Instruction { source: "t7 <- 0n2/0x02u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 2)] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 2)] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 2)] })\", \"Number(U8, 2)\", \"Number(U8, 2)\"] }", opcode: LoadImm8, args: [Register(0x82), Constant8(0x02=2)], resolved: None }
04 82 02 
# None <= call io_write1(t7,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] })"] }
# 011d4 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x82)], resolved: None }
69 82 
# t9 <- 0n8/0x08u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 8)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 8)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 8)] })", "Number(U8, 8)", "Number(U8, 8)"] }
# 011d6 Instruction { source: "t9 <- 0n8/0x08u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 8)] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 8)] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 8)] })\", \"Number(U8, 8)\", \"Number(U8, 8)\"] }", opcode: LoadImm8, args: [Register(0x82), Constant8(0x08=8)], resolved: None }
04 82 08 
# None <= call io_write1(t9,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 8)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 8)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 8)] })"] }
# 011d9 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x82)], resolved: None }
69 82 
# t11 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] })", "Number(U8, 0)", "Number(U8, 0)"] }
# 011db Instruction { source: "t11 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 0)] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 0)] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 0)] })\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x82), Constant8(0x00=0)], resolved: None }
04 82 00 
# None <= call io_write1(t11,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] })"] }
# 011de Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x82)], resolved: None }
69 82 
# t13 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 1)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 1)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 1)] })", "Number(U8, 1)", "Number(U8, 1)"] }
# 011e0 Instruction { source: "t13 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 1)] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 1)] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 1)] })\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x82), Constant8(0x01=1)], resolved: None }
04 82 01 
# None <= call io_write1(t13,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 1)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 1)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 1)] })"] }
# 011e3 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x82)], resolved: None }
69 82 
# return None
# 	SourceContext { contexts: ["Return { value: None }"] }
# 011e5 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# :function_end_lcd_init
# 	SourceContext { contexts: [] }
# function_end_lcd_init
# Unreachable
# 	SourceContext { contexts: [] }
# 011e7 Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
# :main
# Ret Some(U8)
# Var calc (Local calc Struct("RpnCalc") Static(987144)) Static(987144) None
# Var ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([131])
# Var inline_main_RpnCalc_init_47_c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([132, 133, 134, 135])
# Var inline_main_RpnCalc_init_47_inline_RpnCalc_init_stack_init_45_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([136, 137, 138, 139])
# Var inline_main_RpnCalc_init_47_inline_RpnCalc_init_stack_init_45_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([136, 137, 138, 139])
# Var inline_main_RpnCalc_init_47_inline_RpnCalc_init_stack_init_45_t1 (t1 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([136, 137, 138, 139])
# Var inline_main_RpnCalc_init_47_inline_RpnCalc_init_stack_init_45_t2 (t2 Number(USIZE, 64)) Reg(U32) Some([140, 141, 142, 143])
# Var inline_main_RpnCalc_init_47_inline_RpnCalc_init_stack_init_45_t3 (t3 Number(USIZE, 0)) Reg(U32) Some([140, 141, 142, 143])
# Var inline_main_RpnCalc_init_47_s (Local s Ptr(Struct("Stack")) Reg(U32)) Reg(U32) Some([136, 137, 138, 139])
# Var inline_main_RpnCalc_init_47_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([132, 133, 134, 135])
# Var inline_main_RpnCalc_init_47_t1 (t1 Call(Call { function: "stack_init", parameters: [Ident("s")] })) Reg(U8) Some([131])
# Var inline_main_RpnCalc_init_47_t2 (t2 Ident("s")) Reg(U32) Some([136, 137, 138, 139])
# Var inline_main_RpnCalc_init_47_t3 (t3 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([132, 133, 134, 135])
# Var inline_main_RpnCalc_init_47_t4 (t4 Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([132, 133, 134, 135])
# Var inline_main_RpnCalc_init_47_t5 (t5 Number(USIZE, 68)) Reg(U32) Some([136, 137, 138, 139])
# Var inline_main_RpnCalc_init_47_t6 (t6 Number(USIZE, 0)) Reg(U32) Some([136, 137, 138, 139])
# Var inline_main_getchar_3_t0 (t0 Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1))) Reg(U8) Some([131])
# Var inline_main_getchar_3_t1 (t1 Call(Call { function: "io_ready_to_read", parameters: [] })) Reg(U8) Some([131])
# Var inline_main_getchar_3_t2 (t2 Number(U8, 1)) Reg(U8) Some([144])
# Var inline_main_getchar_3_t3 (t3 Number(U8, 0)) Reg(U8) Some([144])
# Var inline_main_getchar_3_t4 (t4 TtyIn) Reg(U8) Some([131])
# Var inline_main_putc_27_c (Arg0 c Number(U8)) Reg(U8) Some([131])
# Var inline_main_putc_27_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([131])
# Var inline_main_putc_27_t1 (t1 Ident("c")) Reg(U8) Some([131])
# Var inline_main_putc_28_c (Arg0 c Number(U8)) Reg(U8) Some([131])
# Var inline_main_putc_28_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([131])
# Var inline_main_putc_28_t1 (t1 Ident("c")) Reg(U8) Some([131])
# Var inline_main_putc_29_c (Arg0 c Number(U8)) Reg(U8) Some([131])
# Var inline_main_putc_29_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([131])
# Var inline_main_putc_29_t1 (t1 Ident("c")) Reg(U8) Some([131])
# Var inline_main_putc_30_c (Arg0 c Number(U8)) Reg(U8) Some([131])
# Var inline_main_putc_30_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([131])
# Var inline_main_putc_30_t1 (t1 Ident("c")) Reg(U8) Some([131])
# Var result (Local result Number(U8) Reg(U8)) Reg(U8) Some([131])
# Var t0 (t0 Call(Call { function: "lcd_init", parameters: [] })) Reg(U8) Some([131])
# Var t1 (t1 Call(Call { function: "putc", parameters: [Number(U8, 82)] })) Reg(U8) Some([131])
# Var t10 (t10 Call(Call { function: "putc", parameters: [Number(U8, 10)] })) Reg(U8) Some([131])
# Var t11 (t11 Number(U8, 10)) Reg(U8) Some([131])
# Var t12 (t12 Number(U8, 0)) Reg(U8) Some([131])
# Var t13 (t13 Number(U8, 0)) Reg(U8) Some([144])
# Var t14 (t14 AddressOf(Ident("calc"))) Reg(U32) Some([136, 137, 138, 139])
# Var t15 (static "calc") Reg(U32) Some([136, 137, 138, 139])
# Var t16 (t16 Ident("ch")) Reg(U8) Some([131])
# Var t17 (t17 Ident("result")) Reg(U8) Some([131])
# Var t18 (t18 Number(U8, 0)) Reg(U8) Some([144])
# Var t19 (t19 Number(U8, 0)) Reg(U8) Some([131])
# Var t2 (t2 Number(U8, 82)) Reg(U8) Some([131])
# Var t20 (t20 Number(U8, 1)) Reg(U8) Some([131])
# Var t3 (t3 Call(Call { function: "putc", parameters: [Number(U8, 80)] })) Reg(U8) Some([131])
# Var t4 (t4 Number(U8, 80)) Reg(U8) Some([131])
# Var t5 (t5 Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] })) Reg(U8) Some([131])
# Var t6 (t6 AddressOf(Ident("calc"))) Reg(U32) Some([132, 133, 134, 135])
# Var t7 (static "calc") Reg(U32) Some([132, 133, 134, 135])
# Var t8 (t8 Call(Call { function: "putc", parameters: [Number(U8, 78)] })) Reg(U8) Some([131])
# Var t9 (t9 Number(U8, 78)) Reg(U8) Some([131])
# None <= call lcd_init()
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_init\", parameters: [] }) }", "Call(Call { function: \"lcd_init\", parameters: [] })", "Call(Call { function: \"lcd_init\", parameters: [] })"] }
# Registers used by this function: {131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144}
# Registers used by callee tree: {129, 130}
# Registers to save: []
# 011ec Instruction { source: "PseudoCall(Label24(:lcd_init))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 011f2 Instruction { source: "PseudoCall(Label24(:lcd_init))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c fc 11 00 00 
# 011f8 Instruction { source: "PseudoCall(Label24(:lcd_init))", opcode: JmpImm, args: [Label24(:lcd_init)], resolved: None }
70 c2 11 00 
# 011fc Instruction { source: "PseudoCall(Label24(:lcd_init))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# t2 <- 0n82/0x52u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 82)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 82)] })", "Number(U8, 82)", "Number(U8, 82)"] }
# 01202 Instruction { source: "t2 <- 0n82/0x52u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] })\", \"Number(U8, 82)\", \"Number(U8, 82)\"] }", opcode: LoadImm8, args: [Register(0x83), Constant8(0x52=82)], resolved: None }
04 83 52 
# inline_main_putc_27_c <- t2 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 82)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 82)] })"] }
# optimized away noop copy Instruction { source: "inline_main_putc_27_c <- t2 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] })\"] }", opcode: Copy8, args: [Register(0x83), Register(0x83)], resolved: None }
# inline_main_putc_27_t1 <- inline_main_putc_27_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_putc_27_t1 <- inline_main_putc_27_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x83), Register(0x83)], resolved: None }
# None <= call io_write0(inline_main_putc_27_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 01205 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x83)], resolved: None }
68 83 
# goto inline_main_putc_27_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_putc_27_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_putc_27_function_end_putc)], resolved: None }
# :inline_main_putc_27_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_putc_27_function_end_putc
# t4 <- 0n80/0x50u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 80)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 80)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 80)] })", "Number(U8, 80)", "Number(U8, 80)"] }
# 01207 Instruction { source: "t4 <- 0n80/0x50u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 80)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 80)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 80)] })\", \"Number(U8, 80)\", \"Number(U8, 80)\"] }", opcode: LoadImm8, args: [Register(0x83), Constant8(0x50=80)], resolved: None }
04 83 50 
# inline_main_putc_28_c <- t4 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 80)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 80)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 80)] })"] }
# optimized away noop copy Instruction { source: "inline_main_putc_28_c <- t4 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 80)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 80)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 80)] })\"] }", opcode: Copy8, args: [Register(0x83), Register(0x83)], resolved: None }
# inline_main_putc_28_t1 <- inline_main_putc_28_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_putc_28_t1 <- inline_main_putc_28_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x83), Register(0x83)], resolved: None }
# None <= call io_write0(inline_main_putc_28_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 0120a Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x83)], resolved: None }
68 83 
# goto inline_main_putc_28_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_putc_28_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_putc_28_function_end_putc)], resolved: None }
# :inline_main_putc_28_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_putc_28_function_end_putc
# t7 <- 0n987144/0x000f1008u32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] }) }", "Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] })", "Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] })", "AddressOf(Ident(\"calc\"))", "AddressOf(Ident(\"calc\"))"] }
# 0120c Instruction { source: "t7 <- 0n987144/0x000f1008u32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"RpnCalc_init\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] }) }\", \"Call(Call { function: \\\"RpnCalc_init\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_init\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"AddressOf(Ident(\\\"calc\\\"))\", \"AddressOf(Ident(\\\"calc\\\"))\"] }", opcode: LoadImm32, args: [Register(0x84), Constant32(0x000f1008=987144)], resolved: None }
20 84 08 10 0f 00 
# t6 <- t7 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] }) }", "Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] })", "Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] })", "AddressOf(Ident(\"calc\"))", "AddressOf(Ident(\"calc\"))"] }
# optimized away noop copy Instruction { source: "t6 <- t7 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"RpnCalc_init\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] }) }\", \"Call(Call { function: \\\"RpnCalc_init\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_init\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"AddressOf(Ident(\\\"calc\\\"))\", \"AddressOf(Ident(\\\"calc\\\"))\"] }", opcode: Copy32, args: [Register(0x84), Register(0x84)], resolved: None }
# inline_main_RpnCalc_init_47_c <- t6 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] }) }", "Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] })", "Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] })"] }
# optimized away noop copy Instruction { source: "inline_main_RpnCalc_init_47_c <- t6 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"RpnCalc_init\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] }) }\", \"Call(Call { function: \\\"RpnCalc_init\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_init\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\"] }", opcode: Copy32, args: [Register(0x84), Register(0x84)], resolved: None }
# inline_main_RpnCalc_init_47_t0 <- inline_main_RpnCalc_init_47_c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"s\"), var_type: Some(Ptr(Struct(\"Stack\"))), value: AddressOf(PtrFieldDeref(\"c\", \"stack\")) }", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_RpnCalc_init_47_t0 <- inline_main_RpnCalc_init_47_c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"s\\\"), var_type: Some(Ptr(Struct(\\\"Stack\\\"))), value: AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Stack\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Stack\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x84), Register(0x84)], resolved: None }
# inline_main_RpnCalc_init_47_s <- inline_main_RpnCalc_init_47_t0 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"s\"), var_type: Some(Ptr(Struct(\"Stack\"))), value: AddressOf(PtrFieldDeref(\"c\", \"stack\")) }", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))"] }
# 01212 Instruction { source: "inline_main_RpnCalc_init_47_s <- inline_main_RpnCalc_init_47_t0 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"s\\\"), var_type: Some(Ptr(Struct(\\\"Stack\\\"))), value: AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\"] }", opcode: Copy32, args: [Register(0x84), Register(0x88)], resolved: None }
21 84 88 
# inline_main_RpnCalc_init_47_t2 <- inline_main_RpnCalc_init_47_s U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] }) }", "Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] })", "Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] })", "Ident(\"s\")", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_main_RpnCalc_init_47_t2 <- inline_main_RpnCalc_init_47_s U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_init\\\", parameters: [Ident(\\\"s\\\")] }) }\", \"Call(Call { function: \\\"stack_init\\\", parameters: [Ident(\\\"s\\\")] })\", \"Call(Call { function: \\\"stack_init\\\", parameters: [Ident(\\\"s\\\")] })\", \"Ident(\\\"s\\\")\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x88), Register(0x88)], resolved: None }
# inline_main_RpnCalc_init_47_inline_RpnCalc_init_stack_init_45_s <- inline_main_RpnCalc_init_47_t2 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] }) }", "Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] })", "Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_RpnCalc_init_47_inline_RpnCalc_init_stack_init_45_s <- inline_main_RpnCalc_init_47_t2 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_init\\\", parameters: [Ident(\\\"s\\\")] }) }\", \"Call(Call { function: \\\"stack_init\\\", parameters: [Ident(\\\"s\\\")] })\", \"Call(Call { function: \\\"stack_init\\\", parameters: [Ident(\\\"s\\\")] })\"] }", opcode: Copy32, args: [Register(0x88), Register(0x88)], resolved: None }
# inline_main_RpnCalc_init_47_inline_RpnCalc_init_stack_init_45_t1 <- inline_main_RpnCalc_init_47_inline_RpnCalc_init_stack_init_45_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_main_RpnCalc_init_47_inline_RpnCalc_init_stack_init_45_t1 <- inline_main_RpnCalc_init_47_inline_RpnCalc_init_stack_init_45_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x88), Register(0x88)], resolved: None }
# inline_main_RpnCalc_init_47_inline_RpnCalc_init_stack_init_45_t2 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 01215 Instruction { source: "inline_main_RpnCalc_init_47_inline_RpnCalc_init_stack_init_45_t2 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x8c), Constant32(0x00000040=64)], resolved: None }
20 8c 40 00 00 00 
# inline_main_RpnCalc_init_47_inline_RpnCalc_init_stack_init_45_t0 <- inline_main_RpnCalc_init_47_inline_RpnCalc_init_stack_init_45_t1 Add inline_main_RpnCalc_init_47_inline_RpnCalc_init_stack_init_45_t2
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 0121b Instruction { source: "inline_main_RpnCalc_init_47_inline_RpnCalc_init_stack_init_45_t0 <- inline_main_RpnCalc_init_47_inline_RpnCalc_init_stack_init_45_t1 Add inline_main_RpnCalc_init_47_inline_RpnCalc_init_stack_init_45_t2\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0121c Instruction { source: "inline_main_RpnCalc_init_47_inline_RpnCalc_init_stack_init_45_t0 <- inline_main_RpnCalc_init_47_inline_RpnCalc_init_stack_init_45_t1 Add inline_main_RpnCalc_init_47_inline_RpnCalc_init_stack_init_45_t2\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x88), Register(0x8c), Register(0x88)], resolved: None }
30 88 8c 88 
# 01220 Instruction { source: "inline_main_RpnCalc_init_47_inline_RpnCalc_init_stack_init_45_t0 <- inline_main_RpnCalc_init_47_inline_RpnCalc_init_stack_init_45_t1 Add inline_main_RpnCalc_init_47_inline_RpnCalc_init_stack_init_45_t2\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_main_RpnCalc_init_47_inline_RpnCalc_init_stack_init_45_t3 <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Number(USIZE, 0) }", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 01221 Instruction { source: "inline_main_RpnCalc_init_47_inline_RpnCalc_init_stack_init_45_t3 <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x8c), Constant32(0x00000000=0)], resolved: None }
20 8c 00 00 00 00 
# mem[inline_main_RpnCalc_init_47_inline_RpnCalc_init_stack_init_45_t0] <- inline_main_RpnCalc_init_47_inline_RpnCalc_init_stack_init_45_t3 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Number(USIZE, 0) }"] }
# 01227 Instruction { source: "mem[inline_main_RpnCalc_init_47_inline_RpnCalc_init_stack_init_45_t0] <- inline_main_RpnCalc_init_47_inline_RpnCalc_init_stack_init_45_t3 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Number(USIZE, 0) }\"] }", opcode: Store32_1, args: [Register(0x8c), Register(0x88)], resolved: None }
23 8c 88 
# 0122a Instruction { source: "mem[inline_main_RpnCalc_init_47_inline_RpnCalc_init_stack_init_45_t0] <- inline_main_RpnCalc_init_47_inline_RpnCalc_init_stack_init_45_t3 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Number(USIZE, 0) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto inline_main_RpnCalc_init_47_inline_RpnCalc_init_stack_init_45_function_end_stack_init
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_RpnCalc_init_47_inline_RpnCalc_init_stack_init_45_function_end_stack_init\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_RpnCalc_init_47_inline_RpnCalc_init_stack_init_45_function_end_stack_init)], resolved: None }
# :inline_main_RpnCalc_init_47_inline_RpnCalc_init_stack_init_45_function_end_stack_init
# 	SourceContext { contexts: [] }
# inline_main_RpnCalc_init_47_inline_RpnCalc_init_stack_init_45_function_end_stack_init
# inline_main_RpnCalc_init_47_t4 <- inline_main_RpnCalc_init_47_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_RpnCalc_init_47_t4 <- inline_main_RpnCalc_init_47_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x84), Register(0x84)], resolved: None }
# inline_main_RpnCalc_init_47_t5 <- 0n68/0x00000044u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Number(USIZE, 68)", "Number(USIZE, 68)"] }
# 0122b Instruction { source: "inline_main_RpnCalc_init_47_t5 <- 0n68/0x00000044u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Number(USIZE, 68)\", \"Number(USIZE, 68)\"] }", opcode: LoadImm32, args: [Register(0x88), Constant32(0x00000044=68)], resolved: None }
20 88 44 00 00 00 
# inline_main_RpnCalc_init_47_t3 <- inline_main_RpnCalc_init_47_t4 Add inline_main_RpnCalc_init_47_t5
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))"] }
# 01231 Instruction { source: "inline_main_RpnCalc_init_47_t3 <- inline_main_RpnCalc_init_47_t4 Add inline_main_RpnCalc_init_47_t5\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01232 Instruction { source: "inline_main_RpnCalc_init_47_t3 <- inline_main_RpnCalc_init_47_t4 Add inline_main_RpnCalc_init_47_t5\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_1, args: [Register(0x84), Register(0x88), Register(0x84)], resolved: None }
30 84 88 84 
# 01236 Instruction { source: "inline_main_RpnCalc_init_47_t3 <- inline_main_RpnCalc_init_47_t4 Add inline_main_RpnCalc_init_47_t5\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_main_RpnCalc_init_47_t6 <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 01237 Instruction { source: "inline_main_RpnCalc_init_47_t6 <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x88), Constant32(0x00000000=0)], resolved: None }
20 88 00 00 00 00 
# mem[inline_main_RpnCalc_init_47_t3] <- inline_main_RpnCalc_init_47_t6 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }"] }
# 0123d Instruction { source: "mem[inline_main_RpnCalc_init_47_t3] <- inline_main_RpnCalc_init_47_t6 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\"] }", opcode: Store32_1, args: [Register(0x88), Register(0x84)], resolved: None }
23 88 84 
# 01240 Instruction { source: "mem[inline_main_RpnCalc_init_47_t3] <- inline_main_RpnCalc_init_47_t6 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto inline_main_RpnCalc_init_47_function_end_RpnCalc_init
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_RpnCalc_init_47_function_end_RpnCalc_init\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_RpnCalc_init_47_function_end_RpnCalc_init)], resolved: None }
# :inline_main_RpnCalc_init_47_function_end_RpnCalc_init
# 	SourceContext { contexts: [] }
# inline_main_RpnCalc_init_47_function_end_RpnCalc_init
# t9 <- 0n78/0x4eu8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 78)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 78)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 78)] })", "Number(U8, 78)", "Number(U8, 78)"] }
# 01241 Instruction { source: "t9 <- 0n78/0x4eu8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 78)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 78)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 78)] })\", \"Number(U8, 78)\", \"Number(U8, 78)\"] }", opcode: LoadImm8, args: [Register(0x83), Constant8(0x4e=78)], resolved: None }
04 83 4e 
# inline_main_putc_29_c <- t9 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 78)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 78)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 78)] })"] }
# optimized away noop copy Instruction { source: "inline_main_putc_29_c <- t9 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 78)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 78)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 78)] })\"] }", opcode: Copy8, args: [Register(0x83), Register(0x83)], resolved: None }
# inline_main_putc_29_t1 <- inline_main_putc_29_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_putc_29_t1 <- inline_main_putc_29_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x83), Register(0x83)], resolved: None }
# None <= call io_write0(inline_main_putc_29_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 01244 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x83)], resolved: None }
68 83 
# goto inline_main_putc_29_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_putc_29_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_putc_29_function_end_putc)], resolved: None }
# :inline_main_putc_29_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_putc_29_function_end_putc
# t11 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Number(U8, 10)", "Number(U8, 10)"] }
# 01246 Instruction { source: "t11 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x83), Constant8(0x0a=10)], resolved: None }
04 83 0a 
# inline_main_putc_30_c <- t11 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })"] }
# optimized away noop copy Instruction { source: "inline_main_putc_30_c <- t11 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\"] }", opcode: Copy8, args: [Register(0x83), Register(0x83)], resolved: None }
# inline_main_putc_30_t1 <- inline_main_putc_30_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_putc_30_t1 <- inline_main_putc_30_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x83), Register(0x83)], resolved: None }
# None <= call io_write0(inline_main_putc_30_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 01249 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x83)], resolved: None }
68 83 
# goto inline_main_putc_30_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_putc_30_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_putc_30_function_end_putc)], resolved: None }
# :inline_main_putc_30_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_putc_30_function_end_putc
# :main_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"getchar\", parameters: [] }) }, Assign { target: Ident(\"result\"), var_type: Some(Number(U8)), value: Call(Call { function: \"RpnCalc_handle\", parameters: [AddressOf(Ident(\"calc\")), Ident(\"ch\")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"result\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }"] }
# main_while_predicate_0
# t12 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"getchar\", parameters: [] }) }, Assign { target: Ident(\"result\"), var_type: Some(Number(U8)), value: Call(Call { function: \"RpnCalc_handle\", parameters: [AddressOf(Ident(\"calc\")), Ident(\"ch\")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"result\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }", "Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0124b Instruction { source: "t12 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"getchar\\\", parameters: [] }) }, Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [AddressOf(Ident(\\\"calc\\\")), Ident(\\\"ch\\\")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"result\\\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x83), Constant8(0x00=0)], resolved: None }
04 83 00 
# t13 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"getchar\", parameters: [] }) }, Assign { target: Ident(\"result\"), var_type: Some(Number(U8)), value: Call(Call { function: \"RpnCalc_handle\", parameters: [AddressOf(Ident(\"calc\")), Ident(\"ch\")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"result\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }", "Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0124e Instruction { source: "t13 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"getchar\\\", parameters: [] }) }, Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [AddressOf(Ident(\\\"calc\\\")), Ident(\\\"ch\\\")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"result\\\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x90), Constant8(0x00=0)], resolved: None }
04 90 00 
# if t12 == t13 then 'main_while_body_1' else 'main_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"getchar\", parameters: [] }) }, Assign { target: Ident(\"result\"), var_type: Some(Number(U8)), value: Call(Call { function: \"RpnCalc_handle\", parameters: [AddressOf(Ident(\"calc\")), Ident(\"ch\")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"result\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }", "Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }"] }
# 01251 Instruction { source: "if t12 == t13 then 'main_while_body_1' else 'main_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"getchar\\\", parameters: [] }) }, Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [AddressOf(Ident(\\\"calc\\\")), Ident(\\\"ch\\\")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"result\\\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x83), Register(0x90)], resolved: None }
15 83 90 
# 01254 Instruction { source: "if t12 == t13 then 'main_while_body_1' else 'main_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"getchar\\\", parameters: [] }) }, Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [AddressOf(Ident(\\\"calc\\\")), Ident(\\\"ch\\\")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"result\\\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(main_while_body_1)], resolved: None }
72 5c 12 00 
# 01258 Instruction { source: "if t12 == t13 then 'main_while_body_1' else 'main_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"getchar\\\", parameters: [] }) }, Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [AddressOf(Ident(\\\"calc\\\")), Ident(\\\"ch\\\")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"result\\\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(main_while_end_2)], resolved: None }
70 bc 12 00 
# :main_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"getchar\", parameters: [] }) }, Assign { target: Ident(\"result\"), var_type: Some(Number(U8)), value: Call(Call { function: \"RpnCalc_handle\", parameters: [AddressOf(Ident(\"calc\")), Ident(\"ch\")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"result\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }"] }
# main_while_body_1
# :inline_main_getchar_3_getchar_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_getchar_3_getchar_while_predicate_0
# Some(inline_main_getchar_3_t1) <= call io_ready_to_read()
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1))", "Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1))", "Call(Call { function: \"io_ready_to_read\", parameters: [] })", "Call(Call { function: \"io_ready_to_read\", parameters: [] })"] }
# 0125c Instruction { source: "ReadyToRead", opcode: IoReadyToRead, args: [Register(0x83)], resolved: None }
79 83 
# inline_main_getchar_3_t2 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1))", "Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 0125e Instruction { source: "inline_main_getchar_3_t2 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1))\", \"Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x90), Constant8(0x01=1)], resolved: None }
04 90 01 
# inline_main_getchar_3_t0 <- inline_main_getchar_3_t1 BitwiseAnd inline_main_getchar_3_t2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1))", "Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1))"] }
# 01261 Instruction { source: "inline_main_getchar_3_t0 <- inline_main_getchar_3_t1 BitwiseAnd inline_main_getchar_3_t2\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1))\", \"Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1))\"] }", opcode: And8, args: [Register(0x83), Register(0x90), Register(0x83)], resolved: None }
1b 83 90 83 
# inline_main_getchar_3_t3 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 01265 Instruction { source: "inline_main_getchar_3_t3 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x90), Constant8(0x00=0)], resolved: None }
04 90 00 
# if inline_main_getchar_3_t0 == inline_main_getchar_3_t3 then 'inline_main_getchar_3_getchar_while_body_1' else 'inline_main_getchar_3_getchar_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }", "Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }"] }
# 01268 Instruction { source: "if inline_main_getchar_3_t0 == inline_main_getchar_3_t3 then 'inline_main_getchar_3_getchar_while_body_1' else 'inline_main_getchar_3_getchar_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x83), Register(0x90)], resolved: None }
15 83 90 
# 0126b Instruction { source: "if inline_main_getchar_3_t0 == inline_main_getchar_3_t3 then 'inline_main_getchar_3_getchar_while_body_1' else 'inline_main_getchar_3_getchar_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(inline_main_getchar_3_getchar_while_body_1)], resolved: None }
72 73 12 00 
# 0126f Instruction { source: "if inline_main_getchar_3_t0 == inline_main_getchar_3_t3 then 'inline_main_getchar_3_getchar_while_body_1' else 'inline_main_getchar_3_getchar_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }\", \"Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_main_getchar_3_getchar_while_end_2)], resolved: None }
70 77 12 00 
# :inline_main_getchar_3_getchar_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_getchar_3_getchar_while_body_1
# goto inline_main_getchar_3_getchar_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }"] }
# 01273 Instruction { source: "goto inline_main_getchar_3_getchar_while_predicate_0\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }\"] }", opcode: JmpImm, args: [Label24(inline_main_getchar_3_getchar_while_predicate_0)], resolved: None }
70 5c 12 00 
# :inline_main_getchar_3_getchar_while_end_2
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, while_true: [] }"] }
# inline_main_getchar_3_getchar_while_end_2
# inline_main_getchar_3_t4 <- ttyin
# 	SourceContext { contexts: ["Return { value: Some(TtyIn) }", "TtyIn", "TtyIn"] }
# 01277 Instruction { source: "inline_main_getchar_3_t4 <- ttyin\n\tSourceContext { contexts: [\"Return { value: Some(TtyIn) }\", \"TtyIn\", \"TtyIn\"] }", opcode: In0, args: [Register(0x83)], resolved: None }
60 83 
# ch <- inline_main_getchar_3_t4 U8
# 	SourceContext { contexts: ["Return { value: Some(TtyIn) }"] }
# optimized away noop copy Instruction { source: "ch <- inline_main_getchar_3_t4 U8\n\tSourceContext { contexts: [\"Return { value: Some(TtyIn) }\"] }", opcode: Copy8, args: [Register(0x83), Register(0x83)], resolved: None }
# goto inline_main_getchar_3_function_end_getchar
# 	SourceContext { contexts: ["Return { value: Some(TtyIn) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_getchar_3_function_end_getchar\n\tSourceContext { contexts: [\"Return { value: Some(TtyIn) }\"] }", opcode: JmpImm, args: [Label24(inline_main_getchar_3_function_end_getchar)], resolved: None }
# :inline_main_getchar_3_function_end_getchar
# 	SourceContext { contexts: [] }
# inline_main_getchar_3_function_end_getchar
# t15 <- 0n987144/0x000f1008u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"result\"), var_type: Some(Number(U8)), value: Call(Call { function: \"RpnCalc_handle\", parameters: [AddressOf(Ident(\"calc\")), Ident(\"ch\")] }) }", "Call(Call { function: \"RpnCalc_handle\", parameters: [AddressOf(Ident(\"calc\")), Ident(\"ch\")] })", "AddressOf(Ident(\"calc\"))", "AddressOf(Ident(\"calc\"))"] }
# 01279 Instruction { source: "t15 <- 0n987144/0x000f1008u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [AddressOf(Ident(\\\"calc\\\")), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [AddressOf(Ident(\\\"calc\\\")), Ident(\\\"ch\\\")] })\", \"AddressOf(Ident(\\\"calc\\\"))\", \"AddressOf(Ident(\\\"calc\\\"))\"] }", opcode: LoadImm32, args: [Register(0x88), Constant32(0x000f1008=987144)], resolved: None }
20 88 08 10 0f 00 
# t14 <- t15 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"result\"), var_type: Some(Number(U8)), value: Call(Call { function: \"RpnCalc_handle\", parameters: [AddressOf(Ident(\"calc\")), Ident(\"ch\")] }) }", "Call(Call { function: \"RpnCalc_handle\", parameters: [AddressOf(Ident(\"calc\")), Ident(\"ch\")] })", "AddressOf(Ident(\"calc\"))", "AddressOf(Ident(\"calc\"))"] }
# optimized away noop copy Instruction { source: "t14 <- t15 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [AddressOf(Ident(\\\"calc\\\")), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [AddressOf(Ident(\\\"calc\\\")), Ident(\\\"ch\\\")] })\", \"AddressOf(Ident(\\\"calc\\\"))\", \"AddressOf(Ident(\\\"calc\\\"))\"] }", opcode: Copy32, args: [Register(0x88), Register(0x88)], resolved: None }
# t16 <- ch U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"result\"), var_type: Some(Number(U8)), value: Call(Call { function: \"RpnCalc_handle\", parameters: [AddressOf(Ident(\"calc\")), Ident(\"ch\")] }) }", "Call(Call { function: \"RpnCalc_handle\", parameters: [AddressOf(Ident(\"calc\")), Ident(\"ch\")] })", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t16 <- ch U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [AddressOf(Ident(\\\"calc\\\")), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [AddressOf(Ident(\\\"calc\\\")), Ident(\\\"ch\\\")] })\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x83), Register(0x83)], resolved: None }
# Some(result) <= call RpnCalc_handle(t14,t16,)
# 	SourceContext { contexts: ["Assign { target: Ident(\"result\"), var_type: Some(Number(U8)), value: Call(Call { function: \"RpnCalc_handle\", parameters: [AddressOf(Ident(\"calc\")), Ident(\"ch\")] }) }", "Call(Call { function: \"RpnCalc_handle\", parameters: [AddressOf(Ident(\"calc\")), Ident(\"ch\")] })"] }
# 0127f Instruction { source: "Arg0[c]=t14 Some(result) <= call RpnCalc_handle(t14,t16,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [AddressOf(Ident(\\\"calc\\\")), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [AddressOf(Ident(\\\"calc\\\")), Ident(\\\"ch\\\")] })\"] }", opcode: Copy32, args: [Register(0x88), Register(0x00)], resolved: None }
21 88 00 
# 01282 Instruction { source: "Arg1[ch]=t16 Some(result) <= call RpnCalc_handle(t14,t16,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [AddressOf(Ident(\\\"calc\\\")), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [AddressOf(Ident(\\\"calc\\\")), Ident(\\\"ch\\\")] })\"] }", opcode: Copy8, args: [Register(0x83), Register(0x04)], resolved: None }
0b 83 04 
# Registers used by this function: {131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 200, 201, 202, 203, 204, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238}
# Registers to save: []
# 01285 Instruction { source: "PseudoCall(Label24(:RpnCalc_handle))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 0128b Instruction { source: "PseudoCall(Label24(:RpnCalc_handle))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 95 12 00 00 
# 01291 Instruction { source: "PseudoCall(Label24(:RpnCalc_handle))", opcode: JmpImm, args: [Label24(:RpnCalc_handle)], resolved: None }
70 22 00 00 
# 01295 Instruction { source: "PseudoCall(Label24(:RpnCalc_handle))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 0129b Instruction { source: "Some(result) <= call RpnCalc_handle(t14,t16,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [AddressOf(Ident(\\\"calc\\\")), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [AddressOf(Ident(\\\"calc\\\")), Ident(\\\"ch\\\")] })\"] }", opcode: Copy8, args: [Register(0x00), Register(0x83)], resolved: None }
0b 00 83 
# t17 <- result U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"result\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: Ident(\"result\"), right: Number(U8, 0) }", "Ident(\"result\")", "Ident(\"result\")"] }
# optimized away noop copy Instruction { source: "t17 <- result U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"result\\\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"result\\\"), right: Number(U8, 0) }\", \"Ident(\\\"result\\\")\", \"Ident(\\\"result\\\")\"] }", opcode: Copy8, args: [Register(0x83), Register(0x83)], resolved: None }
# t18 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"result\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: Ident(\"result\"), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0129e Instruction { source: "t18 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"result\\\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"result\\\"), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x90), Constant8(0x00=0)], resolved: None }
04 90 00 
# if t17 == t18 then 'main_if_true_0_4' else 'main_if_else_0_5'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"result\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: Ident(\"result\"), right: Number(U8, 0) }"] }
# 012a1 Instruction { source: "if t17 == t18 then 'main_if_true_0_4' else 'main_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"result\\\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"result\\\"), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x83), Register(0x90)], resolved: None }
15 83 90 
# 012a4 Instruction { source: "if t17 == t18 then 'main_if_true_0_4' else 'main_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"result\\\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"result\\\"), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(main_if_true_0_4)], resolved: None }
72 ac 12 00 
# 012a8 Instruction { source: "if t17 == t18 then 'main_if_true_0_4' else 'main_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"result\\\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"result\\\"), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(main_if_else_0_5)], resolved: None }
70 b8 12 00 
# :main_if_true_0_4
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"result\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }"] }
# main_if_true_0_4
# t19 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 012ac Instruction { source: "t19 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x83), Constant8(0x00=0)], resolved: None }
04 83 00 
# return Some(t19)
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }"] }
# 012af Instruction { source: "return Some(t19)\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x83), Register(0x00)], resolved: None }
0b 83 00 
# 012b2 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# goto main_if_end_3
# 	SourceContext { contexts: [] }
# 012b4 Instruction { source: "goto main_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(main_if_end_3)], resolved: None }
70 b8 12 00 
# :main_if_else_0_5
# 	SourceContext { contexts: [] }
# main_if_else_0_5
# :main_if_end_3
# 	SourceContext { contexts: [] }
# main_if_end_3
# goto main_while_predicate_0
# 	SourceContext { contexts: [] }
# 012b8 Instruction { source: "goto main_while_predicate_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(main_while_predicate_0)], resolved: None }
70 4b 12 00 
# :main_while_end_2
# 	SourceContext { contexts: [] }
# main_while_end_2
# t20 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 1)) }", "Number(U8, 1)", "Number(U8, 1)"] }
# 012bc Instruction { source: "t20 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 1)) }\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x83), Constant8(0x01=1)], resolved: None }
04 83 01 
# return Some(t20)
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 1)) }"] }
# 012bf Instruction { source: "return Some(t20)\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x83), Register(0x00)], resolved: None }
0b 83 00 
# 012c2 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# :function_end_main
# 	SourceContext { contexts: [] }
# function_end_main
# Unreachable
# 	SourceContext { contexts: [] }
# 012c4 Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
# :mul32_64
# Ret None
# Arg0=a
# Arg1=b
# Arg2=c
# Var __frame_pointer (__frame_pointer) Reg(U32) Some([12, 13, 14, 15])
# Var a (Arg0 a Number(USIZE)) Reg(U32) Some([148, 149, 150, 151])
# Var a_hi (Local a_hi Number(USIZE) Reg(U32)) Reg(U32) Some([152, 153, 154, 155])
# Var b (Arg1 b Number(USIZE)) Reg(U32) Some([156, 157, 158, 159])
# Var b_hi (Local b_hi Number(USIZE) Reg(U32)) Reg(U32) Some([160, 161, 162, 163])
# Var c (Arg2 c Ptr(Struct("U64"))) Reg(U32) Some([164, 165, 166, 167])
# Var inline_mul32_64_add_U64_0_a (Arg0 a Ptr(Struct("U64"))) Reg(U32) Some([152, 153, 154, 155])
# Var inline_mul32_64_add_U64_0_b (Arg1 b Ptr(Struct("U64"))) Reg(U32) Some([156, 157, 158, 159])
# Var inline_mul32_64_add_U64_0_c (Arg2 c Ptr(Struct("U64"))) Reg(U32) Some([168, 169, 170, 171])
# Var inline_mul32_64_add_U64_0_lo (Local lo Number(USIZE) Reg(U32)) Reg(U32) Some([172, 173, 174, 175])
# Var inline_mul32_64_add_U64_0_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") } }) Reg(U32) Some([152, 153, 154, 155])
# Var inline_mul32_64_add_U64_0_t1 (t1 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }) Reg(U32) Some([176, 177, 178, 179])
# Var inline_mul32_64_add_U64_0_t10 (t10 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4)) }) Reg(U32) Some([180, 181, 182, 183])
# Var inline_mul32_64_add_U64_0_t11 (t11 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }) Reg(U32) Some([156, 157, 158, 159])
# Var inline_mul32_64_add_U64_0_t12 (t12 Number(USIZE, 4)) Reg(U32) Some([180, 181, 182, 183])
# Var inline_mul32_64_add_U64_0_t13 (t13 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([168, 169, 170, 171])
# Var inline_mul32_64_add_U64_0_t14 (t14 Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))) Reg(U32) Some([152, 153, 154, 155])
# Var inline_mul32_64_add_U64_0_t15 (t15 PtrFieldDeref("a", "lo")) Reg(U32) Some([152, 153, 154, 155])
# Var inline_mul32_64_add_U64_0_t16 (t16 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") } }) Reg(U32) Some([152, 153, 154, 155])
# Var inline_mul32_64_add_U64_0_t17 (t17 PtrFieldDeref("b", "lo")) Reg(U32) Some([156, 157, 158, 159])
# Var inline_mul32_64_add_U64_0_t18 (t18 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") } }) Reg(U32) Some([156, 157, 158, 159])
# Var inline_mul32_64_add_U64_0_t19 (t19 PtrFieldDeref("c", "lo")) Reg(U32) Some([152, 153, 154, 155])
# Var inline_mul32_64_add_U64_0_t2 (t2 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([168, 169, 170, 171])
# Var inline_mul32_64_add_U64_0_t20 (t20 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([152, 153, 154, 155])
# Var inline_mul32_64_add_U64_0_t21 (t21 Ident("lo")) Reg(U32) Some([156, 157, 158, 159])
# Var inline_mul32_64_add_U64_0_t22 (t22 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }) Reg(U32) Some([152, 153, 154, 155])
# Var inline_mul32_64_add_U64_0_t23 (t23 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([152, 153, 154, 155])
# Var inline_mul32_64_add_U64_0_t24 (t24 Number(USIZE, 4)) Reg(U32) Some([156, 157, 158, 159])
# Var inline_mul32_64_add_U64_0_t25 (t25 Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))) Reg(U32) Some([156, 157, 158, 159])
# Var inline_mul32_64_add_U64_0_t26 (t26 PtrFieldDeref("c", "hi")) Reg(U32) Some([156, 157, 158, 159])
# Var inline_mul32_64_add_U64_0_t27 (t27 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }) Reg(U32) Some([156, 157, 158, 159])
# Var inline_mul32_64_add_U64_0_t28 (t28 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([156, 157, 158, 159])
# Var inline_mul32_64_add_U64_0_t29 (t29 Number(USIZE, 4)) Reg(U32) Some([168, 169, 170, 171])
# Var inline_mul32_64_add_U64_0_t3 (t3 Number(USIZE, 4)) Reg(U32) Some([176, 177, 178, 179])
# Var inline_mul32_64_add_U64_0_t30 (t30 Number(USIZE, 1)) Reg(U32) Some([168, 169, 170, 171])
# Var inline_mul32_64_add_U64_0_t4 (t4 Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))) Reg(U32) Some([180, 181, 182, 183])
# Var inline_mul32_64_add_U64_0_t5 (t5 PtrFieldDeref("a", "hi")) Reg(U32) Some([184, 185, 186, 187])
# Var inline_mul32_64_add_U64_0_t6 (t6 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4)) }) Reg(U32) Some([180, 181, 182, 183])
# Var inline_mul32_64_add_U64_0_t7 (t7 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }) Reg(U32) Some([152, 153, 154, 155])
# Var inline_mul32_64_add_U64_0_t8 (t8 Number(USIZE, 4)) Reg(U32) Some([180, 181, 182, 183])
# Var inline_mul32_64_add_U64_0_t9 (t9 PtrFieldDeref("b", "hi")) Reg(U32) Some([180, 181, 182, 183])
# Var inline_mul32_64_add_U64_1_a (Arg0 a Ptr(Struct("U64"))) Reg(U32) Some([148, 149, 150, 151])
# Var inline_mul32_64_add_U64_1_b (Arg1 b Ptr(Struct("U64"))) Reg(U32) Some([152, 153, 154, 155])
# Var inline_mul32_64_add_U64_1_c (Arg2 c Ptr(Struct("U64"))) Reg(U32) Some([156, 157, 158, 159])
# Var inline_mul32_64_add_U64_1_lo (Local lo Number(USIZE) Reg(U32)) Reg(U32) Some([160, 161, 162, 163])
# Var inline_mul32_64_add_U64_1_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") } }) Reg(U32) Some([148, 149, 150, 151])
# Var inline_mul32_64_add_U64_1_t1 (t1 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }) Reg(U32) Some([164, 165, 166, 167])
# Var inline_mul32_64_add_U64_1_t10 (t10 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4)) }) Reg(U32) Some([168, 169, 170, 171])
# Var inline_mul32_64_add_U64_1_t11 (t11 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }) Reg(U32) Some([152, 153, 154, 155])
# Var inline_mul32_64_add_U64_1_t12 (t12 Number(USIZE, 4)) Reg(U32) Some([168, 169, 170, 171])
# Var inline_mul32_64_add_U64_1_t13 (t13 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([156, 157, 158, 159])
# Var inline_mul32_64_add_U64_1_t14 (t14 Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))) Reg(U32) Some([148, 149, 150, 151])
# Var inline_mul32_64_add_U64_1_t15 (t15 PtrFieldDeref("a", "lo")) Reg(U32) Some([148, 149, 150, 151])
# Var inline_mul32_64_add_U64_1_t16 (t16 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") } }) Reg(U32) Some([148, 149, 150, 151])
# Var inline_mul32_64_add_U64_1_t17 (t17 PtrFieldDeref("b", "lo")) Reg(U32) Some([152, 153, 154, 155])
# Var inline_mul32_64_add_U64_1_t18 (t18 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") } }) Reg(U32) Some([152, 153, 154, 155])
# Var inline_mul32_64_add_U64_1_t19 (t19 PtrFieldDeref("c", "lo")) Reg(U32) Some([148, 149, 150, 151])
# Var inline_mul32_64_add_U64_1_t2 (t2 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([156, 157, 158, 159])
# Var inline_mul32_64_add_U64_1_t20 (t20 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([148, 149, 150, 151])
# Var inline_mul32_64_add_U64_1_t21 (t21 Ident("lo")) Reg(U32) Some([152, 153, 154, 155])
# Var inline_mul32_64_add_U64_1_t22 (t22 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }) Reg(U32) Some([148, 149, 150, 151])
# Var inline_mul32_64_add_U64_1_t23 (t23 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([148, 149, 150, 151])
# Var inline_mul32_64_add_U64_1_t24 (t24 Number(USIZE, 4)) Reg(U32) Some([152, 153, 154, 155])
# Var inline_mul32_64_add_U64_1_t25 (t25 Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))) Reg(U32) Some([152, 153, 154, 155])
# Var inline_mul32_64_add_U64_1_t26 (t26 PtrFieldDeref("c", "hi")) Reg(U32) Some([152, 153, 154, 155])
# Var inline_mul32_64_add_U64_1_t27 (t27 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }) Reg(U32) Some([152, 153, 154, 155])
# Var inline_mul32_64_add_U64_1_t28 (t28 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([152, 153, 154, 155])
# Var inline_mul32_64_add_U64_1_t29 (t29 Number(USIZE, 4)) Reg(U32) Some([156, 157, 158, 159])
# Var inline_mul32_64_add_U64_1_t3 (t3 Number(USIZE, 4)) Reg(U32) Some([164, 165, 166, 167])
# Var inline_mul32_64_add_U64_1_t30 (t30 Number(USIZE, 1)) Reg(U32) Some([156, 157, 158, 159])
# Var inline_mul32_64_add_U64_1_t4 (t4 Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))) Reg(U32) Some([168, 169, 170, 171])
# Var inline_mul32_64_add_U64_1_t5 (t5 PtrFieldDeref("a", "hi")) Reg(U32) Some([172, 173, 174, 175])
# Var inline_mul32_64_add_U64_1_t6 (t6 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4)) }) Reg(U32) Some([168, 169, 170, 171])
# Var inline_mul32_64_add_U64_1_t7 (t7 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }) Reg(U32) Some([148, 149, 150, 151])
# Var inline_mul32_64_add_U64_1_t8 (t8 Number(USIZE, 4)) Reg(U32) Some([168, 169, 170, 171])
# Var inline_mul32_64_add_U64_1_t9 (t9 PtrFieldDeref("b", "hi")) Reg(U32) Some([168, 169, 170, 171])
# Var inline_mul32_64_mul16_32_10_a (Arg0 a Number(USIZE)) Reg(U32) Some([168, 169, 170, 171])
# Var inline_mul32_64_mul16_32_10_b (Arg1 b Number(USIZE)) Reg(U32) Some([172, 173, 174, 175])
# Var inline_mul32_64_mul16_32_10_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([176, 177, 178, 179])
# Var inline_mul32_64_mul16_32_10_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([180, 181, 182, 183])
# Var inline_mul32_64_mul16_32_10_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([168, 169, 170, 171])
# Var inline_mul32_64_mul16_32_10_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([180, 181, 182, 183])
# Var inline_mul32_64_mul16_32_10_t0 (t0 Ident("a")) Reg(U32) Some([168, 169, 170, 171])
# Var inline_mul32_64_mul16_32_10_t1 (t1 Ident("b")) Reg(U32) Some([172, 173, 174, 175])
# Var inline_mul32_64_mul16_32_10_t10 (t10 Ident("c")) Reg(U32) Some([176, 177, 178, 179])
# Var inline_mul32_64_mul16_32_10_t11 (t11 Ident("f")) Reg(U32) Some([180, 181, 182, 183])
# Var inline_mul32_64_mul16_32_10_t12 (t12 Ident("a")) Reg(U32) Some([168, 169, 170, 171])
# Var inline_mul32_64_mul16_32_10_t13 (t13 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([180, 181, 182, 183])
# Var inline_mul32_64_mul16_32_10_t14 (t14 Index("b", Number(U8, 1))) Reg(U8) Some([188])
# Var inline_mul32_64_mul16_32_10_t15 (t15 Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([168, 169, 170, 171])
# Var inline_mul32_64_mul16_32_10_t16 (t16 Index("a", Number(U8, 1))) Reg(U8) Some([189])
# Var inline_mul32_64_mul16_32_10_t17 (t17 Ident("b")) Reg(U32) Some([172, 173, 174, 175])
# Var inline_mul32_64_mul16_32_10_t18 (t18 Ident("d")) Reg(U32) Some([172, 173, 174, 175])
# Var inline_mul32_64_mul16_32_10_t19 (t19 Ident("e")) Reg(U32) Some([168, 169, 170, 171])
# Var inline_mul32_64_mul16_32_10_t2 (t2 Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([180, 181, 182, 183])
# Var inline_mul32_64_mul16_32_10_t20 (t20 Index("d", Number(U8, 2))) Reg(U8) Some([189])
# Var inline_mul32_64_mul16_32_10_t21 (t21 Index("d", Number(U8, 1))) Reg(U8) Some([189])
# Var inline_mul32_64_mul16_32_10_t22 (t22 Index("d", Number(U8, 0))) Reg(U8) Some([189])
# Var inline_mul32_64_mul16_32_10_t23 (t23 Number(U8, 0)) Reg(U8) Some([189])
# Var inline_mul32_64_mul16_32_10_t24 (t24 Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([168, 169, 170, 171])
# Var inline_mul32_64_mul16_32_10_t25 (t25 Ident("c")) Reg(U32) Some([168, 169, 170, 171])
# Var inline_mul32_64_mul16_32_10_t26 (t26 Ident("d")) Reg(U32) Some([172, 173, 174, 175])
# Var inline_mul32_64_mul16_32_10_t3 (t3 Index("a", Number(U8, 1))) Reg(U8) Some([189])
# Var inline_mul32_64_mul16_32_10_t4 (t4 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([184, 185, 186, 187])
# Var inline_mul32_64_mul16_32_10_t5 (t5 Index("b", Number(U8, 1))) Reg(U8) Some([188])
# Var inline_mul32_64_mul16_32_10_t6 (t6 Index("f", Number(U8, 1))) Reg(U8) Some([190])
# Var inline_mul32_64_mul16_32_10_t7 (t7 Index("f", Number(U8, 0))) Reg(U8) Some([190])
# Var inline_mul32_64_mul16_32_10_t8 (t8 Number(U8, 0)) Reg(U8) Some([191])
# Var inline_mul32_64_mul16_32_10_t9 (t9 Number(U8, 0)) Reg(U8) Some([191])
# Var inline_mul32_64_mul16_32_11_a (Arg0 a Number(USIZE)) Reg(U32) Some([168, 169, 170, 171])
# Var inline_mul32_64_mul16_32_11_b (Arg1 b Number(USIZE)) Reg(U32) Some([172, 173, 174, 175])
# Var inline_mul32_64_mul16_32_11_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([176, 177, 178, 179])
# Var inline_mul32_64_mul16_32_11_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([180, 181, 182, 183])
# Var inline_mul32_64_mul16_32_11_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([168, 169, 170, 171])
# Var inline_mul32_64_mul16_32_11_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([180, 181, 182, 183])
# Var inline_mul32_64_mul16_32_11_t0 (t0 Ident("a")) Reg(U32) Some([168, 169, 170, 171])
# Var inline_mul32_64_mul16_32_11_t1 (t1 Ident("b")) Reg(U32) Some([172, 173, 174, 175])
# Var inline_mul32_64_mul16_32_11_t10 (t10 Ident("c")) Reg(U32) Some([176, 177, 178, 179])
# Var inline_mul32_64_mul16_32_11_t11 (t11 Ident("f")) Reg(U32) Some([180, 181, 182, 183])
# Var inline_mul32_64_mul16_32_11_t12 (t12 Ident("a")) Reg(U32) Some([168, 169, 170, 171])
# Var inline_mul32_64_mul16_32_11_t13 (t13 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([180, 181, 182, 183])
# Var inline_mul32_64_mul16_32_11_t14 (t14 Index("b", Number(U8, 1))) Reg(U8) Some([188])
# Var inline_mul32_64_mul16_32_11_t15 (t15 Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([168, 169, 170, 171])
# Var inline_mul32_64_mul16_32_11_t16 (t16 Index("a", Number(U8, 1))) Reg(U8) Some([189])
# Var inline_mul32_64_mul16_32_11_t17 (t17 Ident("b")) Reg(U32) Some([172, 173, 174, 175])
# Var inline_mul32_64_mul16_32_11_t18 (t18 Ident("d")) Reg(U32) Some([172, 173, 174, 175])
# Var inline_mul32_64_mul16_32_11_t19 (t19 Ident("e")) Reg(U32) Some([168, 169, 170, 171])
# Var inline_mul32_64_mul16_32_11_t2 (t2 Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([180, 181, 182, 183])
# Var inline_mul32_64_mul16_32_11_t20 (t20 Index("d", Number(U8, 2))) Reg(U8) Some([189])
# Var inline_mul32_64_mul16_32_11_t21 (t21 Index("d", Number(U8, 1))) Reg(U8) Some([189])
# Var inline_mul32_64_mul16_32_11_t22 (t22 Index("d", Number(U8, 0))) Reg(U8) Some([189])
# Var inline_mul32_64_mul16_32_11_t23 (t23 Number(U8, 0)) Reg(U8) Some([189])
# Var inline_mul32_64_mul16_32_11_t24 (t24 Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([168, 169, 170, 171])
# Var inline_mul32_64_mul16_32_11_t25 (t25 Ident("c")) Reg(U32) Some([168, 169, 170, 171])
# Var inline_mul32_64_mul16_32_11_t26 (t26 Ident("d")) Reg(U32) Some([172, 173, 174, 175])
# Var inline_mul32_64_mul16_32_11_t3 (t3 Index("a", Number(U8, 1))) Reg(U8) Some([189])
# Var inline_mul32_64_mul16_32_11_t4 (t4 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([184, 185, 186, 187])
# Var inline_mul32_64_mul16_32_11_t5 (t5 Index("b", Number(U8, 1))) Reg(U8) Some([188])
# Var inline_mul32_64_mul16_32_11_t6 (t6 Index("f", Number(U8, 1))) Reg(U8) Some([190])
# Var inline_mul32_64_mul16_32_11_t7 (t7 Index("f", Number(U8, 0))) Reg(U8) Some([190])
# Var inline_mul32_64_mul16_32_11_t8 (t8 Number(U8, 0)) Reg(U8) Some([191])
# Var inline_mul32_64_mul16_32_11_t9 (t9 Number(U8, 0)) Reg(U8) Some([191])
# Var inline_mul32_64_mul16_32_12_a (Arg0 a Number(USIZE)) Reg(U32) Some([152, 153, 154, 155])
# Var inline_mul32_64_mul16_32_12_b (Arg1 b Number(USIZE)) Reg(U32) Some([156, 157, 158, 159])
# Var inline_mul32_64_mul16_32_12_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([168, 169, 170, 171])
# Var inline_mul32_64_mul16_32_12_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([172, 173, 174, 175])
# Var inline_mul32_64_mul16_32_12_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([152, 153, 154, 155])
# Var inline_mul32_64_mul16_32_12_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([172, 173, 174, 175])
# Var inline_mul32_64_mul16_32_12_t0 (t0 Ident("a")) Reg(U32) Some([152, 153, 154, 155])
# Var inline_mul32_64_mul16_32_12_t1 (t1 Ident("b")) Reg(U32) Some([156, 157, 158, 159])
# Var inline_mul32_64_mul16_32_12_t10 (t10 Ident("c")) Reg(U32) Some([168, 169, 170, 171])
# Var inline_mul32_64_mul16_32_12_t11 (t11 Ident("f")) Reg(U32) Some([172, 173, 174, 175])
# Var inline_mul32_64_mul16_32_12_t12 (t12 Ident("a")) Reg(U32) Some([152, 153, 154, 155])
# Var inline_mul32_64_mul16_32_12_t13 (t13 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([172, 173, 174, 175])
# Var inline_mul32_64_mul16_32_12_t14 (t14 Index("b", Number(U8, 1))) Reg(U8) Some([192])
# Var inline_mul32_64_mul16_32_12_t15 (t15 Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([152, 153, 154, 155])
# Var inline_mul32_64_mul16_32_12_t16 (t16 Index("a", Number(U8, 1))) Reg(U8) Some([193])
# Var inline_mul32_64_mul16_32_12_t17 (t17 Ident("b")) Reg(U32) Some([156, 157, 158, 159])
# Var inline_mul32_64_mul16_32_12_t18 (t18 Ident("d")) Reg(U32) Some([156, 157, 158, 159])
# Var inline_mul32_64_mul16_32_12_t19 (t19 Ident("e")) Reg(U32) Some([152, 153, 154, 155])
# Var inline_mul32_64_mul16_32_12_t2 (t2 Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([172, 173, 174, 175])
# Var inline_mul32_64_mul16_32_12_t20 (t20 Index("d", Number(U8, 2))) Reg(U8) Some([193])
# Var inline_mul32_64_mul16_32_12_t21 (t21 Index("d", Number(U8, 1))) Reg(U8) Some([193])
# Var inline_mul32_64_mul16_32_12_t22 (t22 Index("d", Number(U8, 0))) Reg(U8) Some([193])
# Var inline_mul32_64_mul16_32_12_t23 (t23 Number(U8, 0)) Reg(U8) Some([193])
# Var inline_mul32_64_mul16_32_12_t24 (t24 Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([152, 153, 154, 155])
# Var inline_mul32_64_mul16_32_12_t25 (t25 Ident("c")) Reg(U32) Some([152, 153, 154, 155])
# Var inline_mul32_64_mul16_32_12_t26 (t26 Ident("d")) Reg(U32) Some([156, 157, 158, 159])
# Var inline_mul32_64_mul16_32_12_t3 (t3 Index("a", Number(U8, 1))) Reg(U8) Some([193])
# Var inline_mul32_64_mul16_32_12_t4 (t4 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([176, 177, 178, 179])
# Var inline_mul32_64_mul16_32_12_t5 (t5 Index("b", Number(U8, 1))) Reg(U8) Some([192])
# Var inline_mul32_64_mul16_32_12_t6 (t6 Index("f", Number(U8, 1))) Reg(U8) Some([188])
# Var inline_mul32_64_mul16_32_12_t7 (t7 Index("f", Number(U8, 0))) Reg(U8) Some([188])
# Var inline_mul32_64_mul16_32_12_t8 (t8 Number(U8, 0)) Reg(U8) Some([194])
# Var inline_mul32_64_mul16_32_12_t9 (t9 Number(U8, 0)) Reg(U8) Some([194])
# Var inline_mul32_64_mul16_32_13_a (Arg0 a Number(USIZE)) Reg(U32) Some([148, 149, 150, 151])
# Var inline_mul32_64_mul16_32_13_b (Arg1 b Number(USIZE)) Reg(U32) Some([152, 153, 154, 155])
# Var inline_mul32_64_mul16_32_13_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([156, 157, 158, 159])
# Var inline_mul32_64_mul16_32_13_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([160, 161, 162, 163])
# Var inline_mul32_64_mul16_32_13_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([148, 149, 150, 151])
# Var inline_mul32_64_mul16_32_13_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([160, 161, 162, 163])
# Var inline_mul32_64_mul16_32_13_t0 (t0 Ident("a")) Reg(U32) Some([148, 149, 150, 151])
# Var inline_mul32_64_mul16_32_13_t1 (t1 Ident("b")) Reg(U32) Some([152, 153, 154, 155])
# Var inline_mul32_64_mul16_32_13_t10 (t10 Ident("c")) Reg(U32) Some([156, 157, 158, 159])
# Var inline_mul32_64_mul16_32_13_t11 (t11 Ident("f")) Reg(U32) Some([160, 161, 162, 163])
# Var inline_mul32_64_mul16_32_13_t12 (t12 Ident("a")) Reg(U32) Some([148, 149, 150, 151])
# Var inline_mul32_64_mul16_32_13_t13 (t13 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([160, 161, 162, 163])
# Var inline_mul32_64_mul16_32_13_t14 (t14 Index("b", Number(U8, 1))) Reg(U8) Some([193])
# Var inline_mul32_64_mul16_32_13_t15 (t15 Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([148, 149, 150, 151])
# Var inline_mul32_64_mul16_32_13_t16 (t16 Index("a", Number(U8, 1))) Reg(U8) Some([195])
# Var inline_mul32_64_mul16_32_13_t17 (t17 Ident("b")) Reg(U32) Some([152, 153, 154, 155])
# Var inline_mul32_64_mul16_32_13_t18 (t18 Ident("d")) Reg(U32) Some([152, 153, 154, 155])
# Var inline_mul32_64_mul16_32_13_t19 (t19 Ident("e")) Reg(U32) Some([148, 149, 150, 151])
# Var inline_mul32_64_mul16_32_13_t2 (t2 Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([160, 161, 162, 163])
# Var inline_mul32_64_mul16_32_13_t20 (t20 Index("d", Number(U8, 2))) Reg(U8) Some([195])
# Var inline_mul32_64_mul16_32_13_t21 (t21 Index("d", Number(U8, 1))) Reg(U8) Some([195])
# Var inline_mul32_64_mul16_32_13_t22 (t22 Index("d", Number(U8, 0))) Reg(U8) Some([195])
# Var inline_mul32_64_mul16_32_13_t23 (t23 Number(U8, 0)) Reg(U8) Some([195])
# Var inline_mul32_64_mul16_32_13_t24 (t24 Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([148, 149, 150, 151])
# Var inline_mul32_64_mul16_32_13_t25 (t25 Ident("c")) Reg(U32) Some([148, 149, 150, 151])
# Var inline_mul32_64_mul16_32_13_t26 (t26 Ident("d")) Reg(U32) Some([152, 153, 154, 155])
# Var inline_mul32_64_mul16_32_13_t3 (t3 Index("a", Number(U8, 1))) Reg(U8) Some([195])
# Var inline_mul32_64_mul16_32_13_t4 (t4 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([168, 169, 170, 171])
# Var inline_mul32_64_mul16_32_13_t5 (t5 Index("b", Number(U8, 1))) Reg(U8) Some([193])
# Var inline_mul32_64_mul16_32_13_t6 (t6 Index("f", Number(U8, 1))) Reg(U8) Some([196])
# Var inline_mul32_64_mul16_32_13_t7 (t7 Index("f", Number(U8, 0))) Reg(U8) Some([196])
# Var inline_mul32_64_mul16_32_13_t8 (t8 Number(U8, 0)) Reg(U8) Some([189])
# Var inline_mul32_64_mul16_32_13_t9 (t9 Number(U8, 0)) Reg(U8) Some([189])
# Var t0 (Stack size negated) Reg(U32) Some([152, 153, 154, 155])
# Var t1 (t1 Index("a", Number(U8, 3))) Reg(U8) Some([195])
# Var t10 (t10 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([164, 165, 166, 167])
# Var t11 (t11 Number(USIZE, 4)) Reg(U32) Some([168, 169, 170, 171])
# Var t12 (t12 Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })) Reg(U32) Some([168, 169, 170, 171])
# Var t13 (t13 Ident("a_hi")) Reg(U32) Some([152, 153, 154, 155])
# Var t14 (t14 Ident("b_hi")) Reg(U32) Some([160, 161, 162, 163])
# Var t15 (t15 Ident("a_hi")) Reg(U32) Some([152, 153, 154, 155])
# Var t16 (t16 Ident("b")) Reg(U32) Some([156, 157, 158, 159])
# Var t17 (t17 Index("temp", Number(U8, 0))) Reg(U8) Some([193])
# Var t18 (t18 Index("temp", Number(U8, 1))) Reg(U8) Some([193])
# Var t19 (t19 Index("temp", Number(U8, 2))) Reg(U8) Some([193])
# Var t2 (t2 Index("a", Number(U8, 2))) Reg(U8) Some([195])
# Var t20 (t20 Index("temp", Number(U8, 3))) Reg(U8) Some([193])
# Var t21 (t21 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident("__frame_pointer") }) Reg(U32) Some([200, 201, 202, 203])
# Var t22 (t22 Ident("temp_lo")) Reg(U32) Some([152, 153, 154, 155])
# Var t23 (t23 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }) Reg(U32) Some([152, 153, 154, 155])
# Var t24 (t24 Ident("__frame_pointer")) Reg(U32) Some([200, 201, 202, 203])
# Var t25 (t25 Number(USIZE, 4)) Reg(U32) Some([152, 153, 154, 155])
# Var t26 (t26 Ident("temp_hi")) Reg(U32) Some([156, 157, 158, 159])
# Var t27 (t27 Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })) Reg(U8) Some([204])
# Var t28 (t28 Ident("c")) Reg(U32) Some([152, 153, 154, 155])
# Var t29 (t29 AddressOf(Ident("temp64"))) Reg(U32) Some([156, 157, 158, 159])
# Var t3 (t3 Index("b", Number(U8, 3))) Reg(U8) Some([192])
# Var t30 (t30 Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))) Reg(U32) Some([156, 157, 158, 159])
# Var t31 (t31 Ident("__frame_pointer")) Reg(U32) Some([200, 201, 202, 203])
# Var t32 (t32 Number(USIZE, 0)) Reg(U32) Some([156, 157, 158, 159])
# Var t33 (t33 Ident("c")) Reg(U32) Some([164, 165, 166, 167])
# Var t34 (t34 Ident("a")) Reg(U32) Some([148, 149, 150, 151])
# Var t35 (t35 Ident("b_hi")) Reg(U32) Some([152, 153, 154, 155])
# Var t36 (t36 Index("temp", Number(U8, 0))) Reg(U8) Some([195])
# Var t37 (t37 Index("temp", Number(U8, 1))) Reg(U8) Some([195])
# Var t38 (t38 Index("temp", Number(U8, 2))) Reg(U8) Some([195])
# Var t39 (t39 Index("temp", Number(U8, 3))) Reg(U8) Some([195])
# Var t4 (t4 Index("b", Number(U8, 2))) Reg(U8) Some([192])
# Var t40 (t40 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident("__frame_pointer") }) Reg(U32) Some([200, 201, 202, 203])
# Var t41 (t41 Ident("temp_lo")) Reg(U32) Some([148, 149, 150, 151])
# Var t42 (t42 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }) Reg(U32) Some([148, 149, 150, 151])
# Var t43 (t43 Ident("__frame_pointer")) Reg(U32) Some([200, 201, 202, 203])
# Var t44 (t44 Number(USIZE, 4)) Reg(U32) Some([148, 149, 150, 151])
# Var t45 (t45 Ident("temp_hi")) Reg(U32) Some([152, 153, 154, 155])
# Var t46 (t46 Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })) Reg(U8) Some([204])
# Var t47 (t47 Ident("c")) Reg(U32) Some([148, 149, 150, 151])
# Var t48 (t48 AddressOf(Ident("temp64"))) Reg(U32) Some([152, 153, 154, 155])
# Var t49 (t49 Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))) Reg(U32) Some([152, 153, 154, 155])
# Var t5 (t5 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([164, 165, 166, 167])
# Var t50 (t50 Ident("__frame_pointer")) Reg(U32) Some([200, 201, 202, 203])
# Var t51 (t51 Number(USIZE, 0)) Reg(U32) Some([152, 153, 154, 155])
# Var t52 (t52 Ident("c")) Reg(U32) Some([156, 157, 158, 159])
# Var t53 (Stack size) Reg(U32) Some([148, 149, 150, 151])
# Var t6 (t6 Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })) Reg(U32) Some([168, 169, 170, 171])
# Var t7 (t7 Ident("a")) Reg(U32) Some([148, 149, 150, 151])
# Var t8 (t8 Ident("b")) Reg(U32) Some([156, 157, 158, 159])
# Var t9 (t9 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }) Reg(U32) Some([208, 209, 210, 211])
# Var temp (Local temp Number(USIZE) Reg(U32)) Reg(U32) Some([152, 153, 154, 155])
# Var temp64 (Local temp64 Struct("U64") FrameOffset(0)) FrameOffset(0) None
# Var temp_hi (Local temp_hi Number(USIZE) Reg(U32)) Reg(U32) Some([208, 209, 210, 211])
# Var temp_lo (Local temp_lo Number(USIZE) Reg(U32)) Reg(U32) Some([212, 213, 214, 215])
# 012c9 Instruction { source: "reserve 8 bytes of stack space for locals", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffff8=4294967288)], resolved: None }
32 0c f8 ff ff ff 
# 012cf Instruction { source: "Save function parameter 'a' registers [0, 1, 2, 3] to locals [148, 149, 150, 151].", opcode: Copy32, args: [Register(0x00), Register(0x94)], resolved: None }
21 00 94 
# 012d2 Instruction { source: "Save function parameter 'b' registers [4, 5, 6, 7] to locals [156, 157, 158, 159].", opcode: Copy32, args: [Register(0x04), Register(0x9c)], resolved: None }
21 04 9c 
# 012d5 Instruction { source: "Save function parameter 'c' registers [8, 9, 10, 11] to locals [164, 165, 166, 167].", opcode: Copy32, args: [Register(0x08), Register(0xa4)], resolved: None }
21 08 a4 
# t0 <- 0xfffffff8u32 
# 	SourceContext { contexts: [] }
# 012d8 Instruction { source: "t0 <- 0xfffffff8u32 \n\tSourceContext { contexts: [] }", opcode: LoadImm32, args: [Register(0x98), Constant32(0xfffffff8=4294967288)], resolved: None }
20 98 f8 ff ff ff 
# __frame_pointer <- __frame_pointer Add t0
# 	SourceContext { contexts: [] }
# 012de Instruction { source: "__frame_pointer <- __frame_pointer Add t0\n\tSourceContext { contexts: [] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 012df Instruction { source: "__frame_pointer <- __frame_pointer Add t0\n\tSourceContext { contexts: [] }", opcode: AddCarry32_1, args: [Register(0x0c), Register(0x98), Register(0x0c)], resolved: None }
30 0c 98 0c 
# 012e3 Instruction { source: "__frame_pointer <- __frame_pointer Add t0\n\tSourceContext { contexts: [] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# a_hi <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a_hi\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }", "Number(USIZE, 0)"] }
# 012e4 Instruction { source: "a_hi <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a_hi\\\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x98), Constant32(0x00000000=0)], resolved: None }
20 98 00 00 00 00 
# t1 <- a[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a_hi\", Number(U8, 1)), var_type: None, value: Index(\"a\", Number(U8, 3)) }", "Index(\"a\", Number(U8, 3))", "Index(\"a\", Number(U8, 3))"] }
# 012ea Instruction { source: "t1 <- a[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a_hi\\\", Number(U8, 1)), var_type: None, value: Index(\\\"a\\\", Number(U8, 3)) }\", \"Index(\\\"a\\\", Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0x97), Register(0xc3)], resolved: None }
0b 97 c3 
# a_hi[0x01..0x02] <- t1 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a_hi\", Number(U8, 1)), var_type: None, value: Index(\"a\", Number(U8, 3)) }"] }
# 012ed Instruction { source: "a_hi[0x01..0x02] <- t1 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a_hi\\\", Number(U8, 1)), var_type: None, value: Index(\\\"a\\\", Number(U8, 3)) }\"] }", opcode: Copy8, args: [Register(0xc3), Register(0x99)], resolved: None }
0b c3 99 
# t2 <- a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a_hi\", Number(U8, 0)), var_type: None, value: Index(\"a\", Number(U8, 2)) }", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 012f0 Instruction { source: "t2 <- a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a_hi\\\", Number(U8, 0)), var_type: None, value: Index(\\\"a\\\", Number(U8, 2)) }\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x96), Register(0xc3)], resolved: None }
0b 96 c3 
# a_hi[0x00..0x01] <- t2 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a_hi\", Number(U8, 0)), var_type: None, value: Index(\"a\", Number(U8, 2)) }"] }
# 012f3 Instruction { source: "a_hi[0x00..0x01] <- t2 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a_hi\\\", Number(U8, 0)), var_type: None, value: Index(\\\"a\\\", Number(U8, 2)) }\"] }", opcode: Copy8, args: [Register(0xc3), Register(0x98)], resolved: None }
0b c3 98 
# b_hi <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"b_hi\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }", "Number(USIZE, 0)"] }
# 012f6 Instruction { source: "b_hi <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b_hi\\\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0xa0), Constant32(0x00000000=0)], resolved: None }
20 a0 00 00 00 00 
# t3 <- b[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"b_hi\", Number(U8, 1)), var_type: None, value: Index(\"b\", Number(U8, 3)) }", "Index(\"b\", Number(U8, 3))", "Index(\"b\", Number(U8, 3))"] }
# 012fc Instruction { source: "t3 <- b[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"b_hi\\\", Number(U8, 1)), var_type: None, value: Index(\\\"b\\\", Number(U8, 3)) }\", \"Index(\\\"b\\\", Number(U8, 3))\", \"Index(\\\"b\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0x9f), Register(0xc0)], resolved: None }
0b 9f c0 
# b_hi[0x01..0x02] <- t3 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"b_hi\", Number(U8, 1)), var_type: None, value: Index(\"b\", Number(U8, 3)) }"] }
# 012ff Instruction { source: "b_hi[0x01..0x02] <- t3 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"b_hi\\\", Number(U8, 1)), var_type: None, value: Index(\\\"b\\\", Number(U8, 3)) }\"] }", opcode: Copy8, args: [Register(0xc0), Register(0xa1)], resolved: None }
0b c0 a1 
# t4 <- b[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"b_hi\", Number(U8, 0)), var_type: None, value: Index(\"b\", Number(U8, 2)) }", "Index(\"b\", Number(U8, 2))", "Index(\"b\", Number(U8, 2))"] }
# 01302 Instruction { source: "t4 <- b[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"b_hi\\\", Number(U8, 0)), var_type: None, value: Index(\\\"b\\\", Number(U8, 2)) }\", \"Index(\\\"b\\\", Number(U8, 2))\", \"Index(\\\"b\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x9e), Register(0xc0)], resolved: None }
0b 9e c0 
# b_hi[0x00..0x01] <- t4 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"b_hi\", Number(U8, 0)), var_type: None, value: Index(\"b\", Number(U8, 2)) }"] }
# 01305 Instruction { source: "b_hi[0x00..0x01] <- t4 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"b_hi\\\", Number(U8, 0)), var_type: None, value: Index(\\\"b\\\", Number(U8, 2)) }\"] }", opcode: Copy8, args: [Register(0xc0), Register(0xa0)], resolved: None }
0b c0 a0 
# t5 <- c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "t5 <- c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# t7 <- a U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t7 <- a U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# t8 <- b U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "t8 <- b U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x9c), Register(0x9c)], resolved: None }
# inline_mul32_64_mul16_32_10_a <- t7 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })"] }
# 01308 Instruction { source: "inline_mul32_64_mul16_32_10_a <- t7 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0x94), Register(0xa8)], resolved: None }
21 94 a8 
# inline_mul32_64_mul16_32_10_b <- t8 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })"] }
# 0130b Instruction { source: "inline_mul32_64_mul16_32_10_b <- t8 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0x9c), Register(0xac)], resolved: None }
21 9c ac 
# inline_mul32_64_mul16_32_10_t0 <- inline_mul32_64_mul16_32_10_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_t0 <- inline_mul32_64_mul16_32_10_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# inline_mul32_64_mul16_32_10_t1 <- inline_mul32_64_mul16_32_10_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_t1 <- inline_mul32_64_mul16_32_10_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t0 Multiply inline_mul32_64_mul16_32_10_t1
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))"] }
# 0130e Instruction { source: "inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t0 Multiply inline_mul32_64_mul16_32_10_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0xa8), Register(0xac), Register(0xb0)], resolved: None }
11 a8 ac b0 
# 01312 Instruction { source: "inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t0 Multiply inline_mul32_64_mul16_32_10_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0xb2), Constant8(0x00=0)], resolved: None }
04 b2 00 
# 01315 Instruction { source: "inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t0 Multiply inline_mul32_64_mul16_32_10_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0xb3), Constant8(0x00=0)], resolved: None }
04 b3 00 
# inline_mul32_64_mul16_32_10_t3 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 01318 Instruction { source: "inline_mul32_64_mul16_32_10_t3 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xa9), Register(0xbd)], resolved: None }
0b a9 bd 
# inline_mul32_64_mul16_32_10_t2 U32 <- inline_mul32_64_mul16_32_10_t3 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 0131b Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_10_t2 U32 <- inline_mul32_64_mul16_32_10_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0xb4), Constant32(0x00000000=0)], resolved: None }
20 b4 00 00 00 00 
# 01321 Instruction { source: "inline_mul32_64_mul16_32_10_t2 U32 <- inline_mul32_64_mul16_32_10_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xbd), Register(0xb4)], resolved: None }
0b bd b4 
# inline_mul32_64_mul16_32_10_t5 <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 01324 Instruction { source: "inline_mul32_64_mul16_32_10_t5 <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xad), Register(0xbc)], resolved: None }
0b ad bc 
# inline_mul32_64_mul16_32_10_t4 U32 <- inline_mul32_64_mul16_32_10_t5 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 01327 Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_10_t4 U32 <- inline_mul32_64_mul16_32_10_t5 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0xb8), Constant32(0x00000000=0)], resolved: None }
20 b8 00 00 00 00 
# 0132d Instruction { source: "inline_mul32_64_mul16_32_10_t4 U32 <- inline_mul32_64_mul16_32_10_t5 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xbc), Register(0xb8)], resolved: None }
0b bc b8 
# inline_mul32_64_mul16_32_10_f <- inline_mul32_64_mul16_32_10_t2 Multiply inline_mul32_64_mul16_32_10_t4
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 01330 Instruction { source: "inline_mul32_64_mul16_32_10_f <- inline_mul32_64_mul16_32_10_t2 Multiply inline_mul32_64_mul16_32_10_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0xb4), Register(0xb8), Register(0xb4)], resolved: None }
11 b4 b8 b4 
# 01334 Instruction { source: "inline_mul32_64_mul16_32_10_f <- inline_mul32_64_mul16_32_10_t2 Multiply inline_mul32_64_mul16_32_10_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0xb6), Constant8(0x00=0)], resolved: None }
04 b6 00 
# 01337 Instruction { source: "inline_mul32_64_mul16_32_10_f <- inline_mul32_64_mul16_32_10_t2 Multiply inline_mul32_64_mul16_32_10_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0xb7), Constant8(0x00=0)], resolved: None }
04 b7 00 
# inline_mul32_64_mul16_32_10_t6 <- inline_mul32_64_mul16_32_10_f[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }", "Index(\"f\", Number(U8, 1))", "Index(\"f\", Number(U8, 1))"] }
# 0133a Instruction { source: "inline_mul32_64_mul16_32_10_t6 <- inline_mul32_64_mul16_32_10_f[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\", \"Index(\\\"f\\\", Number(U8, 1))\", \"Index(\\\"f\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xb5), Register(0xbe)], resolved: None }
0b b5 be 
# inline_mul32_64_mul16_32_10_f[0x03..0x04] <- inline_mul32_64_mul16_32_10_t6 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }"] }
# 0133d Instruction { source: "inline_mul32_64_mul16_32_10_f[0x03..0x04] <- inline_mul32_64_mul16_32_10_t6 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xbe), Register(0xb7)], resolved: None }
0b be b7 
# inline_mul32_64_mul16_32_10_t7 <- inline_mul32_64_mul16_32_10_f[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }", "Index(\"f\", Number(U8, 0))", "Index(\"f\", Number(U8, 0))"] }
# 01340 Instruction { source: "inline_mul32_64_mul16_32_10_t7 <- inline_mul32_64_mul16_32_10_f[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\", \"Index(\\\"f\\\", Number(U8, 0))\", \"Index(\\\"f\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0xb4), Register(0xbe)], resolved: None }
0b b4 be 
# inline_mul32_64_mul16_32_10_f[0x02..0x03] <- inline_mul32_64_mul16_32_10_t7 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }"] }
# 01343 Instruction { source: "inline_mul32_64_mul16_32_10_f[0x02..0x03] <- inline_mul32_64_mul16_32_10_t7 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0xbe), Register(0xb6)], resolved: None }
0b be b6 
# inline_mul32_64_mul16_32_10_t8 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 01346 Instruction { source: "inline_mul32_64_mul16_32_10_t8 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0xbf), Constant8(0x00=0)], resolved: None }
04 bf 00 
# inline_mul32_64_mul16_32_10_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_t8 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }"] }
# 01349 Instruction { source: "inline_mul32_64_mul16_32_10_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_t8 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0xbf), Register(0xb5)], resolved: None }
0b bf b5 
# inline_mul32_64_mul16_32_10_t9 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0134c Instruction { source: "inline_mul32_64_mul16_32_10_t9 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0xbf), Constant8(0x00=0)], resolved: None }
04 bf 00 
# inline_mul32_64_mul16_32_10_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_t9 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 0134f Instruction { source: "inline_mul32_64_mul16_32_10_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_t9 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0xbf), Register(0xb4)], resolved: None }
0b bf b4 
# inline_mul32_64_mul16_32_10_t10 <- inline_mul32_64_mul16_32_10_c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_t10 <- inline_mul32_64_mul16_32_10_c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0xb0), Register(0xb0)], resolved: None }
# inline_mul32_64_mul16_32_10_t11 <- inline_mul32_64_mul16_32_10_f U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"f\")", "Ident(\"f\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_t11 <- inline_mul32_64_mul16_32_10_f U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"f\\\")\", \"Ident(\\\"f\\\")\"] }", opcode: Copy32, args: [Register(0xb4), Register(0xb4)], resolved: None }
# inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t10 Add inline_mul32_64_mul16_32_10_t11
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))"] }
# 01352 Instruction { source: "inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t10 Add inline_mul32_64_mul16_32_10_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01353 Instruction { source: "inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t10 Add inline_mul32_64_mul16_32_10_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0xb0), Register(0xb4), Register(0xb0)], resolved: None }
30 b0 b4 b0 
# 01357 Instruction { source: "inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t10 Add inline_mul32_64_mul16_32_10_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_mul32_64_mul16_32_10_t12 <- inline_mul32_64_mul16_32_10_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_t12 <- inline_mul32_64_mul16_32_10_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# inline_mul32_64_mul16_32_10_t14 <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 01358 Instruction { source: "inline_mul32_64_mul16_32_10_t14 <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xad), Register(0xbc)], resolved: None }
0b ad bc 
# inline_mul32_64_mul16_32_10_t13 U32 <- inline_mul32_64_mul16_32_10_t14 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 0135b Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_10_t13 U32 <- inline_mul32_64_mul16_32_10_t14 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0xb4), Constant32(0x00000000=0)], resolved: None }
20 b4 00 00 00 00 
# 01361 Instruction { source: "inline_mul32_64_mul16_32_10_t13 U32 <- inline_mul32_64_mul16_32_10_t14 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xbc), Register(0xb4)], resolved: None }
0b bc b4 
# inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t12 Multiply inline_mul32_64_mul16_32_10_t13
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 01364 Instruction { source: "inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t12 Multiply inline_mul32_64_mul16_32_10_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0xa8), Register(0xb4), Register(0xb4)], resolved: None }
11 a8 b4 b4 
# 01368 Instruction { source: "inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t12 Multiply inline_mul32_64_mul16_32_10_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0xb6), Constant8(0x00=0)], resolved: None }
04 b6 00 
# 0136b Instruction { source: "inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t12 Multiply inline_mul32_64_mul16_32_10_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0xb7), Constant8(0x00=0)], resolved: None }
04 b7 00 
# inline_mul32_64_mul16_32_10_t16 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 0136e Instruction { source: "inline_mul32_64_mul16_32_10_t16 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xa9), Register(0xbd)], resolved: None }
0b a9 bd 
# inline_mul32_64_mul16_32_10_t15 U32 <- inline_mul32_64_mul16_32_10_t16 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 01371 Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_10_t15 U32 <- inline_mul32_64_mul16_32_10_t16 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0xa8), Constant32(0x00000000=0)], resolved: None }
20 a8 00 00 00 00 
# 01377 Instruction { source: "inline_mul32_64_mul16_32_10_t15 U32 <- inline_mul32_64_mul16_32_10_t16 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xbd), Register(0xa8)], resolved: None }
0b bd a8 
# inline_mul32_64_mul16_32_10_t17 <- inline_mul32_64_mul16_32_10_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_t17 <- inline_mul32_64_mul16_32_10_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# inline_mul32_64_mul16_32_10_e <- inline_mul32_64_mul16_32_10_t15 Multiply inline_mul32_64_mul16_32_10_t17
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))"] }
# 0137a Instruction { source: "inline_mul32_64_mul16_32_10_e <- inline_mul32_64_mul16_32_10_t15 Multiply inline_mul32_64_mul16_32_10_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0xa8), Register(0xac), Register(0xa8)], resolved: None }
11 a8 ac a8 
# 0137e Instruction { source: "inline_mul32_64_mul16_32_10_e <- inline_mul32_64_mul16_32_10_t15 Multiply inline_mul32_64_mul16_32_10_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0xaa), Constant8(0x00=0)], resolved: None }
04 aa 00 
# 01381 Instruction { source: "inline_mul32_64_mul16_32_10_e <- inline_mul32_64_mul16_32_10_t15 Multiply inline_mul32_64_mul16_32_10_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0xab), Constant8(0x00=0)], resolved: None }
04 ab 00 
# inline_mul32_64_mul16_32_10_t18 <- inline_mul32_64_mul16_32_10_d U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 01384 Instruction { source: "inline_mul32_64_mul16_32_10_t18 <- inline_mul32_64_mul16_32_10_d U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0xb4), Register(0xac)], resolved: None }
21 b4 ac 
# inline_mul32_64_mul16_32_10_t19 <- inline_mul32_64_mul16_32_10_e U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"e\")", "Ident(\"e\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_t19 <- inline_mul32_64_mul16_32_10_e U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"e\\\")\", \"Ident(\\\"e\\\")\"] }", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t18 Add inline_mul32_64_mul16_32_10_t19
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))"] }
# 01387 Instruction { source: "inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t18 Add inline_mul32_64_mul16_32_10_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01388 Instruction { source: "inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t18 Add inline_mul32_64_mul16_32_10_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0xac), Register(0xa8), Register(0xb4)], resolved: None }
30 ac a8 b4 
# 0138c Instruction { source: "inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t18 Add inline_mul32_64_mul16_32_10_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_mul32_64_mul16_32_10_t20 <- inline_mul32_64_mul16_32_10_d[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }", "Index(\"d\", Number(U8, 2))", "Index(\"d\", Number(U8, 2))"] }
# 0138d Instruction { source: "inline_mul32_64_mul16_32_10_t20 <- inline_mul32_64_mul16_32_10_d[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\", \"Index(\\\"d\\\", Number(U8, 2))\", \"Index(\\\"d\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0xb6), Register(0xbd)], resolved: None }
0b b6 bd 
# inline_mul32_64_mul16_32_10_d[0x03..0x04] <- inline_mul32_64_mul16_32_10_t20 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }"] }
# 01390 Instruction { source: "inline_mul32_64_mul16_32_10_d[0x03..0x04] <- inline_mul32_64_mul16_32_10_t20 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\"] }", opcode: Copy8, args: [Register(0xbd), Register(0xb7)], resolved: None }
0b bd b7 
# inline_mul32_64_mul16_32_10_t21 <- inline_mul32_64_mul16_32_10_d[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }", "Index(\"d\", Number(U8, 1))", "Index(\"d\", Number(U8, 1))"] }
# 01393 Instruction { source: "inline_mul32_64_mul16_32_10_t21 <- inline_mul32_64_mul16_32_10_d[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\", \"Index(\\\"d\\\", Number(U8, 1))\", \"Index(\\\"d\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xb5), Register(0xbd)], resolved: None }
0b b5 bd 
# inline_mul32_64_mul16_32_10_d[0x02..0x03] <- inline_mul32_64_mul16_32_10_t21 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }"] }
# 01396 Instruction { source: "inline_mul32_64_mul16_32_10_d[0x02..0x03] <- inline_mul32_64_mul16_32_10_t21 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xbd), Register(0xb6)], resolved: None }
0b bd b6 
# inline_mul32_64_mul16_32_10_t22 <- inline_mul32_64_mul16_32_10_d[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }", "Index(\"d\", Number(U8, 0))", "Index(\"d\", Number(U8, 0))"] }
# 01399 Instruction { source: "inline_mul32_64_mul16_32_10_t22 <- inline_mul32_64_mul16_32_10_d[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\", \"Index(\\\"d\\\", Number(U8, 0))\", \"Index(\\\"d\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0xb4), Register(0xbd)], resolved: None }
0b b4 bd 
# inline_mul32_64_mul16_32_10_d[0x01..0x02] <- inline_mul32_64_mul16_32_10_t22 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }"] }
# 0139c Instruction { source: "inline_mul32_64_mul16_32_10_d[0x01..0x02] <- inline_mul32_64_mul16_32_10_t22 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0xbd), Register(0xb5)], resolved: None }
0b bd b5 
# inline_mul32_64_mul16_32_10_t23 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0139f Instruction { source: "inline_mul32_64_mul16_32_10_t23 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0xbd), Constant8(0x00=0)], resolved: None }
04 bd 00 
# inline_mul32_64_mul16_32_10_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_t23 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 013a2 Instruction { source: "inline_mul32_64_mul16_32_10_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_t23 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0xbd), Register(0xb4)], resolved: None }
0b bd b4 
# inline_mul32_64_mul16_32_10_t25 <- inline_mul32_64_mul16_32_10_c U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# 013a5 Instruction { source: "inline_mul32_64_mul16_32_10_t25 <- inline_mul32_64_mul16_32_10_c U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0xb0), Register(0xa8)], resolved: None }
21 b0 a8 
# inline_mul32_64_mul16_32_10_t26 <- inline_mul32_64_mul16_32_10_d U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 013a8 Instruction { source: "inline_mul32_64_mul16_32_10_t26 <- inline_mul32_64_mul16_32_10_d U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0xb4), Register(0xac)], resolved: None }
21 b4 ac 
# inline_mul32_64_mul16_32_10_t24 <- inline_mul32_64_mul16_32_10_t25 Add inline_mul32_64_mul16_32_10_t26
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))"] }
# 013ab Instruction { source: "inline_mul32_64_mul16_32_10_t24 <- inline_mul32_64_mul16_32_10_t25 Add inline_mul32_64_mul16_32_10_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 013ac Instruction { source: "inline_mul32_64_mul16_32_10_t24 <- inline_mul32_64_mul16_32_10_t25 Add inline_mul32_64_mul16_32_10_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0xa8), Register(0xac), Register(0xa8)], resolved: None }
30 a8 ac a8 
# 013b0 Instruction { source: "inline_mul32_64_mul16_32_10_t24 <- inline_mul32_64_mul16_32_10_t25 Add inline_mul32_64_mul16_32_10_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t6 <- inline_mul32_64_mul16_32_10_t24 U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# optimized away noop copy Instruction { source: "t6 <- inline_mul32_64_mul16_32_10_t24 U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# goto inline_mul32_64_mul16_32_10_function_end_mul16_32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_mul32_64_mul16_32_10_function_end_mul16_32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_mul32_64_mul16_32_10_function_end_mul16_32)], resolved: None }
# :inline_mul32_64_mul16_32_10_function_end_mul16_32
# 	SourceContext { contexts: [] }
# inline_mul32_64_mul16_32_10_function_end_mul16_32
# mem[t5] <- t6 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }"] }
# 013b1 Instruction { source: "mem[t5] <- t6 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] }) }\"] }", opcode: Store32_1, args: [Register(0xa8), Register(0xa4)], resolved: None }
23 a8 a4 
# 013b4 Instruction { source: "mem[t5] <- t6 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] }) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# t10 <- c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "t10 <- c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# t11 <- 0n4/0x00000004u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 013b5 Instruction { source: "t11 <- 0n4/0x00000004u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: LoadImm32, args: [Register(0xa8), Constant32(0x00000004=4)], resolved: None }
20 a8 04 00 00 00 
# t9 <- t10 Add t11
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))"] }
# 013bb Instruction { source: "t9 <- t10 Add t11\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 013bc Instruction { source: "t9 <- t10 Add t11\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0xa4), Register(0xa8), Register(0xd0)], resolved: None }
30 a4 a8 d0 
# 013c0 Instruction { source: "t9 <- t10 Add t11\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t13 <- a_hi U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] })", "Ident(\"a_hi\")", "Ident(\"a_hi\")"] }
# optimized away noop copy Instruction { source: "t13 <- a_hi U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] })\", \"Ident(\\\"a_hi\\\")\", \"Ident(\\\"a_hi\\\")\"] }", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# t14 <- b_hi U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] })", "Ident(\"b_hi\")", "Ident(\"b_hi\")"] }
# optimized away noop copy Instruction { source: "t14 <- b_hi U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] })\", \"Ident(\\\"b_hi\\\")\", \"Ident(\\\"b_hi\\\")\"] }", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_mul32_64_mul16_32_11_a <- t13 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] })"] }
# 013c1 Instruction { source: "inline_mul32_64_mul16_32_11_a <- t13 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] })\"] }", opcode: Copy32, args: [Register(0x98), Register(0xa8)], resolved: None }
21 98 a8 
# inline_mul32_64_mul16_32_11_b <- t14 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] })"] }
# 013c4 Instruction { source: "inline_mul32_64_mul16_32_11_b <- t14 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] })\"] }", opcode: Copy32, args: [Register(0xa0), Register(0xac)], resolved: None }
21 a0 ac 
# inline_mul32_64_mul16_32_11_t0 <- inline_mul32_64_mul16_32_11_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_t0 <- inline_mul32_64_mul16_32_11_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# inline_mul32_64_mul16_32_11_t1 <- inline_mul32_64_mul16_32_11_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_t1 <- inline_mul32_64_mul16_32_11_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t0 Multiply inline_mul32_64_mul16_32_11_t1
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))"] }
# 013c7 Instruction { source: "inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t0 Multiply inline_mul32_64_mul16_32_11_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0xa8), Register(0xac), Register(0xb0)], resolved: None }
11 a8 ac b0 
# 013cb Instruction { source: "inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t0 Multiply inline_mul32_64_mul16_32_11_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0xb2), Constant8(0x00=0)], resolved: None }
04 b2 00 
# 013ce Instruction { source: "inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t0 Multiply inline_mul32_64_mul16_32_11_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0xb3), Constant8(0x00=0)], resolved: None }
04 b3 00 
# inline_mul32_64_mul16_32_11_t3 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 013d1 Instruction { source: "inline_mul32_64_mul16_32_11_t3 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xa9), Register(0xbd)], resolved: None }
0b a9 bd 
# inline_mul32_64_mul16_32_11_t2 U32 <- inline_mul32_64_mul16_32_11_t3 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 013d4 Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_11_t2 U32 <- inline_mul32_64_mul16_32_11_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0xb4), Constant32(0x00000000=0)], resolved: None }
20 b4 00 00 00 00 
# 013da Instruction { source: "inline_mul32_64_mul16_32_11_t2 U32 <- inline_mul32_64_mul16_32_11_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xbd), Register(0xb4)], resolved: None }
0b bd b4 
# inline_mul32_64_mul16_32_11_t5 <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 013dd Instruction { source: "inline_mul32_64_mul16_32_11_t5 <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xad), Register(0xbc)], resolved: None }
0b ad bc 
# inline_mul32_64_mul16_32_11_t4 U32 <- inline_mul32_64_mul16_32_11_t5 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 013e0 Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_11_t4 U32 <- inline_mul32_64_mul16_32_11_t5 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0xb8), Constant32(0x00000000=0)], resolved: None }
20 b8 00 00 00 00 
# 013e6 Instruction { source: "inline_mul32_64_mul16_32_11_t4 U32 <- inline_mul32_64_mul16_32_11_t5 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xbc), Register(0xb8)], resolved: None }
0b bc b8 
# inline_mul32_64_mul16_32_11_f <- inline_mul32_64_mul16_32_11_t2 Multiply inline_mul32_64_mul16_32_11_t4
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 013e9 Instruction { source: "inline_mul32_64_mul16_32_11_f <- inline_mul32_64_mul16_32_11_t2 Multiply inline_mul32_64_mul16_32_11_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0xb4), Register(0xb8), Register(0xb4)], resolved: None }
11 b4 b8 b4 
# 013ed Instruction { source: "inline_mul32_64_mul16_32_11_f <- inline_mul32_64_mul16_32_11_t2 Multiply inline_mul32_64_mul16_32_11_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0xb6), Constant8(0x00=0)], resolved: None }
04 b6 00 
# 013f0 Instruction { source: "inline_mul32_64_mul16_32_11_f <- inline_mul32_64_mul16_32_11_t2 Multiply inline_mul32_64_mul16_32_11_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0xb7), Constant8(0x00=0)], resolved: None }
04 b7 00 
# inline_mul32_64_mul16_32_11_t6 <- inline_mul32_64_mul16_32_11_f[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }", "Index(\"f\", Number(U8, 1))", "Index(\"f\", Number(U8, 1))"] }
# 013f3 Instruction { source: "inline_mul32_64_mul16_32_11_t6 <- inline_mul32_64_mul16_32_11_f[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\", \"Index(\\\"f\\\", Number(U8, 1))\", \"Index(\\\"f\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xb5), Register(0xbe)], resolved: None }
0b b5 be 
# inline_mul32_64_mul16_32_11_f[0x03..0x04] <- inline_mul32_64_mul16_32_11_t6 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }"] }
# 013f6 Instruction { source: "inline_mul32_64_mul16_32_11_f[0x03..0x04] <- inline_mul32_64_mul16_32_11_t6 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xbe), Register(0xb7)], resolved: None }
0b be b7 
# inline_mul32_64_mul16_32_11_t7 <- inline_mul32_64_mul16_32_11_f[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }", "Index(\"f\", Number(U8, 0))", "Index(\"f\", Number(U8, 0))"] }
# 013f9 Instruction { source: "inline_mul32_64_mul16_32_11_t7 <- inline_mul32_64_mul16_32_11_f[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\", \"Index(\\\"f\\\", Number(U8, 0))\", \"Index(\\\"f\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0xb4), Register(0xbe)], resolved: None }
0b b4 be 
# inline_mul32_64_mul16_32_11_f[0x02..0x03] <- inline_mul32_64_mul16_32_11_t7 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }"] }
# 013fc Instruction { source: "inline_mul32_64_mul16_32_11_f[0x02..0x03] <- inline_mul32_64_mul16_32_11_t7 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0xbe), Register(0xb6)], resolved: None }
0b be b6 
# inline_mul32_64_mul16_32_11_t8 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 013ff Instruction { source: "inline_mul32_64_mul16_32_11_t8 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0xbf), Constant8(0x00=0)], resolved: None }
04 bf 00 
# inline_mul32_64_mul16_32_11_f[0x01..0x02] <- inline_mul32_64_mul16_32_11_t8 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }"] }
# 01402 Instruction { source: "inline_mul32_64_mul16_32_11_f[0x01..0x02] <- inline_mul32_64_mul16_32_11_t8 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0xbf), Register(0xb5)], resolved: None }
0b bf b5 
# inline_mul32_64_mul16_32_11_t9 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 01405 Instruction { source: "inline_mul32_64_mul16_32_11_t9 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0xbf), Constant8(0x00=0)], resolved: None }
04 bf 00 
# inline_mul32_64_mul16_32_11_f[0x00..0x01] <- inline_mul32_64_mul16_32_11_t9 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 01408 Instruction { source: "inline_mul32_64_mul16_32_11_f[0x00..0x01] <- inline_mul32_64_mul16_32_11_t9 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0xbf), Register(0xb4)], resolved: None }
0b bf b4 
# inline_mul32_64_mul16_32_11_t10 <- inline_mul32_64_mul16_32_11_c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_t10 <- inline_mul32_64_mul16_32_11_c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0xb0), Register(0xb0)], resolved: None }
# inline_mul32_64_mul16_32_11_t11 <- inline_mul32_64_mul16_32_11_f U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"f\")", "Ident(\"f\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_t11 <- inline_mul32_64_mul16_32_11_f U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"f\\\")\", \"Ident(\\\"f\\\")\"] }", opcode: Copy32, args: [Register(0xb4), Register(0xb4)], resolved: None }
# inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t10 Add inline_mul32_64_mul16_32_11_t11
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))"] }
# 0140b Instruction { source: "inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t10 Add inline_mul32_64_mul16_32_11_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0140c Instruction { source: "inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t10 Add inline_mul32_64_mul16_32_11_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0xb0), Register(0xb4), Register(0xb0)], resolved: None }
30 b0 b4 b0 
# 01410 Instruction { source: "inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t10 Add inline_mul32_64_mul16_32_11_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_mul32_64_mul16_32_11_t12 <- inline_mul32_64_mul16_32_11_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_t12 <- inline_mul32_64_mul16_32_11_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# inline_mul32_64_mul16_32_11_t14 <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 01411 Instruction { source: "inline_mul32_64_mul16_32_11_t14 <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xad), Register(0xbc)], resolved: None }
0b ad bc 
# inline_mul32_64_mul16_32_11_t13 U32 <- inline_mul32_64_mul16_32_11_t14 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 01414 Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_11_t13 U32 <- inline_mul32_64_mul16_32_11_t14 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0xb4), Constant32(0x00000000=0)], resolved: None }
20 b4 00 00 00 00 
# 0141a Instruction { source: "inline_mul32_64_mul16_32_11_t13 U32 <- inline_mul32_64_mul16_32_11_t14 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xbc), Register(0xb4)], resolved: None }
0b bc b4 
# inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t12 Multiply inline_mul32_64_mul16_32_11_t13
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 0141d Instruction { source: "inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t12 Multiply inline_mul32_64_mul16_32_11_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0xa8), Register(0xb4), Register(0xb4)], resolved: None }
11 a8 b4 b4 
# 01421 Instruction { source: "inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t12 Multiply inline_mul32_64_mul16_32_11_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0xb6), Constant8(0x00=0)], resolved: None }
04 b6 00 
# 01424 Instruction { source: "inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t12 Multiply inline_mul32_64_mul16_32_11_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0xb7), Constant8(0x00=0)], resolved: None }
04 b7 00 
# inline_mul32_64_mul16_32_11_t16 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 01427 Instruction { source: "inline_mul32_64_mul16_32_11_t16 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xa9), Register(0xbd)], resolved: None }
0b a9 bd 
# inline_mul32_64_mul16_32_11_t15 U32 <- inline_mul32_64_mul16_32_11_t16 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 0142a Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_11_t15 U32 <- inline_mul32_64_mul16_32_11_t16 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0xa8), Constant32(0x00000000=0)], resolved: None }
20 a8 00 00 00 00 
# 01430 Instruction { source: "inline_mul32_64_mul16_32_11_t15 U32 <- inline_mul32_64_mul16_32_11_t16 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xbd), Register(0xa8)], resolved: None }
0b bd a8 
# inline_mul32_64_mul16_32_11_t17 <- inline_mul32_64_mul16_32_11_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_t17 <- inline_mul32_64_mul16_32_11_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# inline_mul32_64_mul16_32_11_e <- inline_mul32_64_mul16_32_11_t15 Multiply inline_mul32_64_mul16_32_11_t17
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))"] }
# 01433 Instruction { source: "inline_mul32_64_mul16_32_11_e <- inline_mul32_64_mul16_32_11_t15 Multiply inline_mul32_64_mul16_32_11_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0xa8), Register(0xac), Register(0xa8)], resolved: None }
11 a8 ac a8 
# 01437 Instruction { source: "inline_mul32_64_mul16_32_11_e <- inline_mul32_64_mul16_32_11_t15 Multiply inline_mul32_64_mul16_32_11_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0xaa), Constant8(0x00=0)], resolved: None }
04 aa 00 
# 0143a Instruction { source: "inline_mul32_64_mul16_32_11_e <- inline_mul32_64_mul16_32_11_t15 Multiply inline_mul32_64_mul16_32_11_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0xab), Constant8(0x00=0)], resolved: None }
04 ab 00 
# inline_mul32_64_mul16_32_11_t18 <- inline_mul32_64_mul16_32_11_d U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 0143d Instruction { source: "inline_mul32_64_mul16_32_11_t18 <- inline_mul32_64_mul16_32_11_d U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0xb4), Register(0xac)], resolved: None }
21 b4 ac 
# inline_mul32_64_mul16_32_11_t19 <- inline_mul32_64_mul16_32_11_e U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"e\")", "Ident(\"e\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_t19 <- inline_mul32_64_mul16_32_11_e U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"e\\\")\", \"Ident(\\\"e\\\")\"] }", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t18 Add inline_mul32_64_mul16_32_11_t19
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))"] }
# 01440 Instruction { source: "inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t18 Add inline_mul32_64_mul16_32_11_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01441 Instruction { source: "inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t18 Add inline_mul32_64_mul16_32_11_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0xac), Register(0xa8), Register(0xb4)], resolved: None }
30 ac a8 b4 
# 01445 Instruction { source: "inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t18 Add inline_mul32_64_mul16_32_11_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_mul32_64_mul16_32_11_t20 <- inline_mul32_64_mul16_32_11_d[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }", "Index(\"d\", Number(U8, 2))", "Index(\"d\", Number(U8, 2))"] }
# 01446 Instruction { source: "inline_mul32_64_mul16_32_11_t20 <- inline_mul32_64_mul16_32_11_d[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\", \"Index(\\\"d\\\", Number(U8, 2))\", \"Index(\\\"d\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0xb6), Register(0xbd)], resolved: None }
0b b6 bd 
# inline_mul32_64_mul16_32_11_d[0x03..0x04] <- inline_mul32_64_mul16_32_11_t20 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }"] }
# 01449 Instruction { source: "inline_mul32_64_mul16_32_11_d[0x03..0x04] <- inline_mul32_64_mul16_32_11_t20 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\"] }", opcode: Copy8, args: [Register(0xbd), Register(0xb7)], resolved: None }
0b bd b7 
# inline_mul32_64_mul16_32_11_t21 <- inline_mul32_64_mul16_32_11_d[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }", "Index(\"d\", Number(U8, 1))", "Index(\"d\", Number(U8, 1))"] }
# 0144c Instruction { source: "inline_mul32_64_mul16_32_11_t21 <- inline_mul32_64_mul16_32_11_d[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\", \"Index(\\\"d\\\", Number(U8, 1))\", \"Index(\\\"d\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xb5), Register(0xbd)], resolved: None }
0b b5 bd 
# inline_mul32_64_mul16_32_11_d[0x02..0x03] <- inline_mul32_64_mul16_32_11_t21 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }"] }
# 0144f Instruction { source: "inline_mul32_64_mul16_32_11_d[0x02..0x03] <- inline_mul32_64_mul16_32_11_t21 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xbd), Register(0xb6)], resolved: None }
0b bd b6 
# inline_mul32_64_mul16_32_11_t22 <- inline_mul32_64_mul16_32_11_d[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }", "Index(\"d\", Number(U8, 0))", "Index(\"d\", Number(U8, 0))"] }
# 01452 Instruction { source: "inline_mul32_64_mul16_32_11_t22 <- inline_mul32_64_mul16_32_11_d[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\", \"Index(\\\"d\\\", Number(U8, 0))\", \"Index(\\\"d\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0xb4), Register(0xbd)], resolved: None }
0b b4 bd 
# inline_mul32_64_mul16_32_11_d[0x01..0x02] <- inline_mul32_64_mul16_32_11_t22 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }"] }
# 01455 Instruction { source: "inline_mul32_64_mul16_32_11_d[0x01..0x02] <- inline_mul32_64_mul16_32_11_t22 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0xbd), Register(0xb5)], resolved: None }
0b bd b5 
# inline_mul32_64_mul16_32_11_t23 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 01458 Instruction { source: "inline_mul32_64_mul16_32_11_t23 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0xbd), Constant8(0x00=0)], resolved: None }
04 bd 00 
# inline_mul32_64_mul16_32_11_d[0x00..0x01] <- inline_mul32_64_mul16_32_11_t23 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 0145b Instruction { source: "inline_mul32_64_mul16_32_11_d[0x00..0x01] <- inline_mul32_64_mul16_32_11_t23 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0xbd), Register(0xb4)], resolved: None }
0b bd b4 
# inline_mul32_64_mul16_32_11_t25 <- inline_mul32_64_mul16_32_11_c U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# 0145e Instruction { source: "inline_mul32_64_mul16_32_11_t25 <- inline_mul32_64_mul16_32_11_c U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0xb0), Register(0xa8)], resolved: None }
21 b0 a8 
# inline_mul32_64_mul16_32_11_t26 <- inline_mul32_64_mul16_32_11_d U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 01461 Instruction { source: "inline_mul32_64_mul16_32_11_t26 <- inline_mul32_64_mul16_32_11_d U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0xb4), Register(0xac)], resolved: None }
21 b4 ac 
# inline_mul32_64_mul16_32_11_t24 <- inline_mul32_64_mul16_32_11_t25 Add inline_mul32_64_mul16_32_11_t26
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))"] }
# 01464 Instruction { source: "inline_mul32_64_mul16_32_11_t24 <- inline_mul32_64_mul16_32_11_t25 Add inline_mul32_64_mul16_32_11_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01465 Instruction { source: "inline_mul32_64_mul16_32_11_t24 <- inline_mul32_64_mul16_32_11_t25 Add inline_mul32_64_mul16_32_11_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0xa8), Register(0xac), Register(0xa8)], resolved: None }
30 a8 ac a8 
# 01469 Instruction { source: "inline_mul32_64_mul16_32_11_t24 <- inline_mul32_64_mul16_32_11_t25 Add inline_mul32_64_mul16_32_11_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t12 <- inline_mul32_64_mul16_32_11_t24 U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# optimized away noop copy Instruction { source: "t12 <- inline_mul32_64_mul16_32_11_t24 U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# goto inline_mul32_64_mul16_32_11_function_end_mul16_32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_mul32_64_mul16_32_11_function_end_mul16_32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_mul32_64_mul16_32_11_function_end_mul16_32)], resolved: None }
# :inline_mul32_64_mul16_32_11_function_end_mul16_32
# 	SourceContext { contexts: [] }
# inline_mul32_64_mul16_32_11_function_end_mul16_32
# mem[t9] <- t12 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] }) }"] }
# 0146a Instruction { source: "mem[t9] <- t12 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] }) }\"] }", opcode: Store32_1, args: [Register(0xa8), Register(0xd0)], resolved: None }
23 a8 d0 
# 0146d Instruction { source: "mem[t9] <- t12 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] }) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# temp_lo <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"temp_lo\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }", "Number(USIZE, 0)"] }
# 0146e Instruction { source: "temp_lo <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"temp_lo\\\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0xd4), Constant32(0x00000000=0)], resolved: None }
20 d4 00 00 00 00 
# temp_hi <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"temp_hi\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }", "Number(USIZE, 0)"] }
# 01474 Instruction { source: "temp_hi <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"temp_hi\\\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0xd0), Constant32(0x00000000=0)], resolved: None }
20 d0 00 00 00 00 
# t15 <- a_hi U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })", "Ident(\"a_hi\")", "Ident(\"a_hi\")"] }
# optimized away noop copy Instruction { source: "t15 <- a_hi U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"temp\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] })\", \"Ident(\\\"a_hi\\\")\", \"Ident(\\\"a_hi\\\")\"] }", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# t16 <- b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "t16 <- b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"temp\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x9c), Register(0x9c)], resolved: None }
# inline_mul32_64_mul16_32_12_a <- t15 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_12_a <- t15 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"temp\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# inline_mul32_64_mul16_32_12_b <- t16 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_12_b <- t16 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"temp\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0x9c), Register(0x9c)], resolved: None }
# inline_mul32_64_mul16_32_12_t0 <- inline_mul32_64_mul16_32_12_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_12_t0 <- inline_mul32_64_mul16_32_12_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# inline_mul32_64_mul16_32_12_t1 <- inline_mul32_64_mul16_32_12_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_12_t1 <- inline_mul32_64_mul16_32_12_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x9c), Register(0x9c)], resolved: None }
# inline_mul32_64_mul16_32_12_c <- inline_mul32_64_mul16_32_12_t0 Multiply inline_mul32_64_mul16_32_12_t1
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))"] }
# 0147a Instruction { source: "inline_mul32_64_mul16_32_12_c <- inline_mul32_64_mul16_32_12_t0 Multiply inline_mul32_64_mul16_32_12_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0x98), Register(0x9c), Register(0xa8)], resolved: None }
11 98 9c a8 
# 0147e Instruction { source: "inline_mul32_64_mul16_32_12_c <- inline_mul32_64_mul16_32_12_t0 Multiply inline_mul32_64_mul16_32_12_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0xaa), Constant8(0x00=0)], resolved: None }
04 aa 00 
# 01481 Instruction { source: "inline_mul32_64_mul16_32_12_c <- inline_mul32_64_mul16_32_12_t0 Multiply inline_mul32_64_mul16_32_12_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0xab), Constant8(0x00=0)], resolved: None }
04 ab 00 
# inline_mul32_64_mul16_32_12_t3 <- inline_mul32_64_mul16_32_12_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 01484 Instruction { source: "inline_mul32_64_mul16_32_12_t3 <- inline_mul32_64_mul16_32_12_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x99), Register(0xc1)], resolved: None }
0b 99 c1 
# inline_mul32_64_mul16_32_12_t2 U32 <- inline_mul32_64_mul16_32_12_t3 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 01487 Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_12_t2 U32 <- inline_mul32_64_mul16_32_12_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0xac), Constant32(0x00000000=0)], resolved: None }
20 ac 00 00 00 00 
# 0148d Instruction { source: "inline_mul32_64_mul16_32_12_t2 U32 <- inline_mul32_64_mul16_32_12_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xc1), Register(0xac)], resolved: None }
0b c1 ac 
# inline_mul32_64_mul16_32_12_t5 <- inline_mul32_64_mul16_32_12_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 01490 Instruction { source: "inline_mul32_64_mul16_32_12_t5 <- inline_mul32_64_mul16_32_12_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x9d), Register(0xc0)], resolved: None }
0b 9d c0 
# inline_mul32_64_mul16_32_12_t4 U32 <- inline_mul32_64_mul16_32_12_t5 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 01493 Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_12_t4 U32 <- inline_mul32_64_mul16_32_12_t5 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0xb0), Constant32(0x00000000=0)], resolved: None }
20 b0 00 00 00 00 
# 01499 Instruction { source: "inline_mul32_64_mul16_32_12_t4 U32 <- inline_mul32_64_mul16_32_12_t5 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xc0), Register(0xb0)], resolved: None }
0b c0 b0 
# inline_mul32_64_mul16_32_12_f <- inline_mul32_64_mul16_32_12_t2 Multiply inline_mul32_64_mul16_32_12_t4
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 0149c Instruction { source: "inline_mul32_64_mul16_32_12_f <- inline_mul32_64_mul16_32_12_t2 Multiply inline_mul32_64_mul16_32_12_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0xac), Register(0xb0), Register(0xac)], resolved: None }
11 ac b0 ac 
# 014a0 Instruction { source: "inline_mul32_64_mul16_32_12_f <- inline_mul32_64_mul16_32_12_t2 Multiply inline_mul32_64_mul16_32_12_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0xae), Constant8(0x00=0)], resolved: None }
04 ae 00 
# 014a3 Instruction { source: "inline_mul32_64_mul16_32_12_f <- inline_mul32_64_mul16_32_12_t2 Multiply inline_mul32_64_mul16_32_12_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0xaf), Constant8(0x00=0)], resolved: None }
04 af 00 
# inline_mul32_64_mul16_32_12_t6 <- inline_mul32_64_mul16_32_12_f[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }", "Index(\"f\", Number(U8, 1))", "Index(\"f\", Number(U8, 1))"] }
# 014a6 Instruction { source: "inline_mul32_64_mul16_32_12_t6 <- inline_mul32_64_mul16_32_12_f[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\", \"Index(\\\"f\\\", Number(U8, 1))\", \"Index(\\\"f\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xad), Register(0xbc)], resolved: None }
0b ad bc 
# inline_mul32_64_mul16_32_12_f[0x03..0x04] <- inline_mul32_64_mul16_32_12_t6 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }"] }
# 014a9 Instruction { source: "inline_mul32_64_mul16_32_12_f[0x03..0x04] <- inline_mul32_64_mul16_32_12_t6 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xbc), Register(0xaf)], resolved: None }
0b bc af 
# inline_mul32_64_mul16_32_12_t7 <- inline_mul32_64_mul16_32_12_f[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }", "Index(\"f\", Number(U8, 0))", "Index(\"f\", Number(U8, 0))"] }
# 014ac Instruction { source: "inline_mul32_64_mul16_32_12_t7 <- inline_mul32_64_mul16_32_12_f[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\", \"Index(\\\"f\\\", Number(U8, 0))\", \"Index(\\\"f\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0xac), Register(0xbc)], resolved: None }
0b ac bc 
# inline_mul32_64_mul16_32_12_f[0x02..0x03] <- inline_mul32_64_mul16_32_12_t7 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }"] }
# 014af Instruction { source: "inline_mul32_64_mul16_32_12_f[0x02..0x03] <- inline_mul32_64_mul16_32_12_t7 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0xbc), Register(0xae)], resolved: None }
0b bc ae 
# inline_mul32_64_mul16_32_12_t8 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 014b2 Instruction { source: "inline_mul32_64_mul16_32_12_t8 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0xc2), Constant8(0x00=0)], resolved: None }
04 c2 00 
# inline_mul32_64_mul16_32_12_f[0x01..0x02] <- inline_mul32_64_mul16_32_12_t8 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }"] }
# 014b5 Instruction { source: "inline_mul32_64_mul16_32_12_f[0x01..0x02] <- inline_mul32_64_mul16_32_12_t8 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0xc2), Register(0xad)], resolved: None }
0b c2 ad 
# inline_mul32_64_mul16_32_12_t9 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 014b8 Instruction { source: "inline_mul32_64_mul16_32_12_t9 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0xc2), Constant8(0x00=0)], resolved: None }
04 c2 00 
# inline_mul32_64_mul16_32_12_f[0x00..0x01] <- inline_mul32_64_mul16_32_12_t9 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 014bb Instruction { source: "inline_mul32_64_mul16_32_12_f[0x00..0x01] <- inline_mul32_64_mul16_32_12_t9 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0xc2), Register(0xac)], resolved: None }
0b c2 ac 
# inline_mul32_64_mul16_32_12_t10 <- inline_mul32_64_mul16_32_12_c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_12_t10 <- inline_mul32_64_mul16_32_12_c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# inline_mul32_64_mul16_32_12_t11 <- inline_mul32_64_mul16_32_12_f U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"f\")", "Ident(\"f\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_12_t11 <- inline_mul32_64_mul16_32_12_f U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"f\\\")\", \"Ident(\\\"f\\\")\"] }", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# inline_mul32_64_mul16_32_12_c <- inline_mul32_64_mul16_32_12_t10 Add inline_mul32_64_mul16_32_12_t11
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))"] }
# 014be Instruction { source: "inline_mul32_64_mul16_32_12_c <- inline_mul32_64_mul16_32_12_t10 Add inline_mul32_64_mul16_32_12_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 014bf Instruction { source: "inline_mul32_64_mul16_32_12_c <- inline_mul32_64_mul16_32_12_t10 Add inline_mul32_64_mul16_32_12_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0xa8), Register(0xac), Register(0xa8)], resolved: None }
30 a8 ac a8 
# 014c3 Instruction { source: "inline_mul32_64_mul16_32_12_c <- inline_mul32_64_mul16_32_12_t10 Add inline_mul32_64_mul16_32_12_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_mul32_64_mul16_32_12_t12 <- inline_mul32_64_mul16_32_12_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_12_t12 <- inline_mul32_64_mul16_32_12_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# inline_mul32_64_mul16_32_12_t14 <- inline_mul32_64_mul16_32_12_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 014c4 Instruction { source: "inline_mul32_64_mul16_32_12_t14 <- inline_mul32_64_mul16_32_12_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x9d), Register(0xc0)], resolved: None }
0b 9d c0 
# inline_mul32_64_mul16_32_12_t13 U32 <- inline_mul32_64_mul16_32_12_t14 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 014c7 Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_12_t13 U32 <- inline_mul32_64_mul16_32_12_t14 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0xac), Constant32(0x00000000=0)], resolved: None }
20 ac 00 00 00 00 
# 014cd Instruction { source: "inline_mul32_64_mul16_32_12_t13 U32 <- inline_mul32_64_mul16_32_12_t14 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xc0), Register(0xac)], resolved: None }
0b c0 ac 
# inline_mul32_64_mul16_32_12_d <- inline_mul32_64_mul16_32_12_t12 Multiply inline_mul32_64_mul16_32_12_t13
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 014d0 Instruction { source: "inline_mul32_64_mul16_32_12_d <- inline_mul32_64_mul16_32_12_t12 Multiply inline_mul32_64_mul16_32_12_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0x98), Register(0xac), Register(0xac)], resolved: None }
11 98 ac ac 
# 014d4 Instruction { source: "inline_mul32_64_mul16_32_12_d <- inline_mul32_64_mul16_32_12_t12 Multiply inline_mul32_64_mul16_32_12_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0xae), Constant8(0x00=0)], resolved: None }
04 ae 00 
# 014d7 Instruction { source: "inline_mul32_64_mul16_32_12_d <- inline_mul32_64_mul16_32_12_t12 Multiply inline_mul32_64_mul16_32_12_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0xaf), Constant8(0x00=0)], resolved: None }
04 af 00 
# inline_mul32_64_mul16_32_12_t16 <- inline_mul32_64_mul16_32_12_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 014da Instruction { source: "inline_mul32_64_mul16_32_12_t16 <- inline_mul32_64_mul16_32_12_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x99), Register(0xc1)], resolved: None }
0b 99 c1 
# inline_mul32_64_mul16_32_12_t15 U32 <- inline_mul32_64_mul16_32_12_t16 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 014dd Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_12_t15 U32 <- inline_mul32_64_mul16_32_12_t16 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x98), Constant32(0x00000000=0)], resolved: None }
20 98 00 00 00 00 
# 014e3 Instruction { source: "inline_mul32_64_mul16_32_12_t15 U32 <- inline_mul32_64_mul16_32_12_t16 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xc1), Register(0x98)], resolved: None }
0b c1 98 
# inline_mul32_64_mul16_32_12_t17 <- inline_mul32_64_mul16_32_12_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_12_t17 <- inline_mul32_64_mul16_32_12_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x9c), Register(0x9c)], resolved: None }
# inline_mul32_64_mul16_32_12_e <- inline_mul32_64_mul16_32_12_t15 Multiply inline_mul32_64_mul16_32_12_t17
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))"] }
# 014e6 Instruction { source: "inline_mul32_64_mul16_32_12_e <- inline_mul32_64_mul16_32_12_t15 Multiply inline_mul32_64_mul16_32_12_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0x98), Register(0x9c), Register(0x98)], resolved: None }
11 98 9c 98 
# 014ea Instruction { source: "inline_mul32_64_mul16_32_12_e <- inline_mul32_64_mul16_32_12_t15 Multiply inline_mul32_64_mul16_32_12_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x9a), Constant8(0x00=0)], resolved: None }
04 9a 00 
# 014ed Instruction { source: "inline_mul32_64_mul16_32_12_e <- inline_mul32_64_mul16_32_12_t15 Multiply inline_mul32_64_mul16_32_12_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x9b), Constant8(0x00=0)], resolved: None }
04 9b 00 
# inline_mul32_64_mul16_32_12_t18 <- inline_mul32_64_mul16_32_12_d U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 014f0 Instruction { source: "inline_mul32_64_mul16_32_12_t18 <- inline_mul32_64_mul16_32_12_d U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0xac), Register(0x9c)], resolved: None }
21 ac 9c 
# inline_mul32_64_mul16_32_12_t19 <- inline_mul32_64_mul16_32_12_e U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"e\")", "Ident(\"e\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_12_t19 <- inline_mul32_64_mul16_32_12_e U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"e\\\")\", \"Ident(\\\"e\\\")\"] }", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# inline_mul32_64_mul16_32_12_d <- inline_mul32_64_mul16_32_12_t18 Add inline_mul32_64_mul16_32_12_t19
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))"] }
# 014f3 Instruction { source: "inline_mul32_64_mul16_32_12_d <- inline_mul32_64_mul16_32_12_t18 Add inline_mul32_64_mul16_32_12_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 014f4 Instruction { source: "inline_mul32_64_mul16_32_12_d <- inline_mul32_64_mul16_32_12_t18 Add inline_mul32_64_mul16_32_12_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x9c), Register(0x98), Register(0xac)], resolved: None }
30 9c 98 ac 
# 014f8 Instruction { source: "inline_mul32_64_mul16_32_12_d <- inline_mul32_64_mul16_32_12_t18 Add inline_mul32_64_mul16_32_12_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_mul32_64_mul16_32_12_t20 <- inline_mul32_64_mul16_32_12_d[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }", "Index(\"d\", Number(U8, 2))", "Index(\"d\", Number(U8, 2))"] }
# 014f9 Instruction { source: "inline_mul32_64_mul16_32_12_t20 <- inline_mul32_64_mul16_32_12_d[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\", \"Index(\\\"d\\\", Number(U8, 2))\", \"Index(\\\"d\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0xae), Register(0xc1)], resolved: None }
0b ae c1 
# inline_mul32_64_mul16_32_12_d[0x03..0x04] <- inline_mul32_64_mul16_32_12_t20 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }"] }
# 014fc Instruction { source: "inline_mul32_64_mul16_32_12_d[0x03..0x04] <- inline_mul32_64_mul16_32_12_t20 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\"] }", opcode: Copy8, args: [Register(0xc1), Register(0xaf)], resolved: None }
0b c1 af 
# inline_mul32_64_mul16_32_12_t21 <- inline_mul32_64_mul16_32_12_d[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }", "Index(\"d\", Number(U8, 1))", "Index(\"d\", Number(U8, 1))"] }
# 014ff Instruction { source: "inline_mul32_64_mul16_32_12_t21 <- inline_mul32_64_mul16_32_12_d[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\", \"Index(\\\"d\\\", Number(U8, 1))\", \"Index(\\\"d\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xad), Register(0xc1)], resolved: None }
0b ad c1 
# inline_mul32_64_mul16_32_12_d[0x02..0x03] <- inline_mul32_64_mul16_32_12_t21 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }"] }
# 01502 Instruction { source: "inline_mul32_64_mul16_32_12_d[0x02..0x03] <- inline_mul32_64_mul16_32_12_t21 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xc1), Register(0xae)], resolved: None }
0b c1 ae 
# inline_mul32_64_mul16_32_12_t22 <- inline_mul32_64_mul16_32_12_d[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }", "Index(\"d\", Number(U8, 0))", "Index(\"d\", Number(U8, 0))"] }
# 01505 Instruction { source: "inline_mul32_64_mul16_32_12_t22 <- inline_mul32_64_mul16_32_12_d[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\", \"Index(\\\"d\\\", Number(U8, 0))\", \"Index(\\\"d\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0xac), Register(0xc1)], resolved: None }
0b ac c1 
# inline_mul32_64_mul16_32_12_d[0x01..0x02] <- inline_mul32_64_mul16_32_12_t22 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }"] }
# 01508 Instruction { source: "inline_mul32_64_mul16_32_12_d[0x01..0x02] <- inline_mul32_64_mul16_32_12_t22 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0xc1), Register(0xad)], resolved: None }
0b c1 ad 
# inline_mul32_64_mul16_32_12_t23 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0150b Instruction { source: "inline_mul32_64_mul16_32_12_t23 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0xc1), Constant8(0x00=0)], resolved: None }
04 c1 00 
# inline_mul32_64_mul16_32_12_d[0x00..0x01] <- inline_mul32_64_mul16_32_12_t23 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 0150e Instruction { source: "inline_mul32_64_mul16_32_12_d[0x00..0x01] <- inline_mul32_64_mul16_32_12_t23 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0xc1), Register(0xac)], resolved: None }
0b c1 ac 
# inline_mul32_64_mul16_32_12_t25 <- inline_mul32_64_mul16_32_12_c U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# 01511 Instruction { source: "inline_mul32_64_mul16_32_12_t25 <- inline_mul32_64_mul16_32_12_c U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0xa8), Register(0x98)], resolved: None }
21 a8 98 
# inline_mul32_64_mul16_32_12_t26 <- inline_mul32_64_mul16_32_12_d U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 01514 Instruction { source: "inline_mul32_64_mul16_32_12_t26 <- inline_mul32_64_mul16_32_12_d U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0xac), Register(0x9c)], resolved: None }
21 ac 9c 
# inline_mul32_64_mul16_32_12_t24 <- inline_mul32_64_mul16_32_12_t25 Add inline_mul32_64_mul16_32_12_t26
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))"] }
# 01517 Instruction { source: "inline_mul32_64_mul16_32_12_t24 <- inline_mul32_64_mul16_32_12_t25 Add inline_mul32_64_mul16_32_12_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01518 Instruction { source: "inline_mul32_64_mul16_32_12_t24 <- inline_mul32_64_mul16_32_12_t25 Add inline_mul32_64_mul16_32_12_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x98), Register(0x9c), Register(0x98)], resolved: None }
30 98 9c 98 
# 0151c Instruction { source: "inline_mul32_64_mul16_32_12_t24 <- inline_mul32_64_mul16_32_12_t25 Add inline_mul32_64_mul16_32_12_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# temp <- inline_mul32_64_mul16_32_12_t24 U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# optimized away noop copy Instruction { source: "temp <- inline_mul32_64_mul16_32_12_t24 U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# goto inline_mul32_64_mul16_32_12_function_end_mul16_32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_mul32_64_mul16_32_12_function_end_mul16_32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_mul32_64_mul16_32_12_function_end_mul16_32)], resolved: None }
# :inline_mul32_64_mul16_32_12_function_end_mul16_32
# 	SourceContext { contexts: [] }
# inline_mul32_64_mul16_32_12_function_end_mul16_32
# t17 <- temp[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_lo\", Number(U8, 2)), var_type: None, value: Index(\"temp\", Number(U8, 0)) }", "Index(\"temp\", Number(U8, 0))", "Index(\"temp\", Number(U8, 0))"] }
# 0151d Instruction { source: "t17 <- temp[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_lo\\\", Number(U8, 2)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 0)) }\", \"Index(\\\"temp\\\", Number(U8, 0))\", \"Index(\\\"temp\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x98), Register(0xc1)], resolved: None }
0b 98 c1 
# temp_lo[0x02..0x03] <- t17 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_lo\", Number(U8, 2)), var_type: None, value: Index(\"temp\", Number(U8, 0)) }"] }
# 01520 Instruction { source: "temp_lo[0x02..0x03] <- t17 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_lo\\\", Number(U8, 2)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0xc1), Register(0xd6)], resolved: None }
0b c1 d6 
# t18 <- temp[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_lo\", Number(U8, 3)), var_type: None, value: Index(\"temp\", Number(U8, 1)) }", "Index(\"temp\", Number(U8, 1))", "Index(\"temp\", Number(U8, 1))"] }
# 01523 Instruction { source: "t18 <- temp[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_lo\\\", Number(U8, 3)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 1)) }\", \"Index(\\\"temp\\\", Number(U8, 1))\", \"Index(\\\"temp\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x99), Register(0xc1)], resolved: None }
0b 99 c1 
# temp_lo[0x03..0x04] <- t18 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_lo\", Number(U8, 3)), var_type: None, value: Index(\"temp\", Number(U8, 1)) }"] }
# 01526 Instruction { source: "temp_lo[0x03..0x04] <- t18 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_lo\\\", Number(U8, 3)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xc1), Register(0xd7)], resolved: None }
0b c1 d7 
# t19 <- temp[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_hi\", Number(U8, 0)), var_type: None, value: Index(\"temp\", Number(U8, 2)) }", "Index(\"temp\", Number(U8, 2))", "Index(\"temp\", Number(U8, 2))"] }
# 01529 Instruction { source: "t19 <- temp[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_hi\\\", Number(U8, 0)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 2)) }\", \"Index(\\\"temp\\\", Number(U8, 2))\", \"Index(\\\"temp\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x9a), Register(0xc1)], resolved: None }
0b 9a c1 
# temp_hi[0x00..0x01] <- t19 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_hi\", Number(U8, 0)), var_type: None, value: Index(\"temp\", Number(U8, 2)) }"] }
# 0152c Instruction { source: "temp_hi[0x00..0x01] <- t19 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_hi\\\", Number(U8, 0)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 2)) }\"] }", opcode: Copy8, args: [Register(0xc1), Register(0xd0)], resolved: None }
0b c1 d0 
# t20 <- temp[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_hi\", Number(U8, 1)), var_type: None, value: Index(\"temp\", Number(U8, 3)) }", "Index(\"temp\", Number(U8, 3))", "Index(\"temp\", Number(U8, 3))"] }
# 0152f Instruction { source: "t20 <- temp[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_hi\\\", Number(U8, 1)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 3)) }\", \"Index(\\\"temp\\\", Number(U8, 3))\", \"Index(\\\"temp\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0x9b), Register(0xc1)], resolved: None }
0b 9b c1 
# temp_hi[0x01..0x02] <- t20 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_hi\", Number(U8, 1)), var_type: None, value: Index(\"temp\", Number(U8, 3)) }"] }
# 01532 Instruction { source: "temp_hi[0x01..0x02] <- t20 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_hi\\\", Number(U8, 1)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 3)) }\"] }", opcode: Copy8, args: [Register(0xc1), Register(0xd1)], resolved: None }
0b c1 d1 
# t21 <- __frame_pointer U32
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"temp64\", \"lo\"), var_type: None, value: Ident(\"temp_lo\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident(\"__frame_pointer\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident(\"__frame_pointer\") }", "Ident(\"__frame_pointer\")"] }
# 01535 Instruction { source: "t21 <- __frame_pointer U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"lo\\\"), var_type: None, value: Ident(\\\"temp_lo\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident(\\\"__frame_pointer\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident(\\\"__frame_pointer\\\") }\", \"Ident(\\\"__frame_pointer\\\")\"] }", opcode: Copy32, args: [Register(0x0c), Register(0xc8)], resolved: None }
21 0c c8 
# t22 <- temp_lo U32
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"temp64\", \"lo\"), var_type: None, value: Ident(\"temp_lo\") }", "Ident(\"temp_lo\")", "Ident(\"temp_lo\")"] }
# 01538 Instruction { source: "t22 <- temp_lo U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"lo\\\"), var_type: None, value: Ident(\\\"temp_lo\\\") }\", \"Ident(\\\"temp_lo\\\")\", \"Ident(\\\"temp_lo\\\")\"] }", opcode: Copy32, args: [Register(0xd4), Register(0x98)], resolved: None }
21 d4 98 
# mem[t21] <- t22 U32
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"temp64\", \"lo\"), var_type: None, value: Ident(\"temp_lo\") }"] }
# 0153b Instruction { source: "mem[t21] <- t22 U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"lo\\\"), var_type: None, value: Ident(\\\"temp_lo\\\") }\"] }", opcode: Store32_1, args: [Register(0x98), Register(0xc8)], resolved: None }
23 98 c8 
# 0153e Instruction { source: "mem[t21] <- t22 U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"lo\\\"), var_type: None, value: Ident(\\\"temp_lo\\\") }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# t24 <- __frame_pointer U32
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"temp64\", \"hi\"), var_type: None, value: Ident(\"temp_hi\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4))", "Ident(\"__frame_pointer\")", "Ident(\"__frame_pointer\")"] }
# 0153f Instruction { source: "t24 <- __frame_pointer U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"hi\\\"), var_type: None, value: Ident(\\\"temp_hi\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4))\", \"Ident(\\\"__frame_pointer\\\")\", \"Ident(\\\"__frame_pointer\\\")\"] }", opcode: Copy32, args: [Register(0x0c), Register(0xc8)], resolved: None }
21 0c c8 
# t25 <- 0n4/0x00000004u32 
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"temp64\", \"hi\"), var_type: None, value: Ident(\"temp_hi\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 01542 Instruction { source: "t25 <- 0n4/0x00000004u32 \n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"hi\\\"), var_type: None, value: Ident(\\\"temp_hi\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: LoadImm32, args: [Register(0x98), Constant32(0x00000004=4)], resolved: None }
20 98 04 00 00 00 
# t23 <- t24 Add t25
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"temp64\", \"hi\"), var_type: None, value: Ident(\"temp_hi\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4))"] }
# 01548 Instruction { source: "t23 <- t24 Add t25\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"hi\\\"), var_type: None, value: Ident(\\\"temp_hi\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01549 Instruction { source: "t23 <- t24 Add t25\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"hi\\\"), var_type: None, value: Ident(\\\"temp_hi\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0xc8), Register(0x98), Register(0x98)], resolved: None }
30 c8 98 98 
# 0154d Instruction { source: "t23 <- t24 Add t25\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"hi\\\"), var_type: None, value: Ident(\\\"temp_hi\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t26 <- temp_hi U32
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"temp64\", \"hi\"), var_type: None, value: Ident(\"temp_hi\") }", "Ident(\"temp_hi\")", "Ident(\"temp_hi\")"] }
# 0154e Instruction { source: "t26 <- temp_hi U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"hi\\\"), var_type: None, value: Ident(\\\"temp_hi\\\") }\", \"Ident(\\\"temp_hi\\\")\", \"Ident(\\\"temp_hi\\\")\"] }", opcode: Copy32, args: [Register(0xd0), Register(0x9c)], resolved: None }
21 d0 9c 
# mem[t23] <- t26 U32
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"temp64\", \"hi\"), var_type: None, value: Ident(\"temp_hi\") }"] }
# 01551 Instruction { source: "mem[t23] <- t26 U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"hi\\\"), var_type: None, value: Ident(\\\"temp_hi\\\") }\"] }", opcode: Store32_1, args: [Register(0x9c), Register(0x98)], resolved: None }
23 9c 98 
# 01554 Instruction { source: "mem[t23] <- t26 U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"hi\\\"), var_type: None, value: Ident(\\\"temp_hi\\\") }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# t28 <- c U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# 01555 Instruction { source: "t28 <- c U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0xa4), Register(0x98)], resolved: None }
21 a4 98 
# t31 <- __frame_pointer U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "AddressOf(Ident(\"temp64\"))", "AddressOf(Ident(\"temp64\"))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))", "Ident(\"__frame_pointer\")", "Ident(\"__frame_pointer\")"] }
# 01558 Instruction { source: "t31 <- __frame_pointer U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Ident(\\\"__frame_pointer\\\")\", \"Ident(\\\"__frame_pointer\\\")\"] }", opcode: Copy32, args: [Register(0x0c), Register(0xc8)], resolved: None }
21 0c c8 
# t32 <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "AddressOf(Ident(\"temp64\"))", "AddressOf(Ident(\"temp64\"))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 0155b Instruction { source: "t32 <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x9c), Constant32(0x00000000=0)], resolved: None }
20 9c 00 00 00 00 
# t30 <- t31 Add t32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "AddressOf(Ident(\"temp64\"))", "AddressOf(Ident(\"temp64\"))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))"] }
# 01561 Instruction { source: "t30 <- t31 Add t32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01562 Instruction { source: "t30 <- t31 Add t32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\"] }", opcode: AddCarry32_1, args: [Register(0xc8), Register(0x9c), Register(0x9c)], resolved: None }
30 c8 9c 9c 
# 01566 Instruction { source: "t30 <- t31 Add t32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t29 <- t30 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "AddressOf(Ident(\"temp64\"))", "AddressOf(Ident(\"temp64\"))"] }
# optimized away noop copy Instruction { source: "t29 <- t30 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"AddressOf(Ident(\\\"temp64\\\"))\"] }", opcode: Copy32, args: [Register(0x9c), Register(0x9c)], resolved: None }
# t33 <- c U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "t33 <- c U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# inline_mul32_64_add_U64_0_a <- t28 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_a <- t28 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\"] }", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# inline_mul32_64_add_U64_0_b <- t29 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_b <- t29 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\"] }", opcode: Copy32, args: [Register(0x9c), Register(0x9c)], resolved: None }
# inline_mul32_64_add_U64_0_c <- t33 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })"] }
# 01567 Instruction { source: "inline_mul32_64_add_U64_0_c <- t33 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\"] }", opcode: Copy32, args: [Register(0xa4), Register(0xa8)], resolved: None }
21 a4 a8 
# inline_mul32_64_add_U64_0_t0 <- inline_mul32_64_add_U64_0_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"lo\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\"a\", \"lo\") }", "PtrFieldDeref(\"a\", \"lo\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") } }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t0 <- inline_mul32_64_add_U64_0_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lo\\\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\\\"a\\\", \\\"lo\\\") }\", \"PtrFieldDeref(\\\"a\\\", \\\"lo\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# inline_mul32_64_add_U64_0_lo <- mem[inline_mul32_64_add_U64_0_t0] U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"lo\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\"a\", \"lo\") }", "PtrFieldDeref(\"a\", \"lo\")"] }
# 0156a Instruction { source: "inline_mul32_64_add_U64_0_lo <- mem[inline_mul32_64_add_U64_0_t0] U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lo\\\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\\\"a\\\", \\\"lo\\\") }\", \"PtrFieldDeref(\\\"a\\\", \\\"lo\\\")\"] }", opcode: Load32, args: [Register(0x98), Register(0xac)], resolved: None }
22 98 ac 
# inline_mul32_64_add_U64_0_t2 <- inline_mul32_64_add_U64_0_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t2 <- inline_mul32_64_add_U64_0_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# inline_mul32_64_add_U64_0_t3 <- 0n4/0x00000004u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 0156d Instruction { source: "inline_mul32_64_add_U64_0_t3 <- 0n4/0x00000004u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: LoadImm32, args: [Register(0xb0), Constant32(0x00000004=4)], resolved: None }
20 b0 04 00 00 00 
# inline_mul32_64_add_U64_0_t1 <- inline_mul32_64_add_U64_0_t2 Add inline_mul32_64_add_U64_0_t3
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))"] }
# 01573 Instruction { source: "inline_mul32_64_add_U64_0_t1 <- inline_mul32_64_add_U64_0_t2 Add inline_mul32_64_add_U64_0_t3\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01574 Instruction { source: "inline_mul32_64_add_U64_0_t1 <- inline_mul32_64_add_U64_0_t2 Add inline_mul32_64_add_U64_0_t3\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0xa8), Register(0xb0), Register(0xb0)], resolved: None }
30 a8 b0 b0 
# 01578 Instruction { source: "inline_mul32_64_add_U64_0_t1 <- inline_mul32_64_add_U64_0_t2 Add inline_mul32_64_add_U64_0_t3\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_mul32_64_add_U64_0_t7 <- inline_mul32_64_add_U64_0_a U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "PtrFieldDeref(\"a\", \"hi\")", "PtrFieldDeref(\"a\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4))", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t7 <- inline_mul32_64_add_U64_0_a U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4))\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# inline_mul32_64_add_U64_0_t8 <- 0n4/0x00000004u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "PtrFieldDeref(\"a\", \"hi\")", "PtrFieldDeref(\"a\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 01579 Instruction { source: "inline_mul32_64_add_U64_0_t8 <- 0n4/0x00000004u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: LoadImm32, args: [Register(0xb4), Constant32(0x00000004=4)], resolved: None }
20 b4 04 00 00 00 
# inline_mul32_64_add_U64_0_t6 <- inline_mul32_64_add_U64_0_t7 Add inline_mul32_64_add_U64_0_t8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "PtrFieldDeref(\"a\", \"hi\")", "PtrFieldDeref(\"a\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4))"] }
# 0157f Instruction { source: "inline_mul32_64_add_U64_0_t6 <- inline_mul32_64_add_U64_0_t7 Add inline_mul32_64_add_U64_0_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01580 Instruction { source: "inline_mul32_64_add_U64_0_t6 <- inline_mul32_64_add_U64_0_t7 Add inline_mul32_64_add_U64_0_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x98), Register(0xb4), Register(0xb4)], resolved: None }
30 98 b4 b4 
# 01584 Instruction { source: "inline_mul32_64_add_U64_0_t6 <- inline_mul32_64_add_U64_0_t7 Add inline_mul32_64_add_U64_0_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_mul32_64_add_U64_0_t5 <- mem[inline_mul32_64_add_U64_0_t6] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "PtrFieldDeref(\"a\", \"hi\")", "PtrFieldDeref(\"a\", \"hi\")"] }
# 01585 Instruction { source: "inline_mul32_64_add_U64_0_t5 <- mem[inline_mul32_64_add_U64_0_t6] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\"] }", opcode: Load32, args: [Register(0xb4), Register(0xb8)], resolved: None }
22 b4 b8 
# inline_mul32_64_add_U64_0_t11 <- inline_mul32_64_add_U64_0_b U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "PtrFieldDeref(\"b\", \"hi\")", "PtrFieldDeref(\"b\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4))", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t11 <- inline_mul32_64_add_U64_0_b U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4))\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x9c), Register(0x9c)], resolved: None }
# inline_mul32_64_add_U64_0_t12 <- 0n4/0x00000004u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "PtrFieldDeref(\"b\", \"hi\")", "PtrFieldDeref(\"b\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 01588 Instruction { source: "inline_mul32_64_add_U64_0_t12 <- 0n4/0x00000004u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: LoadImm32, args: [Register(0xb4), Constant32(0x00000004=4)], resolved: None }
20 b4 04 00 00 00 
# inline_mul32_64_add_U64_0_t10 <- inline_mul32_64_add_U64_0_t11 Add inline_mul32_64_add_U64_0_t12
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "PtrFieldDeref(\"b\", \"hi\")", "PtrFieldDeref(\"b\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4))"] }
# 0158e Instruction { source: "inline_mul32_64_add_U64_0_t10 <- inline_mul32_64_add_U64_0_t11 Add inline_mul32_64_add_U64_0_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0158f Instruction { source: "inline_mul32_64_add_U64_0_t10 <- inline_mul32_64_add_U64_0_t11 Add inline_mul32_64_add_U64_0_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x9c), Register(0xb4), Register(0xb4)], resolved: None }
30 9c b4 b4 
# 01593 Instruction { source: "inline_mul32_64_add_U64_0_t10 <- inline_mul32_64_add_U64_0_t11 Add inline_mul32_64_add_U64_0_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_mul32_64_add_U64_0_t9 <- mem[inline_mul32_64_add_U64_0_t10] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "PtrFieldDeref(\"b\", \"hi\")", "PtrFieldDeref(\"b\", \"hi\")"] }
# 01594 Instruction { source: "inline_mul32_64_add_U64_0_t9 <- mem[inline_mul32_64_add_U64_0_t10] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\"] }", opcode: Load32, args: [Register(0xb4), Register(0xb4)], resolved: None }
22 b4 b4 
# inline_mul32_64_add_U64_0_t4 <- inline_mul32_64_add_U64_0_t5 Add inline_mul32_64_add_U64_0_t9
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))"] }
# 01597 Instruction { source: "inline_mul32_64_add_U64_0_t4 <- inline_mul32_64_add_U64_0_t5 Add inline_mul32_64_add_U64_0_t9\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01598 Instruction { source: "inline_mul32_64_add_U64_0_t4 <- inline_mul32_64_add_U64_0_t5 Add inline_mul32_64_add_U64_0_t9\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0xb8), Register(0xb4), Register(0xb4)], resolved: None }
30 b8 b4 b4 
# 0159c Instruction { source: "inline_mul32_64_add_U64_0_t4 <- inline_mul32_64_add_U64_0_t5 Add inline_mul32_64_add_U64_0_t9\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# mem[inline_mul32_64_add_U64_0_t1] <- inline_mul32_64_add_U64_0_t4 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }"] }
# 0159d Instruction { source: "mem[inline_mul32_64_add_U64_0_t1] <- inline_mul32_64_add_U64_0_t4 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\"] }", opcode: Store32_1, args: [Register(0xb4), Register(0xb0)], resolved: None }
23 b4 b0 
# 015a0 Instruction { source: "mem[inline_mul32_64_add_U64_0_t1] <- inline_mul32_64_add_U64_0_t4 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_mul32_64_add_U64_0_t13 <- inline_mul32_64_add_U64_0_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t13 <- inline_mul32_64_add_U64_0_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# inline_mul32_64_add_U64_0_t16 <- inline_mul32_64_add_U64_0_a U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "PtrFieldDeref(\"a\", \"lo\")", "PtrFieldDeref(\"a\", \"lo\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") } }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t16 <- inline_mul32_64_add_U64_0_a U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"PtrFieldDeref(\\\"a\\\", \\\"lo\\\")\", \"PtrFieldDeref(\\\"a\\\", \\\"lo\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# inline_mul32_64_add_U64_0_t15 <- mem[inline_mul32_64_add_U64_0_t16] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "PtrFieldDeref(\"a\", \"lo\")", "PtrFieldDeref(\"a\", \"lo\")"] }
# 015a1 Instruction { source: "inline_mul32_64_add_U64_0_t15 <- mem[inline_mul32_64_add_U64_0_t16] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"PtrFieldDeref(\\\"a\\\", \\\"lo\\\")\", \"PtrFieldDeref(\\\"a\\\", \\\"lo\\\")\"] }", opcode: Load32, args: [Register(0x98), Register(0x98)], resolved: None }
22 98 98 
# inline_mul32_64_add_U64_0_t18 <- inline_mul32_64_add_U64_0_b U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "PtrFieldDeref(\"b\", \"lo\")", "PtrFieldDeref(\"b\", \"lo\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") } }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t18 <- inline_mul32_64_add_U64_0_b U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"PtrFieldDeref(\\\"b\\\", \\\"lo\\\")\", \"PtrFieldDeref(\\\"b\\\", \\\"lo\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x9c), Register(0x9c)], resolved: None }
# inline_mul32_64_add_U64_0_t17 <- mem[inline_mul32_64_add_U64_0_t18] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "PtrFieldDeref(\"b\", \"lo\")", "PtrFieldDeref(\"b\", \"lo\")"] }
# 015a4 Instruction { source: "inline_mul32_64_add_U64_0_t17 <- mem[inline_mul32_64_add_U64_0_t18] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"PtrFieldDeref(\\\"b\\\", \\\"lo\\\")\", \"PtrFieldDeref(\\\"b\\\", \\\"lo\\\")\"] }", opcode: Load32, args: [Register(0x9c), Register(0x9c)], resolved: None }
22 9c 9c 
# inline_mul32_64_add_U64_0_t14 <- inline_mul32_64_add_U64_0_t15 Add inline_mul32_64_add_U64_0_t17
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))"] }
# 015a7 Instruction { source: "inline_mul32_64_add_U64_0_t14 <- inline_mul32_64_add_U64_0_t15 Add inline_mul32_64_add_U64_0_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 015a8 Instruction { source: "inline_mul32_64_add_U64_0_t14 <- inline_mul32_64_add_U64_0_t15 Add inline_mul32_64_add_U64_0_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x98), Register(0x9c), Register(0x98)], resolved: None }
30 98 9c 98 
# 015ac Instruction { source: "inline_mul32_64_add_U64_0_t14 <- inline_mul32_64_add_U64_0_t15 Add inline_mul32_64_add_U64_0_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# mem[inline_mul32_64_add_U64_0_t13] <- inline_mul32_64_add_U64_0_t14 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }"] }
# 015ad Instruction { source: "mem[inline_mul32_64_add_U64_0_t13] <- inline_mul32_64_add_U64_0_t14 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\"] }", opcode: Store32_1, args: [Register(0x98), Register(0xa8)], resolved: None }
23 98 a8 
# 015b0 Instruction { source: "mem[inline_mul32_64_add_U64_0_t13] <- inline_mul32_64_add_U64_0_t14 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_mul32_64_add_U64_0_t20 <- inline_mul32_64_add_U64_0_c U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }])], else_block: [] }", "Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }", "PtrFieldDeref(\"c\", \"lo\")", "PtrFieldDeref(\"c\", \"lo\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# 015b1 Instruction { source: "inline_mul32_64_add_U64_0_t20 <- inline_mul32_64_add_U64_0_c U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\", \"PtrFieldDeref(\\\"c\\\", \\\"lo\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"lo\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0xa8), Register(0x98)], resolved: None }
21 a8 98 
# inline_mul32_64_add_U64_0_t19 <- mem[inline_mul32_64_add_U64_0_t20] U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }])], else_block: [] }", "Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }", "PtrFieldDeref(\"c\", \"lo\")", "PtrFieldDeref(\"c\", \"lo\")"] }
# 015b4 Instruction { source: "inline_mul32_64_add_U64_0_t19 <- mem[inline_mul32_64_add_U64_0_t20] U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\", \"PtrFieldDeref(\\\"c\\\", \\\"lo\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"lo\\\")\"] }", opcode: Load32, args: [Register(0x98), Register(0x98)], resolved: None }
22 98 98 
# inline_mul32_64_add_U64_0_t21 <- inline_mul32_64_add_U64_0_lo U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }])], else_block: [] }", "Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }", "Ident(\"lo\")", "Ident(\"lo\")"] }
# 015b7 Instruction { source: "inline_mul32_64_add_U64_0_t21 <- inline_mul32_64_add_U64_0_lo U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\", \"Ident(\\\"lo\\\")\", \"Ident(\\\"lo\\\")\"] }", opcode: Copy32, args: [Register(0xac), Register(0x9c)], resolved: None }
21 ac 9c 
# if inline_mul32_64_add_U64_0_t19 < inline_mul32_64_add_U64_0_t21 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }])], else_block: [] }", "Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }"] }
# 015ba Instruction { source: "if inline_mul32_64_add_U64_0_t19 < inline_mul32_64_add_U64_0_t21 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\"] }", opcode: Cmp8, args: [Register(0x9f), Register(0x9b)], resolved: None }
15 9f 9b 
# 015bd Instruction { source: "if inline_mul32_64_add_U64_0_t19 < inline_mul32_64_add_U64_0_t21 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x9e), Register(0x9a)], resolved: None }
16 9e 9a 
# 015c0 Instruction { source: "if inline_mul32_64_add_U64_0_t19 < inline_mul32_64_add_U64_0_t21 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x9d), Register(0x99)], resolved: None }
16 9d 99 
# 015c3 Instruction { source: "if inline_mul32_64_add_U64_0_t19 < inline_mul32_64_add_U64_0_t21 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x9c), Register(0x98)], resolved: None }
16 9c 98 
# 015c6 Instruction { source: "if inline_mul32_64_add_U64_0_t19 < inline_mul32_64_add_U64_0_t21 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\"] }", opcode: JcImm, args: [Label24(inline_mul32_64_add_U64_0_add_U64_if_else_0_2)], resolved: None }
71 ff 15 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_mul32_64_add_U64_0_t19 < inline_mul32_64_add_U64_0_t21 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\"] }", opcode: JmpImm, args: [Label24(inline_mul32_64_add_U64_0_add_U64_if_true_0_1)], resolved: None }
# :inline_mul32_64_add_U64_0_add_U64_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }])], else_block: [] }"] }
# inline_mul32_64_add_U64_0_add_U64_if_true_0_1
# inline_mul32_64_add_U64_0_t23 <- inline_mul32_64_add_U64_0_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# 015ca Instruction { source: "inline_mul32_64_add_U64_0_t23 <- inline_mul32_64_add_U64_0_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0xa8), Register(0x98)], resolved: None }
21 a8 98 
# inline_mul32_64_add_U64_0_t24 <- 0n4/0x00000004u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 015cd Instruction { source: "inline_mul32_64_add_U64_0_t24 <- 0n4/0x00000004u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: LoadImm32, args: [Register(0x9c), Constant32(0x00000004=4)], resolved: None }
20 9c 04 00 00 00 
# inline_mul32_64_add_U64_0_t22 <- inline_mul32_64_add_U64_0_t23 Add inline_mul32_64_add_U64_0_t24
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))"] }
# 015d3 Instruction { source: "inline_mul32_64_add_U64_0_t22 <- inline_mul32_64_add_U64_0_t23 Add inline_mul32_64_add_U64_0_t24\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 015d4 Instruction { source: "inline_mul32_64_add_U64_0_t22 <- inline_mul32_64_add_U64_0_t23 Add inline_mul32_64_add_U64_0_t24\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x98), Register(0x9c), Register(0x98)], resolved: None }
30 98 9c 98 
# 015d8 Instruction { source: "inline_mul32_64_add_U64_0_t22 <- inline_mul32_64_add_U64_0_t23 Add inline_mul32_64_add_U64_0_t24\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_mul32_64_add_U64_0_t28 <- inline_mul32_64_add_U64_0_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "PtrFieldDeref(\"c\", \"hi\")", "PtrFieldDeref(\"c\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# 015d9 Instruction { source: "inline_mul32_64_add_U64_0_t28 <- inline_mul32_64_add_U64_0_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0xa8), Register(0x9c)], resolved: None }
21 a8 9c 
# inline_mul32_64_add_U64_0_t29 <- 0n4/0x00000004u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "PtrFieldDeref(\"c\", \"hi\")", "PtrFieldDeref(\"c\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 015dc Instruction { source: "inline_mul32_64_add_U64_0_t29 <- 0n4/0x00000004u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: LoadImm32, args: [Register(0xa8), Constant32(0x00000004=4)], resolved: None }
20 a8 04 00 00 00 
# inline_mul32_64_add_U64_0_t27 <- inline_mul32_64_add_U64_0_t28 Add inline_mul32_64_add_U64_0_t29
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "PtrFieldDeref(\"c\", \"hi\")", "PtrFieldDeref(\"c\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))"] }
# 015e2 Instruction { source: "inline_mul32_64_add_U64_0_t27 <- inline_mul32_64_add_U64_0_t28 Add inline_mul32_64_add_U64_0_t29\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 015e3 Instruction { source: "inline_mul32_64_add_U64_0_t27 <- inline_mul32_64_add_U64_0_t28 Add inline_mul32_64_add_U64_0_t29\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x9c), Register(0xa8), Register(0x9c)], resolved: None }
30 9c a8 9c 
# 015e7 Instruction { source: "inline_mul32_64_add_U64_0_t27 <- inline_mul32_64_add_U64_0_t28 Add inline_mul32_64_add_U64_0_t29\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_mul32_64_add_U64_0_t26 <- mem[inline_mul32_64_add_U64_0_t27] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "PtrFieldDeref(\"c\", \"hi\")", "PtrFieldDeref(\"c\", \"hi\")"] }
# 015e8 Instruction { source: "inline_mul32_64_add_U64_0_t26 <- mem[inline_mul32_64_add_U64_0_t27] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\"] }", opcode: Load32, args: [Register(0x9c), Register(0x9c)], resolved: None }
22 9c 9c 
# inline_mul32_64_add_U64_0_t30 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 015eb Instruction { source: "inline_mul32_64_add_U64_0_t30 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0xa8), Constant32(0x00000001=1)], resolved: None }
20 a8 01 00 00 00 
# inline_mul32_64_add_U64_0_t25 <- inline_mul32_64_add_U64_0_t26 Add inline_mul32_64_add_U64_0_t30
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))"] }
# 015f1 Instruction { source: "inline_mul32_64_add_U64_0_t25 <- inline_mul32_64_add_U64_0_t26 Add inline_mul32_64_add_U64_0_t30\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 015f2 Instruction { source: "inline_mul32_64_add_U64_0_t25 <- inline_mul32_64_add_U64_0_t26 Add inline_mul32_64_add_U64_0_t30\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x9c), Register(0xa8), Register(0x9c)], resolved: None }
30 9c a8 9c 
# 015f6 Instruction { source: "inline_mul32_64_add_U64_0_t25 <- inline_mul32_64_add_U64_0_t26 Add inline_mul32_64_add_U64_0_t30\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# mem[inline_mul32_64_add_U64_0_t22] <- inline_mul32_64_add_U64_0_t25 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }"] }
# 015f7 Instruction { source: "mem[inline_mul32_64_add_U64_0_t22] <- inline_mul32_64_add_U64_0_t25 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\"] }", opcode: Store32_1, args: [Register(0x9c), Register(0x98)], resolved: None }
23 9c 98 
# 015fa Instruction { source: "mem[inline_mul32_64_add_U64_0_t22] <- inline_mul32_64_add_U64_0_t25 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto inline_mul32_64_add_U64_0_add_U64_if_end_0
# 	SourceContext { contexts: [] }
# 015fb Instruction { source: "goto inline_mul32_64_add_U64_0_add_U64_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_mul32_64_add_U64_0_add_U64_if_end_0)], resolved: None }
70 ff 15 00 
# :inline_mul32_64_add_U64_0_add_U64_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_mul32_64_add_U64_0_add_U64_if_else_0_2
# :inline_mul32_64_add_U64_0_add_U64_if_end_0
# 	SourceContext { contexts: [] }
# inline_mul32_64_add_U64_0_add_U64_if_end_0
# goto inline_mul32_64_add_U64_0_function_end_add_U64
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_mul32_64_add_U64_0_function_end_add_U64\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_mul32_64_add_U64_0_function_end_add_U64)], resolved: None }
# :inline_mul32_64_add_U64_0_function_end_add_U64
# 	SourceContext { contexts: [] }
# inline_mul32_64_add_U64_0_function_end_add_U64
# t34 <- a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t34 <- a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"temp\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# t35 <- b_hi U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })", "Ident(\"b_hi\")", "Ident(\"b_hi\")"] }
# 015ff Instruction { source: "t35 <- b_hi U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"temp\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })\", \"Ident(\\\"b_hi\\\")\", \"Ident(\\\"b_hi\\\")\"] }", opcode: Copy32, args: [Register(0xa0), Register(0x98)], resolved: None }
21 a0 98 
# inline_mul32_64_mul16_32_13_a <- t34 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_13_a <- t34 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"temp\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })\"] }", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# inline_mul32_64_mul16_32_13_b <- t35 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_13_b <- t35 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"temp\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })\"] }", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# inline_mul32_64_mul16_32_13_t0 <- inline_mul32_64_mul16_32_13_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_13_t0 <- inline_mul32_64_mul16_32_13_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# inline_mul32_64_mul16_32_13_t1 <- inline_mul32_64_mul16_32_13_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_13_t1 <- inline_mul32_64_mul16_32_13_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# inline_mul32_64_mul16_32_13_c <- inline_mul32_64_mul16_32_13_t0 Multiply inline_mul32_64_mul16_32_13_t1
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))"] }
# 01602 Instruction { source: "inline_mul32_64_mul16_32_13_c <- inline_mul32_64_mul16_32_13_t0 Multiply inline_mul32_64_mul16_32_13_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0x94), Register(0x98), Register(0x9c)], resolved: None }
11 94 98 9c 
# 01606 Instruction { source: "inline_mul32_64_mul16_32_13_c <- inline_mul32_64_mul16_32_13_t0 Multiply inline_mul32_64_mul16_32_13_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x9e), Constant8(0x00=0)], resolved: None }
04 9e 00 
# 01609 Instruction { source: "inline_mul32_64_mul16_32_13_c <- inline_mul32_64_mul16_32_13_t0 Multiply inline_mul32_64_mul16_32_13_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x9f), Constant8(0x00=0)], resolved: None }
04 9f 00 
# inline_mul32_64_mul16_32_13_t3 <- inline_mul32_64_mul16_32_13_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 0160c Instruction { source: "inline_mul32_64_mul16_32_13_t3 <- inline_mul32_64_mul16_32_13_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x95), Register(0xc3)], resolved: None }
0b 95 c3 
# inline_mul32_64_mul16_32_13_t2 U32 <- inline_mul32_64_mul16_32_13_t3 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 0160f Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_13_t2 U32 <- inline_mul32_64_mul16_32_13_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0xa0), Constant32(0x00000000=0)], resolved: None }
20 a0 00 00 00 00 
# 01615 Instruction { source: "inline_mul32_64_mul16_32_13_t2 U32 <- inline_mul32_64_mul16_32_13_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xc3), Register(0xa0)], resolved: None }
0b c3 a0 
# inline_mul32_64_mul16_32_13_t5 <- inline_mul32_64_mul16_32_13_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 01618 Instruction { source: "inline_mul32_64_mul16_32_13_t5 <- inline_mul32_64_mul16_32_13_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x99), Register(0xc1)], resolved: None }
0b 99 c1 
# inline_mul32_64_mul16_32_13_t4 U32 <- inline_mul32_64_mul16_32_13_t5 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 0161b Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_13_t4 U32 <- inline_mul32_64_mul16_32_13_t5 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0xa8), Constant32(0x00000000=0)], resolved: None }
20 a8 00 00 00 00 
# 01621 Instruction { source: "inline_mul32_64_mul16_32_13_t4 U32 <- inline_mul32_64_mul16_32_13_t5 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xc1), Register(0xa8)], resolved: None }
0b c1 a8 
# inline_mul32_64_mul16_32_13_f <- inline_mul32_64_mul16_32_13_t2 Multiply inline_mul32_64_mul16_32_13_t4
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 01624 Instruction { source: "inline_mul32_64_mul16_32_13_f <- inline_mul32_64_mul16_32_13_t2 Multiply inline_mul32_64_mul16_32_13_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0xa0), Register(0xa8), Register(0xa0)], resolved: None }
11 a0 a8 a0 
# 01628 Instruction { source: "inline_mul32_64_mul16_32_13_f <- inline_mul32_64_mul16_32_13_t2 Multiply inline_mul32_64_mul16_32_13_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0xa2), Constant8(0x00=0)], resolved: None }
04 a2 00 
# 0162b Instruction { source: "inline_mul32_64_mul16_32_13_f <- inline_mul32_64_mul16_32_13_t2 Multiply inline_mul32_64_mul16_32_13_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0xa3), Constant8(0x00=0)], resolved: None }
04 a3 00 
# inline_mul32_64_mul16_32_13_t6 <- inline_mul32_64_mul16_32_13_f[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }", "Index(\"f\", Number(U8, 1))", "Index(\"f\", Number(U8, 1))"] }
# 0162e Instruction { source: "inline_mul32_64_mul16_32_13_t6 <- inline_mul32_64_mul16_32_13_f[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\", \"Index(\\\"f\\\", Number(U8, 1))\", \"Index(\\\"f\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xa1), Register(0xc4)], resolved: None }
0b a1 c4 
# inline_mul32_64_mul16_32_13_f[0x03..0x04] <- inline_mul32_64_mul16_32_13_t6 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }"] }
# 01631 Instruction { source: "inline_mul32_64_mul16_32_13_f[0x03..0x04] <- inline_mul32_64_mul16_32_13_t6 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xc4), Register(0xa3)], resolved: None }
0b c4 a3 
# inline_mul32_64_mul16_32_13_t7 <- inline_mul32_64_mul16_32_13_f[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }", "Index(\"f\", Number(U8, 0))", "Index(\"f\", Number(U8, 0))"] }
# 01634 Instruction { source: "inline_mul32_64_mul16_32_13_t7 <- inline_mul32_64_mul16_32_13_f[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\", \"Index(\\\"f\\\", Number(U8, 0))\", \"Index(\\\"f\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0xa0), Register(0xc4)], resolved: None }
0b a0 c4 
# inline_mul32_64_mul16_32_13_f[0x02..0x03] <- inline_mul32_64_mul16_32_13_t7 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }"] }
# 01637 Instruction { source: "inline_mul32_64_mul16_32_13_f[0x02..0x03] <- inline_mul32_64_mul16_32_13_t7 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0xc4), Register(0xa2)], resolved: None }
0b c4 a2 
# inline_mul32_64_mul16_32_13_t8 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0163a Instruction { source: "inline_mul32_64_mul16_32_13_t8 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0xbd), Constant8(0x00=0)], resolved: None }
04 bd 00 
# inline_mul32_64_mul16_32_13_f[0x01..0x02] <- inline_mul32_64_mul16_32_13_t8 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }"] }
# 0163d Instruction { source: "inline_mul32_64_mul16_32_13_f[0x01..0x02] <- inline_mul32_64_mul16_32_13_t8 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0xbd), Register(0xa1)], resolved: None }
0b bd a1 
# inline_mul32_64_mul16_32_13_t9 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 01640 Instruction { source: "inline_mul32_64_mul16_32_13_t9 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0xbd), Constant8(0x00=0)], resolved: None }
04 bd 00 
# inline_mul32_64_mul16_32_13_f[0x00..0x01] <- inline_mul32_64_mul16_32_13_t9 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 01643 Instruction { source: "inline_mul32_64_mul16_32_13_f[0x00..0x01] <- inline_mul32_64_mul16_32_13_t9 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0xbd), Register(0xa0)], resolved: None }
0b bd a0 
# inline_mul32_64_mul16_32_13_t10 <- inline_mul32_64_mul16_32_13_c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_13_t10 <- inline_mul32_64_mul16_32_13_c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x9c), Register(0x9c)], resolved: None }
# inline_mul32_64_mul16_32_13_t11 <- inline_mul32_64_mul16_32_13_f U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"f\")", "Ident(\"f\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_13_t11 <- inline_mul32_64_mul16_32_13_f U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"f\\\")\", \"Ident(\\\"f\\\")\"] }", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_mul32_64_mul16_32_13_c <- inline_mul32_64_mul16_32_13_t10 Add inline_mul32_64_mul16_32_13_t11
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))"] }
# 01646 Instruction { source: "inline_mul32_64_mul16_32_13_c <- inline_mul32_64_mul16_32_13_t10 Add inline_mul32_64_mul16_32_13_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01647 Instruction { source: "inline_mul32_64_mul16_32_13_c <- inline_mul32_64_mul16_32_13_t10 Add inline_mul32_64_mul16_32_13_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x9c), Register(0xa0), Register(0x9c)], resolved: None }
30 9c a0 9c 
# 0164b Instruction { source: "inline_mul32_64_mul16_32_13_c <- inline_mul32_64_mul16_32_13_t10 Add inline_mul32_64_mul16_32_13_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_mul32_64_mul16_32_13_t12 <- inline_mul32_64_mul16_32_13_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_13_t12 <- inline_mul32_64_mul16_32_13_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# inline_mul32_64_mul16_32_13_t14 <- inline_mul32_64_mul16_32_13_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 0164c Instruction { source: "inline_mul32_64_mul16_32_13_t14 <- inline_mul32_64_mul16_32_13_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x99), Register(0xc1)], resolved: None }
0b 99 c1 
# inline_mul32_64_mul16_32_13_t13 U32 <- inline_mul32_64_mul16_32_13_t14 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 0164f Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_13_t13 U32 <- inline_mul32_64_mul16_32_13_t14 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0xa0), Constant32(0x00000000=0)], resolved: None }
20 a0 00 00 00 00 
# 01655 Instruction { source: "inline_mul32_64_mul16_32_13_t13 U32 <- inline_mul32_64_mul16_32_13_t14 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xc1), Register(0xa0)], resolved: None }
0b c1 a0 
# inline_mul32_64_mul16_32_13_d <- inline_mul32_64_mul16_32_13_t12 Multiply inline_mul32_64_mul16_32_13_t13
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 01658 Instruction { source: "inline_mul32_64_mul16_32_13_d <- inline_mul32_64_mul16_32_13_t12 Multiply inline_mul32_64_mul16_32_13_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0x94), Register(0xa0), Register(0xa0)], resolved: None }
11 94 a0 a0 
# 0165c Instruction { source: "inline_mul32_64_mul16_32_13_d <- inline_mul32_64_mul16_32_13_t12 Multiply inline_mul32_64_mul16_32_13_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0xa2), Constant8(0x00=0)], resolved: None }
04 a2 00 
# 0165f Instruction { source: "inline_mul32_64_mul16_32_13_d <- inline_mul32_64_mul16_32_13_t12 Multiply inline_mul32_64_mul16_32_13_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0xa3), Constant8(0x00=0)], resolved: None }
04 a3 00 
# inline_mul32_64_mul16_32_13_t16 <- inline_mul32_64_mul16_32_13_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 01662 Instruction { source: "inline_mul32_64_mul16_32_13_t16 <- inline_mul32_64_mul16_32_13_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x95), Register(0xc3)], resolved: None }
0b 95 c3 
# inline_mul32_64_mul16_32_13_t15 U32 <- inline_mul32_64_mul16_32_13_t16 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 01665 Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_13_t15 U32 <- inline_mul32_64_mul16_32_13_t16 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x94), Constant32(0x00000000=0)], resolved: None }
20 94 00 00 00 00 
# 0166b Instruction { source: "inline_mul32_64_mul16_32_13_t15 U32 <- inline_mul32_64_mul16_32_13_t16 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xc3), Register(0x94)], resolved: None }
0b c3 94 
# inline_mul32_64_mul16_32_13_t17 <- inline_mul32_64_mul16_32_13_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_13_t17 <- inline_mul32_64_mul16_32_13_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# inline_mul32_64_mul16_32_13_e <- inline_mul32_64_mul16_32_13_t15 Multiply inline_mul32_64_mul16_32_13_t17
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))"] }
# 0166e Instruction { source: "inline_mul32_64_mul16_32_13_e <- inline_mul32_64_mul16_32_13_t15 Multiply inline_mul32_64_mul16_32_13_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0x94), Register(0x98), Register(0x94)], resolved: None }
11 94 98 94 
# 01672 Instruction { source: "inline_mul32_64_mul16_32_13_e <- inline_mul32_64_mul16_32_13_t15 Multiply inline_mul32_64_mul16_32_13_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x96), Constant8(0x00=0)], resolved: None }
04 96 00 
# 01675 Instruction { source: "inline_mul32_64_mul16_32_13_e <- inline_mul32_64_mul16_32_13_t15 Multiply inline_mul32_64_mul16_32_13_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x97), Constant8(0x00=0)], resolved: None }
04 97 00 
# inline_mul32_64_mul16_32_13_t18 <- inline_mul32_64_mul16_32_13_d U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 01678 Instruction { source: "inline_mul32_64_mul16_32_13_t18 <- inline_mul32_64_mul16_32_13_d U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0xa0), Register(0x98)], resolved: None }
21 a0 98 
# inline_mul32_64_mul16_32_13_t19 <- inline_mul32_64_mul16_32_13_e U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"e\")", "Ident(\"e\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_13_t19 <- inline_mul32_64_mul16_32_13_e U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"e\\\")\", \"Ident(\\\"e\\\")\"] }", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# inline_mul32_64_mul16_32_13_d <- inline_mul32_64_mul16_32_13_t18 Add inline_mul32_64_mul16_32_13_t19
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))"] }
# 0167b Instruction { source: "inline_mul32_64_mul16_32_13_d <- inline_mul32_64_mul16_32_13_t18 Add inline_mul32_64_mul16_32_13_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0167c Instruction { source: "inline_mul32_64_mul16_32_13_d <- inline_mul32_64_mul16_32_13_t18 Add inline_mul32_64_mul16_32_13_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x98), Register(0x94), Register(0xa0)], resolved: None }
30 98 94 a0 
# 01680 Instruction { source: "inline_mul32_64_mul16_32_13_d <- inline_mul32_64_mul16_32_13_t18 Add inline_mul32_64_mul16_32_13_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_mul32_64_mul16_32_13_t20 <- inline_mul32_64_mul16_32_13_d[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }", "Index(\"d\", Number(U8, 2))", "Index(\"d\", Number(U8, 2))"] }
# 01681 Instruction { source: "inline_mul32_64_mul16_32_13_t20 <- inline_mul32_64_mul16_32_13_d[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\", \"Index(\\\"d\\\", Number(U8, 2))\", \"Index(\\\"d\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0xa2), Register(0xc3)], resolved: None }
0b a2 c3 
# inline_mul32_64_mul16_32_13_d[0x03..0x04] <- inline_mul32_64_mul16_32_13_t20 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }"] }
# 01684 Instruction { source: "inline_mul32_64_mul16_32_13_d[0x03..0x04] <- inline_mul32_64_mul16_32_13_t20 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\"] }", opcode: Copy8, args: [Register(0xc3), Register(0xa3)], resolved: None }
0b c3 a3 
# inline_mul32_64_mul16_32_13_t21 <- inline_mul32_64_mul16_32_13_d[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }", "Index(\"d\", Number(U8, 1))", "Index(\"d\", Number(U8, 1))"] }
# 01687 Instruction { source: "inline_mul32_64_mul16_32_13_t21 <- inline_mul32_64_mul16_32_13_d[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\", \"Index(\\\"d\\\", Number(U8, 1))\", \"Index(\\\"d\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xa1), Register(0xc3)], resolved: None }
0b a1 c3 
# inline_mul32_64_mul16_32_13_d[0x02..0x03] <- inline_mul32_64_mul16_32_13_t21 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }"] }
# 0168a Instruction { source: "inline_mul32_64_mul16_32_13_d[0x02..0x03] <- inline_mul32_64_mul16_32_13_t21 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xc3), Register(0xa2)], resolved: None }
0b c3 a2 
# inline_mul32_64_mul16_32_13_t22 <- inline_mul32_64_mul16_32_13_d[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }", "Index(\"d\", Number(U8, 0))", "Index(\"d\", Number(U8, 0))"] }
# 0168d Instruction { source: "inline_mul32_64_mul16_32_13_t22 <- inline_mul32_64_mul16_32_13_d[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\", \"Index(\\\"d\\\", Number(U8, 0))\", \"Index(\\\"d\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0xa0), Register(0xc3)], resolved: None }
0b a0 c3 
# inline_mul32_64_mul16_32_13_d[0x01..0x02] <- inline_mul32_64_mul16_32_13_t22 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }"] }
# 01690 Instruction { source: "inline_mul32_64_mul16_32_13_d[0x01..0x02] <- inline_mul32_64_mul16_32_13_t22 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0xc3), Register(0xa1)], resolved: None }
0b c3 a1 
# inline_mul32_64_mul16_32_13_t23 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 01693 Instruction { source: "inline_mul32_64_mul16_32_13_t23 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0xc3), Constant8(0x00=0)], resolved: None }
04 c3 00 
# inline_mul32_64_mul16_32_13_d[0x00..0x01] <- inline_mul32_64_mul16_32_13_t23 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 01696 Instruction { source: "inline_mul32_64_mul16_32_13_d[0x00..0x01] <- inline_mul32_64_mul16_32_13_t23 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0xc3), Register(0xa0)], resolved: None }
0b c3 a0 
# inline_mul32_64_mul16_32_13_t25 <- inline_mul32_64_mul16_32_13_c U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# 01699 Instruction { source: "inline_mul32_64_mul16_32_13_t25 <- inline_mul32_64_mul16_32_13_c U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x9c), Register(0x94)], resolved: None }
21 9c 94 
# inline_mul32_64_mul16_32_13_t26 <- inline_mul32_64_mul16_32_13_d U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 0169c Instruction { source: "inline_mul32_64_mul16_32_13_t26 <- inline_mul32_64_mul16_32_13_d U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0xa0), Register(0x98)], resolved: None }
21 a0 98 
# inline_mul32_64_mul16_32_13_t24 <- inline_mul32_64_mul16_32_13_t25 Add inline_mul32_64_mul16_32_13_t26
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))"] }
# 0169f Instruction { source: "inline_mul32_64_mul16_32_13_t24 <- inline_mul32_64_mul16_32_13_t25 Add inline_mul32_64_mul16_32_13_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 016a0 Instruction { source: "inline_mul32_64_mul16_32_13_t24 <- inline_mul32_64_mul16_32_13_t25 Add inline_mul32_64_mul16_32_13_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x94), Register(0x98), Register(0x94)], resolved: None }
30 94 98 94 
# 016a4 Instruction { source: "inline_mul32_64_mul16_32_13_t24 <- inline_mul32_64_mul16_32_13_t25 Add inline_mul32_64_mul16_32_13_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# temp <- inline_mul32_64_mul16_32_13_t24 U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# 016a5 Instruction { source: "temp <- inline_mul32_64_mul16_32_13_t24 U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: Copy32, args: [Register(0x94), Register(0x98)], resolved: None }
21 94 98 
# goto inline_mul32_64_mul16_32_13_function_end_mul16_32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_mul32_64_mul16_32_13_function_end_mul16_32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_mul32_64_mul16_32_13_function_end_mul16_32)], resolved: None }
# :inline_mul32_64_mul16_32_13_function_end_mul16_32
# 	SourceContext { contexts: [] }
# inline_mul32_64_mul16_32_13_function_end_mul16_32
# t36 <- temp[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_lo\", Number(U8, 2)), var_type: None, value: Index(\"temp\", Number(U8, 0)) }", "Index(\"temp\", Number(U8, 0))", "Index(\"temp\", Number(U8, 0))"] }
# 016a8 Instruction { source: "t36 <- temp[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_lo\\\", Number(U8, 2)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 0)) }\", \"Index(\\\"temp\\\", Number(U8, 0))\", \"Index(\\\"temp\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x98), Register(0xc3)], resolved: None }
0b 98 c3 
# temp_lo[0x02..0x03] <- t36 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_lo\", Number(U8, 2)), var_type: None, value: Index(\"temp\", Number(U8, 0)) }"] }
# 016ab Instruction { source: "temp_lo[0x02..0x03] <- t36 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_lo\\\", Number(U8, 2)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0xc3), Register(0xd6)], resolved: None }
0b c3 d6 
# t37 <- temp[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_lo\", Number(U8, 3)), var_type: None, value: Index(\"temp\", Number(U8, 1)) }", "Index(\"temp\", Number(U8, 1))", "Index(\"temp\", Number(U8, 1))"] }
# 016ae Instruction { source: "t37 <- temp[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_lo\\\", Number(U8, 3)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 1)) }\", \"Index(\\\"temp\\\", Number(U8, 1))\", \"Index(\\\"temp\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x99), Register(0xc3)], resolved: None }
0b 99 c3 
# temp_lo[0x03..0x04] <- t37 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_lo\", Number(U8, 3)), var_type: None, value: Index(\"temp\", Number(U8, 1)) }"] }
# 016b1 Instruction { source: "temp_lo[0x03..0x04] <- t37 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_lo\\\", Number(U8, 3)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xc3), Register(0xd7)], resolved: None }
0b c3 d7 
# t38 <- temp[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_hi\", Number(U8, 0)), var_type: None, value: Index(\"temp\", Number(U8, 2)) }", "Index(\"temp\", Number(U8, 2))", "Index(\"temp\", Number(U8, 2))"] }
# 016b4 Instruction { source: "t38 <- temp[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_hi\\\", Number(U8, 0)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 2)) }\", \"Index(\\\"temp\\\", Number(U8, 2))\", \"Index(\\\"temp\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x9a), Register(0xc3)], resolved: None }
0b 9a c3 
# temp_hi[0x00..0x01] <- t38 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_hi\", Number(U8, 0)), var_type: None, value: Index(\"temp\", Number(U8, 2)) }"] }
# 016b7 Instruction { source: "temp_hi[0x00..0x01] <- t38 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_hi\\\", Number(U8, 0)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 2)) }\"] }", opcode: Copy8, args: [Register(0xc3), Register(0xd0)], resolved: None }
0b c3 d0 
# t39 <- temp[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_hi\", Number(U8, 1)), var_type: None, value: Index(\"temp\", Number(U8, 3)) }", "Index(\"temp\", Number(U8, 3))", "Index(\"temp\", Number(U8, 3))"] }
# 016ba Instruction { source: "t39 <- temp[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_hi\\\", Number(U8, 1)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 3)) }\", \"Index(\\\"temp\\\", Number(U8, 3))\", \"Index(\\\"temp\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0x9b), Register(0xc3)], resolved: None }
0b 9b c3 
# temp_hi[0x01..0x02] <- t39 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_hi\", Number(U8, 1)), var_type: None, value: Index(\"temp\", Number(U8, 3)) }"] }
# 016bd Instruction { source: "temp_hi[0x01..0x02] <- t39 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_hi\\\", Number(U8, 1)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 3)) }\"] }", opcode: Copy8, args: [Register(0xc3), Register(0xd1)], resolved: None }
0b c3 d1 
# t40 <- __frame_pointer U32
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"temp64\", \"lo\"), var_type: None, value: Ident(\"temp_lo\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident(\"__frame_pointer\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident(\"__frame_pointer\") }", "Ident(\"__frame_pointer\")"] }
# 016c0 Instruction { source: "t40 <- __frame_pointer U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"lo\\\"), var_type: None, value: Ident(\\\"temp_lo\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident(\\\"__frame_pointer\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident(\\\"__frame_pointer\\\") }\", \"Ident(\\\"__frame_pointer\\\")\"] }", opcode: Copy32, args: [Register(0x0c), Register(0xc8)], resolved: None }
21 0c c8 
# t41 <- temp_lo U32
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"temp64\", \"lo\"), var_type: None, value: Ident(\"temp_lo\") }", "Ident(\"temp_lo\")", "Ident(\"temp_lo\")"] }
# 016c3 Instruction { source: "t41 <- temp_lo U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"lo\\\"), var_type: None, value: Ident(\\\"temp_lo\\\") }\", \"Ident(\\\"temp_lo\\\")\", \"Ident(\\\"temp_lo\\\")\"] }", opcode: Copy32, args: [Register(0xd4), Register(0x94)], resolved: None }
21 d4 94 
# mem[t40] <- t41 U32
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"temp64\", \"lo\"), var_type: None, value: Ident(\"temp_lo\") }"] }
# 016c6 Instruction { source: "mem[t40] <- t41 U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"lo\\\"), var_type: None, value: Ident(\\\"temp_lo\\\") }\"] }", opcode: Store32_1, args: [Register(0x94), Register(0xc8)], resolved: None }
23 94 c8 
# 016c9 Instruction { source: "mem[t40] <- t41 U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"lo\\\"), var_type: None, value: Ident(\\\"temp_lo\\\") }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# t43 <- __frame_pointer U32
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"temp64\", \"hi\"), var_type: None, value: Ident(\"temp_hi\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4))", "Ident(\"__frame_pointer\")", "Ident(\"__frame_pointer\")"] }
# 016ca Instruction { source: "t43 <- __frame_pointer U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"hi\\\"), var_type: None, value: Ident(\\\"temp_hi\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4))\", \"Ident(\\\"__frame_pointer\\\")\", \"Ident(\\\"__frame_pointer\\\")\"] }", opcode: Copy32, args: [Register(0x0c), Register(0xc8)], resolved: None }
21 0c c8 
# t44 <- 0n4/0x00000004u32 
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"temp64\", \"hi\"), var_type: None, value: Ident(\"temp_hi\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 016cd Instruction { source: "t44 <- 0n4/0x00000004u32 \n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"hi\\\"), var_type: None, value: Ident(\\\"temp_hi\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: LoadImm32, args: [Register(0x94), Constant32(0x00000004=4)], resolved: None }
20 94 04 00 00 00 
# t42 <- t43 Add t44
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"temp64\", \"hi\"), var_type: None, value: Ident(\"temp_hi\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4))"] }
# 016d3 Instruction { source: "t42 <- t43 Add t44\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"hi\\\"), var_type: None, value: Ident(\\\"temp_hi\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 016d4 Instruction { source: "t42 <- t43 Add t44\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"hi\\\"), var_type: None, value: Ident(\\\"temp_hi\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0xc8), Register(0x94), Register(0x94)], resolved: None }
30 c8 94 94 
# 016d8 Instruction { source: "t42 <- t43 Add t44\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"hi\\\"), var_type: None, value: Ident(\\\"temp_hi\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t45 <- temp_hi U32
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"temp64\", \"hi\"), var_type: None, value: Ident(\"temp_hi\") }", "Ident(\"temp_hi\")", "Ident(\"temp_hi\")"] }
# 016d9 Instruction { source: "t45 <- temp_hi U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"hi\\\"), var_type: None, value: Ident(\\\"temp_hi\\\") }\", \"Ident(\\\"temp_hi\\\")\", \"Ident(\\\"temp_hi\\\")\"] }", opcode: Copy32, args: [Register(0xd0), Register(0x98)], resolved: None }
21 d0 98 
# mem[t42] <- t45 U32
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"temp64\", \"hi\"), var_type: None, value: Ident(\"temp_hi\") }"] }
# 016dc Instruction { source: "mem[t42] <- t45 U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"hi\\\"), var_type: None, value: Ident(\\\"temp_hi\\\") }\"] }", opcode: Store32_1, args: [Register(0x98), Register(0x94)], resolved: None }
23 98 94 
# 016df Instruction { source: "mem[t42] <- t45 U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"hi\\\"), var_type: None, value: Ident(\\\"temp_hi\\\") }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# t47 <- c U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# 016e0 Instruction { source: "t47 <- c U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0xa4), Register(0x94)], resolved: None }
21 a4 94 
# t50 <- __frame_pointer U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "AddressOf(Ident(\"temp64\"))", "AddressOf(Ident(\"temp64\"))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))", "Ident(\"__frame_pointer\")", "Ident(\"__frame_pointer\")"] }
# 016e3 Instruction { source: "t50 <- __frame_pointer U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Ident(\\\"__frame_pointer\\\")\", \"Ident(\\\"__frame_pointer\\\")\"] }", opcode: Copy32, args: [Register(0x0c), Register(0xc8)], resolved: None }
21 0c c8 
# t51 <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "AddressOf(Ident(\"temp64\"))", "AddressOf(Ident(\"temp64\"))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 016e6 Instruction { source: "t51 <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x98), Constant32(0x00000000=0)], resolved: None }
20 98 00 00 00 00 
# t49 <- t50 Add t51
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "AddressOf(Ident(\"temp64\"))", "AddressOf(Ident(\"temp64\"))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))"] }
# 016ec Instruction { source: "t49 <- t50 Add t51\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 016ed Instruction { source: "t49 <- t50 Add t51\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\"] }", opcode: AddCarry32_1, args: [Register(0xc8), Register(0x98), Register(0x98)], resolved: None }
30 c8 98 98 
# 016f1 Instruction { source: "t49 <- t50 Add t51\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t48 <- t49 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "AddressOf(Ident(\"temp64\"))", "AddressOf(Ident(\"temp64\"))"] }
# optimized away noop copy Instruction { source: "t48 <- t49 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"AddressOf(Ident(\\\"temp64\\\"))\"] }", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# t52 <- c U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# 016f2 Instruction { source: "t52 <- c U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0xa4), Register(0x9c)], resolved: None }
21 a4 9c 
# inline_mul32_64_add_U64_1_a <- t47 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_a <- t47 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\"] }", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# inline_mul32_64_add_U64_1_b <- t48 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_b <- t48 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\"] }", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# inline_mul32_64_add_U64_1_c <- t52 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_c <- t52 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\"] }", opcode: Copy32, args: [Register(0x9c), Register(0x9c)], resolved: None }
# inline_mul32_64_add_U64_1_t0 <- inline_mul32_64_add_U64_1_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"lo\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\"a\", \"lo\") }", "PtrFieldDeref(\"a\", \"lo\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") } }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t0 <- inline_mul32_64_add_U64_1_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lo\\\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\\\"a\\\", \\\"lo\\\") }\", \"PtrFieldDeref(\\\"a\\\", \\\"lo\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# inline_mul32_64_add_U64_1_lo <- mem[inline_mul32_64_add_U64_1_t0] U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"lo\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\"a\", \"lo\") }", "PtrFieldDeref(\"a\", \"lo\")"] }
# 016f5 Instruction { source: "inline_mul32_64_add_U64_1_lo <- mem[inline_mul32_64_add_U64_1_t0] U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lo\\\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\\\"a\\\", \\\"lo\\\") }\", \"PtrFieldDeref(\\\"a\\\", \\\"lo\\\")\"] }", opcode: Load32, args: [Register(0x94), Register(0xa0)], resolved: None }
22 94 a0 
# inline_mul32_64_add_U64_1_t2 <- inline_mul32_64_add_U64_1_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t2 <- inline_mul32_64_add_U64_1_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x9c), Register(0x9c)], resolved: None }
# inline_mul32_64_add_U64_1_t3 <- 0n4/0x00000004u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 016f8 Instruction { source: "inline_mul32_64_add_U64_1_t3 <- 0n4/0x00000004u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: LoadImm32, args: [Register(0xa4), Constant32(0x00000004=4)], resolved: None }
20 a4 04 00 00 00 
# inline_mul32_64_add_U64_1_t1 <- inline_mul32_64_add_U64_1_t2 Add inline_mul32_64_add_U64_1_t3
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))"] }
# 016fe Instruction { source: "inline_mul32_64_add_U64_1_t1 <- inline_mul32_64_add_U64_1_t2 Add inline_mul32_64_add_U64_1_t3\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 016ff Instruction { source: "inline_mul32_64_add_U64_1_t1 <- inline_mul32_64_add_U64_1_t2 Add inline_mul32_64_add_U64_1_t3\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x9c), Register(0xa4), Register(0xa4)], resolved: None }
30 9c a4 a4 
# 01703 Instruction { source: "inline_mul32_64_add_U64_1_t1 <- inline_mul32_64_add_U64_1_t2 Add inline_mul32_64_add_U64_1_t3\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_mul32_64_add_U64_1_t7 <- inline_mul32_64_add_U64_1_a U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "PtrFieldDeref(\"a\", \"hi\")", "PtrFieldDeref(\"a\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4))", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t7 <- inline_mul32_64_add_U64_1_a U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4))\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# inline_mul32_64_add_U64_1_t8 <- 0n4/0x00000004u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "PtrFieldDeref(\"a\", \"hi\")", "PtrFieldDeref(\"a\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 01704 Instruction { source: "inline_mul32_64_add_U64_1_t8 <- 0n4/0x00000004u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: LoadImm32, args: [Register(0xa8), Constant32(0x00000004=4)], resolved: None }
20 a8 04 00 00 00 
# inline_mul32_64_add_U64_1_t6 <- inline_mul32_64_add_U64_1_t7 Add inline_mul32_64_add_U64_1_t8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "PtrFieldDeref(\"a\", \"hi\")", "PtrFieldDeref(\"a\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4))"] }
# 0170a Instruction { source: "inline_mul32_64_add_U64_1_t6 <- inline_mul32_64_add_U64_1_t7 Add inline_mul32_64_add_U64_1_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0170b Instruction { source: "inline_mul32_64_add_U64_1_t6 <- inline_mul32_64_add_U64_1_t7 Add inline_mul32_64_add_U64_1_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x94), Register(0xa8), Register(0xa8)], resolved: None }
30 94 a8 a8 
# 0170f Instruction { source: "inline_mul32_64_add_U64_1_t6 <- inline_mul32_64_add_U64_1_t7 Add inline_mul32_64_add_U64_1_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_mul32_64_add_U64_1_t5 <- mem[inline_mul32_64_add_U64_1_t6] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "PtrFieldDeref(\"a\", \"hi\")", "PtrFieldDeref(\"a\", \"hi\")"] }
# 01710 Instruction { source: "inline_mul32_64_add_U64_1_t5 <- mem[inline_mul32_64_add_U64_1_t6] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\"] }", opcode: Load32, args: [Register(0xa8), Register(0xac)], resolved: None }
22 a8 ac 
# inline_mul32_64_add_U64_1_t11 <- inline_mul32_64_add_U64_1_b U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "PtrFieldDeref(\"b\", \"hi\")", "PtrFieldDeref(\"b\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4))", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t11 <- inline_mul32_64_add_U64_1_b U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4))\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# inline_mul32_64_add_U64_1_t12 <- 0n4/0x00000004u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "PtrFieldDeref(\"b\", \"hi\")", "PtrFieldDeref(\"b\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 01713 Instruction { source: "inline_mul32_64_add_U64_1_t12 <- 0n4/0x00000004u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: LoadImm32, args: [Register(0xa8), Constant32(0x00000004=4)], resolved: None }
20 a8 04 00 00 00 
# inline_mul32_64_add_U64_1_t10 <- inline_mul32_64_add_U64_1_t11 Add inline_mul32_64_add_U64_1_t12
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "PtrFieldDeref(\"b\", \"hi\")", "PtrFieldDeref(\"b\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4))"] }
# 01719 Instruction { source: "inline_mul32_64_add_U64_1_t10 <- inline_mul32_64_add_U64_1_t11 Add inline_mul32_64_add_U64_1_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0171a Instruction { source: "inline_mul32_64_add_U64_1_t10 <- inline_mul32_64_add_U64_1_t11 Add inline_mul32_64_add_U64_1_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x98), Register(0xa8), Register(0xa8)], resolved: None }
30 98 a8 a8 
# 0171e Instruction { source: "inline_mul32_64_add_U64_1_t10 <- inline_mul32_64_add_U64_1_t11 Add inline_mul32_64_add_U64_1_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_mul32_64_add_U64_1_t9 <- mem[inline_mul32_64_add_U64_1_t10] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "PtrFieldDeref(\"b\", \"hi\")", "PtrFieldDeref(\"b\", \"hi\")"] }
# 0171f Instruction { source: "inline_mul32_64_add_U64_1_t9 <- mem[inline_mul32_64_add_U64_1_t10] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\"] }", opcode: Load32, args: [Register(0xa8), Register(0xa8)], resolved: None }
22 a8 a8 
# inline_mul32_64_add_U64_1_t4 <- inline_mul32_64_add_U64_1_t5 Add inline_mul32_64_add_U64_1_t9
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))"] }
# 01722 Instruction { source: "inline_mul32_64_add_U64_1_t4 <- inline_mul32_64_add_U64_1_t5 Add inline_mul32_64_add_U64_1_t9\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01723 Instruction { source: "inline_mul32_64_add_U64_1_t4 <- inline_mul32_64_add_U64_1_t5 Add inline_mul32_64_add_U64_1_t9\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0xac), Register(0xa8), Register(0xa8)], resolved: None }
30 ac a8 a8 
# 01727 Instruction { source: "inline_mul32_64_add_U64_1_t4 <- inline_mul32_64_add_U64_1_t5 Add inline_mul32_64_add_U64_1_t9\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# mem[inline_mul32_64_add_U64_1_t1] <- inline_mul32_64_add_U64_1_t4 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }"] }
# 01728 Instruction { source: "mem[inline_mul32_64_add_U64_1_t1] <- inline_mul32_64_add_U64_1_t4 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\"] }", opcode: Store32_1, args: [Register(0xa8), Register(0xa4)], resolved: None }
23 a8 a4 
# 0172b Instruction { source: "mem[inline_mul32_64_add_U64_1_t1] <- inline_mul32_64_add_U64_1_t4 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_mul32_64_add_U64_1_t13 <- inline_mul32_64_add_U64_1_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t13 <- inline_mul32_64_add_U64_1_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x9c), Register(0x9c)], resolved: None }
# inline_mul32_64_add_U64_1_t16 <- inline_mul32_64_add_U64_1_a U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "PtrFieldDeref(\"a\", \"lo\")", "PtrFieldDeref(\"a\", \"lo\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") } }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t16 <- inline_mul32_64_add_U64_1_a U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"PtrFieldDeref(\\\"a\\\", \\\"lo\\\")\", \"PtrFieldDeref(\\\"a\\\", \\\"lo\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# inline_mul32_64_add_U64_1_t15 <- mem[inline_mul32_64_add_U64_1_t16] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "PtrFieldDeref(\"a\", \"lo\")", "PtrFieldDeref(\"a\", \"lo\")"] }
# 0172c Instruction { source: "inline_mul32_64_add_U64_1_t15 <- mem[inline_mul32_64_add_U64_1_t16] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"PtrFieldDeref(\\\"a\\\", \\\"lo\\\")\", \"PtrFieldDeref(\\\"a\\\", \\\"lo\\\")\"] }", opcode: Load32, args: [Register(0x94), Register(0x94)], resolved: None }
22 94 94 
# inline_mul32_64_add_U64_1_t18 <- inline_mul32_64_add_U64_1_b U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "PtrFieldDeref(\"b\", \"lo\")", "PtrFieldDeref(\"b\", \"lo\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") } }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t18 <- inline_mul32_64_add_U64_1_b U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"PtrFieldDeref(\\\"b\\\", \\\"lo\\\")\", \"PtrFieldDeref(\\\"b\\\", \\\"lo\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# inline_mul32_64_add_U64_1_t17 <- mem[inline_mul32_64_add_U64_1_t18] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "PtrFieldDeref(\"b\", \"lo\")", "PtrFieldDeref(\"b\", \"lo\")"] }
# 0172f Instruction { source: "inline_mul32_64_add_U64_1_t17 <- mem[inline_mul32_64_add_U64_1_t18] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"PtrFieldDeref(\\\"b\\\", \\\"lo\\\")\", \"PtrFieldDeref(\\\"b\\\", \\\"lo\\\")\"] }", opcode: Load32, args: [Register(0x98), Register(0x98)], resolved: None }
22 98 98 
# inline_mul32_64_add_U64_1_t14 <- inline_mul32_64_add_U64_1_t15 Add inline_mul32_64_add_U64_1_t17
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))"] }
# 01732 Instruction { source: "inline_mul32_64_add_U64_1_t14 <- inline_mul32_64_add_U64_1_t15 Add inline_mul32_64_add_U64_1_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01733 Instruction { source: "inline_mul32_64_add_U64_1_t14 <- inline_mul32_64_add_U64_1_t15 Add inline_mul32_64_add_U64_1_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x94), Register(0x98), Register(0x94)], resolved: None }
30 94 98 94 
# 01737 Instruction { source: "inline_mul32_64_add_U64_1_t14 <- inline_mul32_64_add_U64_1_t15 Add inline_mul32_64_add_U64_1_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# mem[inline_mul32_64_add_U64_1_t13] <- inline_mul32_64_add_U64_1_t14 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }"] }
# 01738 Instruction { source: "mem[inline_mul32_64_add_U64_1_t13] <- inline_mul32_64_add_U64_1_t14 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\"] }", opcode: Store32_1, args: [Register(0x94), Register(0x9c)], resolved: None }
23 94 9c 
# 0173b Instruction { source: "mem[inline_mul32_64_add_U64_1_t13] <- inline_mul32_64_add_U64_1_t14 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_mul32_64_add_U64_1_t20 <- inline_mul32_64_add_U64_1_c U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }])], else_block: [] }", "Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }", "PtrFieldDeref(\"c\", \"lo\")", "PtrFieldDeref(\"c\", \"lo\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# 0173c Instruction { source: "inline_mul32_64_add_U64_1_t20 <- inline_mul32_64_add_U64_1_c U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\", \"PtrFieldDeref(\\\"c\\\", \\\"lo\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"lo\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x9c), Register(0x94)], resolved: None }
21 9c 94 
# inline_mul32_64_add_U64_1_t19 <- mem[inline_mul32_64_add_U64_1_t20] U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }])], else_block: [] }", "Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }", "PtrFieldDeref(\"c\", \"lo\")", "PtrFieldDeref(\"c\", \"lo\")"] }
# 0173f Instruction { source: "inline_mul32_64_add_U64_1_t19 <- mem[inline_mul32_64_add_U64_1_t20] U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\", \"PtrFieldDeref(\\\"c\\\", \\\"lo\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"lo\\\")\"] }", opcode: Load32, args: [Register(0x94), Register(0x94)], resolved: None }
22 94 94 
# inline_mul32_64_add_U64_1_t21 <- inline_mul32_64_add_U64_1_lo U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }])], else_block: [] }", "Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }", "Ident(\"lo\")", "Ident(\"lo\")"] }
# 01742 Instruction { source: "inline_mul32_64_add_U64_1_t21 <- inline_mul32_64_add_U64_1_lo U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\", \"Ident(\\\"lo\\\")\", \"Ident(\\\"lo\\\")\"] }", opcode: Copy32, args: [Register(0xa0), Register(0x98)], resolved: None }
21 a0 98 
# if inline_mul32_64_add_U64_1_t19 < inline_mul32_64_add_U64_1_t21 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }])], else_block: [] }", "Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }"] }
# 01745 Instruction { source: "if inline_mul32_64_add_U64_1_t19 < inline_mul32_64_add_U64_1_t21 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\"] }", opcode: Cmp8, args: [Register(0x9b), Register(0x97)], resolved: None }
15 9b 97 
# 01748 Instruction { source: "if inline_mul32_64_add_U64_1_t19 < inline_mul32_64_add_U64_1_t21 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x9a), Register(0x96)], resolved: None }
16 9a 96 
# 0174b Instruction { source: "if inline_mul32_64_add_U64_1_t19 < inline_mul32_64_add_U64_1_t21 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x99), Register(0x95)], resolved: None }
16 99 95 
# 0174e Instruction { source: "if inline_mul32_64_add_U64_1_t19 < inline_mul32_64_add_U64_1_t21 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x98), Register(0x94)], resolved: None }
16 98 94 
# 01751 Instruction { source: "if inline_mul32_64_add_U64_1_t19 < inline_mul32_64_add_U64_1_t21 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\"] }", opcode: JcImm, args: [Label24(inline_mul32_64_add_U64_1_add_U64_if_else_0_2)], resolved: None }
71 8a 17 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_mul32_64_add_U64_1_t19 < inline_mul32_64_add_U64_1_t21 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\"] }", opcode: JmpImm, args: [Label24(inline_mul32_64_add_U64_1_add_U64_if_true_0_1)], resolved: None }
# :inline_mul32_64_add_U64_1_add_U64_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }])], else_block: [] }"] }
# inline_mul32_64_add_U64_1_add_U64_if_true_0_1
# inline_mul32_64_add_U64_1_t23 <- inline_mul32_64_add_U64_1_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# 01755 Instruction { source: "inline_mul32_64_add_U64_1_t23 <- inline_mul32_64_add_U64_1_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x9c), Register(0x94)], resolved: None }
21 9c 94 
# inline_mul32_64_add_U64_1_t24 <- 0n4/0x00000004u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 01758 Instruction { source: "inline_mul32_64_add_U64_1_t24 <- 0n4/0x00000004u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: LoadImm32, args: [Register(0x98), Constant32(0x00000004=4)], resolved: None }
20 98 04 00 00 00 
# inline_mul32_64_add_U64_1_t22 <- inline_mul32_64_add_U64_1_t23 Add inline_mul32_64_add_U64_1_t24
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))"] }
# 0175e Instruction { source: "inline_mul32_64_add_U64_1_t22 <- inline_mul32_64_add_U64_1_t23 Add inline_mul32_64_add_U64_1_t24\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0175f Instruction { source: "inline_mul32_64_add_U64_1_t22 <- inline_mul32_64_add_U64_1_t23 Add inline_mul32_64_add_U64_1_t24\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x94), Register(0x98), Register(0x94)], resolved: None }
30 94 98 94 
# 01763 Instruction { source: "inline_mul32_64_add_U64_1_t22 <- inline_mul32_64_add_U64_1_t23 Add inline_mul32_64_add_U64_1_t24\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_mul32_64_add_U64_1_t28 <- inline_mul32_64_add_U64_1_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "PtrFieldDeref(\"c\", \"hi\")", "PtrFieldDeref(\"c\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# 01764 Instruction { source: "inline_mul32_64_add_U64_1_t28 <- inline_mul32_64_add_U64_1_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x9c), Register(0x98)], resolved: None }
21 9c 98 
# inline_mul32_64_add_U64_1_t29 <- 0n4/0x00000004u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "PtrFieldDeref(\"c\", \"hi\")", "PtrFieldDeref(\"c\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 01767 Instruction { source: "inline_mul32_64_add_U64_1_t29 <- 0n4/0x00000004u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: LoadImm32, args: [Register(0x9c), Constant32(0x00000004=4)], resolved: None }
20 9c 04 00 00 00 
# inline_mul32_64_add_U64_1_t27 <- inline_mul32_64_add_U64_1_t28 Add inline_mul32_64_add_U64_1_t29
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "PtrFieldDeref(\"c\", \"hi\")", "PtrFieldDeref(\"c\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))"] }
# 0176d Instruction { source: "inline_mul32_64_add_U64_1_t27 <- inline_mul32_64_add_U64_1_t28 Add inline_mul32_64_add_U64_1_t29\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0176e Instruction { source: "inline_mul32_64_add_U64_1_t27 <- inline_mul32_64_add_U64_1_t28 Add inline_mul32_64_add_U64_1_t29\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x98), Register(0x9c), Register(0x98)], resolved: None }
30 98 9c 98 
# 01772 Instruction { source: "inline_mul32_64_add_U64_1_t27 <- inline_mul32_64_add_U64_1_t28 Add inline_mul32_64_add_U64_1_t29\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_mul32_64_add_U64_1_t26 <- mem[inline_mul32_64_add_U64_1_t27] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "PtrFieldDeref(\"c\", \"hi\")", "PtrFieldDeref(\"c\", \"hi\")"] }
# 01773 Instruction { source: "inline_mul32_64_add_U64_1_t26 <- mem[inline_mul32_64_add_U64_1_t27] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\"] }", opcode: Load32, args: [Register(0x98), Register(0x98)], resolved: None }
22 98 98 
# inline_mul32_64_add_U64_1_t30 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 01776 Instruction { source: "inline_mul32_64_add_U64_1_t30 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x9c), Constant32(0x00000001=1)], resolved: None }
20 9c 01 00 00 00 
# inline_mul32_64_add_U64_1_t25 <- inline_mul32_64_add_U64_1_t26 Add inline_mul32_64_add_U64_1_t30
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))"] }
# 0177c Instruction { source: "inline_mul32_64_add_U64_1_t25 <- inline_mul32_64_add_U64_1_t26 Add inline_mul32_64_add_U64_1_t30\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0177d Instruction { source: "inline_mul32_64_add_U64_1_t25 <- inline_mul32_64_add_U64_1_t26 Add inline_mul32_64_add_U64_1_t30\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x98), Register(0x9c), Register(0x98)], resolved: None }
30 98 9c 98 
# 01781 Instruction { source: "inline_mul32_64_add_U64_1_t25 <- inline_mul32_64_add_U64_1_t26 Add inline_mul32_64_add_U64_1_t30\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# mem[inline_mul32_64_add_U64_1_t22] <- inline_mul32_64_add_U64_1_t25 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }"] }
# 01782 Instruction { source: "mem[inline_mul32_64_add_U64_1_t22] <- inline_mul32_64_add_U64_1_t25 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\"] }", opcode: Store32_1, args: [Register(0x98), Register(0x94)], resolved: None }
23 98 94 
# 01785 Instruction { source: "mem[inline_mul32_64_add_U64_1_t22] <- inline_mul32_64_add_U64_1_t25 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto inline_mul32_64_add_U64_1_add_U64_if_end_0
# 	SourceContext { contexts: [] }
# 01786 Instruction { source: "goto inline_mul32_64_add_U64_1_add_U64_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_mul32_64_add_U64_1_add_U64_if_end_0)], resolved: None }
70 8a 17 00 
# :inline_mul32_64_add_U64_1_add_U64_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_mul32_64_add_U64_1_add_U64_if_else_0_2
# :inline_mul32_64_add_U64_1_add_U64_if_end_0
# 	SourceContext { contexts: [] }
# inline_mul32_64_add_U64_1_add_U64_if_end_0
# goto inline_mul32_64_add_U64_1_function_end_add_U64
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_mul32_64_add_U64_1_function_end_add_U64\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_mul32_64_add_U64_1_function_end_add_U64)], resolved: None }
# :inline_mul32_64_add_U64_1_function_end_add_U64
# 	SourceContext { contexts: [] }
# inline_mul32_64_add_U64_1_function_end_add_U64
# t53 <- 0n8/0x00000008u32 
# 	SourceContext { contexts: ["Return { value: None }"] }
# 0178a Instruction { source: "t53 <- 0n8/0x00000008u32 \n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: LoadImm32, args: [Register(0x94), Constant32(0x00000008=8)], resolved: None }
20 94 08 00 00 00 
# __frame_pointer <- __frame_pointer Add t53
# 	SourceContext { contexts: ["Return { value: None }"] }
# 01790 Instruction { source: "__frame_pointer <- __frame_pointer Add t53\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01791 Instruction { source: "__frame_pointer <- __frame_pointer Add t53\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: AddCarry32_1, args: [Register(0x0c), Register(0x94), Register(0x0c)], resolved: None }
30 0c 94 0c 
# 01795 Instruction { source: "__frame_pointer <- __frame_pointer Add t53\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# return None
# 	SourceContext { contexts: ["Return { value: None }"] }
# 01796 Instruction { source: "Dealloc 8 bytes from stack", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000008=8)], resolved: None }
32 0c 08 00 00 00 
# 0179c Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# :function_end_mul32_64
# 	SourceContext { contexts: [] }
# function_end_mul32_64
# Unreachable
# 	SourceContext { contexts: [] }
# 0179e Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
# :print_dec32
# Ret None
# Arg0=a
# Var a (Arg0 a Number(USIZE)) Reg(U32) Some([216, 217, 218, 219])
# Var b (Local b Number(USIZE) Reg(U32)) Reg(U32) Some([220, 221, 222, 223])
# Var inline_print_dec32_div32_by10_43_a (Arg0 a Number(USIZE)) Reg(U32) Some([220, 221, 222, 223])
# Var inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_a (Arg0 a Number(USIZE)) Reg(U32) Some([220, 221, 222, 223])
# Var inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t0 (t0 Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 3))) Reg(U8) Some([224])
# Var inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t1 (t1 Index("a", Number(U8, 0))) Reg(U8) Some([225])
# Var inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t10 (t10 Index("a", Number(U8, 3))) Reg(U8) Some([225])
# Var inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t11 (t11 Number(U8, 3)) Reg(U8) Some([224])
# Var inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t12 (t12 Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 31))) Reg(U8) Some([224])
# Var inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t13 (t13 Index("a", Number(U8, 0))) Reg(U8) Some([225])
# Var inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t14 (t14 Number(U8, 31)) Reg(U8) Some([224])
# Var inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t15 (t15 Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224)))) Reg(U8) Some([224])
# Var inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t16 (t16 Index("a", Number(U8, 0))) Reg(U8) Some([225])
# Var inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t17 (t17 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))) Reg(U8) Some([224])
# Var inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t18 (t18 Index("a", Number(U8, 1))) Reg(U8) Some([224])
# Var inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t19 (t19 Number(U8, 224)) Reg(U8) Some([226])
# Var inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t2 (t2 Number(U8, 3)) Reg(U8) Some([224])
# Var inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t20 (t20 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 31))) Reg(U8) Some([224])
# Var inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t21 (t21 Index("a", Number(U8, 1))) Reg(U8) Some([225])
# Var inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t22 (t22 Number(U8, 31)) Reg(U8) Some([224])
# Var inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t23 (t23 Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224)))) Reg(U8) Some([224])
# Var inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t24 (t24 Index("a", Number(U8, 1))) Reg(U8) Some([225])
# Var inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t25 (t25 Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))) Reg(U8) Some([224])
# Var inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t26 (t26 Index("a", Number(U8, 2))) Reg(U8) Some([224])
# Var inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t27 (t27 Number(U8, 224)) Reg(U8) Some([226])
# Var inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t28 (t28 Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 31))) Reg(U8) Some([224])
# Var inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t29 (t29 Index("a", Number(U8, 2))) Reg(U8) Some([225])
# Var inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t3 (t3 Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 3))) Reg(U8) Some([224])
# Var inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t30 (t30 Number(U8, 31)) Reg(U8) Some([224])
# Var inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t31 (t31 Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224)))) Reg(U8) Some([224])
# Var inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t32 (t32 Index("a", Number(U8, 2))) Reg(U8) Some([225])
# Var inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t33 (t33 Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))) Reg(U8) Some([224])
# Var inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t34 (t34 Index("a", Number(U8, 3))) Reg(U8) Some([224])
# Var inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t35 (t35 Number(U8, 224)) Reg(U8) Some([226])
# Var inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t36 (t36 Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 31))) Reg(U8) Some([224])
# Var inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t37 (t37 Index("a", Number(U8, 3))) Reg(U8) Some([225])
# Var inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t38 (t38 Number(U8, 31)) Reg(U8) Some([224])
# Var inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t39 (t39 Ident("a")) Reg(U32) Some([220, 221, 222, 223])
# Var inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t4 (t4 Index("a", Number(U8, 1))) Reg(U8) Some([225])
# Var inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t5 (t5 Number(U8, 3)) Reg(U8) Some([224])
# Var inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t6 (t6 Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 3))) Reg(U8) Some([224])
# Var inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t7 (t7 Index("a", Number(U8, 2))) Reg(U8) Some([225])
# Var inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t8 (t8 Number(U8, 3)) Reg(U8) Some([224])
# Var inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t9 (t9 Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 3))) Reg(U8) Some([224])
# Var inline_print_dec32_div32_by10_43_prod (Local prod Struct("U64") Static(987136)) Static(987136) None
# Var inline_print_dec32_div32_by10_43_t0 (t0 Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] })) Reg(U8) Some([227])
# Var inline_print_dec32_div32_by10_43_t1 (t1 Ident("a")) Reg(U32) Some([220, 221, 222, 223])
# Var inline_print_dec32_div32_by10_43_t2 (t2 Number(USIZE, 3435973837)) Reg(U32) Some([228, 229, 230, 231])
# Var inline_print_dec32_div32_by10_43_t3 (t3 AddressOf(Ident("prod"))) Reg(U32) Some([232, 233, 234, 235])
# Var inline_print_dec32_div32_by10_43_t4 (static "prod") Reg(U32) Some([232, 233, 234, 235])
# Var inline_print_dec32_div32_by10_43_t5 (t5 Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) Reg(U32) Some([220, 221, 222, 223])
# Var inline_print_dec32_div32_by10_43_t6 (t6 LocalFieldDeref("prod", "hi")) Reg(U32) Some([220, 221, 222, 223])
# Var inline_print_dec32_div32_by10_43_t7 (t7 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }) Reg(U32) Some([220, 221, 222, 223])
# Var inline_print_dec32_div32_by10_43_t8 (t8 Number(USIZE, 987136)) Reg(U32) Some([220, 221, 222, 223])
# Var inline_print_dec32_div32_by10_43_t9 (t9 Number(USIZE, 4)) Reg(U32) Some([228, 229, 230, 231])
# Var inline_print_dec32_mul32_by10_16_a (Arg0 a Number(USIZE)) Reg(U32) Some([216, 217, 218, 219])
# Var inline_print_dec32_mul32_by10_16_b (Local b Number(USIZE) Reg(U32)) Reg(U32) Some([220, 221, 222, 223])
# Var inline_print_dec32_mul32_by10_16_t0 (t0 Ident("a")) Reg(U32) Some([216, 217, 218, 219])
# Var inline_print_dec32_mul32_by10_16_t1 (t1 Ident("a")) Reg(U32) Some([220, 221, 222, 223])
# Var inline_print_dec32_mul32_by10_16_t2 (t2 Ident("a")) Reg(U32) Some([216, 217, 218, 219])
# Var inline_print_dec32_mul32_by10_16_t3 (t3 Ident("a")) Reg(U32) Some([220, 221, 222, 223])
# Var inline_print_dec32_mul32_by10_16_t4 (t4 Ident("b")) Reg(U32) Some([220, 221, 222, 223])
# Var inline_print_dec32_mul32_by10_16_t5 (t5 Ident("b")) Reg(U32) Some([228, 229, 230, 231])
# Var inline_print_dec32_mul32_by10_16_t6 (t6 Arithmetic(Add, Ident("b"), Ident("a"))) Reg(U32) Some([216, 217, 218, 219])
# Var inline_print_dec32_mul32_by10_16_t7 (t7 Ident("b")) Reg(U32) Some([220, 221, 222, 223])
# Var inline_print_dec32_mul32_by10_16_t8 (t8 Ident("a")) Reg(U32) Some([216, 217, 218, 219])
# Var inline_print_dec32_putc_31_c (Arg0 c Number(U8)) Reg(U8) Some([227])
# Var inline_print_dec32_putc_31_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([227])
# Var inline_print_dec32_putc_31_t1 (t1 Ident("c")) Reg(U8) Some([227])
# Var t0 (t0 Ident("a")) Reg(U32) Some([216, 217, 218, 219])
# Var t1 (t1 Number(USIZE, 256)) Reg(U32) Some([220, 221, 222, 223])
# Var t10 (t10 Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))] })) Reg(U8) Some([227])
# Var t11 (t11 Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))) Reg(U8) Some([227])
# Var t12 (t12 Index("a", Number(U8, 0))) Reg(U8) Some([227])
# Var t13 (t13 Number(U8, 48)) Reg(U8) Some([225])
# Var t2 (t2 Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] })) Reg(U8) Some([227])
# Var t3 (t3 Index("a", Number(U8, 0))) Reg(U8) Some([227])
# Var t4 (t4 Ident("a")) Reg(U32) Some([216, 217, 218, 219])
# Var t5 (t5 Call(Call { function: "print_dec32", parameters: [Ident("b")] })) Reg(U8) Some([227])
# Var t6 (t6 Ident("b")) Reg(U32) Some([220, 221, 222, 223])
# Var t7 (t7 Ident("a")) Reg(U32) Some([232, 233, 234, 235])
# Var t8 (t8 Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) Reg(U32) Some([216, 217, 218, 219])
# Var t9 (t9 Ident("b")) Reg(U32) Some([216, 217, 218, 219])
# 017a3 Instruction { source: "Save function parameter 'a' registers [0, 1, 2, 3] to locals [216, 217, 218, 219].", opcode: Copy32, args: [Register(0x00), Register(0xd8)], resolved: None }
21 00 d8 
# t0 <- a U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Index(\"a\", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t0 <- a U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xd8), Register(0xd8)], resolved: None }
# t1 <- 0n256/0x00000100u32 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Index(\"a\", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }", "Number(USIZE, 256)", "Number(USIZE, 256)"] }
# 017a6 Instruction { source: "t1 <- 0n256/0x00000100u32 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\", \"Number(USIZE, 256)\", \"Number(USIZE, 256)\"] }", opcode: LoadImm32, args: [Register(0xdc), Constant32(0x00000100=256)], resolved: None }
20 dc 00 01 00 00 
# if t0 < t1 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Index(\"a\", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }"] }
# 017ac Instruction { source: "if t0 < t1 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\"] }", opcode: Cmp8, args: [Register(0xdf), Register(0xdb)], resolved: None }
15 df db 
# 017af Instruction { source: "if t0 < t1 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\"] }", opcode: Cmp8IfZero, args: [Register(0xde), Register(0xda)], resolved: None }
16 de da 
# 017b2 Instruction { source: "if t0 < t1 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\"] }", opcode: Cmp8IfZero, args: [Register(0xdd), Register(0xd9)], resolved: None }
16 dd d9 
# 017b5 Instruction { source: "if t0 < t1 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\"] }", opcode: Cmp8IfZero, args: [Register(0xdc), Register(0xd8)], resolved: None }
16 dc d8 
# 017b8 Instruction { source: "if t0 < t1 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\"] }", opcode: JcImm, args: [Label24(print_dec32_if_else_0_2)], resolved: None }
71 de 17 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t0 < t1 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\"] }", opcode: JmpImm, args: [Label24(print_dec32_if_true_0_1)], resolved: None }
# :print_dec32_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Index(\"a\", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }"] }
# print_dec32_if_true_0_1
# t3 <- a[0x00..0x01] U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Index(\"a\", Number(U8, 0))] }) }", "Call(Call { function: \"print_dec8\", parameters: [Index(\"a\", Number(U8, 0))] })", "Call(Call { function: \"print_dec8\", parameters: [Index(\"a\", Number(U8, 0))] })", "Index(\"a\", Number(U8, 0))", "Index(\"a\", Number(U8, 0))"] }
# 017bc Instruction { source: "t3 <- a[0x00..0x01] U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\", \"Index(\\\"a\\\", Number(U8, 0))\", \"Index(\\\"a\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0xd8), Register(0xe3)], resolved: None }
0b d8 e3 
# None <= call print_dec8(t3,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Index(\"a\", Number(U8, 0))] }) }", "Call(Call { function: \"print_dec8\", parameters: [Index(\"a\", Number(U8, 0))] })", "Call(Call { function: \"print_dec8\", parameters: [Index(\"a\", Number(U8, 0))] })"] }
# 017bf Instruction { source: "Arg0[a]=t3 None <= call print_dec8(t3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\"] }", opcode: Copy8, args: [Register(0xe3), Register(0x00)], resolved: None }
0b e3 00 
# Registers used by this function: {216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235}
# Registers used by callee tree: {128, 236, 237, 238}
# Registers to save: []
# 017c2 Instruction { source: "PseudoCall(Label24(:print_dec8))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 017c8 Instruction { source: "PseudoCall(Label24(:print_dec8))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c d2 17 00 00 
# 017ce Instruction { source: "PseudoCall(Label24(:print_dec8))", opcode: JmpImm, args: [Label24(:print_dec8)], resolved: None }
70 83 19 00 
# 017d2 Instruction { source: "PseudoCall(Label24(:print_dec8))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# return None
# 	SourceContext { contexts: ["Return { value: None }"] }
# 017d8 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# goto print_dec32_if_end_0
# 	SourceContext { contexts: [] }
# 017da Instruction { source: "goto print_dec32_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(print_dec32_if_end_0)], resolved: None }
70 de 17 00 
# :print_dec32_if_else_0_2
# 	SourceContext { contexts: [] }
# print_dec32_if_else_0_2
# :print_dec32_if_end_0
# 	SourceContext { contexts: [] }
# print_dec32_if_end_0
# t4 <- a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"div32_by10\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"div32_by10\", parameters: [Ident(\"a\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t4 <- a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32_by10\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32_by10\\\", parameters: [Ident(\\\"a\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xd8), Register(0xd8)], resolved: None }
# inline_print_dec32_div32_by10_43_a <- t4 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"div32_by10\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"div32_by10\", parameters: [Ident(\"a\")] })"] }
# 017de Instruction { source: "inline_print_dec32_div32_by10_43_a <- t4 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32_by10\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32_by10\\\", parameters: [Ident(\\\"a\\\")] })\"] }", opcode: Copy32, args: [Register(0xd8), Register(0xdc)], resolved: None }
21 d8 dc 
# inline_print_dec32_div32_by10_43_t1 <- inline_print_dec32_div32_by10_43_a U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] }) }", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] })", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_print_dec32_div32_by10_43_t1 <- inline_print_dec32_div32_by10_43_a U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xdc), Register(0xdc)], resolved: None }
# inline_print_dec32_div32_by10_43_t2 <- 0xcccccccdu32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] }) }", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] })", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] })", "Number(USIZE, 3435973837)", "Number(USIZE, 3435973837)"] }
# 017e1 Instruction { source: "inline_print_dec32_div32_by10_43_t2 <- 0xcccccccdu32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] })\", \"Number(USIZE, 3435973837)\", \"Number(USIZE, 3435973837)\"] }", opcode: LoadImm32, args: [Register(0xe4), Constant32(0xcccccccd=3435973837)], resolved: None }
20 e4 cd cc cc cc 
# inline_print_dec32_div32_by10_43_t4 <- 0n987136/0x000f1000u32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] }) }", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] })", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] })", "AddressOf(Ident(\"prod\"))", "AddressOf(Ident(\"prod\"))"] }
# 017e7 Instruction { source: "inline_print_dec32_div32_by10_43_t4 <- 0n987136/0x000f1000u32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] })\", \"AddressOf(Ident(\\\"prod\\\"))\", \"AddressOf(Ident(\\\"prod\\\"))\"] }", opcode: LoadImm32, args: [Register(0xe8), Constant32(0x000f1000=987136)], resolved: None }
20 e8 00 10 0f 00 
# inline_print_dec32_div32_by10_43_t3 <- inline_print_dec32_div32_by10_43_t4 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] }) }", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] })", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] })", "AddressOf(Ident(\"prod\"))", "AddressOf(Ident(\"prod\"))"] }
# optimized away noop copy Instruction { source: "inline_print_dec32_div32_by10_43_t3 <- inline_print_dec32_div32_by10_43_t4 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] })\", \"AddressOf(Ident(\\\"prod\\\"))\", \"AddressOf(Ident(\\\"prod\\\"))\"] }", opcode: Copy32, args: [Register(0xe8), Register(0xe8)], resolved: None }
# None <= call mul32_64(inline_print_dec32_div32_by10_43_t1,inline_print_dec32_div32_by10_43_t2,inline_print_dec32_div32_by10_43_t3,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] }) }", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] })", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] })"] }
# 017ed Instruction { source: "Arg0[a]=inline_print_dec32_div32_by10_43_t1 None <= call mul32_64(inline_print_dec32_div32_by10_43_t1,inline_print_dec32_div32_by10_43_t2,inline_print_dec32_div32_by10_43_t3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] })\"] }", opcode: Copy32, args: [Register(0xdc), Register(0x00)], resolved: None }
21 dc 00 
# 017f0 Instruction { source: "Arg1[b]=inline_print_dec32_div32_by10_43_t2 None <= call mul32_64(inline_print_dec32_div32_by10_43_t1,inline_print_dec32_div32_by10_43_t2,inline_print_dec32_div32_by10_43_t3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] })\"] }", opcode: Copy32, args: [Register(0xe4), Register(0x04)], resolved: None }
21 e4 04 
# 017f3 Instruction { source: "Arg2[c]=inline_print_dec32_div32_by10_43_t3 None <= call mul32_64(inline_print_dec32_div32_by10_43_t1,inline_print_dec32_div32_by10_43_t2,inline_print_dec32_div32_by10_43_t3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] })\"] }", opcode: Copy32, args: [Register(0xe8), Register(0x08)], resolved: None }
21 e8 08 
# Registers used by this function: {216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235}
# Registers used by callee tree: {148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 200, 201, 202, 203, 204, 208, 209, 210, 211, 212, 213, 214, 215}
# Registers to save: []
# 017f6 Instruction { source: "PseudoCall(Label24(:mul32_64))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 017fc Instruction { source: "PseudoCall(Label24(:mul32_64))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 06 18 00 00 
# 01802 Instruction { source: "PseudoCall(Label24(:mul32_64))", opcode: JmpImm, args: [Label24(:mul32_64)], resolved: None }
70 c9 12 00 
# 01806 Instruction { source: "PseudoCall(Label24(:mul32_64))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# inline_print_dec32_div32_by10_43_t8 <- 0n987136/0x000f1000u32 
# 	SourceContext { contexts: ["Return { value: Some(Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })) }", "Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })", "Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })", "LocalFieldDeref(\"prod\", \"hi\")", "LocalFieldDeref(\"prod\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))", "Number(USIZE, 987136)", "Number(USIZE, 987136)"] }
# 0180c Instruction { source: "inline_print_dec32_div32_by10_43_t8 <- 0n987136/0x000f1000u32 \n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })) }\", \"Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })\", \"Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })\", \"LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")\", \"LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))\", \"Number(USIZE, 987136)\", \"Number(USIZE, 987136)\"] }", opcode: LoadImm32, args: [Register(0xdc), Constant32(0x000f1000=987136)], resolved: None }
20 dc 00 10 0f 00 
# inline_print_dec32_div32_by10_43_t9 <- 0n4/0x00000004u32 
# 	SourceContext { contexts: ["Return { value: Some(Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })) }", "Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })", "Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })", "LocalFieldDeref(\"prod\", \"hi\")", "LocalFieldDeref(\"prod\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 01812 Instruction { source: "inline_print_dec32_div32_by10_43_t9 <- 0n4/0x00000004u32 \n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })) }\", \"Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })\", \"Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })\", \"LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")\", \"LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: LoadImm32, args: [Register(0xe4), Constant32(0x00000004=4)], resolved: None }
20 e4 04 00 00 00 
# inline_print_dec32_div32_by10_43_t7 <- inline_print_dec32_div32_by10_43_t8 Add inline_print_dec32_div32_by10_43_t9
# 	SourceContext { contexts: ["Return { value: Some(Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })) }", "Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })", "Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })", "LocalFieldDeref(\"prod\", \"hi\")", "LocalFieldDeref(\"prod\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))"] }
# 01818 Instruction { source: "inline_print_dec32_div32_by10_43_t7 <- inline_print_dec32_div32_by10_43_t8 Add inline_print_dec32_div32_by10_43_t9\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })) }\", \"Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })\", \"Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })\", \"LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")\", \"LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01819 Instruction { source: "inline_print_dec32_div32_by10_43_t7 <- inline_print_dec32_div32_by10_43_t8 Add inline_print_dec32_div32_by10_43_t9\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })) }\", \"Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })\", \"Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })\", \"LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")\", \"LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0xdc), Register(0xe4), Register(0xdc)], resolved: None }
30 dc e4 dc 
# 0181d Instruction { source: "inline_print_dec32_div32_by10_43_t7 <- inline_print_dec32_div32_by10_43_t8 Add inline_print_dec32_div32_by10_43_t9\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })) }\", \"Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })\", \"Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })\", \"LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")\", \"LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_print_dec32_div32_by10_43_t6 <- mem[inline_print_dec32_div32_by10_43_t7] U32
# 	SourceContext { contexts: ["Return { value: Some(Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })) }", "Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })", "Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })", "LocalFieldDeref(\"prod\", \"hi\")", "LocalFieldDeref(\"prod\", \"hi\")"] }
# 0181e Instruction { source: "inline_print_dec32_div32_by10_43_t6 <- mem[inline_print_dec32_div32_by10_43_t7] U32\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })) }\", \"Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })\", \"Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })\", \"LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")\", \"LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")\"] }", opcode: Load32, args: [Register(0xdc), Register(0xdc)], resolved: None }
22 dc dc 
# inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_a <- inline_print_dec32_div32_by10_43_t6 U32
# 	SourceContext { contexts: ["Return { value: Some(Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })) }", "Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })", "Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })"] }
# optimized away noop copy Instruction { source: "inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_a <- inline_print_dec32_div32_by10_43_t6 U32\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })) }\", \"Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })\", \"Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })\"] }", opcode: Copy32, args: [Register(0xdc), Register(0xdc)], resolved: None }
# inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t1 <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_a[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 3)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 3))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 3))", "Index(\"a\", Number(U8, 0))", "Index(\"a\", Number(U8, 0))"] }
# 01821 Instruction { source: "inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t1 <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_a[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 3)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 3))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 0))\", \"Index(\\\"a\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0xdc), Register(0xe1)], resolved: None }
0b dc e1 
# inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t2 <- 0n3/0x03u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 3)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 3))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 3))", "Number(U8, 3)", "Number(U8, 3)"] }
# 01824 Instruction { source: "inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t2 <- 0n3/0x03u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 3)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 3))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 3))\", \"Number(U8, 3)\", \"Number(U8, 3)\"] }", opcode: LoadImm8, args: [Register(0xe0), Constant8(0x03=3)], resolved: None }
04 e0 03 
# inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t0 <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t1 RotateRight inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t2
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 3)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 3))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 3))"] }
# 01827 Instruction { source: "inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t0 <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t1 RotateRight inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t2\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 3)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 3))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 3))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0xe0), Register(0xe1), Register(0xe0)], resolved: None }
1e 04 e0 e1 e0 
# inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_a[0x00..0x01] <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t0 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 3)) }"] }
# 0182c Instruction { source: "inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_a[0x00..0x01] <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t0 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 3)) }\"] }", opcode: Copy8, args: [Register(0xe0), Register(0xdc)], resolved: None }
0b e0 dc 
# inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t4 <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 3)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 3))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 3))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 0182f Instruction { source: "inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t4 <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 3)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 3))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xdd), Register(0xe1)], resolved: None }
0b dd e1 
# inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t5 <- 0n3/0x03u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 3)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 3))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 3))", "Number(U8, 3)", "Number(U8, 3)"] }
# 01832 Instruction { source: "inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t5 <- 0n3/0x03u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 3)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 3))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 3))\", \"Number(U8, 3)\", \"Number(U8, 3)\"] }", opcode: LoadImm8, args: [Register(0xe0), Constant8(0x03=3)], resolved: None }
04 e0 03 
# inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t3 <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t4 RotateRight inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t5
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 3)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 3))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 3))"] }
# 01835 Instruction { source: "inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t3 <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t4 RotateRight inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t5\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 3)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 3))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 3))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0xe0), Register(0xe1), Register(0xe0)], resolved: None }
1e 04 e0 e1 e0 
# inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_a[0x01..0x02] <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t3 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 3)) }"] }
# 0183a Instruction { source: "inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_a[0x01..0x02] <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 3)) }\"] }", opcode: Copy8, args: [Register(0xe0), Register(0xdd)], resolved: None }
0b e0 dd 
# inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t7 <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 3)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 3))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 3))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 0183d Instruction { source: "inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t7 <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 3)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 3))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0xde), Register(0xe1)], resolved: None }
0b de e1 
# inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t8 <- 0n3/0x03u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 3)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 3))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 3))", "Number(U8, 3)", "Number(U8, 3)"] }
# 01840 Instruction { source: "inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t8 <- 0n3/0x03u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 3)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 3))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 3))\", \"Number(U8, 3)\", \"Number(U8, 3)\"] }", opcode: LoadImm8, args: [Register(0xe0), Constant8(0x03=3)], resolved: None }
04 e0 03 
# inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t6 <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t7 RotateRight inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 3)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 3))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 3))"] }
# 01843 Instruction { source: "inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t6 <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t7 RotateRight inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 3)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 3))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 3))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0xe0), Register(0xe1), Register(0xe0)], resolved: None }
1e 04 e0 e1 e0 
# inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_a[0x02..0x03] <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t6 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 3)) }"] }
# 01848 Instruction { source: "inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_a[0x02..0x03] <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t6 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 3)) }\"] }", opcode: Copy8, args: [Register(0xe0), Register(0xde)], resolved: None }
0b e0 de 
# inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t10 <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_a[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 3)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 3))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 3))", "Index(\"a\", Number(U8, 3))", "Index(\"a\", Number(U8, 3))"] }
# 0184b Instruction { source: "inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t10 <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_a[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 3)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 3))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0xdf), Register(0xe1)], resolved: None }
0b df e1 
# inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t11 <- 0n3/0x03u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 3)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 3))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 3))", "Number(U8, 3)", "Number(U8, 3)"] }
# 0184e Instruction { source: "inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t11 <- 0n3/0x03u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 3)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 3))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 3))\", \"Number(U8, 3)\", \"Number(U8, 3)\"] }", opcode: LoadImm8, args: [Register(0xe0), Constant8(0x03=3)], resolved: None }
04 e0 03 
# inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t9 <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t10 RotateRight inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t11
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 3)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 3))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 3))"] }
# 01851 Instruction { source: "inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t9 <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t10 RotateRight inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t11\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 3)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 3))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 3))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0xe0), Register(0xe1), Register(0xe0)], resolved: None }
1e 04 e0 e1 e0 
# inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_a[0x03..0x04] <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t9 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 3)) }"] }
# 01856 Instruction { source: "inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_a[0x03..0x04] <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t9 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 3)) }\"] }", opcode: Copy8, args: [Register(0xe0), Register(0xdf)], resolved: None }
0b e0 df 
# inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t13 <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_a[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 31)) }", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 31))", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 31))", "Index(\"a\", Number(U8, 0))", "Index(\"a\", Number(U8, 0))"] }
# 01859 Instruction { source: "inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t13 <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_a[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 31)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 31))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 31))\", \"Index(\\\"a\\\", Number(U8, 0))\", \"Index(\\\"a\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0xdc), Register(0xe1)], resolved: None }
0b dc e1 
# inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t14 <- 0n31/0x1fu8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 31)) }", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 31))", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 31))", "Number(U8, 31)", "Number(U8, 31)"] }
# 0185c Instruction { source: "inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t14 <- 0n31/0x1fu8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 31)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 31))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 31))\", \"Number(U8, 31)\", \"Number(U8, 31)\"] }", opcode: LoadImm8, args: [Register(0xe0), Constant8(0x1f=31)], resolved: None }
04 e0 1f 
# inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t12 <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t13 BitwiseAnd inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t14
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 31)) }", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 31))", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 31))"] }
# 0185f Instruction { source: "inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t12 <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t13 BitwiseAnd inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t14\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 31)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 31))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 31))\"] }", opcode: And8, args: [Register(0xe1), Register(0xe0), Register(0xe0)], resolved: None }
1b e1 e0 e0 
# inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_a[0x00..0x01] <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t12 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 31)) }"] }
# 01863 Instruction { source: "inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_a[0x00..0x01] <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t12 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 31)) }\"] }", opcode: Copy8, args: [Register(0xe0), Register(0xdc)], resolved: None }
0b e0 dc 
# inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t16 <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_a[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224)))", "Index(\"a\", Number(U8, 0))", "Index(\"a\", Number(U8, 0))"] }
# 01866 Instruction { source: "inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t16 <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_a[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224)))\", \"Index(\\\"a\\\", Number(U8, 0))\", \"Index(\\\"a\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0xdc), Register(0xe1)], resolved: None }
0b dc e1 
# inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t18 <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224)))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 01869 Instruction { source: "inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t18 <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xdd), Register(0xe0)], resolved: None }
0b dd e0 
# inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t19 <- 0n224/0xe0u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224)))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224))", "Number(U8, 224)", "Number(U8, 224)"] }
# 0186c Instruction { source: "inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t19 <- 0n224/0xe0u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224))\", \"Number(U8, 224)\", \"Number(U8, 224)\"] }", opcode: LoadImm8, args: [Register(0xe2), Constant8(0xe0=224)], resolved: None }
04 e2 e0 
# inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t17 <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t18 BitwiseAnd inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t19
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224)))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224))"] }
# 0186f Instruction { source: "inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t17 <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t18 BitwiseAnd inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t19\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224))\"] }", opcode: And8, args: [Register(0xe0), Register(0xe2), Register(0xe0)], resolved: None }
1b e0 e2 e0 
# inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t15 <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t16 BitwiseOr inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t17
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224)))"] }
# 01873 Instruction { source: "inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t15 <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t16 BitwiseOr inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t17\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224)))\"] }", opcode: Or8, args: [Register(0xe1), Register(0xe0), Register(0xe0)], resolved: None }
1c e1 e0 e0 
# inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_a[0x00..0x01] <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t15 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224))) }"] }
# 01877 Instruction { source: "inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_a[0x00..0x01] <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t15 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224))) }\"] }", opcode: Copy8, args: [Register(0xe0), Register(0xdc)], resolved: None }
0b e0 dc 
# inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t21 <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 31)) }", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 31))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 31))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 0187a Instruction { source: "inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t21 <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 31)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 31))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 31))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xdd), Register(0xe1)], resolved: None }
0b dd e1 
# inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t22 <- 0n31/0x1fu8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 31)) }", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 31))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 31))", "Number(U8, 31)", "Number(U8, 31)"] }
# 0187d Instruction { source: "inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t22 <- 0n31/0x1fu8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 31)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 31))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 31))\", \"Number(U8, 31)\", \"Number(U8, 31)\"] }", opcode: LoadImm8, args: [Register(0xe0), Constant8(0x1f=31)], resolved: None }
04 e0 1f 
# inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t20 <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t21 BitwiseAnd inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t22
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 31)) }", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 31))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 31))"] }
# 01880 Instruction { source: "inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t20 <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t21 BitwiseAnd inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t22\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 31)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 31))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 31))\"] }", opcode: And8, args: [Register(0xe1), Register(0xe0), Register(0xe0)], resolved: None }
1b e1 e0 e0 
# inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_a[0x01..0x02] <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t20 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 31)) }"] }
# 01884 Instruction { source: "inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_a[0x01..0x02] <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t20 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 31)) }\"] }", opcode: Copy8, args: [Register(0xe0), Register(0xdd)], resolved: None }
0b e0 dd 
# inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t24 <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224)))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 01887 Instruction { source: "inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t24 <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224)))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xdd), Register(0xe1)], resolved: None }
0b dd e1 
# inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t26 <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224)))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 0188a Instruction { source: "inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t26 <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0xde), Register(0xe0)], resolved: None }
0b de e0 
# inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t27 <- 0n224/0xe0u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224)))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224))", "Number(U8, 224)", "Number(U8, 224)"] }
# 0188d Instruction { source: "inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t27 <- 0n224/0xe0u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224))\", \"Number(U8, 224)\", \"Number(U8, 224)\"] }", opcode: LoadImm8, args: [Register(0xe2), Constant8(0xe0=224)], resolved: None }
04 e2 e0 
# inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t25 <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t26 BitwiseAnd inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t27
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224)))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224))"] }
# 01890 Instruction { source: "inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t25 <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t26 BitwiseAnd inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t27\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224))\"] }", opcode: And8, args: [Register(0xe0), Register(0xe2), Register(0xe0)], resolved: None }
1b e0 e2 e0 
# inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t23 <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t24 BitwiseOr inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t25
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224)))"] }
# 01894 Instruction { source: "inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t23 <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t24 BitwiseOr inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t25\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224)))\"] }", opcode: Or8, args: [Register(0xe1), Register(0xe0), Register(0xe0)], resolved: None }
1c e1 e0 e0 
# inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_a[0x01..0x02] <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t23 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224))) }"] }
# 01898 Instruction { source: "inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_a[0x01..0x02] <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t23 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224))) }\"] }", opcode: Copy8, args: [Register(0xe0), Register(0xdd)], resolved: None }
0b e0 dd 
# inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t29 <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 31)) }", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 31))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 31))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 0189b Instruction { source: "inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t29 <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 31)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 31))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 31))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0xde), Register(0xe1)], resolved: None }
0b de e1 
# inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t30 <- 0n31/0x1fu8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 31)) }", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 31))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 31))", "Number(U8, 31)", "Number(U8, 31)"] }
# 0189e Instruction { source: "inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t30 <- 0n31/0x1fu8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 31)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 31))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 31))\", \"Number(U8, 31)\", \"Number(U8, 31)\"] }", opcode: LoadImm8, args: [Register(0xe0), Constant8(0x1f=31)], resolved: None }
04 e0 1f 
# inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t28 <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t29 BitwiseAnd inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t30
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 31)) }", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 31))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 31))"] }
# 018a1 Instruction { source: "inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t28 <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t29 BitwiseAnd inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t30\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 31)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 31))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 31))\"] }", opcode: And8, args: [Register(0xe1), Register(0xe0), Register(0xe0)], resolved: None }
1b e1 e0 e0 
# inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_a[0x02..0x03] <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t28 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 31)) }"] }
# 018a5 Instruction { source: "inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_a[0x02..0x03] <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t28 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 31)) }\"] }", opcode: Copy8, args: [Register(0xe0), Register(0xde)], resolved: None }
0b e0 de 
# inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t32 <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224)))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 018a8 Instruction { source: "inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t32 <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224)))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0xde), Register(0xe1)], resolved: None }
0b de e1 
# inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t34 <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_a[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224)))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224))", "Index(\"a\", Number(U8, 3))", "Index(\"a\", Number(U8, 3))"] }
# 018ab Instruction { source: "inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t34 <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_a[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224))\", \"Index(\\\"a\\\", Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0xdf), Register(0xe0)], resolved: None }
0b df e0 
# inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t35 <- 0n224/0xe0u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224)))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224))", "Number(U8, 224)", "Number(U8, 224)"] }
# 018ae Instruction { source: "inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t35 <- 0n224/0xe0u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224))\", \"Number(U8, 224)\", \"Number(U8, 224)\"] }", opcode: LoadImm8, args: [Register(0xe2), Constant8(0xe0=224)], resolved: None }
04 e2 e0 
# inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t33 <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t34 BitwiseAnd inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t35
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224)))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224))"] }
# 018b1 Instruction { source: "inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t33 <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t34 BitwiseAnd inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t35\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224))\"] }", opcode: And8, args: [Register(0xe0), Register(0xe2), Register(0xe0)], resolved: None }
1b e0 e2 e0 
# inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t31 <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t32 BitwiseOr inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t33
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224)))"] }
# 018b5 Instruction { source: "inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t31 <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t32 BitwiseOr inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t33\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224)))\"] }", opcode: Or8, args: [Register(0xe1), Register(0xe0), Register(0xe0)], resolved: None }
1c e1 e0 e0 
# inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_a[0x02..0x03] <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t31 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224))) }"] }
# 018b9 Instruction { source: "inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_a[0x02..0x03] <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t31 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224))) }\"] }", opcode: Copy8, args: [Register(0xe0), Register(0xde)], resolved: None }
0b e0 de 
# inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t37 <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_a[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 31)) }", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 31))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 31))", "Index(\"a\", Number(U8, 3))", "Index(\"a\", Number(U8, 3))"] }
# 018bc Instruction { source: "inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t37 <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_a[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 31)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 31))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 31))\", \"Index(\\\"a\\\", Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0xdf), Register(0xe1)], resolved: None }
0b df e1 
# inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t38 <- 0n31/0x1fu8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 31)) }", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 31))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 31))", "Number(U8, 31)", "Number(U8, 31)"] }
# 018bf Instruction { source: "inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t38 <- 0n31/0x1fu8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 31)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 31))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 31))\", \"Number(U8, 31)\", \"Number(U8, 31)\"] }", opcode: LoadImm8, args: [Register(0xe0), Constant8(0x1f=31)], resolved: None }
04 e0 1f 
# inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t36 <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t37 BitwiseAnd inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t38
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 31)) }", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 31))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 31))"] }
# 018c2 Instruction { source: "inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t36 <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t37 BitwiseAnd inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t38\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 31)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 31))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 31))\"] }", opcode: And8, args: [Register(0xe1), Register(0xe0), Register(0xe0)], resolved: None }
1b e1 e0 e0 
# inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_a[0x03..0x04] <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t36 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 31)) }"] }
# 018c6 Instruction { source: "inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_a[0x03..0x04] <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t36 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 31)) }\"] }", opcode: Copy8, args: [Register(0xe0), Register(0xdf)], resolved: None }
0b e0 df 
# inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t39 <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_a U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"a\")) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t39 <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_a U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"a\\\")) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xdc), Register(0xdc)], resolved: None }
# inline_print_dec32_div32_by10_43_t5 <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t39 U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"a\")) }"] }
# optimized away noop copy Instruction { source: "inline_print_dec32_div32_by10_43_t5 <- inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_t39 U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"a\\\")) }\"] }", opcode: Copy32, args: [Register(0xdc), Register(0xdc)], resolved: None }
# goto inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_function_end_shiftright3
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"a\")) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_function_end_shiftright3\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"a\\\")) }\"] }", opcode: JmpImm, args: [Label24(inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_function_end_shiftright3)], resolved: None }
# :inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_function_end_shiftright3
# 	SourceContext { contexts: [] }
# inline_print_dec32_div32_by10_43_inline_div32_by10_shiftright3_42_function_end_shiftright3
# b <- inline_print_dec32_div32_by10_43_t5 U32
# 	SourceContext { contexts: ["Return { value: Some(Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })) }"] }
# optimized away noop copy Instruction { source: "b <- inline_print_dec32_div32_by10_43_t5 U32\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })) }\"] }", opcode: Copy32, args: [Register(0xdc), Register(0xdc)], resolved: None }
# goto inline_print_dec32_div32_by10_43_function_end_div32_by10
# 	SourceContext { contexts: ["Return { value: Some(Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_print_dec32_div32_by10_43_function_end_div32_by10\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })) }\"] }", opcode: JmpImm, args: [Label24(inline_print_dec32_div32_by10_43_function_end_div32_by10)], resolved: None }
# :inline_print_dec32_div32_by10_43_function_end_div32_by10
# 	SourceContext { contexts: [] }
# inline_print_dec32_div32_by10_43_function_end_div32_by10
# t6 <- b U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"b\")] }) }", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"b\")] })", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"b\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "t6 <- b U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0xdc), Register(0xdc)], resolved: None }
# None <= call print_dec32(t6,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"b\")] }) }", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"b\")] })", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"b\")] })"] }
# 018c9 Instruction { source: "Arg0[a]=t6 None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0xdc), Register(0x00)], resolved: None }
21 dc 00 
# Registers used by this function: {216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235}
# Registers used by callee tree: {128, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 200, 201, 202, 203, 204, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238}
# Registers to save: [216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235]
# 018cc Instruction { source: "Saving reg0xeb before None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0xeb)], resolved: None }
09 eb 
# 018ce Instruction { source: "Saving reg0xea before None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0xea)], resolved: None }
09 ea 
# 018d0 Instruction { source: "Saving reg0xe9 before None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0xe9)], resolved: None }
09 e9 
# 018d2 Instruction { source: "Saving reg0xe8 before None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0xe8)], resolved: None }
09 e8 
# 018d4 Instruction { source: "Saving reg0xe7 before None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0xe7)], resolved: None }
09 e7 
# 018d6 Instruction { source: "Saving reg0xe6 before None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0xe6)], resolved: None }
09 e6 
# 018d8 Instruction { source: "Saving reg0xe5 before None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0xe5)], resolved: None }
09 e5 
# 018da Instruction { source: "Saving reg0xe4 before None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0xe4)], resolved: None }
09 e4 
# 018dc Instruction { source: "Saving reg0xe3 before None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0xe3)], resolved: None }
09 e3 
# 018de Instruction { source: "Saving reg0xe2 before None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0xe2)], resolved: None }
09 e2 
# 018e0 Instruction { source: "Saving reg0xe1 before None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0xe1)], resolved: None }
09 e1 
# 018e2 Instruction { source: "Saving reg0xe0 before None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0xe0)], resolved: None }
09 e0 
# 018e4 Instruction { source: "Saving reg0xdf before None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0xdf)], resolved: None }
09 df 
# 018e6 Instruction { source: "Saving reg0xde before None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0xde)], resolved: None }
09 de 
# 018e8 Instruction { source: "Saving reg0xdd before None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0xdd)], resolved: None }
09 dd 
# 018ea Instruction { source: "Saving reg0xdc before None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0xdc)], resolved: None }
09 dc 
# 018ec Instruction { source: "Saving reg0xdb before None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0xdb)], resolved: None }
09 db 
# 018ee Instruction { source: "Saving reg0xda before None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0xda)], resolved: None }
09 da 
# 018f0 Instruction { source: "Saving reg0xd9 before None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0xd9)], resolved: None }
09 d9 
# 018f2 Instruction { source: "Saving reg0xd8 before None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0xd8)], resolved: None }
09 d8 
# 018f4 Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 018fa Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 04 19 00 00 
# 01900 Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: JmpImm, args: [Label24(:print_dec32)], resolved: None }
70 a3 17 00 
# 01904 Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 0190a Instruction { source: "Restoring reg0xd8 after None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0xd8)], resolved: None }
0a d8 
# 0190c Instruction { source: "Restoring reg0xd9 after None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0xd9)], resolved: None }
0a d9 
# 0190e Instruction { source: "Restoring reg0xda after None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0xda)], resolved: None }
0a da 
# 01910 Instruction { source: "Restoring reg0xdb after None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0xdb)], resolved: None }
0a db 
# 01912 Instruction { source: "Restoring reg0xdc after None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0xdc)], resolved: None }
0a dc 
# 01914 Instruction { source: "Restoring reg0xdd after None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0xdd)], resolved: None }
0a dd 
# 01916 Instruction { source: "Restoring reg0xde after None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0xde)], resolved: None }
0a de 
# 01918 Instruction { source: "Restoring reg0xdf after None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0xdf)], resolved: None }
0a df 
# 0191a Instruction { source: "Restoring reg0xe0 after None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0xe0)], resolved: None }
0a e0 
# 0191c Instruction { source: "Restoring reg0xe1 after None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0xe1)], resolved: None }
0a e1 
# 0191e Instruction { source: "Restoring reg0xe2 after None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0xe2)], resolved: None }
0a e2 
# 01920 Instruction { source: "Restoring reg0xe3 after None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0xe3)], resolved: None }
0a e3 
# 01922 Instruction { source: "Restoring reg0xe4 after None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0xe4)], resolved: None }
0a e4 
# 01924 Instruction { source: "Restoring reg0xe5 after None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0xe5)], resolved: None }
0a e5 
# 01926 Instruction { source: "Restoring reg0xe6 after None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0xe6)], resolved: None }
0a e6 
# 01928 Instruction { source: "Restoring reg0xe7 after None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0xe7)], resolved: None }
0a e7 
# 0192a Instruction { source: "Restoring reg0xe8 after None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0xe8)], resolved: None }
0a e8 
# 0192c Instruction { source: "Restoring reg0xe9 after None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0xe9)], resolved: None }
0a e9 
# 0192e Instruction { source: "Restoring reg0xea after None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0xea)], resolved: None }
0a ea 
# 01930 Instruction { source: "Restoring reg0xeb after None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0xeb)], resolved: None }
0a eb 
# t7 <- a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] })) }", "Arithmetic(Subtract, Ident(\"a\"), Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] }))", "Ident(\"a\")", "Ident(\"a\")"] }
# 01932 Instruction { source: "t7 <- a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] }))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xd8), Register(0xe8)], resolved: None }
21 d8 e8 
# t9 <- b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] })) }", "Arithmetic(Subtract, Ident(\"a\"), Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] }))", "Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] })", "Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# 01935 Instruction { source: "t9 <- b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] }))\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0xdc), Register(0xd8)], resolved: None }
21 dc d8 
# inline_print_dec32_mul32_by10_16_a <- t9 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] })) }", "Arithmetic(Subtract, Ident(\"a\"), Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] }))", "Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] })", "Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] })"] }
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_16_a <- t9 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] }))\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0xd8), Register(0xd8)], resolved: None }
# inline_print_dec32_mul32_by10_16_t0 <- inline_print_dec32_mul32_by10_16_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }", "Arithmetic(Add, Ident(\"a\"), Ident(\"a\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_16_t0 <- inline_print_dec32_mul32_by10_16_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xd8), Register(0xd8)], resolved: None }
# inline_print_dec32_mul32_by10_16_t1 <- inline_print_dec32_mul32_by10_16_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }", "Arithmetic(Add, Ident(\"a\"), Ident(\"a\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# 01938 Instruction { source: "inline_print_dec32_mul32_by10_16_t1 <- inline_print_dec32_mul32_by10_16_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xd8), Register(0xdc)], resolved: None }
21 d8 dc 
# inline_print_dec32_mul32_by10_16_a <- inline_print_dec32_mul32_by10_16_t0 Add inline_print_dec32_mul32_by10_16_t1
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }", "Arithmetic(Add, Ident(\"a\"), Ident(\"a\"))"] }
# 0193b Instruction { source: "inline_print_dec32_mul32_by10_16_a <- inline_print_dec32_mul32_by10_16_t0 Add inline_print_dec32_mul32_by10_16_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0193c Instruction { source: "inline_print_dec32_mul32_by10_16_a <- inline_print_dec32_mul32_by10_16_t0 Add inline_print_dec32_mul32_by10_16_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0xd8), Register(0xdc), Register(0xd8)], resolved: None }
30 d8 dc d8 
# 01940 Instruction { source: "inline_print_dec32_mul32_by10_16_a <- inline_print_dec32_mul32_by10_16_t0 Add inline_print_dec32_mul32_by10_16_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_print_dec32_mul32_by10_16_t2 <- inline_print_dec32_mul32_by10_16_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }", "Arithmetic(Add, Ident(\"a\"), Ident(\"a\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_16_t2 <- inline_print_dec32_mul32_by10_16_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xd8), Register(0xd8)], resolved: None }
# inline_print_dec32_mul32_by10_16_t3 <- inline_print_dec32_mul32_by10_16_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }", "Arithmetic(Add, Ident(\"a\"), Ident(\"a\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# 01941 Instruction { source: "inline_print_dec32_mul32_by10_16_t3 <- inline_print_dec32_mul32_by10_16_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xd8), Register(0xdc)], resolved: None }
21 d8 dc 
# inline_print_dec32_mul32_by10_16_b <- inline_print_dec32_mul32_by10_16_t2 Add inline_print_dec32_mul32_by10_16_t3
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }", "Arithmetic(Add, Ident(\"a\"), Ident(\"a\"))"] }
# 01944 Instruction { source: "inline_print_dec32_mul32_by10_16_b <- inline_print_dec32_mul32_by10_16_t2 Add inline_print_dec32_mul32_by10_16_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01945 Instruction { source: "inline_print_dec32_mul32_by10_16_b <- inline_print_dec32_mul32_by10_16_t2 Add inline_print_dec32_mul32_by10_16_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0xd8), Register(0xdc), Register(0xdc)], resolved: None }
30 d8 dc dc 
# 01949 Instruction { source: "inline_print_dec32_mul32_by10_16_b <- inline_print_dec32_mul32_by10_16_t2 Add inline_print_dec32_mul32_by10_16_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_print_dec32_mul32_by10_16_t4 <- inline_print_dec32_mul32_by10_16_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: None, value: Arithmetic(Add, Ident(\"b\"), Ident(\"b\")) }", "Arithmetic(Add, Ident(\"b\"), Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_16_t4 <- inline_print_dec32_mul32_by10_16_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0xdc), Register(0xdc)], resolved: None }
# inline_print_dec32_mul32_by10_16_t5 <- inline_print_dec32_mul32_by10_16_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: None, value: Arithmetic(Add, Ident(\"b\"), Ident(\"b\")) }", "Arithmetic(Add, Ident(\"b\"), Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# 0194a Instruction { source: "inline_print_dec32_mul32_by10_16_t5 <- inline_print_dec32_mul32_by10_16_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0xdc), Register(0xe4)], resolved: None }
21 dc e4 
# inline_print_dec32_mul32_by10_16_b <- inline_print_dec32_mul32_by10_16_t4 Add inline_print_dec32_mul32_by10_16_t5
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: None, value: Arithmetic(Add, Ident(\"b\"), Ident(\"b\")) }", "Arithmetic(Add, Ident(\"b\"), Ident(\"b\"))"] }
# 0194d Instruction { source: "inline_print_dec32_mul32_by10_16_b <- inline_print_dec32_mul32_by10_16_t4 Add inline_print_dec32_mul32_by10_16_t5\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0194e Instruction { source: "inline_print_dec32_mul32_by10_16_b <- inline_print_dec32_mul32_by10_16_t4 Add inline_print_dec32_mul32_by10_16_t5\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0xdc), Register(0xe4), Register(0xdc)], resolved: None }
30 dc e4 dc 
# 01952 Instruction { source: "inline_print_dec32_mul32_by10_16_b <- inline_print_dec32_mul32_by10_16_t4 Add inline_print_dec32_mul32_by10_16_t5\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_print_dec32_mul32_by10_16_t7 <- inline_print_dec32_mul32_by10_16_b U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }", "Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))", "Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_16_t7 <- inline_print_dec32_mul32_by10_16_b U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0xdc), Register(0xdc)], resolved: None }
# inline_print_dec32_mul32_by10_16_t8 <- inline_print_dec32_mul32_by10_16_a U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }", "Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))", "Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_16_t8 <- inline_print_dec32_mul32_by10_16_a U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xd8), Register(0xd8)], resolved: None }
# inline_print_dec32_mul32_by10_16_t6 <- inline_print_dec32_mul32_by10_16_t7 Add inline_print_dec32_mul32_by10_16_t8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }", "Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))", "Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))"] }
# 01953 Instruction { source: "inline_print_dec32_mul32_by10_16_t6 <- inline_print_dec32_mul32_by10_16_t7 Add inline_print_dec32_mul32_by10_16_t8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01954 Instruction { source: "inline_print_dec32_mul32_by10_16_t6 <- inline_print_dec32_mul32_by10_16_t7 Add inline_print_dec32_mul32_by10_16_t8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0xdc), Register(0xd8), Register(0xd8)], resolved: None }
30 dc d8 d8 
# 01958 Instruction { source: "inline_print_dec32_mul32_by10_16_t6 <- inline_print_dec32_mul32_by10_16_t7 Add inline_print_dec32_mul32_by10_16_t8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t8 <- inline_print_dec32_mul32_by10_16_t6 U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }"] }
# optimized away noop copy Instruction { source: "t8 <- inline_print_dec32_mul32_by10_16_t6 U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))) }\"] }", opcode: Copy32, args: [Register(0xd8), Register(0xd8)], resolved: None }
# goto inline_print_dec32_mul32_by10_16_function_end_mul32_by10
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_print_dec32_mul32_by10_16_function_end_mul32_by10\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_print_dec32_mul32_by10_16_function_end_mul32_by10)], resolved: None }
# :inline_print_dec32_mul32_by10_16_function_end_mul32_by10
# 	SourceContext { contexts: [] }
# inline_print_dec32_mul32_by10_16_function_end_mul32_by10
# a <- t7 Subtract t8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] })) }", "Arithmetic(Subtract, Ident(\"a\"), Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] }))"] }
# 01959 Instruction { source: "a <- t7 Subtract t8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] }))\"] }", opcode: Copy32, args: [Register(0xd8), Register(0x00)], resolved: None }
21 d8 00 
# 0195c Instruction { source: "a <- t7 Subtract t8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] }))\"] }", opcode: Invert8, args: [Register(0x00)], resolved: None }
01 00 
# 0195e Instruction { source: "a <- t7 Subtract t8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] }))\"] }", opcode: Invert8, args: [Register(0x01)], resolved: None }
01 01 
# 01960 Instruction { source: "a <- t7 Subtract t8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] }))\"] }", opcode: Invert8, args: [Register(0x02)], resolved: None }
01 02 
# 01962 Instruction { source: "a <- t7 Subtract t8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] }))\"] }", opcode: Invert8, args: [Register(0x03)], resolved: None }
01 03 
# 01964 Instruction { source: "a <- t7 Subtract t8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] }))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x00), Constant32(0x00000001=1)], resolved: None }
32 00 01 00 00 00 
# 0196a Instruction { source: "a <- t7 Subtract t8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] }))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0196b Instruction { source: "a <- t7 Subtract t8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] }))\"] }", opcode: AddCarry32_1, args: [Register(0xe8), Register(0x00), Register(0xd8)], resolved: None }
30 e8 00 d8 
# 0196f Instruction { source: "a <- t7 Subtract t8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] }))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t12 <- a[0x00..0x01] U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))] })", "Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))", "Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))", "Index(\"a\", Number(U8, 0))", "Index(\"a\", Number(U8, 0))"] }
# 01970 Instruction { source: "t12 <- a[0x00..0x01] U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))] })\", \"Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))\", \"Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))\", \"Index(\\\"a\\\", Number(U8, 0))\", \"Index(\\\"a\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0xd8), Register(0xe3)], resolved: None }
0b d8 e3 
# t13 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))] })", "Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))", "Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))", "Number(U8, 48)", "Number(U8, 48)"] }
# 01973 Instruction { source: "t13 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))] })\", \"Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))\", \"Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0xe1), Constant8(0x30=48)], resolved: None }
04 e1 30 
# t11 <- t12 Add t13
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))] })", "Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))", "Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))"] }
# 01976 Instruction { source: "t11 <- t12 Add t13\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))] })\", \"Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))\", \"Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))\"] }", opcode: Add8NoCarryIn, args: [Register(0xe3), Register(0xe1), Register(0xe3)], resolved: None }
14 e3 e1 e3 
# inline_print_dec32_putc_31_c <- t11 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))] })"] }
# optimized away noop copy Instruction { source: "inline_print_dec32_putc_31_c <- t11 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))] })\"] }", opcode: Copy8, args: [Register(0xe3), Register(0xe3)], resolved: None }
# inline_print_dec32_putc_31_t1 <- inline_print_dec32_putc_31_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_print_dec32_putc_31_t1 <- inline_print_dec32_putc_31_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0xe3), Register(0xe3)], resolved: None }
# None <= call io_write0(inline_print_dec32_putc_31_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 0197a Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0xe3)], resolved: None }
68 e3 
# goto inline_print_dec32_putc_31_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_print_dec32_putc_31_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_print_dec32_putc_31_function_end_putc)], resolved: None }
# :inline_print_dec32_putc_31_function_end_putc
# 	SourceContext { contexts: [] }
# inline_print_dec32_putc_31_function_end_putc
# return None
# 	SourceContext { contexts: ["Return { value: None }"] }
# 0197c Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# :function_end_print_dec32
# 	SourceContext { contexts: [] }
# function_end_print_dec32
# Unreachable
# 	SourceContext { contexts: [] }
# 0197e Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
# :print_dec8
# Ret None
# Arg0=a
# Var a (Arg0 a Number(U8)) Reg(U8) Some([236])
# Var b (Local b Number(U8) Reg(U8)) Reg(U8) Some([237])
# Var inline_print_dec8_putc_32_c (Arg0 c Number(U8)) Reg(U8) Some([236])
# Var inline_print_dec8_putc_32_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([236])
# Var inline_print_dec8_putc_32_t1 (t1 Ident("c")) Reg(U8) Some([236])
# Var t0 (t0 Ident("a")) Reg(U8) Some([236])
# Var t1 (t1 Number(U8, 10)) Reg(U8) Some([237])
# Var t10 (t10 Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })) Reg(U8) Some([236])
# Var t11 (t11 Arithmetic(Add, Ident("a"), Number(U8, 48))) Reg(U8) Some([236])
# Var t12 (t12 Ident("a")) Reg(U8) Some([236])
# Var t13 (t13 Number(U8, 48)) Reg(U8) Some([237])
# Var t2 (t2 Ident("a")) Reg(U8) Some([236])
# Var t3 (t3 Number(U8, 10)) Reg(U8) Some([237])
# Var t4 (t4 Call(Call { function: "print_dec8", parameters: [Ident("b")] })) Reg(U8) Some([236])
# Var t5 (t5 Ident("b")) Reg(U8) Some([237])
# Var t6 (t6 Ident("a")) Reg(U8) Some([236])
# Var t7 (t7 Arithmetic(Multiply, Ident("b"), Number(U8, 10))) Reg(U8) Some([237])
# Var t8 (t8 Ident("b")) Reg(U8) Some([237])
# Var t9 (t9 Number(U8, 10)) Reg(U8) Some([238])
# 01983 Instruction { source: "Save function parameter 'a' registers [0] to locals [236].", opcode: Copy8, args: [Register(0x00), Register(0xec)], resolved: None }
0b 00 ec 
# t0 <- a U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"a\"), right: Number(U8, 10) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10))) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"a\"), right: Number(U8, 10) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t0 <- a U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0xec), Register(0xec)], resolved: None }
# t1 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"a\"), right: Number(U8, 10) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10))) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"a\"), right: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 01986 Instruction { source: "t1 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0xed), Constant8(0x0a=10)], resolved: None }
04 ed 0a 
# if t0 >= t1 then 'print_dec8_if_true_0_1' else 'print_dec8_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"a\"), right: Number(U8, 10) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10))) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"a\"), right: Number(U8, 10) }"] }
# 01989 Instruction { source: "if t0 >= t1 then 'print_dec8_if_true_0_1' else 'print_dec8_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: Cmp8, args: [Register(0xed), Register(0xec)], resolved: None }
15 ed ec 
# 0198c Instruction { source: "if t0 >= t1 then 'print_dec8_if_true_0_1' else 'print_dec8_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JcImm, args: [Label24(print_dec8_if_true_0_1)], resolved: None }
71 94 19 00 
# 01990 Instruction { source: "if t0 >= t1 then 'print_dec8_if_true_0_1' else 'print_dec8_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JmpImm, args: [Label24(print_dec8_if_else_0_2)], resolved: None }
70 d4 19 00 
# :print_dec8_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"a\"), right: Number(U8, 10) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10))) }])], else_block: [] }"] }
# print_dec8_if_true_0_1
# t2 <- a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Divide, Ident(\"a\"), Number(U8, 10))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t2 <- a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 10))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0xec), Register(0xec)], resolved: None }
# t3 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Divide, Ident(\"a\"), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 01994 Instruction { source: "t3 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0xed), Constant8(0x0a=10)], resolved: None }
04 ed 0a 
# b <- t2 Divide t3
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Divide, Ident(\"a\"), Number(U8, 10))"] }
# 01997 Instruction { source: "b <- t2 Divide t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Divide8, args: [Register(0xec), Register(0xed), Register(0xed)], resolved: None }
17 ec ed ed 
# t5 <- b U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] }) }", "Call(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] })", "Call(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "t5 <- b U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy8, args: [Register(0xed), Register(0xed)], resolved: None }
# None <= call print_dec8(t5,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] }) }", "Call(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] })", "Call(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] })"] }
# 0199b Instruction { source: "Arg0[a]=t5 None <= call print_dec8(t5,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Copy8, args: [Register(0xed), Register(0x00)], resolved: None }
0b ed 00 
# Registers used by this function: {236, 237, 238}
# Registers used by callee tree: {128, 236, 237, 238}
# Registers to save: [236, 237, 238]
# 0199e Instruction { source: "Saving reg0xee before None <= call print_dec8(t5,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0xee)], resolved: None }
09 ee 
# 019a0 Instruction { source: "Saving reg0xed before None <= call print_dec8(t5,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0xed)], resolved: None }
09 ed 
# 019a2 Instruction { source: "Saving reg0xec before None <= call print_dec8(t5,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0xec)], resolved: None }
09 ec 
# 019a4 Instruction { source: "PseudoCall(Label24(:print_dec8))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 019aa Instruction { source: "PseudoCall(Label24(:print_dec8))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c b4 19 00 00 
# 019b0 Instruction { source: "PseudoCall(Label24(:print_dec8))", opcode: JmpImm, args: [Label24(:print_dec8)], resolved: None }
70 83 19 00 
# 019b4 Instruction { source: "PseudoCall(Label24(:print_dec8))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 019ba Instruction { source: "Restoring reg0xec after None <= call print_dec8(t5,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0xec)], resolved: None }
0a ec 
# 019bc Instruction { source: "Restoring reg0xed after None <= call print_dec8(t5,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0xed)], resolved: None }
0a ed 
# 019be Instruction { source: "Restoring reg0xee after None <= call print_dec8(t5,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0xee)], resolved: None }
0a ee 
# t6 <- a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10)))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t6 <- a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10)))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0xec), Register(0xec)], resolved: None }
# t8 <- b U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10)))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "t8 <- b U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10)))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy8, args: [Register(0xed), Register(0xed)], resolved: None }
# t9 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10)))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 019c0 Instruction { source: "t9 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10)))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0xee), Constant8(0x0a=10)], resolved: None }
04 ee 0a 
# t7 <- t8 Multiply t9
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10)))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10))"] }
# 019c3 Instruction { source: "t7 <- t8 Multiply t9\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10)))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))\"] }", opcode: Mul8_8, args: [Register(0xed), Register(0xee), Register(0xed)], resolved: None }
10 ed ee ed 
# a <- t6 Subtract t7
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10)))"] }
# 019c7 Instruction { source: "a <- t6 Subtract t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10)))\"] }", opcode: Copy8, args: [Register(0xed), Register(0x00)], resolved: None }
0b ed 00 
# 019ca Instruction { source: "a <- t6 Subtract t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10)))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 019cc Instruction { source: "a <- t6 Subtract t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10)))\"] }", opcode: Add8NoCarryIn, args: [Register(0xec), Register(0x00), Register(0xec)], resolved: None }
14 ec 00 ec 
# goto print_dec8_if_end_0
# 	SourceContext { contexts: [] }
# 019d0 Instruction { source: "goto print_dec8_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(print_dec8_if_end_0)], resolved: None }
70 d4 19 00 
# :print_dec8_if_else_0_2
# 	SourceContext { contexts: [] }
# print_dec8_if_else_0_2
# :print_dec8_if_end_0
# 	SourceContext { contexts: [] }
# print_dec8_if_end_0
# t12 <- a U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t12 <- a U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0xec), Register(0xec)], resolved: None }
# t13 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Number(U8, 48)", "Number(U8, 48)"] }
# 019d4 Instruction { source: "t13 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0xed), Constant8(0x30=48)], resolved: None }
04 ed 30 
# t11 <- t12 Add t13
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))"] }
# 019d7 Instruction { source: "t11 <- t12 Add t13\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\"] }", opcode: Add8NoCarryIn, args: [Register(0xec), Register(0xed), Register(0xec)], resolved: None }
14 ec ed ec 
# inline_print_dec8_putc_32_c <- t11 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })"] }
# optimized away noop copy Instruction { source: "inline_print_dec8_putc_32_c <- t11 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\"] }", opcode: Copy8, args: [Register(0xec), Register(0xec)], resolved: None }
# inline_print_dec8_putc_32_t1 <- inline_print_dec8_putc_32_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_print_dec8_putc_32_t1 <- inline_print_dec8_putc_32_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0xec), Register(0xec)], resolved: None }
# None <= call io_write0(inline_print_dec8_putc_32_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 019db Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0xec)], resolved: None }
68 ec 
# goto inline_print_dec8_putc_32_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_print_dec8_putc_32_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_print_dec8_putc_32_function_end_putc)], resolved: None }
# :inline_print_dec8_putc_32_function_end_putc
# 	SourceContext { contexts: [] }
# inline_print_dec8_putc_32_function_end_putc
# return None
# 	SourceContext { contexts: ["Return { value: None }"] }
# 019dd Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# :function_end_print_dec8
# 	SourceContext { contexts: [] }
# function_end_print_dec8
# Unreachable
# 	SourceContext { contexts: [] }
# 019df Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
