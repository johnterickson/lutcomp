v2.0 raw
# ImageBaseAddress=0x00000000
# entry
# 00000 Instruction { source: "Initialzing flags and internal regs.", opcode: Init, args: [], resolved: None }
00 
# 00001 Instruction { source: "Initialzing stack register to 0x000f0f00.", opcode: LoadImm32, args: [Register(0x0c), Constant32(0x000f0f00=986880)], resolved: None }
20 0c 00 0f 0f 00 
# 00007 Instruction { source: "PseudoCall(Label24(:main))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 0000d Instruction { source: "PseudoCall(Label24(:main))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 17 00 00 00 
# 00013 Instruction { source: "PseudoCall(Label24(:main))", opcode: JmpImm, args: [Label24(:main)], resolved: None }
70 dc 23 00 
# 00017 Instruction { source: "PseudoCall(Label24(:main))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 0001d Instruction { source: "Halting after return from entry function.", opcode: Halt, args: [Constant32(0x00000000=0)], resolved: None }
7e 00 00 00 00 
# :PS2_SCAN_CODE_TO_ASCII
# const Array(Number(U8), Some(1025))
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
60 
7e 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
01 
00 
00 
00 
00 
00 
00 
00 
00 
00 
71 
51 
00 
00 
31 
21 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
7a 
5a 
00 
00 
73 
53 
00 
00 
61 
41 
00 
00 
77 
57 
00 
00 
32 
40 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
63 
43 
00 
00 
78 
58 
00 
00 
64 
44 
00 
00 
65 
45 
00 
00 
34 
24 
00 
00 
33 
23 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
20 
20 
00 
00 
76 
56 
00 
00 
66 
46 
00 
00 
74 
54 
00 
00 
72 
52 
00 
00 
35 
25 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
6e 
4e 
00 
00 
62 
42 
00 
00 
68 
48 
00 
00 
67 
47 
00 
00 
79 
59 
00 
00 
36 
5e 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
6d 
4d 
00 
00 
6a 
4a 
00 
00 
75 
55 
00 
00 
37 
26 
00 
00 
38 
2a 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
2c 
3c 
00 
00 
6b 
4b 
00 
00 
69 
49 
00 
00 
6f 
4f 
00 
00 
30 
29 
00 
00 
39 
28 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
2e 
3e 
00 
00 
2f 
3f 
00 
00 
6c 
4c 
00 
00 
3b 
3a 
00 
00 
70 
50 
00 
00 
2d 
5f 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
27 
22 
00 
00 
00 
00 
00 
00 
5b 
7b 
00 
00 
3d 
2b 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
01 
00 
0a 
0a 
00 
00 
5d 
7d 
00 
00 
5c 
7c 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
01 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
ff 
# :lcd_row_start
# const Array(Number(U8), Some(4))
00 
40 
14 
54 
# :KeyBoard_init
# Ret None
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }) Reg(U32) Some([16, 17, 18, 19])
# Var t1 (t1 Number(U8, 0)) Reg(U8) Some([20])
# Var t2 (t2 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }) Reg(U32) Some([16, 17, 18, 19])
# Var t3 (t3 Number(USIZE, 987136)) Reg(U32) Some([16, 17, 18, 19])
# Var t4 (t4 Number(USIZE, 4)) Reg(U32) Some([24, 25, 26, 27])
# Var t5 (t5 Number(U8, 0)) Reg(U8) Some([20])
# t0 <- 0n987136/0x000f1000u32 
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }", "Number(USIZE, 987136)"] }
# 00427 Instruction { source: "t0 <- 0n987136/0x000f1000u32 \n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }\", \"Number(USIZE, 987136)\"] }", opcode: LoadImm32, args: [Register(0x10), Constant32(0x000f1000=987136)], resolved: None }
20 10 00 10 0f 00 
# t1 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0042d Instruction { source: "t1 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x14), Constant8(0x00=0)], resolved: None }
04 14 00 
# mem[t0] <- t1 U8
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }"] }
# 00430 Instruction { source: "mem[t0] <- t1 U8\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }\"] }", opcode: Store8, args: [Register(0x14), Register(0x10)], resolved: None }
06 14 10 
# t3 <- 0n987136/0x000f1000u32 
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))", "Number(USIZE, 987136)", "Number(USIZE, 987136)"] }
# 00433 Instruction { source: "t3 <- 0n987136/0x000f1000u32 \n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))\", \"Number(USIZE, 987136)\", \"Number(USIZE, 987136)\"] }", opcode: LoadImm32, args: [Register(0x10), Constant32(0x000f1000=987136)], resolved: None }
20 10 00 10 0f 00 
# t4 <- 0n4/0x00000004u32 
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 00439 Instruction { source: "t4 <- 0n4/0x00000004u32 \n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000004=4)], resolved: None }
20 18 04 00 00 00 
# t2 <- t3 Add t4
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))"] }
# 0043f Instruction { source: "t2 <- t3 Add t4\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00440 Instruction { source: "t2 <- t3 Add t4\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x10), Register(0x18), Register(0x10)], resolved: None }
30 10 18 10 
# 00444 Instruction { source: "t2 <- t3 Add t4\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t5 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00445 Instruction { source: "t5 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x14), Constant8(0x00=0)], resolved: None }
04 14 00 
# mem[t2] <- t5 U8
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }"] }
# 00448 Instruction { source: "mem[t2] <- t5 U8\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }\"] }", opcode: Store8, args: [Register(0x14), Register(0x10)], resolved: None }
06 14 10 
# return None
# 	SourceContext { contexts: ["Return { value: None }"] }
# 0044b Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# :function_end_KeyBoard_init
# 	SourceContext { contexts: [] }
# function_end_KeyBoard_init
# Unreachable
# 	SourceContext { contexts: [] }
# 0044d Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
# :Keyboard_poll
# Ret None
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var c (Local c Number(U8) Reg(U8)) Reg(U8) Some([28])
# Var code (Local code Number(U8) Reg(U8)) Reg(U8) Some([28])
# Var index (Local index Number(USIZE) Reg(U32)) Reg(U32) Some([32, 33, 34, 35])
# Var inline_Keyboard_poll_queue_push_39_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_Keyboard_poll_queue_push_39_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_Keyboard_poll_queue_push_39_n (Arg1 n Number(U8)) Reg(U8) Some([28])
# Var inline_Keyboard_poll_queue_push_39_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([36, 37, 38, 39])
# Var inline_Keyboard_poll_queue_push_39_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([36, 37, 38, 39])
# Var inline_Keyboard_poll_queue_push_39_t1 (t1 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }) Reg(U32) Some([40, 41, 42, 43])
# Var inline_Keyboard_poll_queue_push_39_t10 (t10 Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([44, 45, 46, 47])
# Var inline_Keyboard_poll_queue_push_39_t11 (t11 Number(USIZE, 260)) Reg(U32) Some([40, 41, 42, 43])
# Var inline_Keyboard_poll_queue_push_39_t12 (t12 Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))) Reg(U8) Some([28])
# Var inline_Keyboard_poll_queue_push_39_t13 (t13 PtrFieldDeref("s", "last")) Reg(U8) Some([28])
# Var inline_Keyboard_poll_queue_push_39_t14 (t14 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([44, 45, 46, 47])
# Var inline_Keyboard_poll_queue_push_39_t15 (t15 Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([44, 45, 46, 47])
# Var inline_Keyboard_poll_queue_push_39_t16 (t16 Number(USIZE, 260)) Reg(U32) Some([36, 37, 38, 39])
# Var inline_Keyboard_poll_queue_push_39_t17 (t17 Number(U8, 1)) Reg(U8) Some([48])
# Var inline_Keyboard_poll_queue_push_39_t2 (t2 Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([40, 41, 42, 43])
# Var inline_Keyboard_poll_queue_push_39_t3 (t3 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) Reg(U32) Some([52, 53, 54, 55])
# Var inline_Keyboard_poll_queue_push_39_t4 (t4 PtrFieldDeref("s", "last")) Reg(U8) Some([56])
# Var inline_Keyboard_poll_queue_push_39_t5 (t5 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([52, 53, 54, 55])
# Var inline_Keyboard_poll_queue_push_39_t6 (t6 Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([36, 37, 38, 39])
# Var inline_Keyboard_poll_queue_push_39_t7 (t7 Number(USIZE, 260)) Reg(U32) Some([52, 53, 54, 55])
# Var inline_Keyboard_poll_queue_push_39_t8 (t8 Ident("n")) Reg(U8) Some([28])
# Var inline_Keyboard_poll_queue_push_39_t9 (t9 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([40, 41, 42, 43])
# Var inline_Keyboard_poll_queue_push_39_values (Local values Ptr(Number(U8)) Reg(U32)) Reg(U32) Some([40, 41, 42, 43])
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var t0 (t0 Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4))) Reg(U8) Some([28])
# Var t1 (t1 Call(Call { function: "io_ready_to_read", parameters: [] })) Reg(U8) Some([28])
# Var t10 (t10 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }) Reg(U32) Some([44, 45, 46, 47])
# Var t11 (t11 Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }) Reg(U32) Some([44, 45, 46, 47])
# Var t12 (t12 Arithmetic(Add, Ident("index"), Number(USIZE, 1))) Reg(U32) Some([36, 37, 38, 39])
# Var t13 (t13 Ident("index")) Reg(U32) Some([32, 33, 34, 35])
# Var t14 (t14 Number(USIZE, 1)) Reg(U32) Some([36, 37, 38, 39])
# Var t15 (t15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }) Reg(U32) Some([44, 45, 46, 47])
# Var t16 (t16 Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }) Reg(U32) Some([44, 45, 46, 47])
# Var t17 (t17 Ident("index")) Reg(U32) Some([32, 33, 34, 35])
# Var t18 (t18 LocalFieldDeref("keyboard", "release_in_progress")) Reg(U8) Some([48])
# Var t19 (t19 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }) Reg(U32) Some([36, 37, 38, 39])
# Var t2 (t2 Number(U8, 4)) Reg(U8) Some([57])
# Var t20 (t20 Number(USIZE, 987136)) Reg(U32) Some([36, 37, 38, 39])
# Var t21 (t21 Number(USIZE, 4)) Reg(U32) Some([40, 41, 42, 43])
# Var t22 (t22 Number(U8, 0)) Reg(U8) Some([58])
# Var t23 (t23 Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] })) Reg(U8) Some([28])
# Var t24 (t24 AddressOf(Ident("stdin"))) Reg(U32) Some([36, 37, 38, 39])
# Var t25 (static "stdin") Reg(U32) Some([36, 37, 38, 39])
# Var t26 (t26 Ident("c")) Reg(U8) Some([28])
# Var t27 (t27 Number(U8, 0)) Reg(U8) Some([28])
# Var t28 (t28 Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))) Reg(U8) Some([48])
# Var t29 (t29 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }) Reg(U32) Some([36, 37, 38, 39])
# Var t3 (t3 Number(U8, 0)) Reg(U8) Some([57])
# Var t30 (t30 Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }) Reg(U32) Some([36, 37, 38, 39])
# Var t31 (t31 Arithmetic(Add, Ident("index"), Number(USIZE, 2))) Reg(U32) Some([40, 41, 42, 43])
# Var t32 (t32 Ident("index")) Reg(U32) Some([32, 33, 34, 35])
# Var t33 (t33 Number(USIZE, 2)) Reg(U32) Some([40, 41, 42, 43])
# Var t34 (t34 LocalFieldDeref("keyboard", "release_in_progress")) Reg(U8) Some([28])
# Var t35 (t35 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }) Reg(U32) Some([44, 45, 46, 47])
# Var t36 (t36 Number(USIZE, 987136)) Reg(U32) Some([44, 45, 46, 47])
# Var t37 (t37 Number(USIZE, 4)) Reg(U32) Some([36, 37, 38, 39])
# Var t38 (t38 Number(U8, 0)) Reg(U8) Some([48])
# Var t39 (t39 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }) Reg(U32) Some([44, 45, 46, 47])
# Var t4 (t4 Number(USIZE, 4)) Reg(U32) Some([32, 33, 34, 35])
# Var t40 (t40 Number(U8, 0)) Reg(U8) Some([48])
# Var t41 (t41 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }) Reg(U32) Some([44, 45, 46, 47])
# Var t42 (t42 Number(U8, 1)) Reg(U8) Some([48])
# Var t43 (t43 Number(U8, 0)) Reg(U8) Some([28])
# Var t44 (t44 Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))) Reg(U8) Some([57])
# Var t45 (t45 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }) Reg(U32) Some([32, 33, 34, 35])
# Var t46 (t46 Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }) Reg(U32) Some([36, 37, 38, 39])
# Var t47 (t47 Arithmetic(Add, Ident("index"), Number(USIZE, 3))) Reg(U32) Some([32, 33, 34, 35])
# Var t48 (t48 Ident("index")) Reg(U32) Some([32, 33, 34, 35])
# Var t49 (t49 Number(USIZE, 3)) Reg(U32) Some([40, 41, 42, 43])
# Var t5 (t5 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("code") }) Reg(U32) Some([44, 45, 46, 47])
# Var t50 (t50 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }) Reg(U32) Some([44, 45, 46, 47])
# Var t51 (t51 Number(USIZE, 987136)) Reg(U32) Some([44, 45, 46, 47])
# Var t52 (t52 Number(USIZE, 4)) Reg(U32) Some([32, 33, 34, 35])
# Var t53 (t53 Number(U8, 1)) Reg(U8) Some([57])
# Var t54 (t54 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }) Reg(U32) Some([44, 45, 46, 47])
# Var t55 (t55 Number(USIZE, 987136)) Reg(U32) Some([44, 45, 46, 47])
# Var t56 (t56 Number(USIZE, 4)) Reg(U32) Some([32, 33, 34, 35])
# Var t57 (t57 Number(U8, 0)) Reg(U8) Some([57])
# Var t6 (t6 Ident("code")) Reg(U8) Some([28])
# Var t7 (t7 LocalFieldDeref("keyboard", "shift_held")) Reg(U8) Some([28])
# Var t8 (t8 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }) Reg(U32) Some([44, 45, 46, 47])
# Var t9 (t9 Number(U8, 0)) Reg(U8) Some([48])
# Some(t1) <= call io_ready_to_read()
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }", "Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 4))", "Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 4))", "Call(Call { function: \"io_ready_to_read\", parameters: [] })", "Call(Call { function: \"io_ready_to_read\", parameters: [] })"] }
# 00452 Instruction { source: "ReadyToRead", opcode: IoReadyToRead, args: [Register(0x1c)], resolved: None }
79 1c 
# t2 <- 0n4/0x04u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }", "Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 4))", "Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 4))", "Number(U8, 4)", "Number(U8, 4)"] }
# 00454 Instruction { source: "t2 <- 0n4/0x04u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }\", \"Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 4))\", \"Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 4))\", \"Number(U8, 4)\", \"Number(U8, 4)\"] }", opcode: LoadImm8, args: [Register(0x39), Constant8(0x04=4)], resolved: None }
04 39 04 
# t0 <- t1 BitwiseAnd t2
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }", "Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 4))", "Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 4))"] }
# 00457 Instruction { source: "t0 <- t1 BitwiseAnd t2\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }\", \"Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 4))\", \"Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 4))\"] }", opcode: And8, args: [Register(0x1c), Register(0x39), Register(0x1c)], resolved: None }
1b 1c 39 1c 
# t3 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }", "Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0045b Instruction { source: "t3 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }\", \"Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x39), Constant8(0x00=0)], resolved: None }
04 39 00 
# if t0 == t3 then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }", "Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }"] }
# 0045e Instruction { source: "if t0 == t3 then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }\", \"Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x1c), Register(0x39)], resolved: None }
15 1c 39 
# 00461 Instruction { source: "if t0 == t3 then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }\", \"Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(Keyboard_poll_if_true_0_1)], resolved: None }
72 69 04 00 
# 00465 Instruction { source: "if t0 == t3 then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }\", \"Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(Keyboard_poll_if_else_0_2)], resolved: None }
70 6f 04 00 
# :Keyboard_poll_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }"] }
# Keyboard_poll_if_true_0_1
# return None
# 	SourceContext { contexts: ["Return { value: None }"] }
# 00469 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# goto Keyboard_poll_if_end_0
# 	SourceContext { contexts: [] }
# 0046b Instruction { source: "goto Keyboard_poll_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(Keyboard_poll_if_end_0)], resolved: None }
70 6f 04 00 
# :Keyboard_poll_if_else_0_2
# 	SourceContext { contexts: [] }
# Keyboard_poll_if_else_0_2
# :Keyboard_poll_if_end_0
# 	SourceContext { contexts: [] }
# Keyboard_poll_if_end_0
# Some(code) <= call io_read2()
# 	SourceContext { contexts: ["Assign { target: Ident(\"code\"), var_type: Some(Number(U8)), value: Call(Call { function: \"io_read2\", parameters: [] }) }", "Call(Call { function: \"io_read2\", parameters: [] })"] }
# 0046f Instruction { source: "IoRead2", opcode: In2, args: [Register(0x1c)], resolved: None }
62 1c 
# t4 <- 0n4/0x00000004u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"index\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\")) }", "Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\"))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 00471 Instruction { source: "t4 <- 0n4/0x00000004u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"index\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\")) }\", \"Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\"))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: LoadImm32, args: [Register(0x20), Constant32(0x00000004=4)], resolved: None }
20 20 04 00 00 00 
# t6 <- code U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"index\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\")) }", "Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\"))", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"code\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"code\") }", "Ident(\"code\")", "Ident(\"code\")"] }
# optimized away noop copy Instruction { source: "t6 <- code U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"index\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\")) }\", \"Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\"))\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"code\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"code\\\") }\", \"Ident(\\\"code\\\")\", \"Ident(\\\"code\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# t5 U32 <- t6 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"index\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\")) }", "Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\"))", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"code\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"code\") }"] }
# 00477 Instruction { source: "Zero-pad for t5 U32 <- t6 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"index\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\")) }\", \"Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\"))\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"code\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"code\\\") }\"] }", opcode: LoadImm32, args: [Register(0x2c), Constant32(0x00000000=0)], resolved: None }
20 2c 00 00 00 00 
# 0047d Instruction { source: "t5 U32 <- t6 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"index\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\")) }\", \"Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\"))\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"code\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"code\\\") }\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x2c)], resolved: None }
0b 1c 2c 
# index <- t4 Multiply t5
# 	SourceContext { contexts: ["Assign { target: Ident(\"index\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\")) }", "Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\"))"] }
# 00480 Instruction { source: "index <- t4 Multiply t5\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"index\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\")) }\", \"Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\"))\"] }", opcode: Mul8_16, args: [Register(0x20), Register(0x2c), Register(0x20)], resolved: None }
11 20 2c 20 
# 00484 Instruction { source: "index <- t4 Multiply t5\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"index\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\")) }\", \"Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\"))\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x00=0)], resolved: None }
04 22 00 
# 00487 Instruction { source: "index <- t4 Multiply t5\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"index\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\")) }\", \"Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\"))\"] }", opcode: LoadImm8, args: [Register(0x23), Constant8(0x00=0)], resolved: None }
04 23 00 
# t8 <- 0n987136/0x000f1000u32 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"shift_held\"), right: Number(U8, 0) }, [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }] }", "Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"shift_held\"), right: Number(U8, 0) }", "LocalFieldDeref(\"keyboard\", \"shift_held\")", "LocalFieldDeref(\"keyboard\", \"shift_held\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }", "Number(USIZE, 987136)"] }
# 0048a Instruction { source: "t8 <- 0n987136/0x000f1000u32 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }] }\", \"Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), right: Number(U8, 0) }\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\")\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }\", \"Number(USIZE, 987136)\"] }", opcode: LoadImm32, args: [Register(0x2c), Constant32(0x000f1000=987136)], resolved: None }
20 2c 00 10 0f 00 
# t7 <- mem[t8] U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"shift_held\"), right: Number(U8, 0) }, [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }] }", "Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"shift_held\"), right: Number(U8, 0) }", "LocalFieldDeref(\"keyboard\", \"shift_held\")", "LocalFieldDeref(\"keyboard\", \"shift_held\")"] }
# 00490 Instruction { source: "t7 <- mem[t8] U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }] }\", \"Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), right: Number(U8, 0) }\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\")\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\")\"] }", opcode: Load8, args: [Register(0x2c), Register(0x1c)], resolved: None }
05 2c 1c 
# t9 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"shift_held\"), right: Number(U8, 0) }, [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }] }", "Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"shift_held\"), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00493 Instruction { source: "t9 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }] }\", \"Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x30), Constant8(0x00=0)], resolved: None }
04 30 00 
# if t7 != t9 then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"shift_held\"), right: Number(U8, 0) }, [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }] }", "Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"shift_held\"), right: Number(U8, 0) }"] }
# 00496 Instruction { source: "if t7 != t9 then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }] }\", \"Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x1c), Register(0x30)], resolved: None }
15 1c 30 
# 00499 Instruction { source: "if t7 != t9 then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }] }\", \"Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(Keyboard_poll_if_else_0_5)], resolved: None }
72 bc 04 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t7 != t9 then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }] }\", \"Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(Keyboard_poll_if_true_0_4)], resolved: None }
# :Keyboard_poll_if_true_0_4
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"shift_held\"), right: Number(U8, 0) }, [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }] }"] }
# Keyboard_poll_if_true_0_4
# t11 <- const &PS2_SCAN_CODE_TO_ASCII
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))", "Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }", "Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }", "Ident(\"PS2_SCAN_CODE_TO_ASCII\")"] }
# 0049d Instruction { source: "t11 <- const &PS2_SCAN_CODE_TO_ASCII\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }\", \"Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }\", \"Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\")\"] }", opcode: LoadImm32, args: [Register(0x2c), Label32(:PS2_SCAN_CODE_TO_ASCII)], resolved: None }
20 2c 22 00 00 00 
# t13 <- index U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))", "Ident(\"index\")", "Ident(\"index\")"] }
# optimized away noop copy Instruction { source: "t13 <- index U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))\", \"Ident(\\\"index\\\")\", \"Ident(\\\"index\\\")\"] }", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# t14 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 004a3 Instruction { source: "t14 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x24), Constant32(0x00000001=1)], resolved: None }
20 24 01 00 00 00 
# t12 <- t13 Add t14
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))"] }
# 004a9 Instruction { source: "t12 <- t13 Add t14\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 004aa Instruction { source: "t12 <- t13 Add t14\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x20), Register(0x24), Register(0x24)], resolved: None }
30 20 24 24 
# 004ae Instruction { source: "t12 <- t13 Add t14\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t10 <- t11 Add t12
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))"] }
# 004af Instruction { source: "t10 <- t11 Add t12\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 004b0 Instruction { source: "t10 <- t11 Add t12\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\"] }", opcode: AddCarry32_1, args: [Register(0x2c), Register(0x24), Register(0x2c)], resolved: None }
30 2c 24 2c 
# 004b4 Instruction { source: "t10 <- t11 Add t12\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# c <- mem[t10] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))"] }
# 004b5 Instruction { source: "c <- mem[t10] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\"] }", opcode: Load8, args: [Register(0x2c), Register(0x1c)], resolved: None }
05 2c 1c 
# goto Keyboard_poll_if_end_3
# 	SourceContext { contexts: [] }
# 004b8 Instruction { source: "goto Keyboard_poll_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(Keyboard_poll_if_end_3)], resolved: None }
70 cb 04 00 
# :Keyboard_poll_if_else_0_5
# 	SourceContext { contexts: [] }
# Keyboard_poll_if_else_0_5
# t16 <- const &PS2_SCAN_CODE_TO_ASCII
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\")) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\"))", "Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }", "Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }", "Ident(\"PS2_SCAN_CODE_TO_ASCII\")"] }
# 004bc Instruction { source: "t16 <- const &PS2_SCAN_CODE_TO_ASCII\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\")) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\"))\", \"Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }\", \"Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }\", \"Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\")\"] }", opcode: LoadImm32, args: [Register(0x2c), Label32(:PS2_SCAN_CODE_TO_ASCII)], resolved: None }
20 2c 22 00 00 00 
# t17 <- index U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\")) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\"))", "Ident(\"index\")", "Ident(\"index\")"] }
# optimized away noop copy Instruction { source: "t17 <- index U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\")) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\"))\", \"Ident(\\\"index\\\")\", \"Ident(\\\"index\\\")\"] }", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# t15 <- t16 Add t17
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\")) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\"))"] }
# 004c2 Instruction { source: "t15 <- t16 Add t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\")) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 004c3 Instruction { source: "t15 <- t16 Add t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\")) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x2c), Register(0x20), Register(0x2c)], resolved: None }
30 2c 20 2c 
# 004c7 Instruction { source: "t15 <- t16 Add t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\")) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# c <- mem[t15] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\"))"] }
# 004c8 Instruction { source: "c <- mem[t15] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\"))\"] }", opcode: Load8, args: [Register(0x2c), Register(0x1c)], resolved: None }
05 2c 1c 
# :Keyboard_poll_if_end_3
# 	SourceContext { contexts: [] }
# Keyboard_poll_if_end_3
# t20 <- 0n987136/0x000f1000u32 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }])], else_block: [] }", "Comparison { op: Equals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }", "LocalFieldDeref(\"keyboard\", \"release_in_progress\")", "LocalFieldDeref(\"keyboard\", \"release_in_progress\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))", "Number(USIZE, 987136)", "Number(USIZE, 987136)"] }
# 004cb Instruction { source: "t20 <- 0n987136/0x000f1000u32 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] }) }])], else_block: [] }\", \"Comparison { op: Equals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\")\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))\", \"Number(USIZE, 987136)\", \"Number(USIZE, 987136)\"] }", opcode: LoadImm32, args: [Register(0x24), Constant32(0x000f1000=987136)], resolved: None }
20 24 00 10 0f 00 
# t21 <- 0n4/0x00000004u32 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }])], else_block: [] }", "Comparison { op: Equals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }", "LocalFieldDeref(\"keyboard\", \"release_in_progress\")", "LocalFieldDeref(\"keyboard\", \"release_in_progress\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 004d1 Instruction { source: "t21 <- 0n4/0x00000004u32 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] }) }])], else_block: [] }\", \"Comparison { op: Equals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\")\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: LoadImm32, args: [Register(0x28), Constant32(0x00000004=4)], resolved: None }
20 28 04 00 00 00 
# t19 <- t20 Add t21
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }])], else_block: [] }", "Comparison { op: Equals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }", "LocalFieldDeref(\"keyboard\", \"release_in_progress\")", "LocalFieldDeref(\"keyboard\", \"release_in_progress\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))"] }
# 004d7 Instruction { source: "t19 <- t20 Add t21\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] }) }])], else_block: [] }\", \"Comparison { op: Equals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\")\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 004d8 Instruction { source: "t19 <- t20 Add t21\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] }) }])], else_block: [] }\", \"Comparison { op: Equals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\")\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x24), Register(0x28), Register(0x24)], resolved: None }
30 24 28 24 
# 004dc Instruction { source: "t19 <- t20 Add t21\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] }) }])], else_block: [] }\", \"Comparison { op: Equals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\")\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t18 <- mem[t19] U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }])], else_block: [] }", "Comparison { op: Equals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }", "LocalFieldDeref(\"keyboard\", \"release_in_progress\")", "LocalFieldDeref(\"keyboard\", \"release_in_progress\")"] }
# 004dd Instruction { source: "t18 <- mem[t19] U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] }) }])], else_block: [] }\", \"Comparison { op: Equals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\")\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\")\"] }", opcode: Load8, args: [Register(0x24), Register(0x30)], resolved: None }
05 24 30 
# t22 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }])], else_block: [] }", "Comparison { op: Equals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 004e0 Instruction { source: "t22 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] }) }])], else_block: [] }\", \"Comparison { op: Equals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x3a), Constant8(0x00=0)], resolved: None }
04 3a 00 
# if t18 == t22 then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_else_0_8'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }])], else_block: [] }", "Comparison { op: Equals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }"] }
# 004e3 Instruction { source: "if t18 == t22 then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_else_0_8'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] }) }])], else_block: [] }\", \"Comparison { op: Equals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x30), Register(0x3a)], resolved: None }
15 30 3a 
# 004e6 Instruction { source: "if t18 == t22 then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_else_0_8'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] }) }])], else_block: [] }\", \"Comparison { op: Equals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(Keyboard_poll_if_true_0_7)], resolved: None }
72 ee 04 00 
# 004ea Instruction { source: "if t18 == t22 then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_else_0_8'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] }) }])], else_block: [] }\", \"Comparison { op: Equals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(Keyboard_poll_if_else_0_8)], resolved: None }
70 47 05 00 
# :Keyboard_poll_if_true_0_7
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }])], else_block: [] }"] }
# Keyboard_poll_if_true_0_7
# t25 <- 0n987228/0x000f105cu32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })", "AddressOf(Ident(\"stdin\"))", "AddressOf(Ident(\"stdin\"))"] }
# 004ee Instruction { source: "t25 <- 0n987228/0x000f105cu32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] })\", \"AddressOf(Ident(\\\"stdin\\\"))\", \"AddressOf(Ident(\\\"stdin\\\"))\"] }", opcode: LoadImm32, args: [Register(0x24), Constant32(0x000f105c=987228)], resolved: None }
20 24 5c 10 0f 00 
# t24 <- t25 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })", "AddressOf(Ident(\"stdin\"))", "AddressOf(Ident(\"stdin\"))"] }
# optimized away noop copy Instruction { source: "t24 <- t25 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] })\", \"AddressOf(Ident(\\\"stdin\\\"))\", \"AddressOf(Ident(\\\"stdin\\\"))\"] }", opcode: Copy32, args: [Register(0x24), Register(0x24)], resolved: None }
# t26 <- c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "t26 <- c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# inline_Keyboard_poll_queue_push_39_s <- t24 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })"] }
# optimized away noop copy Instruction { source: "inline_Keyboard_poll_queue_push_39_s <- t24 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] })\"] }", opcode: Copy32, args: [Register(0x24), Register(0x24)], resolved: None }
# inline_Keyboard_poll_queue_push_39_n <- t26 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })"] }
# optimized away noop copy Instruction { source: "inline_Keyboard_poll_queue_push_39_n <- t26 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] })\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# inline_Keyboard_poll_queue_push_39_t0 <- inline_Keyboard_poll_queue_push_39_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_Keyboard_poll_queue_push_39_t0 <- inline_Keyboard_poll_queue_push_39_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x24), Register(0x24)], resolved: None }
# inline_Keyboard_poll_queue_push_39_values <- inline_Keyboard_poll_queue_push_39_t0 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# 004f4 Instruction { source: "inline_Keyboard_poll_queue_push_39_values <- inline_Keyboard_poll_queue_push_39_t0 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0x24), Register(0x28)], resolved: None }
21 24 28 
# inline_Keyboard_poll_queue_push_39_t2 <- inline_Keyboard_poll_queue_push_39_values U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# optimized away noop copy Instruction { source: "inline_Keyboard_poll_queue_push_39_t2 <- inline_Keyboard_poll_queue_push_39_values U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0x28), Register(0x28)], resolved: None }
# inline_Keyboard_poll_queue_push_39_t6 <- inline_Keyboard_poll_queue_push_39_s U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_Keyboard_poll_queue_push_39_t6 <- inline_Keyboard_poll_queue_push_39_s U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x24), Register(0x24)], resolved: None }
# inline_Keyboard_poll_queue_push_39_t7 <- 0n260/0x00000104u32 
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Number(USIZE, 260)", "Number(USIZE, 260)"] }
# 004f7 Instruction { source: "inline_Keyboard_poll_queue_push_39_t7 <- 0n260/0x00000104u32 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Number(USIZE, 260)\", \"Number(USIZE, 260)\"] }", opcode: LoadImm32, args: [Register(0x34), Constant32(0x00000104=260)], resolved: None }
20 34 04 01 00 00 
# inline_Keyboard_poll_queue_push_39_t5 <- inline_Keyboard_poll_queue_push_39_t6 Add inline_Keyboard_poll_queue_push_39_t7
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))"] }
# 004fd Instruction { source: "inline_Keyboard_poll_queue_push_39_t5 <- inline_Keyboard_poll_queue_push_39_t6 Add inline_Keyboard_poll_queue_push_39_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 004fe Instruction { source: "inline_Keyboard_poll_queue_push_39_t5 <- inline_Keyboard_poll_queue_push_39_t6 Add inline_Keyboard_poll_queue_push_39_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddCarry32_1, args: [Register(0x24), Register(0x34), Register(0x34)], resolved: None }
30 24 34 34 
# 00502 Instruction { source: "inline_Keyboard_poll_queue_push_39_t5 <- inline_Keyboard_poll_queue_push_39_t6 Add inline_Keyboard_poll_queue_push_39_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_Keyboard_poll_queue_push_39_t4 <- mem[inline_Keyboard_poll_queue_push_39_t5] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")"] }
# 00503 Instruction { source: "inline_Keyboard_poll_queue_push_39_t4 <- mem[inline_Keyboard_poll_queue_push_39_t5] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\"] }", opcode: Load8, args: [Register(0x34), Register(0x38)], resolved: None }
05 34 38 
# inline_Keyboard_poll_queue_push_39_t3 U32 <- inline_Keyboard_poll_queue_push_39_t4 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }"] }
# 00506 Instruction { source: "Zero-pad for inline_Keyboard_poll_queue_push_39_t3 U32 <- inline_Keyboard_poll_queue_push_39_t4 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\"] }", opcode: LoadImm32, args: [Register(0x34), Constant32(0x00000000=0)], resolved: None }
20 34 00 00 00 00 
# 0050c Instruction { source: "inline_Keyboard_poll_queue_push_39_t3 U32 <- inline_Keyboard_poll_queue_push_39_t4 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\"] }", opcode: Copy8, args: [Register(0x38), Register(0x34)], resolved: None }
0b 38 34 
# inline_Keyboard_poll_queue_push_39_t1 <- inline_Keyboard_poll_queue_push_39_t2 Add inline_Keyboard_poll_queue_push_39_t3
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })"] }
# 0050f Instruction { source: "inline_Keyboard_poll_queue_push_39_t1 <- inline_Keyboard_poll_queue_push_39_t2 Add inline_Keyboard_poll_queue_push_39_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00510 Instruction { source: "inline_Keyboard_poll_queue_push_39_t1 <- inline_Keyboard_poll_queue_push_39_t2 Add inline_Keyboard_poll_queue_push_39_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\"] }", opcode: AddCarry32_1, args: [Register(0x28), Register(0x34), Register(0x28)], resolved: None }
30 28 34 28 
# 00514 Instruction { source: "inline_Keyboard_poll_queue_push_39_t1 <- inline_Keyboard_poll_queue_push_39_t2 Add inline_Keyboard_poll_queue_push_39_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_Keyboard_poll_queue_push_39_t8 <- inline_Keyboard_poll_queue_push_39_n U8
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_Keyboard_poll_queue_push_39_t8 <- inline_Keyboard_poll_queue_push_39_n U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# mem[inline_Keyboard_poll_queue_push_39_t1] <- inline_Keyboard_poll_queue_push_39_t8 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }"] }
# 00515 Instruction { source: "mem[inline_Keyboard_poll_queue_push_39_t1] <- inline_Keyboard_poll_queue_push_39_t8 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store8, args: [Register(0x1c), Register(0x28)], resolved: None }
06 1c 28 
# inline_Keyboard_poll_queue_push_39_t10 <- inline_Keyboard_poll_queue_push_39_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# 00518 Instruction { source: "inline_Keyboard_poll_queue_push_39_t10 <- inline_Keyboard_poll_queue_push_39_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x24), Register(0x2c)], resolved: None }
21 24 2c 
# inline_Keyboard_poll_queue_push_39_t11 <- 0n260/0x00000104u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Number(USIZE, 260)", "Number(USIZE, 260)"] }
# 0051b Instruction { source: "inline_Keyboard_poll_queue_push_39_t11 <- 0n260/0x00000104u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Number(USIZE, 260)\", \"Number(USIZE, 260)\"] }", opcode: LoadImm32, args: [Register(0x28), Constant32(0x00000104=260)], resolved: None }
20 28 04 01 00 00 
# inline_Keyboard_poll_queue_push_39_t9 <- inline_Keyboard_poll_queue_push_39_t10 Add inline_Keyboard_poll_queue_push_39_t11
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))"] }
# 00521 Instruction { source: "inline_Keyboard_poll_queue_push_39_t9 <- inline_Keyboard_poll_queue_push_39_t10 Add inline_Keyboard_poll_queue_push_39_t11\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00522 Instruction { source: "inline_Keyboard_poll_queue_push_39_t9 <- inline_Keyboard_poll_queue_push_39_t10 Add inline_Keyboard_poll_queue_push_39_t11\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddCarry32_1, args: [Register(0x2c), Register(0x28), Register(0x28)], resolved: None }
30 2c 28 28 
# 00526 Instruction { source: "inline_Keyboard_poll_queue_push_39_t9 <- inline_Keyboard_poll_queue_push_39_t10 Add inline_Keyboard_poll_queue_push_39_t11\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_Keyboard_poll_queue_push_39_t15 <- inline_Keyboard_poll_queue_push_39_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# 00527 Instruction { source: "inline_Keyboard_poll_queue_push_39_t15 <- inline_Keyboard_poll_queue_push_39_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x24), Register(0x2c)], resolved: None }
21 24 2c 
# inline_Keyboard_poll_queue_push_39_t16 <- 0n260/0x00000104u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Number(USIZE, 260)", "Number(USIZE, 260)"] }
# 0052a Instruction { source: "inline_Keyboard_poll_queue_push_39_t16 <- 0n260/0x00000104u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Number(USIZE, 260)\", \"Number(USIZE, 260)\"] }", opcode: LoadImm32, args: [Register(0x24), Constant32(0x00000104=260)], resolved: None }
20 24 04 01 00 00 
# inline_Keyboard_poll_queue_push_39_t14 <- inline_Keyboard_poll_queue_push_39_t15 Add inline_Keyboard_poll_queue_push_39_t16
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))"] }
# 00530 Instruction { source: "inline_Keyboard_poll_queue_push_39_t14 <- inline_Keyboard_poll_queue_push_39_t15 Add inline_Keyboard_poll_queue_push_39_t16\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00531 Instruction { source: "inline_Keyboard_poll_queue_push_39_t14 <- inline_Keyboard_poll_queue_push_39_t15 Add inline_Keyboard_poll_queue_push_39_t16\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddCarry32_1, args: [Register(0x2c), Register(0x24), Register(0x2c)], resolved: None }
30 2c 24 2c 
# 00535 Instruction { source: "inline_Keyboard_poll_queue_push_39_t14 <- inline_Keyboard_poll_queue_push_39_t15 Add inline_Keyboard_poll_queue_push_39_t16\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_Keyboard_poll_queue_push_39_t13 <- mem[inline_Keyboard_poll_queue_push_39_t14] U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")"] }
# 00536 Instruction { source: "inline_Keyboard_poll_queue_push_39_t13 <- mem[inline_Keyboard_poll_queue_push_39_t14] U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\"] }", opcode: Load8, args: [Register(0x2c), Register(0x1c)], resolved: None }
05 2c 1c 
# inline_Keyboard_poll_queue_push_39_t17 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 00539 Instruction { source: "inline_Keyboard_poll_queue_push_39_t17 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x30), Constant8(0x01=1)], resolved: None }
04 30 01 
# inline_Keyboard_poll_queue_push_39_t12 <- inline_Keyboard_poll_queue_push_39_t13 Add inline_Keyboard_poll_queue_push_39_t17
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))"] }
# 0053c Instruction { source: "inline_Keyboard_poll_queue_push_39_t12 <- inline_Keyboard_poll_queue_push_39_t13 Add inline_Keyboard_poll_queue_push_39_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\"] }", opcode: Add8NoCarryIn, args: [Register(0x1c), Register(0x30), Register(0x1c)], resolved: None }
14 1c 30 1c 
# mem[inline_Keyboard_poll_queue_push_39_t9] <- inline_Keyboard_poll_queue_push_39_t12 U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }"] }
# 00540 Instruction { source: "mem[inline_Keyboard_poll_queue_push_39_t9] <- inline_Keyboard_poll_queue_push_39_t12 U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\"] }", opcode: Store8, args: [Register(0x1c), Register(0x28)], resolved: None }
06 1c 28 
# goto inline_Keyboard_poll_queue_push_39_function_end_queue_push
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_Keyboard_poll_queue_push_39_function_end_queue_push\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_Keyboard_poll_queue_push_39_function_end_queue_push)], resolved: None }
# :inline_Keyboard_poll_queue_push_39_function_end_queue_push
# 	SourceContext { contexts: [] }
# inline_Keyboard_poll_queue_push_39_function_end_queue_push
# goto Keyboard_poll_if_end_6
# 	SourceContext { contexts: [] }
# 00543 Instruction { source: "goto Keyboard_poll_if_end_6\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(Keyboard_poll_if_end_6)], resolved: None }
70 47 05 00 
# :Keyboard_poll_if_else_0_8
# 	SourceContext { contexts: [] }
# Keyboard_poll_if_else_0_8
# :Keyboard_poll_if_end_6
# 	SourceContext { contexts: [] }
# Keyboard_poll_if_end_6
# t27 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00547 Instruction { source: "t27 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x00=0)], resolved: None }
04 1c 00 
# t30 <- const &PS2_SCAN_CODE_TO_ASCII
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }", "Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }", "Ident(\"PS2_SCAN_CODE_TO_ASCII\")"] }
# 0054a Instruction { source: "t30 <- const &PS2_SCAN_CODE_TO_ASCII\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }\", \"Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }\", \"Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\")\"] }", opcode: LoadImm32, args: [Register(0x24), Label32(:PS2_SCAN_CODE_TO_ASCII)], resolved: None }
20 24 22 00 00 00 
# t32 <- index U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))", "Ident(\"index\")", "Ident(\"index\")"] }
# optimized away noop copy Instruction { source: "t32 <- index U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))\", \"Ident(\\\"index\\\")\", \"Ident(\\\"index\\\")\"] }", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# t33 <- 0n2/0x00000002u32 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))", "Number(USIZE, 2)", "Number(USIZE, 2)"] }
# 00550 Instruction { source: "t33 <- 0n2/0x00000002u32 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))\", \"Number(USIZE, 2)\", \"Number(USIZE, 2)\"] }", opcode: LoadImm32, args: [Register(0x28), Constant32(0x00000002=2)], resolved: None }
20 28 02 00 00 00 
# t31 <- t32 Add t33
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))"] }
# 00556 Instruction { source: "t31 <- t32 Add t33\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00557 Instruction { source: "t31 <- t32 Add t33\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))\"] }", opcode: AddCarry32_1, args: [Register(0x20), Register(0x28), Register(0x28)], resolved: None }
30 20 28 28 
# 0055b Instruction { source: "t31 <- t32 Add t33\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t29 <- t30 Add t31
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))"] }
# 0055c Instruction { source: "t29 <- t30 Add t31\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0055d Instruction { source: "t29 <- t30 Add t31\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\"] }", opcode: AddCarry32_1, args: [Register(0x24), Register(0x28), Register(0x24)], resolved: None }
30 24 28 24 
# 00561 Instruction { source: "t29 <- t30 Add t31\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t28 <- mem[t29] U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))"] }
# 00562 Instruction { source: "t28 <- mem[t29] U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\"] }", opcode: Load8, args: [Register(0x24), Register(0x30)], resolved: None }
05 24 30 
# if t27 != t28 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_else_0_11'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }"] }
# 00565 Instruction { source: "if t27 != t28 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_else_0_11'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\"] }", opcode: Cmp8, args: [Register(0x1c), Register(0x30)], resolved: None }
15 1c 30 
# 00568 Instruction { source: "if t27 != t28 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_else_0_11'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\"] }", opcode: JzImm, args: [Label24(Keyboard_poll_if_else_0_11)], resolved: None }
72 ab 05 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t27 != t28 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_else_0_11'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\"] }", opcode: JmpImm, args: [Label24(Keyboard_poll_if_true_0_10)], resolved: None }
# :Keyboard_poll_if_true_0_10
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }"] }
# Keyboard_poll_if_true_0_10
# t36 <- 0n987136/0x000f1000u32 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }", "Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }", "LocalFieldDeref(\"keyboard\", \"release_in_progress\")", "LocalFieldDeref(\"keyboard\", \"release_in_progress\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))", "Number(USIZE, 987136)", "Number(USIZE, 987136)"] }
# 0056c Instruction { source: "t36 <- 0n987136/0x000f1000u32 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }\", \"Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\")\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))\", \"Number(USIZE, 987136)\", \"Number(USIZE, 987136)\"] }", opcode: LoadImm32, args: [Register(0x2c), Constant32(0x000f1000=987136)], resolved: None }
20 2c 00 10 0f 00 
# t37 <- 0n4/0x00000004u32 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }", "Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }", "LocalFieldDeref(\"keyboard\", \"release_in_progress\")", "LocalFieldDeref(\"keyboard\", \"release_in_progress\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 00572 Instruction { source: "t37 <- 0n4/0x00000004u32 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }\", \"Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\")\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: LoadImm32, args: [Register(0x24), Constant32(0x00000004=4)], resolved: None }
20 24 04 00 00 00 
# t35 <- t36 Add t37
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }", "Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }", "LocalFieldDeref(\"keyboard\", \"release_in_progress\")", "LocalFieldDeref(\"keyboard\", \"release_in_progress\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))"] }
# 00578 Instruction { source: "t35 <- t36 Add t37\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }\", \"Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\")\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00579 Instruction { source: "t35 <- t36 Add t37\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }\", \"Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\")\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x2c), Register(0x24), Register(0x2c)], resolved: None }
30 2c 24 2c 
# 0057d Instruction { source: "t35 <- t36 Add t37\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }\", \"Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\")\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t34 <- mem[t35] U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }", "Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }", "LocalFieldDeref(\"keyboard\", \"release_in_progress\")", "LocalFieldDeref(\"keyboard\", \"release_in_progress\")"] }
# 0057e Instruction { source: "t34 <- mem[t35] U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }\", \"Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\")\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\")\"] }", opcode: Load8, args: [Register(0x2c), Register(0x1c)], resolved: None }
05 2c 1c 
# t38 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }", "Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00581 Instruction { source: "t38 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }\", \"Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x30), Constant8(0x00=0)], resolved: None }
04 30 00 
# if t34 != t38 then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }", "Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }"] }
# 00584 Instruction { source: "if t34 != t38 then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }\", \"Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x1c), Register(0x30)], resolved: None }
15 1c 30 
# 00587 Instruction { source: "if t34 != t38 then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }\", \"Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(Keyboard_poll_if_else_0_14)], resolved: None }
72 9b 05 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t34 != t38 then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }\", \"Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(Keyboard_poll_if_true_0_13)], resolved: None }
# :Keyboard_poll_if_true_0_13
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }"] }
# Keyboard_poll_if_true_0_13
# t39 <- 0n987136/0x000f1000u32 
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }", "Number(USIZE, 987136)"] }
# 0058b Instruction { source: "t39 <- 0n987136/0x000f1000u32 \n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }\", \"Number(USIZE, 987136)\"] }", opcode: LoadImm32, args: [Register(0x2c), Constant32(0x000f1000=987136)], resolved: None }
20 2c 00 10 0f 00 
# t40 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00591 Instruction { source: "t40 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x30), Constant8(0x00=0)], resolved: None }
04 30 00 
# mem[t39] <- t40 U8
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }"] }
# 00594 Instruction { source: "mem[t39] <- t40 U8\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }\"] }", opcode: Store8, args: [Register(0x30), Register(0x2c)], resolved: None }
06 30 2c 
# goto Keyboard_poll_if_end_12
# 	SourceContext { contexts: [] }
# 00597 Instruction { source: "goto Keyboard_poll_if_end_12\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(Keyboard_poll_if_end_12)], resolved: None }
70 a7 05 00 
# :Keyboard_poll_if_else_0_14
# 	SourceContext { contexts: [] }
# Keyboard_poll_if_else_0_14
# t41 <- 0n987136/0x000f1000u32 
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }", "Number(USIZE, 987136)"] }
# 0059b Instruction { source: "t41 <- 0n987136/0x000f1000u32 \n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }\", \"Number(USIZE, 987136)\"] }", opcode: LoadImm32, args: [Register(0x2c), Constant32(0x000f1000=987136)], resolved: None }
20 2c 00 10 0f 00 
# t42 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }", "Number(U8, 1)", "Number(U8, 1)"] }
# 005a1 Instruction { source: "t42 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x30), Constant8(0x01=1)], resolved: None }
04 30 01 
# mem[t41] <- t42 U8
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }"] }
# 005a4 Instruction { source: "mem[t41] <- t42 U8\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }\"] }", opcode: Store8, args: [Register(0x30), Register(0x2c)], resolved: None }
06 30 2c 
# :Keyboard_poll_if_end_12
# 	SourceContext { contexts: [] }
# Keyboard_poll_if_end_12
# goto Keyboard_poll_if_end_9
# 	SourceContext { contexts: [] }
# 005a7 Instruction { source: "goto Keyboard_poll_if_end_9\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(Keyboard_poll_if_end_9)], resolved: None }
70 ab 05 00 
# :Keyboard_poll_if_else_0_11
# 	SourceContext { contexts: [] }
# Keyboard_poll_if_else_0_11
# :Keyboard_poll_if_end_9
# 	SourceContext { contexts: [] }
# Keyboard_poll_if_end_9
# t43 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 005ab Instruction { source: "t43 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x00=0)], resolved: None }
04 1c 00 
# t46 <- const &PS2_SCAN_CODE_TO_ASCII
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }", "Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }", "Ident(\"PS2_SCAN_CODE_TO_ASCII\")"] }
# 005ae Instruction { source: "t46 <- const &PS2_SCAN_CODE_TO_ASCII\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }\", \"Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }\", \"Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\")\"] }", opcode: LoadImm32, args: [Register(0x24), Label32(:PS2_SCAN_CODE_TO_ASCII)], resolved: None }
20 24 22 00 00 00 
# t48 <- index U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))", "Ident(\"index\")", "Ident(\"index\")"] }
# optimized away noop copy Instruction { source: "t48 <- index U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))\", \"Ident(\\\"index\\\")\", \"Ident(\\\"index\\\")\"] }", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# t49 <- 0n3/0x00000003u32 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))", "Number(USIZE, 3)", "Number(USIZE, 3)"] }
# 005b4 Instruction { source: "t49 <- 0n3/0x00000003u32 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))\", \"Number(USIZE, 3)\", \"Number(USIZE, 3)\"] }", opcode: LoadImm32, args: [Register(0x28), Constant32(0x00000003=3)], resolved: None }
20 28 03 00 00 00 
# t47 <- t48 Add t49
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))"] }
# 005ba Instruction { source: "t47 <- t48 Add t49\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 005bb Instruction { source: "t47 <- t48 Add t49\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))\"] }", opcode: AddCarry32_1, args: [Register(0x20), Register(0x28), Register(0x20)], resolved: None }
30 20 28 20 
# 005bf Instruction { source: "t47 <- t48 Add t49\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t45 <- t46 Add t47
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))"] }
# 005c0 Instruction { source: "t45 <- t46 Add t47\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 005c1 Instruction { source: "t45 <- t46 Add t47\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\"] }", opcode: AddCarry32_1, args: [Register(0x24), Register(0x20), Register(0x20)], resolved: None }
30 24 20 20 
# 005c5 Instruction { source: "t45 <- t46 Add t47\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t44 <- mem[t45] U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))"] }
# 005c6 Instruction { source: "t44 <- mem[t45] U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\"] }", opcode: Load8, args: [Register(0x20), Register(0x39)], resolved: None }
05 20 39 
# if t43 != t44 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }"] }
# 005c9 Instruction { source: "if t43 != t44 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\"] }", opcode: Cmp8, args: [Register(0x1c), Register(0x39)], resolved: None }
15 1c 39 
# 005cc Instruction { source: "if t43 != t44 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\"] }", opcode: JzImm, args: [Label24(Keyboard_poll_if_else_0_17)], resolved: None }
72 ec 05 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t43 != t44 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\"] }", opcode: JmpImm, args: [Label24(Keyboard_poll_if_true_0_16)], resolved: None }
# :Keyboard_poll_if_true_0_16
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }"] }
# Keyboard_poll_if_true_0_16
# t51 <- 0n987136/0x000f1000u32 
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))", "Number(USIZE, 987136)", "Number(USIZE, 987136)"] }
# 005d0 Instruction { source: "t51 <- 0n987136/0x000f1000u32 \n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))\", \"Number(USIZE, 987136)\", \"Number(USIZE, 987136)\"] }", opcode: LoadImm32, args: [Register(0x2c), Constant32(0x000f1000=987136)], resolved: None }
20 2c 00 10 0f 00 
# t52 <- 0n4/0x00000004u32 
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 005d6 Instruction { source: "t52 <- 0n4/0x00000004u32 \n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: LoadImm32, args: [Register(0x20), Constant32(0x00000004=4)], resolved: None }
20 20 04 00 00 00 
# t50 <- t51 Add t52
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))"] }
# 005dc Instruction { source: "t50 <- t51 Add t52\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 005dd Instruction { source: "t50 <- t51 Add t52\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x2c), Register(0x20), Register(0x2c)], resolved: None }
30 2c 20 2c 
# 005e1 Instruction { source: "t50 <- t51 Add t52\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t53 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }", "Number(U8, 1)", "Number(U8, 1)"] }
# 005e2 Instruction { source: "t53 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x39), Constant8(0x01=1)], resolved: None }
04 39 01 
# mem[t50] <- t53 U8
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }"] }
# 005e5 Instruction { source: "mem[t50] <- t53 U8\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }\"] }", opcode: Store8, args: [Register(0x39), Register(0x2c)], resolved: None }
06 39 2c 
# goto Keyboard_poll_if_end_15
# 	SourceContext { contexts: [] }
# 005e8 Instruction { source: "goto Keyboard_poll_if_end_15\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(Keyboard_poll_if_end_15)], resolved: None }
70 04 06 00 
# :Keyboard_poll_if_else_0_17
# 	SourceContext { contexts: [] }
# Keyboard_poll_if_else_0_17
# t55 <- 0n987136/0x000f1000u32 
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))", "Number(USIZE, 987136)", "Number(USIZE, 987136)"] }
# 005ec Instruction { source: "t55 <- 0n987136/0x000f1000u32 \n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))\", \"Number(USIZE, 987136)\", \"Number(USIZE, 987136)\"] }", opcode: LoadImm32, args: [Register(0x2c), Constant32(0x000f1000=987136)], resolved: None }
20 2c 00 10 0f 00 
# t56 <- 0n4/0x00000004u32 
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 005f2 Instruction { source: "t56 <- 0n4/0x00000004u32 \n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: LoadImm32, args: [Register(0x20), Constant32(0x00000004=4)], resolved: None }
20 20 04 00 00 00 
# t54 <- t55 Add t56
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))"] }
# 005f8 Instruction { source: "t54 <- t55 Add t56\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 005f9 Instruction { source: "t54 <- t55 Add t56\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x2c), Register(0x20), Register(0x2c)], resolved: None }
30 2c 20 2c 
# 005fd Instruction { source: "t54 <- t55 Add t56\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t57 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 005fe Instruction { source: "t57 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x39), Constant8(0x00=0)], resolved: None }
04 39 00 
# mem[t54] <- t57 U8
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }"] }
# 00601 Instruction { source: "mem[t54] <- t57 U8\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }\"] }", opcode: Store8, args: [Register(0x39), Register(0x2c)], resolved: None }
06 39 2c 
# :Keyboard_poll_if_end_15
# 	SourceContext { contexts: [] }
# Keyboard_poll_if_end_15
# return None
# 	SourceContext { contexts: ["Return { value: None }"] }
# 00604 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# :function_end_Keyboard_poll
# 	SourceContext { contexts: [] }
# function_end_Keyboard_poll
# Unreachable
# 	SourceContext { contexts: [] }
# 00606 Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
# :RpnCalc_handle
# Ret Some(U8)
# Arg0=c
# Arg1=ch
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var a (Local a Number(USIZE) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var b (Local b Number(USIZE) Reg(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([68, 69, 70, 71])
# Var ch (Arg1 ch Number(U8)) Reg(U8) Some([72])
# Var diff (Local diff Number(USIZE) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var i (Local i Number(U8) Reg(U8)) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_RpnCalc_init_52_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_RpnCalc_init_52_c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_init_52_inline_RpnCalc_init_stack_init_51_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_RpnCalc_init_52_inline_RpnCalc_init_stack_init_51_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_RpnCalc_init_52_inline_RpnCalc_init_stack_init_51_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_init_52_inline_RpnCalc_init_stack_init_51_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_init_52_inline_RpnCalc_init_stack_init_51_t1 (t1 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_init_52_inline_RpnCalc_init_stack_init_51_t2 (t2 Number(USIZE, 64)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_RpnCalc_init_52_inline_RpnCalc_init_stack_init_51_t3 (t3 Number(USIZE, 0)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_RpnCalc_init_52_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_RpnCalc_init_52_s (Local s Ptr(Struct("Stack")) Reg(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_init_52_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_init_52_t1 (t1 Call(Call { function: "stack_init", parameters: [Ident("s")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_RpnCalc_init_52_t2 (t2 Ident("s")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_init_52_t3 (t3 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_init_52_t4 (t4 Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_init_52_t5 (t5 Number(USIZE, 68)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_init_52_t6 (t6 Number(USIZE, 0)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_n (Arg1 n Number(USIZE)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t1 (t1 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([88, 89, 90, 91])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t10 (t10 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t11 (t11 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t12 (t12 Number(USIZE, 64)) Reg(U32) Some([88, 89, 90, 91])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t13 (t13 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t14 (t14 PtrFieldDeref("s", "first_free")) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t15 (t15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t16 (t16 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t17 (t17 Number(USIZE, 64)) Reg(U32) Some([88, 89, 90, 91])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t18 (t18 Number(USIZE, 1)) Reg(U32) Some([88, 89, 90, 91])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t2 (t2 Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([88, 89, 90, 91])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t3 (t3 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t4 (t4 PtrFieldDeref("s", "first_free")) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t5 (t5 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t6 (t6 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t7 (t7 Number(USIZE, 64)) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t8 (t8 Number(USIZE, 4)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t9 (t9 Ident("n")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([88, 89, 90, 91])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_t0 (t0 PtrFieldDeref("c", "have_num")) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_t1 (t1 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_t10 (t10 Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_t11 (t11 Number(USIZE, 68)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_t12 (t12 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_t13 (t13 Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_t14 (t14 Number(USIZE, 68)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_t15 (t15 Number(USIZE, 0)) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_t16 (t16 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_t17 (t17 Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_t18 (t18 Number(USIZE, 72)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_t19 (t19 Number(U8, 0)) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_t2 (t2 Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_t3 (t3 Number(USIZE, 72)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_t4 (t4 Number(U8, 0)) Reg(U8) Some([97])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_t5 (t5 Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_t6 (t6 AddressOf(PtrFieldDeref("c", "stack"))) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_t7 (t7 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_t8 (t8 PtrFieldDeref("c", "num")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_t9 (t9 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_64_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_64_c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_n (Arg1 n Number(USIZE)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t1 (t1 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t10 (t10 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t11 (t11 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t12 (t12 Number(USIZE, 64)) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t13 (t13 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t14 (t14 PtrFieldDeref("s", "first_free")) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t15 (t15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t16 (t16 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t17 (t17 Number(USIZE, 64)) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t18 (t18 Number(USIZE, 1)) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t2 (t2 Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t3 (t3 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t4 (t4 PtrFieldDeref("s", "first_free")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t5 (t5 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t6 (t6 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t7 (t7 Number(USIZE, 64)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t8 (t8 Number(USIZE, 4)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t9 (t9 Ident("n")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_64_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_64_t0 (t0 PtrFieldDeref("c", "have_num")) Reg(U8) Some([104])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_64_t1 (t1 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_64_t10 (t10 Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_64_t11 (t11 Number(USIZE, 68)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_64_t12 (t12 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_64_t13 (t13 Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_64_t14 (t14 Number(USIZE, 68)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_64_t15 (t15 Number(USIZE, 0)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_64_t16 (t16 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_64_t17 (t17 Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_64_t18 (t18 Number(USIZE, 72)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_64_t19 (t19 Number(U8, 0)) Reg(U8) Some([104])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_64_t2 (t2 Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_64_t3 (t3 Number(USIZE, 72)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_64_t4 (t4 Number(U8, 0)) Reg(U8) Some([105])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_64_t5 (t5 Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_64_t6 (t6 AddressOf(PtrFieldDeref("c", "stack"))) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_64_t7 (t7 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_64_t8 (t8 PtrFieldDeref("c", "num")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_64_t9 (t9 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_65_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_65_c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_n (Arg1 n Number(USIZE)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t1 (t1 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t10 (t10 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t11 (t11 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t12 (t12 Number(USIZE, 64)) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t13 (t13 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t14 (t14 PtrFieldDeref("s", "first_free")) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t15 (t15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t16 (t16 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t17 (t17 Number(USIZE, 64)) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t18 (t18 Number(USIZE, 1)) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t2 (t2 Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t3 (t3 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t4 (t4 PtrFieldDeref("s", "first_free")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t5 (t5 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t6 (t6 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t7 (t7 Number(USIZE, 64)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t8 (t8 Number(USIZE, 4)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t9 (t9 Ident("n")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_65_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_65_t0 (t0 PtrFieldDeref("c", "have_num")) Reg(U8) Some([104])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_65_t1 (t1 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_65_t10 (t10 Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_65_t11 (t11 Number(USIZE, 68)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_65_t12 (t12 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_65_t13 (t13 Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_65_t14 (t14 Number(USIZE, 68)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_65_t15 (t15 Number(USIZE, 0)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_65_t16 (t16 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_65_t17 (t17 Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_65_t18 (t18 Number(USIZE, 72)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_65_t19 (t19 Number(U8, 0)) Reg(U8) Some([104])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_65_t2 (t2 Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_65_t3 (t3 Number(USIZE, 72)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_65_t4 (t4 Number(U8, 0)) Reg(U8) Some([105])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_65_t5 (t5 Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_65_t6 (t6 AddressOf(PtrFieldDeref("c", "stack"))) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_65_t7 (t7 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_65_t8 (t8 PtrFieldDeref("c", "num")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_65_t9 (t9 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_14_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_mul32_32_14_a (Arg0 a Number(USIZE)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_14_a_hi (Local a_hi Number(USIZE) Reg(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_14_b (Arg1 b Number(USIZE)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_mul32_32_14_b_hi (Local b_hi Number(USIZE) Reg(U32)) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_mul32_32_14_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_mul32_32_14_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_a (Arg0 a Number(USIZE)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_b (Arg1 b Number(USIZE)) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t0 (t0 Ident("a")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t1 (t1 Ident("b")) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t10 (t10 Ident("c")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t11 (t11 Ident("f")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t12 (t12 Ident("a")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t13 (t13 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t14 (t14 Index("b", Number(U8, 1))) Reg(U8) Some([72])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t15 (t15 Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t16 (t16 Index("a", Number(U8, 1))) Reg(U8) Some([104])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t17 (t17 Ident("b")) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t18 (t18 Ident("d")) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t19 (t19 Ident("e")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t2 (t2 Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t20 (t20 Index("d", Number(U8, 2))) Reg(U8) Some([104])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t21 (t21 Index("d", Number(U8, 1))) Reg(U8) Some([104])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t22 (t22 Index("d", Number(U8, 0))) Reg(U8) Some([104])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t23 (t23 Number(U8, 0)) Reg(U8) Some([104])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t24 (t24 Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t25 (t25 Ident("c")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t26 (t26 Ident("d")) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t3 (t3 Index("a", Number(U8, 1))) Reg(U8) Some([104])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t4 (t4 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t5 (t5 Index("b", Number(U8, 1))) Reg(U8) Some([72])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t6 (t6 Index("f", Number(U8, 1))) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t7 (t7 Index("f", Number(U8, 0))) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t8 (t8 Number(U8, 0)) Reg(U8) Some([97])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t9 (t9 Number(U8, 0)) Reg(U8) Some([97])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_a (Arg0 a Number(USIZE)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_b (Arg1 b Number(USIZE)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t0 (t0 Ident("a")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t1 (t1 Ident("b")) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t10 (t10 Ident("c")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t11 (t11 Ident("f")) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t12 (t12 Ident("a")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t13 (t13 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t14 (t14 Index("b", Number(U8, 1))) Reg(U8) Some([105])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t15 (t15 Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t16 (t16 Index("a", Number(U8, 1))) Reg(U8) Some([104])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t17 (t17 Ident("b")) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t18 (t18 Ident("d")) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t19 (t19 Ident("e")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t2 (t2 Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t20 (t20 Index("d", Number(U8, 2))) Reg(U8) Some([104])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t21 (t21 Index("d", Number(U8, 1))) Reg(U8) Some([104])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t22 (t22 Index("d", Number(U8, 0))) Reg(U8) Some([104])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t23 (t23 Number(U8, 0)) Reg(U8) Some([104])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t24 (t24 Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t25 (t25 Ident("c")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t26 (t26 Ident("d")) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t3 (t3 Index("a", Number(U8, 1))) Reg(U8) Some([104])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t4 (t4 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([88, 89, 90, 91])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t5 (t5 Index("b", Number(U8, 1))) Reg(U8) Some([105])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t6 (t6 Index("f", Number(U8, 1))) Reg(U8) Some([97])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t7 (t7 Index("f", Number(U8, 0))) Reg(U8) Some([97])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t8 (t8 Number(U8, 0)) Reg(U8) Some([106])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t9 (t9 Number(U8, 0)) Reg(U8) Some([106])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_a (Arg0 a Number(USIZE)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_b (Arg1 b Number(USIZE)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t0 (t0 Ident("a")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t1 (t1 Ident("b")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t10 (t10 Ident("c")) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t11 (t11 Ident("f")) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t12 (t12 Ident("a")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t13 (t13 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t14 (t14 Index("b", Number(U8, 1))) Reg(U8) Some([104])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t15 (t15 Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t16 (t16 Index("a", Number(U8, 1))) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t17 (t17 Ident("b")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t18 (t18 Ident("d")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t19 (t19 Ident("e")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t2 (t2 Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t20 (t20 Index("d", Number(U8, 2))) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t21 (t21 Index("d", Number(U8, 1))) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t22 (t22 Index("d", Number(U8, 0))) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t23 (t23 Number(U8, 0)) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t24 (t24 Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t25 (t25 Ident("c")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t26 (t26 Ident("d")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t3 (t3 Index("a", Number(U8, 1))) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t4 (t4 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t5 (t5 Index("b", Number(U8, 1))) Reg(U8) Some([104])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t6 (t6 Index("f", Number(U8, 1))) Reg(U8) Some([72])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t7 (t7 Index("f", Number(U8, 0))) Reg(U8) Some([72])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t8 (t8 Number(U8, 0)) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t9 (t9 Number(U8, 0)) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_mul32_32_14_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_mul32_32_14_t0 (t0 Ident("a")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_14_t1 (t1 Ident("b")) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_mul32_32_14_t10 (t10 Ident("a")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_14_t11 (t11 Ident("b_hi")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_14_t12 (t12 Index("d", Number(U8, 1))) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_mul32_32_14_t13 (t13 Index("d", Number(U8, 0))) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_mul32_32_14_t14 (t14 Number(U8, 0)) Reg(U8) Some([104])
# Var inline_RpnCalc_handle_mul32_32_14_t15 (t15 Number(U8, 0)) Reg(U8) Some([104])
# Var inline_RpnCalc_handle_mul32_32_14_t16 (t16 Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_14_t17 (t17 Ident("c")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_14_t18 (t18 Ident("d")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_14_t2 (t2 Index("a", Number(U8, 3))) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_mul32_32_14_t3 (t3 Index("a", Number(U8, 2))) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_mul32_32_14_t4 (t4 Index("b", Number(U8, 3))) Reg(U8) Some([105])
# Var inline_RpnCalc_handle_mul32_32_14_t5 (t5 Index("b", Number(U8, 2))) Reg(U8) Some([105])
# Var inline_RpnCalc_handle_mul32_32_14_t6 (t6 Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_14_t7 (t7 Ident("a_hi")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_14_t8 (t8 Ident("b")) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_mul32_32_14_t9 (t9 Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_by10_15_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_mul32_by10_15_a (Arg0 a Number(USIZE)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_by10_15_b (Local b Number(USIZE) Reg(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_by10_15_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_mul32_by10_15_t0 (t0 Ident("a")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_by10_15_t1 (t1 Ident("a")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_by10_15_t2 (t2 Ident("a")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_by10_15_t3 (t3 Ident("a")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_by10_15_t4 (t4 Ident("b")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_by10_15_t5 (t5 Ident("b")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_mul32_by10_15_t6 (t6 Arithmetic(Add, Ident("b"), Ident("a"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_by10_15_t7 (t7 Ident("b")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_by10_15_t8 (t8 Ident("a")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_putc_17_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_putc_17_c (Arg0 c Number(U8)) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_17_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_putc_17_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_17_t1 (t1 Ident("c")) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_17_t2 (t2 Call(Call { function: "lcd_write_char", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_17_t3 (t3 Ident("c")) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_18_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_putc_18_c (Arg0 c Number(U8)) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_18_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_putc_18_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_18_t1 (t1 Ident("c")) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_18_t2 (t2 Call(Call { function: "lcd_write_char", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_18_t3 (t3 Ident("c")) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_19_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_putc_19_c (Arg0 c Number(U8)) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_19_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_putc_19_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_19_t1 (t1 Ident("c")) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_19_t2 (t2 Call(Call { function: "lcd_write_char", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_19_t3 (t3 Ident("c")) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_20_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_putc_20_c (Arg0 c Number(U8)) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_20_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_putc_20_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_20_t1 (t1 Ident("c")) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_20_t2 (t2 Call(Call { function: "lcd_write_char", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_20_t3 (t3 Ident("c")) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_21_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_putc_21_c (Arg0 c Number(U8)) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_21_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_putc_21_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_21_t1 (t1 Ident("c")) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_21_t2 (t2 Call(Call { function: "lcd_write_char", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_21_t3 (t3 Ident("c")) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_22_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_putc_22_c (Arg0 c Number(U8)) Reg(U8) Some([104])
# Var inline_RpnCalc_handle_putc_22_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_putc_22_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_22_t1 (t1 Ident("c")) Reg(U8) Some([104])
# Var inline_RpnCalc_handle_putc_22_t2 (t2 Call(Call { function: "lcd_write_char", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_22_t3 (t3 Ident("c")) Reg(U8) Some([104])
# Var inline_RpnCalc_handle_putc_23_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_putc_23_c (Arg0 c Number(U8)) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_23_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_putc_23_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_23_t1 (t1 Ident("c")) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_23_t2 (t2 Call(Call { function: "lcd_write_char", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_23_t3 (t3 Ident("c")) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_24_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_putc_24_c (Arg0 c Number(U8)) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_24_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_putc_24_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_24_t1 (t1 Ident("c")) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_24_t2 (t2 Call(Call { function: "lcd_write_char", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_24_t3 (t3 Ident("c")) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_25_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_putc_25_c (Arg0 c Number(U8)) Reg(U8) Some([104])
# Var inline_RpnCalc_handle_putc_25_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_putc_25_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_25_t1 (t1 Ident("c")) Reg(U8) Some([104])
# Var inline_RpnCalc_handle_putc_25_t2 (t2 Call(Call { function: "lcd_write_char", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_25_t3 (t3 Ident("c")) Reg(U8) Some([104])
# Var inline_RpnCalc_handle_putc_26_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_putc_26_c (Arg0 c Number(U8)) Reg(U8) Some([104])
# Var inline_RpnCalc_handle_putc_26_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_putc_26_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_26_t1 (t1 Ident("c")) Reg(U8) Some([104])
# Var inline_RpnCalc_handle_putc_26_t2 (t2 Call(Call { function: "lcd_write_char", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_26_t3 (t3 Ident("c")) Reg(U8) Some([104])
# Var inline_RpnCalc_handle_stack_get_50_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_stack_get_50_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_stack_get_50_n (Arg1 n Number(USIZE)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_get_50_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_get_50_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_get_50_t1 (t1 Index("values", Ident("n"))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_get_50_t2 (t2 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_get_50_t3 (t3 Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_get_50_t4 (t4 Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_get_50_t5 (t5 Ident("n")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_get_50_t6 (t6 Number(USIZE, 4)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_get_50_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_pop_54_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_stack_pop_54_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_stack_pop_54_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_54_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_pop_54_t1 (t1 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_54_t10 (t10 Index("values", PtrFieldDeref("s", "first_free"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_54_t11 (t11 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_54_t12 (t12 Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_pop_54_t13 (t13 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_54_t14 (t14 PtrFieldDeref("s", "first_free")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_54_t15 (t15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_54_t16 (t16 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_54_t17 (t17 Number(USIZE, 64)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_stack_pop_54_t18 (t18 Number(USIZE, 4)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_54_t2 (t2 Number(USIZE, 64)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_pop_54_t3 (t3 Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_stack_pop_54_t4 (t4 PtrFieldDeref("s", "first_free")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_stack_pop_54_t5 (t5 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_stack_pop_54_t6 (t6 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_54_t7 (t7 Number(USIZE, 64)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_stack_pop_54_t8 (t8 Number(USIZE, 1)) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_stack_pop_54_t9 (t9 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_54_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_pop_55_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_stack_pop_55_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_stack_pop_55_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_pop_55_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_pop_55_t1 (t1 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_pop_55_t10 (t10 Index("values", PtrFieldDeref("s", "first_free"))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_pop_55_t11 (t11 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_pop_55_t12 (t12 Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_pop_55_t13 (t13 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_pop_55_t14 (t14 PtrFieldDeref("s", "first_free")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_pop_55_t15 (t15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_pop_55_t16 (t16 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_pop_55_t17 (t17 Number(USIZE, 64)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_stack_pop_55_t18 (t18 Number(USIZE, 4)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_55_t2 (t2 Number(USIZE, 64)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_pop_55_t3 (t3 Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_stack_pop_55_t4 (t4 PtrFieldDeref("s", "first_free")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_stack_pop_55_t5 (t5 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_stack_pop_55_t6 (t6 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_pop_55_t7 (t7 Number(USIZE, 64)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_stack_pop_55_t8 (t8 Number(USIZE, 1)) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_stack_pop_55_t9 (t9 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_pop_55_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_push_56_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_stack_push_56_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_stack_push_56_n (Arg1 n Number(USIZE)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_56_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_56_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_56_t1 (t1 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_56_t10 (t10 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_56_t11 (t11 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_56_t12 (t12 Number(USIZE, 64)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_56_t13 (t13 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_56_t14 (t14 PtrFieldDeref("s", "first_free")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_56_t15 (t15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_56_t16 (t16 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_56_t17 (t17 Number(USIZE, 64)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_56_t18 (t18 Number(USIZE, 1)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_56_t2 (t2 Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_56_t3 (t3 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_stack_push_56_t4 (t4 PtrFieldDeref("s", "first_free")) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_stack_push_56_t5 (t5 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_stack_push_56_t6 (t6 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_56_t7 (t7 Number(USIZE, 64)) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_stack_push_56_t8 (t8 Number(USIZE, 4)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_56_t9 (t9 Ident("n")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_56_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_57_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_stack_push_57_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_stack_push_57_n (Arg1 n Number(USIZE)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_57_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_57_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_57_t1 (t1 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_57_t10 (t10 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_57_t11 (t11 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_57_t12 (t12 Number(USIZE, 64)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_57_t13 (t13 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_57_t14 (t14 PtrFieldDeref("s", "first_free")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_57_t15 (t15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_57_t16 (t16 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_57_t17 (t17 Number(USIZE, 64)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_57_t18 (t18 Number(USIZE, 1)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_57_t2 (t2 Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_57_t3 (t3 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_stack_push_57_t4 (t4 PtrFieldDeref("s", "first_free")) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_stack_push_57_t5 (t5 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_stack_push_57_t6 (t6 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_57_t7 (t7 Number(USIZE, 64)) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_stack_push_57_t8 (t8 Number(USIZE, 4)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_57_t9 (t9 Ident("n")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_57_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_58_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_stack_push_58_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_stack_push_58_n (Arg1 n Number(USIZE)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_58_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_58_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_58_t1 (t1 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_58_t10 (t10 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_58_t11 (t11 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_58_t12 (t12 Number(USIZE, 64)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_58_t13 (t13 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_58_t14 (t14 PtrFieldDeref("s", "first_free")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_58_t15 (t15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_58_t16 (t16 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_58_t17 (t17 Number(USIZE, 64)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_58_t18 (t18 Number(USIZE, 1)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_58_t2 (t2 Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_58_t3 (t3 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_stack_push_58_t4 (t4 PtrFieldDeref("s", "first_free")) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_stack_push_58_t5 (t5 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_stack_push_58_t6 (t6 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_58_t7 (t7 Number(USIZE, 64)) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_stack_push_58_t8 (t8 Number(USIZE, 4)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_58_t9 (t9 Ident("n")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_58_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_59_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_stack_push_59_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_stack_push_59_n (Arg1 n Number(USIZE)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_59_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_59_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_59_t1 (t1 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_59_t10 (t10 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_59_t11 (t11 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_59_t12 (t12 Number(USIZE, 64)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_59_t13 (t13 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_59_t14 (t14 PtrFieldDeref("s", "first_free")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_59_t15 (t15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_59_t16 (t16 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_59_t17 (t17 Number(USIZE, 64)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_59_t18 (t18 Number(USIZE, 1)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_59_t2 (t2 Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_59_t3 (t3 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_stack_push_59_t4 (t4 PtrFieldDeref("s", "first_free")) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_stack_push_59_t5 (t5 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_stack_push_59_t6 (t6 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_59_t7 (t7 Number(USIZE, 64)) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_stack_push_59_t8 (t8 Number(USIZE, 4)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_59_t9 (t9 Ident("n")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_59_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_60_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_stack_push_60_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_stack_push_60_n (Arg1 n Number(USIZE)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_60_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_60_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_60_t1 (t1 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_stack_push_60_t10 (t10 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_60_t11 (t11 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_60_t12 (t12 Number(USIZE, 64)) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_stack_push_60_t13 (t13 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_60_t14 (t14 PtrFieldDeref("s", "first_free")) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_60_t15 (t15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_60_t16 (t16 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_60_t17 (t17 Number(USIZE, 64)) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_stack_push_60_t18 (t18 Number(USIZE, 1)) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_stack_push_60_t2 (t2 Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_stack_push_60_t3 (t3 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_push_60_t4 (t4 PtrFieldDeref("s", "first_free")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_push_60_t5 (t5 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_push_60_t6 (t6 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_60_t7 (t7 Number(USIZE, 64)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_push_60_t8 (t8 Number(USIZE, 4)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_60_t9 (t9 Ident("n")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_60_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_stack_push_61_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_stack_push_61_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_stack_push_61_n (Arg1 n Number(USIZE)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_61_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_61_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_61_t1 (t1 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_61_t10 (t10 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_61_t11 (t11 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_61_t12 (t12 Number(USIZE, 64)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_61_t13 (t13 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_61_t14 (t14 PtrFieldDeref("s", "first_free")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_61_t15 (t15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_61_t16 (t16 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_61_t17 (t17 Number(USIZE, 64)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_61_t18 (t18 Number(USIZE, 1)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_61_t2 (t2 Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_61_t3 (t3 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_stack_push_61_t4 (t4 PtrFieldDeref("s", "first_free")) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_stack_push_61_t5 (t5 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_stack_push_61_t6 (t6 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_61_t7 (t7 Number(USIZE, 64)) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_stack_push_61_t8 (t8 Number(USIZE, 4)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_61_t9 (t9 Ident("n")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_61_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([68, 69, 70, 71])
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var product (Local product Number(USIZE) Reg(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var quotient (Local quotient Number(USIZE) Reg(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var stack (Local stack Ptr(Struct("Stack")) Reg(U32)) Reg(U32) Some([108, 109, 110, 111])
# Var stack_count (Local stack_count Number(U8) Reg(U8)) Reg(U8) Some([106])
# Var stack_count_usize (Local stack_count_usize Number(USIZE) Reg(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var stack_needed (Local stack_needed Number(U8) Reg(U8)) Reg(U8) Some([112])
# Var sum (Local sum Number(USIZE) Reg(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([60, 61, 62, 63])
# Var t1 (t1 Ident("ch")) Reg(U8) Some([72])
# Var t10 (t10 Number(U8, 115)) Reg(U8) Some([113])
# Var t100 (t100 Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var t101 (t101 Ident("c")) Reg(U32) Some([60, 61, 62, 63])
# Var t102 (t102 Ident("ch")) Reg(U8) Some([73])
# Var t103 (t103 Number(U8, 100)) Reg(U8) Some([104])
# Var t104 (t104 Ident("i")) Reg(U8) Some([73])
# Var t105 (t105 Ident("stack_count")) Reg(U8) Some([104])
# Var t106 (t106 Call(Call { function: "print_dec8", parameters: [Ident("i")] })) Reg(U8) Some([73])
# Var t107 (t107 Ident("i")) Reg(U8) Some([73])
# Var t108 (t108 Call(Call { function: "putc", parameters: [Number(U8, 58)] })) Reg(U8) Some([73])
# Var t109 (t109 Number(U8, 58)) Reg(U8) Some([104])
# Var t11 (t11 Ident("stack_needed")) Reg(U8) Some([113])
# Var t110 (t110 Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })) Reg(U8) Some([73])
# Var t111 (t111 Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })) Reg(U32) Some([64, 65, 66, 67])
# Var t112 (t112 Ident("stack")) Reg(U32) Some([64, 65, 66, 67])
# Var t113 (t113 Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }) Reg(U32) Some([100, 101, 102, 103])
# Var t114 (t114 Ident("i")) Reg(U8) Some([73])
# Var t115 (t115 Call(Call { function: "putc", parameters: [Number(U8, 10)] })) Reg(U8) Some([73])
# Var t116 (t116 Number(U8, 10)) Reg(U8) Some([104])
# Var t117 (t117 Ident("i")) Reg(U8) Some([73])
# Var t118 (t118 Number(U8, 1)) Reg(U8) Some([104])
# Var t119 (t119 Ident("ch")) Reg(U8) Some([73])
# Var t12 (t12 Number(U8, 0)) Reg(U8) Some([96])
# Var t120 (t120 Number(U8, 57)) Reg(U8) Some([104])
# Var t121 (t121 Ident("ch")) Reg(U8) Some([73])
# Var t122 (t122 Number(U8, 48)) Reg(U8) Some([104])
# Var t123 (t123 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }) Reg(U32) Some([60, 61, 62, 63])
# Var t124 (t124 Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([60, 61, 62, 63])
# Var t125 (t125 Number(USIZE, 72)) Reg(U32) Some([64, 65, 66, 67])
# Var t126 (t126 Number(U8, 1)) Reg(U8) Some([104])
# Var t127 (t127 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([80, 81, 82, 83])
# Var t128 (t128 Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([60, 61, 62, 63])
# Var t129 (t129 Number(USIZE, 68)) Reg(U32) Some([64, 65, 66, 67])
# Var t13 (t13 Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var t130 (t130 Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })) Reg(U32) Some([60, 61, 62, 63])
# Var t131 (t131 PtrFieldDeref("c", "num")) Reg(U32) Some([60, 61, 62, 63])
# Var t132 (t132 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([60, 61, 62, 63])
# Var t133 (t133 Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([60, 61, 62, 63])
# Var t134 (t134 Number(USIZE, 68)) Reg(U32) Some([64, 65, 66, 67])
# Var t135 (t135 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([60, 61, 62, 63])
# Var t136 (t136 Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([60, 61, 62, 63])
# Var t137 (t137 Number(USIZE, 68)) Reg(U32) Some([64, 65, 66, 67])
# Var t138 (t138 Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })) Reg(U32) Some([64, 65, 66, 67])
# Var t139 (t139 PtrFieldDeref("c", "num")) Reg(U32) Some([64, 65, 66, 67])
# Var t14 (t14 Ident("c")) Reg(U32) Some([68, 69, 70, 71])
# Var t140 (t140 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([64, 65, 66, 67])
# Var t141 (t141 Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([64, 65, 66, 67])
# Var t142 (t142 Number(USIZE, 68)) Reg(U32) Some([68, 69, 70, 71])
# Var t143 (t143 Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) Reg(U32) Some([68, 69, 70, 71])
# Var t144 (t144 Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) Reg(U8) Some([105])
# Var t145 (t145 Ident("ch")) Reg(U8) Some([105])
# Var t146 (t146 Number(U8, 48)) Reg(U8) Some([72])
# Var t147 (t147 Number(U8, 1)) Reg(U8) Some([73])
# Var t15 (t15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("stack") }, Number(USIZE, 64)) }) Reg(U32) Some([76, 77, 78, 79])
# Var t16 (t16 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("stack") }) Reg(U32) Some([76, 77, 78, 79])
# Var t17 (t17 Number(USIZE, 64)) Reg(U32) Some([80, 81, 82, 83])
# Var t18 (t18 Ident("stack_needed")) Reg(U8) Some([113])
# Var t19 (t19 Ident("stack_count")) Reg(U8) Some([96])
# Var t2 (t2 Number(U8, 43)) Reg(U8) Some([113])
# Var t20 (t20 Call(Call { function: "putc", parameters: [Number(U8, 69)] })) Reg(U8) Some([73])
# Var t21 (t21 Number(U8, 69)) Reg(U8) Some([73])
# Var t22 (t22 Call(Call { function: "putc", parameters: [Number(U8, 82)] })) Reg(U8) Some([73])
# Var t23 (t23 Number(U8, 82)) Reg(U8) Some([73])
# Var t24 (t24 Call(Call { function: "putc", parameters: [Number(U8, 82)] })) Reg(U8) Some([73])
# Var t25 (t25 Number(U8, 82)) Reg(U8) Some([73])
# Var t26 (t26 Call(Call { function: "putc", parameters: [Number(U8, 10)] })) Reg(U8) Some([73])
# Var t27 (t27 Number(U8, 10)) Reg(U8) Some([73])
# Var t28 (t28 Number(U8, 1)) Reg(U8) Some([73])
# Var t29 (t29 Ident("stack_needed")) Reg(U8) Some([113])
# Var t3 (t3 Ident("ch")) Reg(U8) Some([72])
# Var t30 (t30 Number(U8, 0)) Reg(U8) Some([96])
# Var t31 (t31 Ident("stack")) Reg(U32) Some([60, 61, 62, 63])
# Var t32 (t32 Ident("stack_needed")) Reg(U8) Some([113])
# Var t33 (t33 Number(U8, 1)) Reg(U8) Some([96])
# Var t34 (t34 Ident("stack")) Reg(U32) Some([64, 65, 66, 67])
# Var t35 (t35 Ident("ch")) Reg(U8) Some([72])
# Var t36 (t36 Number(U8, 43)) Reg(U8) Some([113])
# Var t37 (t37 Ident("b")) Reg(U32) Some([64, 65, 66, 67])
# Var t38 (t38 Ident("a")) Reg(U32) Some([60, 61, 62, 63])
# Var t39 (t39 Call(Call { function: "print_dec32", parameters: [Ident("sum")] })) Reg(U8) Some([73])
# Var t4 (t4 Number(U8, 45)) Reg(U8) Some([113])
# Var t40 (t40 Ident("sum")) Reg(U32) Some([60, 61, 62, 63])
# Var t41 (t41 Call(Call { function: "putc", parameters: [Number(U8, 10)] })) Reg(U8) Some([73])
# Var t42 (t42 Number(U8, 10)) Reg(U8) Some([73])
# Var t43 (t43 Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })) Reg(U8) Some([73])
# Var t44 (t44 Ident("stack")) Reg(U32) Some([60, 61, 62, 63])
# Var t45 (t45 Ident("sum")) Reg(U32) Some([68, 69, 70, 71])
# Var t46 (t46 Ident("ch")) Reg(U8) Some([72])
# Var t47 (t47 Number(U8, 45)) Reg(U8) Some([113])
# Var t48 (t48 Ident("b")) Reg(U32) Some([64, 65, 66, 67])
# Var t49 (t49 Ident("a")) Reg(U32) Some([60, 61, 62, 63])
# Var t5 (t5 Ident("ch")) Reg(U8) Some([72])
# Var t50 (t50 Call(Call { function: "print_dec32", parameters: [Ident("diff")] })) Reg(U8) Some([73])
# Var t51 (t51 Ident("diff")) Reg(U32) Some([60, 61, 62, 63])
# Var t52 (t52 Call(Call { function: "putc", parameters: [Number(U8, 10)] })) Reg(U8) Some([73])
# Var t53 (t53 Number(U8, 10)) Reg(U8) Some([104])
# Var t54 (t54 Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] })) Reg(U8) Some([73])
# Var t55 (t55 Ident("stack")) Reg(U32) Some([64, 65, 66, 67])
# Var t56 (t56 Ident("diff")) Reg(U32) Some([60, 61, 62, 63])
# Var t57 (t57 Ident("ch")) Reg(U8) Some([72])
# Var t58 (t58 Number(U8, 42)) Reg(U8) Some([113])
# Var t59 (t59 Ident("b")) Reg(U32) Some([64, 65, 66, 67])
# Var t6 (t6 Number(U8, 42)) Reg(U8) Some([113])
# Var t60 (t60 Ident("a")) Reg(U32) Some([68, 69, 70, 71])
# Var t61 (t61 Call(Call { function: "print_dec32", parameters: [Ident("product")] })) Reg(U8) Some([73])
# Var t62 (t62 Ident("product")) Reg(U32) Some([60, 61, 62, 63])
# Var t63 (t63 Call(Call { function: "putc", parameters: [Number(U8, 10)] })) Reg(U8) Some([73])
# Var t64 (t64 Number(U8, 10)) Reg(U8) Some([73])
# Var t65 (t65 Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })) Reg(U8) Some([73])
# Var t66 (t66 Ident("stack")) Reg(U32) Some([60, 61, 62, 63])
# Var t67 (t67 Ident("product")) Reg(U32) Some([68, 69, 70, 71])
# Var t68 (t68 Ident("ch")) Reg(U8) Some([72])
# Var t69 (t69 Number(U8, 47)) Reg(U8) Some([113])
# Var t7 (t7 Ident("ch")) Reg(U8) Some([72])
# Var t70 (t70 Ident("b")) Reg(U32) Some([64, 65, 66, 67])
# Var t71 (t71 Ident("a")) Reg(U32) Some([60, 61, 62, 63])
# Var t72 (t72 Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })) Reg(U8) Some([73])
# Var t73 (t73 Ident("quotient")) Reg(U32) Some([60, 61, 62, 63])
# Var t74 (t74 Call(Call { function: "putc", parameters: [Number(U8, 10)] })) Reg(U8) Some([73])
# Var t75 (t75 Number(U8, 10)) Reg(U8) Some([73])
# Var t76 (t76 Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })) Reg(U8) Some([73])
# Var t77 (t77 Ident("stack")) Reg(U32) Some([60, 61, 62, 63])
# Var t78 (t78 Ident("quotient")) Reg(U32) Some([68, 69, 70, 71])
# Var t79 (t79 Ident("ch")) Reg(U8) Some([72])
# Var t8 (t8 Number(U8, 47)) Reg(U8) Some([113])
# Var t80 (t80 Number(U8, 115)) Reg(U8) Some([113])
# Var t81 (t81 Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })) Reg(U8) Some([73])
# Var t82 (t82 Ident("stack")) Reg(U32) Some([68, 69, 70, 71])
# Var t83 (t83 Ident("a")) Reg(U32) Some([60, 61, 62, 63])
# Var t84 (t84 Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })) Reg(U8) Some([73])
# Var t85 (t85 Ident("stack")) Reg(U32) Some([60, 61, 62, 63])
# Var t86 (t86 Ident("b")) Reg(U32) Some([68, 69, 70, 71])
# Var t87 (t87 Ident("ch")) Reg(U8) Some([73])
# Var t88 (t88 Number(U8, 113)) Reg(U8) Some([104])
# Var t89 (t89 Number(U8, 0)) Reg(U8) Some([73])
# Var t9 (t9 Ident("ch")) Reg(U8) Some([72])
# Var t90 (t90 Ident("ch")) Reg(U8) Some([73])
# Var t91 (t91 Number(U8, 10)) Reg(U8) Some([104])
# Var t92 (t92 Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var t93 (t93 Ident("c")) Reg(U32) Some([60, 61, 62, 63])
# Var t94 (t94 Ident("ch")) Reg(U8) Some([73])
# Var t95 (t95 Number(U8, 32)) Reg(U8) Some([104])
# Var t96 (t96 Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var t97 (t97 Ident("c")) Reg(U32) Some([60, 61, 62, 63])
# Var t98 (t98 Ident("ch")) Reg(U8) Some([73])
# Var t99 (t99 Number(U8, 99)) Reg(U8) Some([104])
# 0060b Instruction { source: "Save function parameter 'c' registers [0, 1, 2, 3] to locals [68, 69, 70, 71].", opcode: Copy32, args: [Register(0x00), Register(0x44)], resolved: None }
21 00 44 
# 0060e Instruction { source: "Save function parameter 'ch' registers [4] to locals [72].", opcode: Copy8, args: [Register(0x04), Register(0x48)], resolved: None }
0b 04 48 
# t0 <- c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"stack\"), var_type: Some(Ptr(Struct(\"Stack\"))), value: AddressOf(PtrFieldDeref(\"c\", \"stack\")) }", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# 00611 Instruction { source: "t0 <- c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"stack\\\"), var_type: Some(Ptr(Struct(\\\"Stack\\\"))), value: AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Stack\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Stack\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x3c)], resolved: None }
21 44 3c 
# stack <- t0 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"stack\"), var_type: Some(Ptr(Struct(\"Stack\"))), value: AddressOf(PtrFieldDeref(\"c\", \"stack\")) }", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))"] }
# 00614 Instruction { source: "stack <- t0 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"stack\\\"), var_type: Some(Ptr(Struct(\\\"Stack\\\"))), value: AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x6c)], resolved: None }
21 3c 6c 
# a <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: Some(Number(USIZE)), value: Number(U8, 0) }", "Number(U8, 0)"] }
# 00617 Instruction { source: "a <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: Some(Number(USIZE)), value: Number(U8, 0) }\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x3c), Constant8(0x00=0)], resolved: None }
04 3c 00 
# b <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(USIZE)), value: Number(U8, 0) }", "Number(U8, 0)"] }
# 0061a Instruction { source: "b <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(USIZE)), value: Number(U8, 0) }\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x40), Constant8(0x00=0)], resolved: None }
04 40 00 
# t1 <- ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 0) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t1 <- ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# t2 <- 0n43/0x2bu8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 0) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }", "Number(U8, 43)", "Number(U8, 43)"] }
# 0061d Instruction { source: "t2 <- 0n43/0x2bu8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }\", \"Number(U8, 43)\", \"Number(U8, 43)\"] }", opcode: LoadImm8, args: [Register(0x71), Constant8(0x2b=43)], resolved: None }
04 71 2b 
# if t1 == t2 then 'RpnCalc_handle_if_true_0_1' else 'RpnCalc_handle_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 0) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }"] }
# 00620 Instruction { source: "if t1 == t2 then 'RpnCalc_handle_if_true_0_1' else 'RpnCalc_handle_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }\"] }", opcode: Cmp8, args: [Register(0x48), Register(0x71)], resolved: None }
15 48 71 
# 00623 Instruction { source: "if t1 == t2 then 'RpnCalc_handle_if_true_0_1' else 'RpnCalc_handle_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_handle_if_true_0_1)], resolved: None }
72 2b 06 00 
# 00627 Instruction { source: "if t1 == t2 then 'RpnCalc_handle_if_true_0_1' else 'RpnCalc_handle_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_0_2)], resolved: None }
70 32 06 00 
# :RpnCalc_handle_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 0) }] }"] }
# RpnCalc_handle_if_true_0_1
# stack_needed <- 0n2/0x02u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }", "Number(U8, 2)"] }
# 0062b Instruction { source: "stack_needed <- 0n2/0x02u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }\", \"Number(U8, 2)\"] }", opcode: LoadImm8, args: [Register(0x70), Constant8(0x02=2)], resolved: None }
04 70 02 
# goto RpnCalc_handle_if_end_0
# 	SourceContext { contexts: [] }
# 0062e Instruction { source: "goto RpnCalc_handle_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_0)], resolved: None }
70 89 06 00 
# :RpnCalc_handle_if_else_0_2
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_0_2
# t3 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t3 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# t4 <- 0n45/0x2du8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }", "Number(U8, 45)", "Number(U8, 45)"] }
# 00632 Instruction { source: "t4 <- 0n45/0x2du8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }\", \"Number(U8, 45)\", \"Number(U8, 45)\"] }", opcode: LoadImm8, args: [Register(0x71), Constant8(0x2d=45)], resolved: None }
04 71 2d 
# if t3 == t4 then 'RpnCalc_handle_if_true_1_3' else 'RpnCalc_handle_if_else_1_4'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }"] }
# 00635 Instruction { source: "if t3 == t4 then 'RpnCalc_handle_if_true_1_3' else 'RpnCalc_handle_if_else_1_4'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }\"] }", opcode: Cmp8, args: [Register(0x48), Register(0x71)], resolved: None }
15 48 71 
# 00638 Instruction { source: "if t3 == t4 then 'RpnCalc_handle_if_true_1_3' else 'RpnCalc_handle_if_else_1_4'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_handle_if_true_1_3)], resolved: None }
72 40 06 00 
# 0063c Instruction { source: "if t3 == t4 then 'RpnCalc_handle_if_true_1_3' else 'RpnCalc_handle_if_else_1_4'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_1_4)], resolved: None }
70 47 06 00 
# :RpnCalc_handle_if_true_1_3
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_true_1_3
# stack_needed <- 0n2/0x02u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }", "Number(U8, 2)"] }
# 00640 Instruction { source: "stack_needed <- 0n2/0x02u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }\", \"Number(U8, 2)\"] }", opcode: LoadImm8, args: [Register(0x70), Constant8(0x02=2)], resolved: None }
04 70 02 
# goto RpnCalc_handle_if_end_0
# 	SourceContext { contexts: [] }
# 00643 Instruction { source: "goto RpnCalc_handle_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_0)], resolved: None }
70 89 06 00 
# :RpnCalc_handle_if_else_1_4
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_1_4
# t5 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t5 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# t6 <- 0n42/0x2au8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }", "Number(U8, 42)", "Number(U8, 42)"] }
# 00647 Instruction { source: "t6 <- 0n42/0x2au8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }\", \"Number(U8, 42)\", \"Number(U8, 42)\"] }", opcode: LoadImm8, args: [Register(0x71), Constant8(0x2a=42)], resolved: None }
04 71 2a 
# if t5 == t6 then 'RpnCalc_handle_if_true_2_5' else 'RpnCalc_handle_if_else_2_6'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }"] }
# 0064a Instruction { source: "if t5 == t6 then 'RpnCalc_handle_if_true_2_5' else 'RpnCalc_handle_if_else_2_6'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }\"] }", opcode: Cmp8, args: [Register(0x48), Register(0x71)], resolved: None }
15 48 71 
# 0064d Instruction { source: "if t5 == t6 then 'RpnCalc_handle_if_true_2_5' else 'RpnCalc_handle_if_else_2_6'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_handle_if_true_2_5)], resolved: None }
72 55 06 00 
# 00651 Instruction { source: "if t5 == t6 then 'RpnCalc_handle_if_true_2_5' else 'RpnCalc_handle_if_else_2_6'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_2_6)], resolved: None }
70 5c 06 00 
# :RpnCalc_handle_if_true_2_5
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_true_2_5
# stack_needed <- 0n2/0x02u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }", "Number(U8, 2)"] }
# 00655 Instruction { source: "stack_needed <- 0n2/0x02u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }\", \"Number(U8, 2)\"] }", opcode: LoadImm8, args: [Register(0x70), Constant8(0x02=2)], resolved: None }
04 70 02 
# goto RpnCalc_handle_if_end_0
# 	SourceContext { contexts: [] }
# 00658 Instruction { source: "goto RpnCalc_handle_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_0)], resolved: None }
70 89 06 00 
# :RpnCalc_handle_if_else_2_6
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_2_6
# t7 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t7 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# t8 <- 0n47/0x2fu8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }", "Number(U8, 47)", "Number(U8, 47)"] }
# 0065c Instruction { source: "t8 <- 0n47/0x2fu8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }\", \"Number(U8, 47)\", \"Number(U8, 47)\"] }", opcode: LoadImm8, args: [Register(0x71), Constant8(0x2f=47)], resolved: None }
04 71 2f 
# if t7 == t8 then 'RpnCalc_handle_if_true_3_7' else 'RpnCalc_handle_if_else_3_8'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }"] }
# 0065f Instruction { source: "if t7 == t8 then 'RpnCalc_handle_if_true_3_7' else 'RpnCalc_handle_if_else_3_8'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }\"] }", opcode: Cmp8, args: [Register(0x48), Register(0x71)], resolved: None }
15 48 71 
# 00662 Instruction { source: "if t7 == t8 then 'RpnCalc_handle_if_true_3_7' else 'RpnCalc_handle_if_else_3_8'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_handle_if_true_3_7)], resolved: None }
72 6a 06 00 
# 00666 Instruction { source: "if t7 == t8 then 'RpnCalc_handle_if_true_3_7' else 'RpnCalc_handle_if_else_3_8'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_3_8)], resolved: None }
70 71 06 00 
# :RpnCalc_handle_if_true_3_7
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_true_3_7
# stack_needed <- 0n2/0x02u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }", "Number(U8, 2)"] }
# 0066a Instruction { source: "stack_needed <- 0n2/0x02u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }\", \"Number(U8, 2)\"] }", opcode: LoadImm8, args: [Register(0x70), Constant8(0x02=2)], resolved: None }
04 70 02 
# goto RpnCalc_handle_if_end_0
# 	SourceContext { contexts: [] }
# 0066d Instruction { source: "goto RpnCalc_handle_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_0)], resolved: None }
70 89 06 00 
# :RpnCalc_handle_if_else_3_8
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_3_8
# t9 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t9 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# t10 <- 0n115/0x73u8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }", "Number(U8, 115)", "Number(U8, 115)"] }
# 00671 Instruction { source: "t10 <- 0n115/0x73u8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }\", \"Number(U8, 115)\", \"Number(U8, 115)\"] }", opcode: LoadImm8, args: [Register(0x71), Constant8(0x73=115)], resolved: None }
04 71 73 
# if t9 == t10 then 'RpnCalc_handle_if_true_4_9' else 'RpnCalc_handle_if_else_4_10'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }"] }
# 00674 Instruction { source: "if t9 == t10 then 'RpnCalc_handle_if_true_4_9' else 'RpnCalc_handle_if_else_4_10'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }\"] }", opcode: Cmp8, args: [Register(0x48), Register(0x71)], resolved: None }
15 48 71 
# 00677 Instruction { source: "if t9 == t10 then 'RpnCalc_handle_if_true_4_9' else 'RpnCalc_handle_if_else_4_10'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_handle_if_true_4_9)], resolved: None }
72 7f 06 00 
# 0067b Instruction { source: "if t9 == t10 then 'RpnCalc_handle_if_true_4_9' else 'RpnCalc_handle_if_else_4_10'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_4_10)], resolved: None }
70 86 06 00 
# :RpnCalc_handle_if_true_4_9
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_true_4_9
# stack_needed <- 0n2/0x02u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }", "Number(U8, 2)"] }
# 0067f Instruction { source: "stack_needed <- 0n2/0x02u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 2) }\", \"Number(U8, 2)\"] }", opcode: LoadImm8, args: [Register(0x70), Constant8(0x02=2)], resolved: None }
04 70 02 
# goto RpnCalc_handle_if_end_0
# 	SourceContext { contexts: [] }
# 00682 Instruction { source: "goto RpnCalc_handle_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_0)], resolved: None }
70 89 06 00 
# :RpnCalc_handle_if_else_4_10
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_4_10
# stack_needed <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)"] }
# 00686 Instruction { source: "stack_needed <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"stack_needed\\\"), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x70), Constant8(0x00=0)], resolved: None }
04 70 00 
# :RpnCalc_handle_if_end_0
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_end_0
# t11 <- stack_needed U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }", "Ident(\"stack_needed\")", "Ident(\"stack_needed\")"] }
# 00689 Instruction { source: "t11 <- stack_needed U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }\", \"Ident(\\\"stack_needed\\\")\", \"Ident(\\\"stack_needed\\\")\"] }", opcode: Copy8, args: [Register(0x70), Register(0x71)], resolved: None }
0b 70 71 
# t12 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0068c Instruction { source: "t12 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x60), Constant8(0x00=0)], resolved: None }
04 60 00 
# if t11 > t12 then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_else_0_13'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }"] }
# 0068f Instruction { source: "if t11 > t12 then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_else_0_13'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x71), Register(0x60)], resolved: None }
15 71 60 
# 00692 Instruction { source: "if t11 > t12 then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_else_0_13'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }\"] }", opcode: JcImm, args: [Label24(RpnCalc_handle_if_else_0_13)], resolved: None }
71 4a 07 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t11 > t12 then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_else_0_13'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_true_0_12)], resolved: None }
# :RpnCalc_handle_if_true_0_12
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }])], else_block: [] }"] }
# RpnCalc_handle_if_true_0_12
# t14 <- c U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "t14 <- c U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_c <- t14 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })"] }
# 00696 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_c <- t14 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy32, args: [Register(0x44), Register(0x4c)], resolved: None }
21 44 4c 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_t2 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }", "PtrFieldDeref(\"c\", \"have_num\")", "PtrFieldDeref(\"c\", \"have_num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_t2 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_t3 <- 0n72/0x00000048u32 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }", "PtrFieldDeref(\"c\", \"have_num\")", "PtrFieldDeref(\"c\", \"have_num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))", "Number(USIZE, 72)", "Number(USIZE, 72)"] }
# 00699 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_t3 <- 0n72/0x00000048u32 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\", \"Number(USIZE, 72)\", \"Number(USIZE, 72)\"] }", opcode: LoadImm32, args: [Register(0x50), Constant32(0x00000048=72)], resolved: None }
20 50 48 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_63_t3
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }", "PtrFieldDeref(\"c\", \"have_num\")", "PtrFieldDeref(\"c\", \"have_num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))"] }
# 0069f Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_63_t3\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 006a0 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_63_t3\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: AddCarry32_1, args: [Register(0x4c), Register(0x50), Register(0x50)], resolved: None }
30 4c 50 50 
# 006a4 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_63_t3\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_t0 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t1] U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }", "PtrFieldDeref(\"c\", \"have_num\")", "PtrFieldDeref(\"c\", \"have_num\")"] }
# 006a5 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_t0 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t1] U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\"] }", opcode: Load8, args: [Register(0x50), Register(0x60)], resolved: None }
05 50 60 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_t4 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 006a8 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_t4 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x61), Constant8(0x00=0)], resolved: None }
04 61 00 
# if inline_RpnCalc_handle_RpnCalc_push_pending_63_t0 != inline_RpnCalc_handle_RpnCalc_push_pending_63_t4 then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }"] }
# 006ab Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_63_t0 != inline_RpnCalc_handle_RpnCalc_push_pending_63_t4 then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x60), Register(0x61)], resolved: None }
15 60 61 
# 006ae Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_63_t0 != inline_RpnCalc_handle_RpnCalc_push_pending_63_t4 then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2)], resolved: None }
72 46 07 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_63_t0 != inline_RpnCalc_handle_RpnCalc_push_pending_63_t4 then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }"] }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1
# inline_RpnCalc_handle_RpnCalc_push_pending_63_t7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_t7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Stack\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Stack\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_t6 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t7 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))"] }
# 006b2 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_t6 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t7 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x54)], resolved: None }
21 4c 54 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_t10 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_t10 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_t11 <- 0n68/0x00000044u32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Number(USIZE, 68)", "Number(USIZE, 68)"] }
# 006b5 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_t11 <- 0n68/0x00000044u32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Number(USIZE, 68)\", \"Number(USIZE, 68)\"] }", opcode: LoadImm32, args: [Register(0x50), Constant32(0x00000044=68)], resolved: None }
20 50 44 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_t9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t10 Add inline_RpnCalc_handle_RpnCalc_push_pending_63_t11
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))"] }
# 006bb Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_t9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t10 Add inline_RpnCalc_handle_RpnCalc_push_pending_63_t11\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 006bc Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_t9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t10 Add inline_RpnCalc_handle_RpnCalc_push_pending_63_t11\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_1, args: [Register(0x4c), Register(0x50), Register(0x50)], resolved: None }
30 4c 50 50 
# 006c0 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_t9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t10 Add inline_RpnCalc_handle_RpnCalc_push_pending_63_t11\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_t8 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t9] U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")"] }
# 006c1 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_t8 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t9] U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\"] }", opcode: Load32, args: [Register(0x50), Register(0x50)], resolved: None }
22 50 50 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_s <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t6 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_s <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t6 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\"] }", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_n <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t8 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_n <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t8 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\"] }", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t0 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t0 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_values <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t0 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# 006c4 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_values <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t0 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0x54), Register(0x58)], resolved: None }
21 54 58 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t2 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_values U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t2 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_values U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0x58), Register(0x58)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t6 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_s U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t6 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_s U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t7 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 006c7 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t7 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x5c), Constant32(0x00000040=64)], resolved: None }
20 5c 40 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t5 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t6 Add inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t7
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 006cd Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t5 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t6 Add inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 006ce Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t5 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t6 Add inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x54), Register(0x5c), Register(0x5c)], resolved: None }
30 54 5c 5c 
# 006d2 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t5 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t6 Add inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t4 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t5] U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 006d3 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t4 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t5] U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x5c), Register(0x5c)], resolved: None }
22 5c 5c 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t4 Add inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t4
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 006d6 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t4 Add inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 006d7 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t4 Add inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_1, args: [Register(0x5c), Register(0x5c), Register(0x5c)], resolved: None }
30 5c 5c 5c 
# 006db Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t4 Add inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t3 Add inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t3
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))"] }
# 006dc Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t3 Add inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 006dd Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t3 Add inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x5c), Register(0x5c), Register(0x5c)], resolved: None }
30 5c 5c 5c 
# 006e1 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t3 Add inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t3
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))"] }
# 006e2 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 006e3 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_1, args: [Register(0x58), Register(0x5c), Register(0x58)], resolved: None }
30 58 5c 58 
# 006e7 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_n U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_n U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t1] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t9 U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }"] }
# 006e8 Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t1] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_1, args: [Register(0x50), Register(0x58)], resolved: None }
23 50 58 
# 006eb Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t1] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t11 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# 006ec Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t11 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x54), Register(0x50)], resolved: None }
21 54 50 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t12 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 006ef Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t12 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x58), Constant32(0x00000040=64)], resolved: None }
20 58 40 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t10 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t11 Add inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t12
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 006f5 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t10 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t11 Add inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 006f6 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t10 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t11 Add inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x50), Register(0x58), Register(0x50)], resolved: None }
30 50 58 50 
# 006fa Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t10 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t11 Add inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t16 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t16 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t17 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 006fb Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t17 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x58), Constant32(0x00000040=64)], resolved: None }
20 58 40 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t15 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t16 Add inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t17
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 00701 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t15 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t16 Add inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00702 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t15 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t16 Add inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x54), Register(0x58), Register(0x54)], resolved: None }
30 54 58 54 
# 00706 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t15 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t16 Add inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t14 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t15] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 00707 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t14 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t15] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x54), Register(0x54)], resolved: None }
22 54 54 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t18 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 0070a Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t18 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x58), Constant32(0x00000001=1)], resolved: None }
20 58 01 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t13 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t14 Add inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t18
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))"] }
# 00710 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t13 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t14 Add inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00711 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t13 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t14 Add inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x54), Register(0x58), Register(0x54)], resolved: None }
30 54 58 54 
# 00715 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t13 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t14 Add inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t10] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t13 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }"] }
# 00716 Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t10] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t13 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_1, args: [Register(0x54), Register(0x50)], resolved: None }
23 54 50 
# 00719 Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t10] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_t13 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_function_end_stack_push
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_function_end_stack_push\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_function_end_stack_push
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_62_function_end_stack_push
# inline_RpnCalc_handle_RpnCalc_push_pending_63_t13 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_t13 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_t14 <- 0n68/0x00000044u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Number(USIZE, 68)", "Number(USIZE, 68)"] }
# 0071a Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_t14 <- 0n68/0x00000044u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Number(USIZE, 68)\", \"Number(USIZE, 68)\"] }", opcode: LoadImm32, args: [Register(0x50), Constant32(0x00000044=68)], resolved: None }
20 50 44 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_t12 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t13 Add inline_RpnCalc_handle_RpnCalc_push_pending_63_t14
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))"] }
# 00720 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_t12 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t13 Add inline_RpnCalc_handle_RpnCalc_push_pending_63_t14\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00721 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_t12 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t13 Add inline_RpnCalc_handle_RpnCalc_push_pending_63_t14\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_1, args: [Register(0x4c), Register(0x50), Register(0x50)], resolved: None }
30 4c 50 50 
# 00725 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_t12 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t13 Add inline_RpnCalc_handle_RpnCalc_push_pending_63_t14\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_t15 <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 00726 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_t15 <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x54), Constant32(0x00000000=0)], resolved: None }
20 54 00 00 00 00 
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t12] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t15 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }"] }
# 0072c Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t12] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t15 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\"] }", opcode: Store32_1, args: [Register(0x54), Register(0x50)], resolved: None }
23 54 50 
# 0072f Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t12] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t15 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_t17 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_t17 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_t18 <- 0n72/0x00000048u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))", "Number(USIZE, 72)", "Number(USIZE, 72)"] }
# 00730 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_t18 <- 0n72/0x00000048u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\", \"Number(USIZE, 72)\", \"Number(USIZE, 72)\"] }", opcode: LoadImm32, args: [Register(0x50), Constant32(0x00000048=72)], resolved: None }
20 50 48 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_t16 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t17 Add inline_RpnCalc_handle_RpnCalc_push_pending_63_t18
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))"] }
# 00736 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_t16 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t17 Add inline_RpnCalc_handle_RpnCalc_push_pending_63_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00737 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_t16 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t17 Add inline_RpnCalc_handle_RpnCalc_push_pending_63_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: AddCarry32_1, args: [Register(0x4c), Register(0x50), Register(0x4c)], resolved: None }
30 4c 50 4c 
# 0073b Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_t16 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t17 Add inline_RpnCalc_handle_RpnCalc_push_pending_63_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_t19 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0073c Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_t19 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x60), Constant8(0x00=0)], resolved: None }
04 60 00 
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t16] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t19 U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }"] }
# 0073f Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t16] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t19 U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\"] }", opcode: Store8, args: [Register(0x60), Register(0x4c)], resolved: None }
06 60 4c 
# goto inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0
# 	SourceContext { contexts: [] }
# 00742 Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0)], resolved: None }
70 46 07 00 
# :inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2
# :inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0
# goto inline_RpnCalc_handle_RpnCalc_push_pending_63_function_end_RpnCalc_push_pending
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_63_function_end_RpnCalc_push_pending\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_63_function_end_RpnCalc_push_pending)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_63_function_end_RpnCalc_push_pending
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_function_end_RpnCalc_push_pending
# goto RpnCalc_handle_if_end_11
# 	SourceContext { contexts: [] }
# 00746 Instruction { source: "goto RpnCalc_handle_if_end_11\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_11)], resolved: None }
70 4a 07 00 
# :RpnCalc_handle_if_else_0_13
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_0_13
# :RpnCalc_handle_if_end_11
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_end_11
# t16 <- stack U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"stack_count_usize\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\"stack\", \"first_free\") }", "PtrFieldDeref(\"stack\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"stack\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"stack\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"stack\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"stack\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"stack\") }", "Ident(\"stack\")"] }
# 0074a Instruction { source: "t16 <- stack U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"stack_count_usize\\\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\\\"stack\\\", \\\"first_free\\\") }\", \"PtrFieldDeref(\\\"stack\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"stack\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"stack\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"stack\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"stack\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"stack\\\") }\", \"Ident(\\\"stack\\\")\"] }", opcode: Copy32, args: [Register(0x6c), Register(0x4c)], resolved: None }
21 6c 4c 
# t17 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"stack_count_usize\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\"stack\", \"first_free\") }", "PtrFieldDeref(\"stack\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"stack\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"stack\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"stack\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 0074d Instruction { source: "t17 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"stack_count_usize\\\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\\\"stack\\\", \\\"first_free\\\") }\", \"PtrFieldDeref(\\\"stack\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"stack\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"stack\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"stack\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x50), Constant32(0x00000040=64)], resolved: None }
20 50 40 00 00 00 
# t15 <- t16 Add t17
# 	SourceContext { contexts: ["Assign { target: Ident(\"stack_count_usize\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\"stack\", \"first_free\") }", "PtrFieldDeref(\"stack\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"stack\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"stack\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"stack\") }, Number(USIZE, 64))"] }
# 00753 Instruction { source: "t15 <- t16 Add t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"stack_count_usize\\\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\\\"stack\\\", \\\"first_free\\\") }\", \"PtrFieldDeref(\\\"stack\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"stack\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"stack\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"stack\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00754 Instruction { source: "t15 <- t16 Add t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"stack_count_usize\\\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\\\"stack\\\", \\\"first_free\\\") }\", \"PtrFieldDeref(\\\"stack\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"stack\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"stack\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"stack\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x4c), Register(0x50), Register(0x4c)], resolved: None }
30 4c 50 4c 
# 00758 Instruction { source: "t15 <- t16 Add t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"stack_count_usize\\\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\\\"stack\\\", \\\"first_free\\\") }\", \"PtrFieldDeref(\\\"stack\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"stack\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"stack\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"stack\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# stack_count_usize <- mem[t15] U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"stack_count_usize\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\"stack\", \"first_free\") }", "PtrFieldDeref(\"stack\", \"first_free\")"] }
# 00759 Instruction { source: "stack_count_usize <- mem[t15] U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"stack_count_usize\\\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\\\"stack\\\", \\\"first_free\\\") }\", \"PtrFieldDeref(\\\"stack\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x4c), Register(0x4c)], resolved: None }
22 4c 4c 
# stack_count <- stack_count_usize[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"stack_count\"), var_type: Some(Number(U8)), value: Index(\"stack_count_usize\", Number(U8, 0)) }", "Index(\"stack_count_usize\", Number(U8, 0))"] }
# 0075c Instruction { source: "stack_count <- stack_count_usize[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"stack_count\\\"), var_type: Some(Number(U8)), value: Index(\\\"stack_count_usize\\\", Number(U8, 0)) }\", \"Index(\\\"stack_count_usize\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x4c), Register(0x6a)], resolved: None }
0b 4c 6a 
# t18 <- stack_needed U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Ident(\"stack_count\") }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Ident(\"stack_count\") }", "Ident(\"stack_needed\")", "Ident(\"stack_needed\")"] }
# 0075f Instruction { source: "t18 <- stack_needed U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Ident(\\\"stack_count\\\") }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Ident(\\\"stack_count\\\") }\", \"Ident(\\\"stack_needed\\\")\", \"Ident(\\\"stack_needed\\\")\"] }", opcode: Copy8, args: [Register(0x70), Register(0x71)], resolved: None }
0b 70 71 
# t19 <- stack_count U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Ident(\"stack_count\") }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Ident(\"stack_count\") }", "Ident(\"stack_count\")", "Ident(\"stack_count\")"] }
# 00762 Instruction { source: "t19 <- stack_count U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Ident(\\\"stack_count\\\") }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Ident(\\\"stack_count\\\") }\", \"Ident(\\\"stack_count\\\")\", \"Ident(\\\"stack_count\\\")\"] }", opcode: Copy8, args: [Register(0x6a), Register(0x60)], resolved: None }
0b 6a 60 
# if t18 > t19 then 'RpnCalc_handle_if_true_0_15' else 'RpnCalc_handle_if_else_0_16'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Ident(\"stack_count\") }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Ident(\"stack_count\") }"] }
# 00765 Instruction { source: "if t18 > t19 then 'RpnCalc_handle_if_true_0_15' else 'RpnCalc_handle_if_else_0_16'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Ident(\\\"stack_count\\\") }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Ident(\\\"stack_count\\\") }\"] }", opcode: Cmp8, args: [Register(0x71), Register(0x60)], resolved: None }
15 71 60 
# 00768 Instruction { source: "if t18 > t19 then 'RpnCalc_handle_if_true_0_15' else 'RpnCalc_handle_if_else_0_16'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Ident(\\\"stack_count\\\") }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Ident(\\\"stack_count\\\") }\"] }", opcode: JcImm, args: [Label24(RpnCalc_handle_if_else_0_16)], resolved: None }
71 f0 07 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t18 > t19 then 'RpnCalc_handle_if_true_0_15' else 'RpnCalc_handle_if_else_0_16'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Ident(\\\"stack_count\\\") }, [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Ident(\\\"stack_count\\\") }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_true_0_15)], resolved: None }
# :RpnCalc_handle_if_true_0_15
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Ident(\"stack_count\") }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }"] }
# RpnCalc_handle_if_true_0_15
# t21 <- 0n69/0x45u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 69)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 69)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 69)] })", "Number(U8, 69)", "Number(U8, 69)"] }
# 0076c Instruction { source: "t21 <- 0n69/0x45u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 69)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 69)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 69)] })\", \"Number(U8, 69)\", \"Number(U8, 69)\"] }", opcode: LoadImm8, args: [Register(0x49), Constant8(0x45=69)], resolved: None }
04 49 45 
# inline_RpnCalc_handle_putc_17_c <- t21 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 69)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 69)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 69)] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_17_c <- t21 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 69)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 69)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 69)] })\"] }", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# inline_RpnCalc_handle_putc_17_t1 <- inline_RpnCalc_handle_putc_17_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_17_t1 <- inline_RpnCalc_handle_putc_17_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_17_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 0076f Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x49)], resolved: None }
68 49 
# inline_RpnCalc_handle_putc_17_t3 <- inline_RpnCalc_handle_putc_17_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_17_t3 <- inline_RpnCalc_handle_putc_17_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# None <= call lcd_write_char(inline_RpnCalc_handle_putc_17_t3,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })"] }
# 00771 Instruction { source: "Arg0[ch]=inline_RpnCalc_handle_putc_17_t3 None <= call lcd_write_char(inline_RpnCalc_handle_putc_17_t3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy8, args: [Register(0x49), Register(0x00)], resolved: None }
0b 49 00 
# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 152, 153, 154, 155, 156, 157, 158, 159, 217, 233, 234, 235, 236, 240, 241, 242, 243, 244, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 00774 Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 0077a Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 84 07 00 00 
# 00780 Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: JmpImm, args: [Label24(:lcd_write_char)], resolved: None }
70 1a 22 00 
# 00784 Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# goto inline_RpnCalc_handle_putc_17_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_17_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_17_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_17_function_end_putc
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_putc_17_function_end_putc
# t23 <- 0n82/0x52u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 82)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 82)] })", "Number(U8, 82)", "Number(U8, 82)"] }
# 0078a Instruction { source: "t23 <- 0n82/0x52u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] })\", \"Number(U8, 82)\", \"Number(U8, 82)\"] }", opcode: LoadImm8, args: [Register(0x49), Constant8(0x52=82)], resolved: None }
04 49 52 
# inline_RpnCalc_handle_putc_18_c <- t23 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 82)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 82)] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_18_c <- t23 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] })\"] }", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# inline_RpnCalc_handle_putc_18_t1 <- inline_RpnCalc_handle_putc_18_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_18_t1 <- inline_RpnCalc_handle_putc_18_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_18_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 0078d Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x49)], resolved: None }
68 49 
# inline_RpnCalc_handle_putc_18_t3 <- inline_RpnCalc_handle_putc_18_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_18_t3 <- inline_RpnCalc_handle_putc_18_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# None <= call lcd_write_char(inline_RpnCalc_handle_putc_18_t3,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })"] }
# 0078f Instruction { source: "Arg0[ch]=inline_RpnCalc_handle_putc_18_t3 None <= call lcd_write_char(inline_RpnCalc_handle_putc_18_t3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy8, args: [Register(0x49), Register(0x00)], resolved: None }
0b 49 00 
# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 152, 153, 154, 155, 156, 157, 158, 159, 217, 233, 234, 235, 236, 240, 241, 242, 243, 244, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 00792 Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 00798 Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c a2 07 00 00 
# 0079e Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: JmpImm, args: [Label24(:lcd_write_char)], resolved: None }
70 1a 22 00 
# 007a2 Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# goto inline_RpnCalc_handle_putc_18_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_18_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_18_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_18_function_end_putc
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_putc_18_function_end_putc
# t25 <- 0n82/0x52u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 82)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 82)] })", "Number(U8, 82)", "Number(U8, 82)"] }
# 007a8 Instruction { source: "t25 <- 0n82/0x52u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] })\", \"Number(U8, 82)\", \"Number(U8, 82)\"] }", opcode: LoadImm8, args: [Register(0x49), Constant8(0x52=82)], resolved: None }
04 49 52 
# inline_RpnCalc_handle_putc_19_c <- t25 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 82)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 82)] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_19_c <- t25 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] })\"] }", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# inline_RpnCalc_handle_putc_19_t1 <- inline_RpnCalc_handle_putc_19_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_19_t1 <- inline_RpnCalc_handle_putc_19_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_19_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 007ab Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x49)], resolved: None }
68 49 
# inline_RpnCalc_handle_putc_19_t3 <- inline_RpnCalc_handle_putc_19_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_19_t3 <- inline_RpnCalc_handle_putc_19_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# None <= call lcd_write_char(inline_RpnCalc_handle_putc_19_t3,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })"] }
# 007ad Instruction { source: "Arg0[ch]=inline_RpnCalc_handle_putc_19_t3 None <= call lcd_write_char(inline_RpnCalc_handle_putc_19_t3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy8, args: [Register(0x49), Register(0x00)], resolved: None }
0b 49 00 
# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 152, 153, 154, 155, 156, 157, 158, 159, 217, 233, 234, 235, 236, 240, 241, 242, 243, 244, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 007b0 Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 007b6 Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c c0 07 00 00 
# 007bc Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: JmpImm, args: [Label24(:lcd_write_char)], resolved: None }
70 1a 22 00 
# 007c0 Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# goto inline_RpnCalc_handle_putc_19_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_19_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_19_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_19_function_end_putc
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_putc_19_function_end_putc
# t27 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Number(U8, 10)", "Number(U8, 10)"] }
# 007c6 Instruction { source: "t27 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x49), Constant8(0x0a=10)], resolved: None }
04 49 0a 
# inline_RpnCalc_handle_putc_20_c <- t27 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_20_c <- t27 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\"] }", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# inline_RpnCalc_handle_putc_20_t1 <- inline_RpnCalc_handle_putc_20_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_20_t1 <- inline_RpnCalc_handle_putc_20_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_20_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 007c9 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x49)], resolved: None }
68 49 
# inline_RpnCalc_handle_putc_20_t3 <- inline_RpnCalc_handle_putc_20_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_20_t3 <- inline_RpnCalc_handle_putc_20_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# None <= call lcd_write_char(inline_RpnCalc_handle_putc_20_t3,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })"] }
# 007cb Instruction { source: "Arg0[ch]=inline_RpnCalc_handle_putc_20_t3 None <= call lcd_write_char(inline_RpnCalc_handle_putc_20_t3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy8, args: [Register(0x49), Register(0x00)], resolved: None }
0b 49 00 
# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 152, 153, 154, 155, 156, 157, 158, 159, 217, 233, 234, 235, 236, 240, 241, 242, 243, 244, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 007ce Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 007d4 Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c de 07 00 00 
# 007da Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: JmpImm, args: [Label24(:lcd_write_char)], resolved: None }
70 1a 22 00 
# 007de Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# goto inline_RpnCalc_handle_putc_20_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_20_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_20_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_20_function_end_putc
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_putc_20_function_end_putc
# t28 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 1)) }", "Number(U8, 1)", "Number(U8, 1)"] }
# 007e4 Instruction { source: "t28 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 1)) }\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x49), Constant8(0x01=1)], resolved: None }
04 49 01 
# return Some(t28)
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 1)) }"] }
# 007e7 Instruction { source: "return Some(t28)\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x49), Register(0x00)], resolved: None }
0b 49 00 
# 007ea Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# goto RpnCalc_handle_if_end_14
# 	SourceContext { contexts: [] }
# 007ec Instruction { source: "goto RpnCalc_handle_if_end_14\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_14)], resolved: None }
70 f0 07 00 
# :RpnCalc_handle_if_else_0_16
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_0_16
# :RpnCalc_handle_if_end_14
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_end_14
# t29 <- stack_needed U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }, [Assign { target: Ident(\"a\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }", "Ident(\"stack_needed\")", "Ident(\"stack_needed\")"] }
# 007f0 Instruction { source: "t29 <- stack_needed U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] }) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }\", \"Ident(\\\"stack_needed\\\")\", \"Ident(\\\"stack_needed\\\")\"] }", opcode: Copy8, args: [Register(0x70), Register(0x71)], resolved: None }
0b 70 71 
# t30 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }, [Assign { target: Ident(\"a\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 007f3 Instruction { source: "t30 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] }) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x60), Constant8(0x00=0)], resolved: None }
04 60 00 
# if t29 > t30 then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_else_0_19'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }, [Assign { target: Ident(\"a\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }"] }
# 007f6 Instruction { source: "if t29 > t30 then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_else_0_19'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] }) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x71), Register(0x60)], resolved: None }
15 71 60 
# 007f9 Instruction { source: "if t29 > t30 then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_else_0_19'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] }) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }\"] }", opcode: JcImm, args: [Label24(RpnCalc_handle_if_else_0_19)], resolved: None }
71 67 08 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t29 > t30 then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_else_0_19'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"a\\\"), var_type: None, value: Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] }) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_true_0_18)], resolved: None }
# :RpnCalc_handle_if_true_0_18
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }, [Assign { target: Ident(\"a\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }])], else_block: [] }"] }
# RpnCalc_handle_if_true_0_18
# t31 <- stack U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }", "Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] })", "Ident(\"stack\")", "Ident(\"stack\")"] }
# 007fd Instruction { source: "t31 <- stack U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] }) }\", \"Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] })\", \"Ident(\\\"stack\\\")\", \"Ident(\\\"stack\\\")\"] }", opcode: Copy32, args: [Register(0x6c), Register(0x3c)], resolved: None }
21 6c 3c 
# inline_RpnCalc_handle_stack_pop_54_s <- t31 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }", "Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_54_s <- t31 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] }) }\", \"Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] })\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_pop_54_t1 <- inline_RpnCalc_handle_stack_pop_54_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_54_t1 <- inline_RpnCalc_handle_stack_pop_54_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_pop_54_t2 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 00800 Instruction { source: "inline_RpnCalc_handle_stack_pop_54_t2 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x4c), Constant32(0x00000040=64)], resolved: None }
20 4c 40 00 00 00 
# inline_RpnCalc_handle_stack_pop_54_t0 <- inline_RpnCalc_handle_stack_pop_54_t1 Add inline_RpnCalc_handle_stack_pop_54_t2
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 00806 Instruction { source: "inline_RpnCalc_handle_stack_pop_54_t0 <- inline_RpnCalc_handle_stack_pop_54_t1 Add inline_RpnCalc_handle_stack_pop_54_t2\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00807 Instruction { source: "inline_RpnCalc_handle_stack_pop_54_t0 <- inline_RpnCalc_handle_stack_pop_54_t1 Add inline_RpnCalc_handle_stack_pop_54_t2\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x3c), Register(0x4c), Register(0x4c)], resolved: None }
30 3c 4c 4c 
# 0080b Instruction { source: "inline_RpnCalc_handle_stack_pop_54_t0 <- inline_RpnCalc_handle_stack_pop_54_t1 Add inline_RpnCalc_handle_stack_pop_54_t2\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_pop_54_t6 <- inline_RpnCalc_handle_stack_pop_54_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_54_t6 <- inline_RpnCalc_handle_stack_pop_54_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_pop_54_t7 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 0080c Instruction { source: "inline_RpnCalc_handle_stack_pop_54_t7 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x50), Constant32(0x00000040=64)], resolved: None }
20 50 40 00 00 00 
# inline_RpnCalc_handle_stack_pop_54_t5 <- inline_RpnCalc_handle_stack_pop_54_t6 Add inline_RpnCalc_handle_stack_pop_54_t7
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 00812 Instruction { source: "inline_RpnCalc_handle_stack_pop_54_t5 <- inline_RpnCalc_handle_stack_pop_54_t6 Add inline_RpnCalc_handle_stack_pop_54_t7\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00813 Instruction { source: "inline_RpnCalc_handle_stack_pop_54_t5 <- inline_RpnCalc_handle_stack_pop_54_t6 Add inline_RpnCalc_handle_stack_pop_54_t7\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x3c), Register(0x50), Register(0x50)], resolved: None }
30 3c 50 50 
# 00817 Instruction { source: "inline_RpnCalc_handle_stack_pop_54_t5 <- inline_RpnCalc_handle_stack_pop_54_t6 Add inline_RpnCalc_handle_stack_pop_54_t7\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_pop_54_t4 <- mem[inline_RpnCalc_handle_stack_pop_54_t5] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 00818 Instruction { source: "inline_RpnCalc_handle_stack_pop_54_t4 <- mem[inline_RpnCalc_handle_stack_pop_54_t5] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x50), Register(0x50)], resolved: None }
22 50 50 
# inline_RpnCalc_handle_stack_pop_54_t8 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 0081b Instruction { source: "inline_RpnCalc_handle_stack_pop_54_t8 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x54), Constant32(0x00000001=1)], resolved: None }
20 54 01 00 00 00 
# inline_RpnCalc_handle_stack_pop_54_t3 <- inline_RpnCalc_handle_stack_pop_54_t4 Subtract inline_RpnCalc_handle_stack_pop_54_t8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))"] }
# 00821 Instruction { source: "inline_RpnCalc_handle_stack_pop_54_t3 <- inline_RpnCalc_handle_stack_pop_54_t4 Subtract inline_RpnCalc_handle_stack_pop_54_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: Copy32, args: [Register(0x54), Register(0x00)], resolved: None }
21 54 00 
# 00824 Instruction { source: "inline_RpnCalc_handle_stack_pop_54_t3 <- inline_RpnCalc_handle_stack_pop_54_t4 Subtract inline_RpnCalc_handle_stack_pop_54_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x00)], resolved: None }
01 00 
# 00826 Instruction { source: "inline_RpnCalc_handle_stack_pop_54_t3 <- inline_RpnCalc_handle_stack_pop_54_t4 Subtract inline_RpnCalc_handle_stack_pop_54_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x01)], resolved: None }
01 01 
# 00828 Instruction { source: "inline_RpnCalc_handle_stack_pop_54_t3 <- inline_RpnCalc_handle_stack_pop_54_t4 Subtract inline_RpnCalc_handle_stack_pop_54_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x02)], resolved: None }
01 02 
# 0082a Instruction { source: "inline_RpnCalc_handle_stack_pop_54_t3 <- inline_RpnCalc_handle_stack_pop_54_t4 Subtract inline_RpnCalc_handle_stack_pop_54_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x03)], resolved: None }
01 03 
# 0082c Instruction { source: "inline_RpnCalc_handle_stack_pop_54_t3 <- inline_RpnCalc_handle_stack_pop_54_t4 Subtract inline_RpnCalc_handle_stack_pop_54_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x00), Constant32(0x00000001=1)], resolved: None }
32 00 01 00 00 00 
# 00832 Instruction { source: "inline_RpnCalc_handle_stack_pop_54_t3 <- inline_RpnCalc_handle_stack_pop_54_t4 Subtract inline_RpnCalc_handle_stack_pop_54_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00833 Instruction { source: "inline_RpnCalc_handle_stack_pop_54_t3 <- inline_RpnCalc_handle_stack_pop_54_t4 Subtract inline_RpnCalc_handle_stack_pop_54_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x50), Register(0x00), Register(0x50)], resolved: None }
30 50 00 50 
# 00837 Instruction { source: "inline_RpnCalc_handle_stack_pop_54_t3 <- inline_RpnCalc_handle_stack_pop_54_t4 Subtract inline_RpnCalc_handle_stack_pop_54_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# mem[inline_RpnCalc_handle_stack_pop_54_t0] <- inline_RpnCalc_handle_stack_pop_54_t3 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }"] }
# 00838 Instruction { source: "mem[inline_RpnCalc_handle_stack_pop_54_t0] <- inline_RpnCalc_handle_stack_pop_54_t3 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_1, args: [Register(0x50), Register(0x4c)], resolved: None }
23 50 4c 
# 0083b Instruction { source: "mem[inline_RpnCalc_handle_stack_pop_54_t0] <- inline_RpnCalc_handle_stack_pop_54_t3 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_RpnCalc_handle_stack_pop_54_t9 <- inline_RpnCalc_handle_stack_pop_54_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_54_t9 <- inline_RpnCalc_handle_stack_pop_54_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_pop_54_values <- inline_RpnCalc_handle_stack_pop_54_t9 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# 0083c Instruction { source: "inline_RpnCalc_handle_stack_pop_54_values <- inline_RpnCalc_handle_stack_pop_54_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x4c)], resolved: None }
21 3c 4c 
# inline_RpnCalc_handle_stack_pop_54_t12 <- inline_RpnCalc_handle_stack_pop_54_values U32
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_54_t12 <- inline_RpnCalc_handle_stack_pop_54_values U32\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_RpnCalc_handle_stack_pop_54_t16 <- inline_RpnCalc_handle_stack_pop_54_s U32
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_54_t16 <- inline_RpnCalc_handle_stack_pop_54_s U32\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_pop_54_t17 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 0083f Instruction { source: "inline_RpnCalc_handle_stack_pop_54_t17 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x50), Constant32(0x00000040=64)], resolved: None }
20 50 40 00 00 00 
# inline_RpnCalc_handle_stack_pop_54_t15 <- inline_RpnCalc_handle_stack_pop_54_t16 Add inline_RpnCalc_handle_stack_pop_54_t17
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 00845 Instruction { source: "inline_RpnCalc_handle_stack_pop_54_t15 <- inline_RpnCalc_handle_stack_pop_54_t16 Add inline_RpnCalc_handle_stack_pop_54_t17\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00846 Instruction { source: "inline_RpnCalc_handle_stack_pop_54_t15 <- inline_RpnCalc_handle_stack_pop_54_t16 Add inline_RpnCalc_handle_stack_pop_54_t17\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x3c), Register(0x50), Register(0x3c)], resolved: None }
30 3c 50 3c 
# 0084a Instruction { source: "inline_RpnCalc_handle_stack_pop_54_t15 <- inline_RpnCalc_handle_stack_pop_54_t16 Add inline_RpnCalc_handle_stack_pop_54_t17\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_pop_54_t14 <- mem[inline_RpnCalc_handle_stack_pop_54_t15] U32
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 0084b Instruction { source: "inline_RpnCalc_handle_stack_pop_54_t14 <- mem[inline_RpnCalc_handle_stack_pop_54_t15] U32\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x3c), Register(0x3c)], resolved: None }
22 3c 3c 
# inline_RpnCalc_handle_stack_pop_54_t13 <- inline_RpnCalc_handle_stack_pop_54_t14 Add inline_RpnCalc_handle_stack_pop_54_t14
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 0084e Instruction { source: "inline_RpnCalc_handle_stack_pop_54_t13 <- inline_RpnCalc_handle_stack_pop_54_t14 Add inline_RpnCalc_handle_stack_pop_54_t14\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0084f Instruction { source: "inline_RpnCalc_handle_stack_pop_54_t13 <- inline_RpnCalc_handle_stack_pop_54_t14 Add inline_RpnCalc_handle_stack_pop_54_t14\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_1, args: [Register(0x3c), Register(0x3c), Register(0x3c)], resolved: None }
30 3c 3c 3c 
# 00853 Instruction { source: "inline_RpnCalc_handle_stack_pop_54_t13 <- inline_RpnCalc_handle_stack_pop_54_t14 Add inline_RpnCalc_handle_stack_pop_54_t14\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_pop_54_t13 <- inline_RpnCalc_handle_stack_pop_54_t13 Add inline_RpnCalc_handle_stack_pop_54_t13
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))"] }
# 00854 Instruction { source: "inline_RpnCalc_handle_stack_pop_54_t13 <- inline_RpnCalc_handle_stack_pop_54_t13 Add inline_RpnCalc_handle_stack_pop_54_t13\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00855 Instruction { source: "inline_RpnCalc_handle_stack_pop_54_t13 <- inline_RpnCalc_handle_stack_pop_54_t13 Add inline_RpnCalc_handle_stack_pop_54_t13\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x3c), Register(0x3c), Register(0x3c)], resolved: None }
30 3c 3c 3c 
# 00859 Instruction { source: "inline_RpnCalc_handle_stack_pop_54_t13 <- inline_RpnCalc_handle_stack_pop_54_t13 Add inline_RpnCalc_handle_stack_pop_54_t13\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_pop_54_t11 <- inline_RpnCalc_handle_stack_pop_54_t12 Add inline_RpnCalc_handle_stack_pop_54_t13
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))"] }
# 0085a Instruction { source: "inline_RpnCalc_handle_stack_pop_54_t11 <- inline_RpnCalc_handle_stack_pop_54_t12 Add inline_RpnCalc_handle_stack_pop_54_t13\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0085b Instruction { source: "inline_RpnCalc_handle_stack_pop_54_t11 <- inline_RpnCalc_handle_stack_pop_54_t12 Add inline_RpnCalc_handle_stack_pop_54_t13\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_1, args: [Register(0x4c), Register(0x3c), Register(0x3c)], resolved: None }
30 4c 3c 3c 
# 0085f Instruction { source: "inline_RpnCalc_handle_stack_pop_54_t11 <- inline_RpnCalc_handle_stack_pop_54_t12 Add inline_RpnCalc_handle_stack_pop_54_t13\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_pop_54_t10 <- mem[inline_RpnCalc_handle_stack_pop_54_t11] U32
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))"] }
# 00860 Instruction { source: "inline_RpnCalc_handle_stack_pop_54_t10 <- mem[inline_RpnCalc_handle_stack_pop_54_t11] U32\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\"] }", opcode: Load32, args: [Register(0x3c), Register(0x3c)], resolved: None }
22 3c 3c 
# a <- inline_RpnCalc_handle_stack_pop_54_t10 U32
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }"] }
# optimized away noop copy Instruction { source: "a <- inline_RpnCalc_handle_stack_pop_54_t10 U32\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# goto inline_RpnCalc_handle_stack_pop_54_function_end_stack_pop
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_pop_54_function_end_stack_pop\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_pop_54_function_end_stack_pop)], resolved: None }
# :inline_RpnCalc_handle_stack_pop_54_function_end_stack_pop
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_stack_pop_54_function_end_stack_pop
# goto RpnCalc_handle_if_end_17
# 	SourceContext { contexts: [] }
# 00863 Instruction { source: "goto RpnCalc_handle_if_end_17\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_17)], resolved: None }
70 67 08 00 
# :RpnCalc_handle_if_else_0_19
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_0_19
# :RpnCalc_handle_if_end_17
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_end_17
# t32 <- stack_needed U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 1) }, [Assign { target: Ident(\"b\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 1) }", "Ident(\"stack_needed\")", "Ident(\"stack_needed\")"] }
# 00867 Instruction { source: "t32 <- stack_needed U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 1) }, [Assign { target: Ident(\\\"b\\\"), var_type: None, value: Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] }) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 1) }\", \"Ident(\\\"stack_needed\\\")\", \"Ident(\\\"stack_needed\\\")\"] }", opcode: Copy8, args: [Register(0x70), Register(0x71)], resolved: None }
0b 70 71 
# t33 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 1) }, [Assign { target: Ident(\"b\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 1) }", "Number(U8, 1)", "Number(U8, 1)"] }
# 0086a Instruction { source: "t33 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 1) }, [Assign { target: Ident(\\\"b\\\"), var_type: None, value: Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] }) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 1) }\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x60), Constant8(0x01=1)], resolved: None }
04 60 01 
# if t32 > t33 then 'RpnCalc_handle_if_true_0_21' else 'RpnCalc_handle_if_else_0_22'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 1) }, [Assign { target: Ident(\"b\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 1) }"] }
# 0086d Instruction { source: "if t32 > t33 then 'RpnCalc_handle_if_true_0_21' else 'RpnCalc_handle_if_else_0_22'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 1) }, [Assign { target: Ident(\\\"b\\\"), var_type: None, value: Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] }) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 1) }\"] }", opcode: Cmp8, args: [Register(0x71), Register(0x60)], resolved: None }
15 71 60 
# 00870 Instruction { source: "if t32 > t33 then 'RpnCalc_handle_if_true_0_21' else 'RpnCalc_handle_if_else_0_22'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 1) }, [Assign { target: Ident(\\\"b\\\"), var_type: None, value: Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] }) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 1) }\"] }", opcode: JcImm, args: [Label24(RpnCalc_handle_if_else_0_22)], resolved: None }
71 de 08 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t32 > t33 then 'RpnCalc_handle_if_true_0_21' else 'RpnCalc_handle_if_else_0_22'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 1) }, [Assign { target: Ident(\\\"b\\\"), var_type: None, value: Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] }) }])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"stack_needed\\\"), right: Number(U8, 1) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_true_0_21)], resolved: None }
# :RpnCalc_handle_if_true_0_21
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 1) }, [Assign { target: Ident(\"b\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }])], else_block: [] }"] }
# RpnCalc_handle_if_true_0_21
# t34 <- stack U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }", "Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] })", "Ident(\"stack\")", "Ident(\"stack\")"] }
# 00874 Instruction { source: "t34 <- stack U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: None, value: Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] }) }\", \"Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] })\", \"Ident(\\\"stack\\\")\", \"Ident(\\\"stack\\\")\"] }", opcode: Copy32, args: [Register(0x6c), Register(0x40)], resolved: None }
21 6c 40 
# inline_RpnCalc_handle_stack_pop_55_s <- t34 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }", "Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_55_s <- t34 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: None, value: Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] }) }\", \"Call(Call { function: \\\"stack_pop\\\", parameters: [Ident(\\\"stack\\\")] })\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_pop_55_t1 <- inline_RpnCalc_handle_stack_pop_55_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_55_t1 <- inline_RpnCalc_handle_stack_pop_55_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_pop_55_t2 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 00877 Instruction { source: "inline_RpnCalc_handle_stack_pop_55_t2 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x4c), Constant32(0x00000040=64)], resolved: None }
20 4c 40 00 00 00 
# inline_RpnCalc_handle_stack_pop_55_t0 <- inline_RpnCalc_handle_stack_pop_55_t1 Add inline_RpnCalc_handle_stack_pop_55_t2
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 0087d Instruction { source: "inline_RpnCalc_handle_stack_pop_55_t0 <- inline_RpnCalc_handle_stack_pop_55_t1 Add inline_RpnCalc_handle_stack_pop_55_t2\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0087e Instruction { source: "inline_RpnCalc_handle_stack_pop_55_t0 <- inline_RpnCalc_handle_stack_pop_55_t1 Add inline_RpnCalc_handle_stack_pop_55_t2\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x40), Register(0x4c), Register(0x4c)], resolved: None }
30 40 4c 4c 
# 00882 Instruction { source: "inline_RpnCalc_handle_stack_pop_55_t0 <- inline_RpnCalc_handle_stack_pop_55_t1 Add inline_RpnCalc_handle_stack_pop_55_t2\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_pop_55_t6 <- inline_RpnCalc_handle_stack_pop_55_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_55_t6 <- inline_RpnCalc_handle_stack_pop_55_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_pop_55_t7 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 00883 Instruction { source: "inline_RpnCalc_handle_stack_pop_55_t7 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x50), Constant32(0x00000040=64)], resolved: None }
20 50 40 00 00 00 
# inline_RpnCalc_handle_stack_pop_55_t5 <- inline_RpnCalc_handle_stack_pop_55_t6 Add inline_RpnCalc_handle_stack_pop_55_t7
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 00889 Instruction { source: "inline_RpnCalc_handle_stack_pop_55_t5 <- inline_RpnCalc_handle_stack_pop_55_t6 Add inline_RpnCalc_handle_stack_pop_55_t7\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0088a Instruction { source: "inline_RpnCalc_handle_stack_pop_55_t5 <- inline_RpnCalc_handle_stack_pop_55_t6 Add inline_RpnCalc_handle_stack_pop_55_t7\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x40), Register(0x50), Register(0x50)], resolved: None }
30 40 50 50 
# 0088e Instruction { source: "inline_RpnCalc_handle_stack_pop_55_t5 <- inline_RpnCalc_handle_stack_pop_55_t6 Add inline_RpnCalc_handle_stack_pop_55_t7\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_pop_55_t4 <- mem[inline_RpnCalc_handle_stack_pop_55_t5] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 0088f Instruction { source: "inline_RpnCalc_handle_stack_pop_55_t4 <- mem[inline_RpnCalc_handle_stack_pop_55_t5] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x50), Register(0x50)], resolved: None }
22 50 50 
# inline_RpnCalc_handle_stack_pop_55_t8 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 00892 Instruction { source: "inline_RpnCalc_handle_stack_pop_55_t8 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x54), Constant32(0x00000001=1)], resolved: None }
20 54 01 00 00 00 
# inline_RpnCalc_handle_stack_pop_55_t3 <- inline_RpnCalc_handle_stack_pop_55_t4 Subtract inline_RpnCalc_handle_stack_pop_55_t8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))"] }
# 00898 Instruction { source: "inline_RpnCalc_handle_stack_pop_55_t3 <- inline_RpnCalc_handle_stack_pop_55_t4 Subtract inline_RpnCalc_handle_stack_pop_55_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: Copy32, args: [Register(0x54), Register(0x00)], resolved: None }
21 54 00 
# 0089b Instruction { source: "inline_RpnCalc_handle_stack_pop_55_t3 <- inline_RpnCalc_handle_stack_pop_55_t4 Subtract inline_RpnCalc_handle_stack_pop_55_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x00)], resolved: None }
01 00 
# 0089d Instruction { source: "inline_RpnCalc_handle_stack_pop_55_t3 <- inline_RpnCalc_handle_stack_pop_55_t4 Subtract inline_RpnCalc_handle_stack_pop_55_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x01)], resolved: None }
01 01 
# 0089f Instruction { source: "inline_RpnCalc_handle_stack_pop_55_t3 <- inline_RpnCalc_handle_stack_pop_55_t4 Subtract inline_RpnCalc_handle_stack_pop_55_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x02)], resolved: None }
01 02 
# 008a1 Instruction { source: "inline_RpnCalc_handle_stack_pop_55_t3 <- inline_RpnCalc_handle_stack_pop_55_t4 Subtract inline_RpnCalc_handle_stack_pop_55_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x03)], resolved: None }
01 03 
# 008a3 Instruction { source: "inline_RpnCalc_handle_stack_pop_55_t3 <- inline_RpnCalc_handle_stack_pop_55_t4 Subtract inline_RpnCalc_handle_stack_pop_55_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x00), Constant32(0x00000001=1)], resolved: None }
32 00 01 00 00 00 
# 008a9 Instruction { source: "inline_RpnCalc_handle_stack_pop_55_t3 <- inline_RpnCalc_handle_stack_pop_55_t4 Subtract inline_RpnCalc_handle_stack_pop_55_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 008aa Instruction { source: "inline_RpnCalc_handle_stack_pop_55_t3 <- inline_RpnCalc_handle_stack_pop_55_t4 Subtract inline_RpnCalc_handle_stack_pop_55_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x50), Register(0x00), Register(0x50)], resolved: None }
30 50 00 50 
# 008ae Instruction { source: "inline_RpnCalc_handle_stack_pop_55_t3 <- inline_RpnCalc_handle_stack_pop_55_t4 Subtract inline_RpnCalc_handle_stack_pop_55_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# mem[inline_RpnCalc_handle_stack_pop_55_t0] <- inline_RpnCalc_handle_stack_pop_55_t3 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }"] }
# 008af Instruction { source: "mem[inline_RpnCalc_handle_stack_pop_55_t0] <- inline_RpnCalc_handle_stack_pop_55_t3 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_1, args: [Register(0x50), Register(0x4c)], resolved: None }
23 50 4c 
# 008b2 Instruction { source: "mem[inline_RpnCalc_handle_stack_pop_55_t0] <- inline_RpnCalc_handle_stack_pop_55_t3 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_RpnCalc_handle_stack_pop_55_t9 <- inline_RpnCalc_handle_stack_pop_55_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_55_t9 <- inline_RpnCalc_handle_stack_pop_55_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_pop_55_values <- inline_RpnCalc_handle_stack_pop_55_t9 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# 008b3 Instruction { source: "inline_RpnCalc_handle_stack_pop_55_values <- inline_RpnCalc_handle_stack_pop_55_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0x40), Register(0x4c)], resolved: None }
21 40 4c 
# inline_RpnCalc_handle_stack_pop_55_t12 <- inline_RpnCalc_handle_stack_pop_55_values U32
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_55_t12 <- inline_RpnCalc_handle_stack_pop_55_values U32\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_RpnCalc_handle_stack_pop_55_t16 <- inline_RpnCalc_handle_stack_pop_55_s U32
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_55_t16 <- inline_RpnCalc_handle_stack_pop_55_s U32\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_pop_55_t17 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 008b6 Instruction { source: "inline_RpnCalc_handle_stack_pop_55_t17 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x50), Constant32(0x00000040=64)], resolved: None }
20 50 40 00 00 00 
# inline_RpnCalc_handle_stack_pop_55_t15 <- inline_RpnCalc_handle_stack_pop_55_t16 Add inline_RpnCalc_handle_stack_pop_55_t17
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 008bc Instruction { source: "inline_RpnCalc_handle_stack_pop_55_t15 <- inline_RpnCalc_handle_stack_pop_55_t16 Add inline_RpnCalc_handle_stack_pop_55_t17\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 008bd Instruction { source: "inline_RpnCalc_handle_stack_pop_55_t15 <- inline_RpnCalc_handle_stack_pop_55_t16 Add inline_RpnCalc_handle_stack_pop_55_t17\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x40), Register(0x50), Register(0x40)], resolved: None }
30 40 50 40 
# 008c1 Instruction { source: "inline_RpnCalc_handle_stack_pop_55_t15 <- inline_RpnCalc_handle_stack_pop_55_t16 Add inline_RpnCalc_handle_stack_pop_55_t17\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_pop_55_t14 <- mem[inline_RpnCalc_handle_stack_pop_55_t15] U32
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 008c2 Instruction { source: "inline_RpnCalc_handle_stack_pop_55_t14 <- mem[inline_RpnCalc_handle_stack_pop_55_t15] U32\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x40), Register(0x40)], resolved: None }
22 40 40 
# inline_RpnCalc_handle_stack_pop_55_t13 <- inline_RpnCalc_handle_stack_pop_55_t14 Add inline_RpnCalc_handle_stack_pop_55_t14
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 008c5 Instruction { source: "inline_RpnCalc_handle_stack_pop_55_t13 <- inline_RpnCalc_handle_stack_pop_55_t14 Add inline_RpnCalc_handle_stack_pop_55_t14\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 008c6 Instruction { source: "inline_RpnCalc_handle_stack_pop_55_t13 <- inline_RpnCalc_handle_stack_pop_55_t14 Add inline_RpnCalc_handle_stack_pop_55_t14\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_1, args: [Register(0x40), Register(0x40), Register(0x40)], resolved: None }
30 40 40 40 
# 008ca Instruction { source: "inline_RpnCalc_handle_stack_pop_55_t13 <- inline_RpnCalc_handle_stack_pop_55_t14 Add inline_RpnCalc_handle_stack_pop_55_t14\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_pop_55_t13 <- inline_RpnCalc_handle_stack_pop_55_t13 Add inline_RpnCalc_handle_stack_pop_55_t13
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))"] }
# 008cb Instruction { source: "inline_RpnCalc_handle_stack_pop_55_t13 <- inline_RpnCalc_handle_stack_pop_55_t13 Add inline_RpnCalc_handle_stack_pop_55_t13\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 008cc Instruction { source: "inline_RpnCalc_handle_stack_pop_55_t13 <- inline_RpnCalc_handle_stack_pop_55_t13 Add inline_RpnCalc_handle_stack_pop_55_t13\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x40), Register(0x40), Register(0x40)], resolved: None }
30 40 40 40 
# 008d0 Instruction { source: "inline_RpnCalc_handle_stack_pop_55_t13 <- inline_RpnCalc_handle_stack_pop_55_t13 Add inline_RpnCalc_handle_stack_pop_55_t13\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_pop_55_t11 <- inline_RpnCalc_handle_stack_pop_55_t12 Add inline_RpnCalc_handle_stack_pop_55_t13
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))"] }
# 008d1 Instruction { source: "inline_RpnCalc_handle_stack_pop_55_t11 <- inline_RpnCalc_handle_stack_pop_55_t12 Add inline_RpnCalc_handle_stack_pop_55_t13\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 008d2 Instruction { source: "inline_RpnCalc_handle_stack_pop_55_t11 <- inline_RpnCalc_handle_stack_pop_55_t12 Add inline_RpnCalc_handle_stack_pop_55_t13\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_1, args: [Register(0x4c), Register(0x40), Register(0x40)], resolved: None }
30 4c 40 40 
# 008d6 Instruction { source: "inline_RpnCalc_handle_stack_pop_55_t11 <- inline_RpnCalc_handle_stack_pop_55_t12 Add inline_RpnCalc_handle_stack_pop_55_t13\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_pop_55_t10 <- mem[inline_RpnCalc_handle_stack_pop_55_t11] U32
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))", "Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))"] }
# 008d7 Instruction { source: "inline_RpnCalc_handle_stack_pop_55_t10 <- mem[inline_RpnCalc_handle_stack_pop_55_t11] U32\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))\"] }", opcode: Load32, args: [Register(0x40), Register(0x40)], resolved: None }
22 40 40 
# b <- inline_RpnCalc_handle_stack_pop_55_t10 U32
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }"] }
# optimized away noop copy Instruction { source: "b <- inline_RpnCalc_handle_stack_pop_55_t10 U32\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# goto inline_RpnCalc_handle_stack_pop_55_function_end_stack_pop
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_pop_55_function_end_stack_pop\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_pop_55_function_end_stack_pop)], resolved: None }
# :inline_RpnCalc_handle_stack_pop_55_function_end_stack_pop
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_stack_pop_55_function_end_stack_pop
# goto RpnCalc_handle_if_end_20
# 	SourceContext { contexts: [] }
# 008da Instruction { source: "goto RpnCalc_handle_if_end_20\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_20)], resolved: None }
70 de 08 00 
# :RpnCalc_handle_if_else_0_22
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_0_22
# :RpnCalc_handle_if_end_20
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_end_20
# t35 <- ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }, [Assign { target: Ident(\"sum\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"b\"), Ident(\"a\")) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"sum\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }, [Assign { target: Ident(\"diff\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"b\"), Ident(\"a\")) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }, [Assign { target: Ident(\"product\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul32_32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"product\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }, [Assign { target: Ident(\"quotient\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"div32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"quotient\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 100) }, [Assign { target: Ident(\"i\"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t35 <- ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }, [Assign { target: Ident(\\\"sum\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }, [Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }, [Assign { target: Ident(\\\"product\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul32_32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }, [Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_init\\\", parameters: [Ident(\\\"c\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 100) }, [Assign { target: Ident(\\\"i\\\"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Ident(\\\"stack_count\\\") }, while_true: [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# t36 <- 0n43/0x2bu8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }, [Assign { target: Ident(\"sum\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"b\"), Ident(\"a\")) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"sum\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }, [Assign { target: Ident(\"diff\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"b\"), Ident(\"a\")) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }, [Assign { target: Ident(\"product\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul32_32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"product\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }, [Assign { target: Ident(\"quotient\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"div32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"quotient\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 100) }, [Assign { target: Ident(\"i\"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }", "Number(U8, 43)", "Number(U8, 43)"] }
# 008de Instruction { source: "t36 <- 0n43/0x2bu8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }, [Assign { target: Ident(\\\"sum\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }, [Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }, [Assign { target: Ident(\\\"product\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul32_32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }, [Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_init\\\", parameters: [Ident(\\\"c\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 100) }, [Assign { target: Ident(\\\"i\\\"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Ident(\\\"stack_count\\\") }, while_true: [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }\", \"Number(U8, 43)\", \"Number(U8, 43)\"] }", opcode: LoadImm8, args: [Register(0x71), Constant8(0x2b=43)], resolved: None }
04 71 2b 
# if t35 == t36 then 'RpnCalc_handle_if_true_0_24' else 'RpnCalc_handle_if_else_0_25'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }, [Assign { target: Ident(\"sum\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"b\"), Ident(\"a\")) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"sum\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }, [Assign { target: Ident(\"diff\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"b\"), Ident(\"a\")) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }, [Assign { target: Ident(\"product\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul32_32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"product\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }, [Assign { target: Ident(\"quotient\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"div32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"quotient\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 100) }, [Assign { target: Ident(\"i\"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }"] }
# 008e1 Instruction { source: "if t35 == t36 then 'RpnCalc_handle_if_true_0_24' else 'RpnCalc_handle_if_else_0_25'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }, [Assign { target: Ident(\\\"sum\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }, [Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }, [Assign { target: Ident(\\\"product\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul32_32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }, [Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_init\\\", parameters: [Ident(\\\"c\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 100) }, [Assign { target: Ident(\\\"i\\\"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Ident(\\\"stack_count\\\") }, while_true: [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }\"] }", opcode: Cmp8, args: [Register(0x48), Register(0x71)], resolved: None }
15 48 71 
# 008e4 Instruction { source: "if t35 == t36 then 'RpnCalc_handle_if_true_0_24' else 'RpnCalc_handle_if_else_0_25'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }, [Assign { target: Ident(\\\"sum\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }, [Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }, [Assign { target: Ident(\\\"product\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul32_32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }, [Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_init\\\", parameters: [Ident(\\\"c\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 100) }, [Assign { target: Ident(\\\"i\\\"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Ident(\\\"stack_count\\\") }, while_true: [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_handle_if_true_0_24)], resolved: None }
72 ec 08 00 
# 008e8 Instruction { source: "if t35 == t36 then 'RpnCalc_handle_if_true_0_24' else 'RpnCalc_handle_if_else_0_25'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }, [Assign { target: Ident(\\\"sum\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }, [Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }, [Assign { target: Ident(\\\"product\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul32_32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }, [Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: \\\"RpnCalc_init\\\", parameters: [Ident(\\\"c\\\")] }) }]), (Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 100) }, [Assign { target: Ident(\\\"i\\\"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Ident(\\\"stack_count\\\") }, while_true: [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 43) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_0_25)], resolved: None }
70 26 0a 00 
# :RpnCalc_handle_if_true_0_24
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }, [Assign { target: Ident(\"sum\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"b\"), Ident(\"a\")) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"sum\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }, [Assign { target: Ident(\"diff\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"b\"), Ident(\"a\")) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }, [Assign { target: Ident(\"product\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul32_32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"product\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }, [Assign { target: Ident(\"quotient\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"div32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"quotient\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 100) }, [Assign { target: Ident(\"i\"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }"] }
# RpnCalc_handle_if_true_0_24
# t37 <- b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"sum\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"b\"), Ident(\"a\")) }", "Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "t37 <- b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"sum\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# t38 <- a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"sum\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"b\"), Ident(\"a\")) }", "Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t38 <- a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"sum\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# sum <- t37 Add t38
# 	SourceContext { contexts: ["Assign { target: Ident(\"sum\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"b\"), Ident(\"a\")) }", "Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))"] }
# 008ec Instruction { source: "sum <- t37 Add t38\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"sum\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 008ed Instruction { source: "sum <- t37 Add t38\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"sum\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x40), Register(0x3c), Register(0x40)], resolved: None }
30 40 3c 40 
# 008f1 Instruction { source: "sum <- t37 Add t38\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"sum\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t40 <- sum U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"sum\")] }) }", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"sum\")] })", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"sum\")] })", "Ident(\"sum\")", "Ident(\"sum\")"] }
# 008f2 Instruction { source: "t40 <- sum U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Ident(\\\"sum\\\")\", \"Ident(\\\"sum\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x3c)], resolved: None }
21 40 3c 
# None <= call print_dec32(t40,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"sum\")] }) }", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"sum\")] })", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"sum\")] })"] }
# 008f5 Instruction { source: "Arg0[a]=t40 None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x00)], resolved: None }
21 3c 00 
# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 124, 125, 126, 127, 128, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 216, 217, 233, 234, 235, 236, 240, 241, 242, 243, 244, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: [72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113]
# 008f8 Instruction { source: "Saving reg0x71 before None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x71)], resolved: None }
09 71 
# 008fa Instruction { source: "Saving reg0x70 before None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x70)], resolved: None }
09 70 
# 008fc Instruction { source: "Saving reg0x6f before None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x6f)], resolved: None }
09 6f 
# 008fe Instruction { source: "Saving reg0x6e before None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x6e)], resolved: None }
09 6e 
# 00900 Instruction { source: "Saving reg0x6d before None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x6d)], resolved: None }
09 6d 
# 00902 Instruction { source: "Saving reg0x6c before None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x6c)], resolved: None }
09 6c 
# 00904 Instruction { source: "Saving reg0x6a before None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x6a)], resolved: None }
09 6a 
# 00906 Instruction { source: "Saving reg0x69 before None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x69)], resolved: None }
09 69 
# 00908 Instruction { source: "Saving reg0x68 before None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x68)], resolved: None }
09 68 
# 0090a Instruction { source: "Saving reg0x67 before None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x67)], resolved: None }
09 67 
# 0090c Instruction { source: "Saving reg0x66 before None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x66)], resolved: None }
09 66 
# 0090e Instruction { source: "Saving reg0x65 before None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x65)], resolved: None }
09 65 
# 00910 Instruction { source: "Saving reg0x64 before None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x64)], resolved: None }
09 64 
# 00912 Instruction { source: "Saving reg0x61 before None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x61)], resolved: None }
09 61 
# 00914 Instruction { source: "Saving reg0x60 before None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x60)], resolved: None }
09 60 
# 00916 Instruction { source: "Saving reg0x5f before None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x5f)], resolved: None }
09 5f 
# 00918 Instruction { source: "Saving reg0x5e before None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x5e)], resolved: None }
09 5e 
# 0091a Instruction { source: "Saving reg0x5d before None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x5d)], resolved: None }
09 5d 
# 0091c Instruction { source: "Saving reg0x5c before None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x5c)], resolved: None }
09 5c 
# 0091e Instruction { source: "Saving reg0x5b before None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x5b)], resolved: None }
09 5b 
# 00920 Instruction { source: "Saving reg0x5a before None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x5a)], resolved: None }
09 5a 
# 00922 Instruction { source: "Saving reg0x59 before None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x59)], resolved: None }
09 59 
# 00924 Instruction { source: "Saving reg0x58 before None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x58)], resolved: None }
09 58 
# 00926 Instruction { source: "Saving reg0x57 before None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x57)], resolved: None }
09 57 
# 00928 Instruction { source: "Saving reg0x56 before None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x56)], resolved: None }
09 56 
# 0092a Instruction { source: "Saving reg0x55 before None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x55)], resolved: None }
09 55 
# 0092c Instruction { source: "Saving reg0x54 before None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x54)], resolved: None }
09 54 
# 0092e Instruction { source: "Saving reg0x53 before None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x53)], resolved: None }
09 53 
# 00930 Instruction { source: "Saving reg0x52 before None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x52)], resolved: None }
09 52 
# 00932 Instruction { source: "Saving reg0x51 before None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x51)], resolved: None }
09 51 
# 00934 Instruction { source: "Saving reg0x50 before None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x50)], resolved: None }
09 50 
# 00936 Instruction { source: "Saving reg0x4f before None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x4f)], resolved: None }
09 4f 
# 00938 Instruction { source: "Saving reg0x4e before None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x4e)], resolved: None }
09 4e 
# 0093a Instruction { source: "Saving reg0x4d before None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x4d)], resolved: None }
09 4d 
# 0093c Instruction { source: "Saving reg0x4c before None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x4c)], resolved: None }
09 4c 
# 0093e Instruction { source: "Saving reg0x49 before None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x49)], resolved: None }
09 49 
# 00940 Instruction { source: "Saving reg0x48 before None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Push8, args: [Register(0x48)], resolved: None }
09 48 
# 00942 Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 00948 Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 52 09 00 00 
# 0094e Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: JmpImm, args: [Label24(:print_dec32)], resolved: None }
70 d5 29 00 
# 00952 Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 00958 Instruction { source: "Restoring reg0x48 after None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x48)], resolved: None }
0a 48 
# 0095a Instruction { source: "Restoring reg0x49 after None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x49)], resolved: None }
0a 49 
# 0095c Instruction { source: "Restoring reg0x4c after None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x4c)], resolved: None }
0a 4c 
# 0095e Instruction { source: "Restoring reg0x4d after None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x4d)], resolved: None }
0a 4d 
# 00960 Instruction { source: "Restoring reg0x4e after None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x4e)], resolved: None }
0a 4e 
# 00962 Instruction { source: "Restoring reg0x4f after None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x4f)], resolved: None }
0a 4f 
# 00964 Instruction { source: "Restoring reg0x50 after None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x50)], resolved: None }
0a 50 
# 00966 Instruction { source: "Restoring reg0x51 after None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x51)], resolved: None }
0a 51 
# 00968 Instruction { source: "Restoring reg0x52 after None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x52)], resolved: None }
0a 52 
# 0096a Instruction { source: "Restoring reg0x53 after None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x53)], resolved: None }
0a 53 
# 0096c Instruction { source: "Restoring reg0x54 after None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x54)], resolved: None }
0a 54 
# 0096e Instruction { source: "Restoring reg0x55 after None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x55)], resolved: None }
0a 55 
# 00970 Instruction { source: "Restoring reg0x56 after None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x56)], resolved: None }
0a 56 
# 00972 Instruction { source: "Restoring reg0x57 after None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x57)], resolved: None }
0a 57 
# 00974 Instruction { source: "Restoring reg0x58 after None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x58)], resolved: None }
0a 58 
# 00976 Instruction { source: "Restoring reg0x59 after None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x59)], resolved: None }
0a 59 
# 00978 Instruction { source: "Restoring reg0x5a after None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x5a)], resolved: None }
0a 5a 
# 0097a Instruction { source: "Restoring reg0x5b after None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x5b)], resolved: None }
0a 5b 
# 0097c Instruction { source: "Restoring reg0x5c after None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x5c)], resolved: None }
0a 5c 
# 0097e Instruction { source: "Restoring reg0x5d after None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x5d)], resolved: None }
0a 5d 
# 00980 Instruction { source: "Restoring reg0x5e after None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x5e)], resolved: None }
0a 5e 
# 00982 Instruction { source: "Restoring reg0x5f after None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x5f)], resolved: None }
0a 5f 
# 00984 Instruction { source: "Restoring reg0x60 after None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x60)], resolved: None }
0a 60 
# 00986 Instruction { source: "Restoring reg0x61 after None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x61)], resolved: None }
0a 61 
# 00988 Instruction { source: "Restoring reg0x64 after None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x64)], resolved: None }
0a 64 
# 0098a Instruction { source: "Restoring reg0x65 after None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x65)], resolved: None }
0a 65 
# 0098c Instruction { source: "Restoring reg0x66 after None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x66)], resolved: None }
0a 66 
# 0098e Instruction { source: "Restoring reg0x67 after None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x67)], resolved: None }
0a 67 
# 00990 Instruction { source: "Restoring reg0x68 after None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x68)], resolved: None }
0a 68 
# 00992 Instruction { source: "Restoring reg0x69 after None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x69)], resolved: None }
0a 69 
# 00994 Instruction { source: "Restoring reg0x6a after None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x6a)], resolved: None }
0a 6a 
# 00996 Instruction { source: "Restoring reg0x6c after None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x6c)], resolved: None }
0a 6c 
# 00998 Instruction { source: "Restoring reg0x6d after None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x6d)], resolved: None }
0a 6d 
# 0099a Instruction { source: "Restoring reg0x6e after None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x6e)], resolved: None }
0a 6e 
# 0099c Instruction { source: "Restoring reg0x6f after None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x6f)], resolved: None }
0a 6f 
# 0099e Instruction { source: "Restoring reg0x70 after None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x70)], resolved: None }
0a 70 
# 009a0 Instruction { source: "Restoring reg0x71 after None <= call print_dec32(t40,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"sum\\\")] })\"] }", opcode: Pop8, args: [Register(0x71)], resolved: None }
0a 71 
# t42 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Number(U8, 10)", "Number(U8, 10)"] }
# 009a2 Instruction { source: "t42 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x49), Constant8(0x0a=10)], resolved: None }
04 49 0a 
# inline_RpnCalc_handle_putc_21_c <- t42 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_21_c <- t42 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\"] }", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# inline_RpnCalc_handle_putc_21_t1 <- inline_RpnCalc_handle_putc_21_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_21_t1 <- inline_RpnCalc_handle_putc_21_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_21_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 009a5 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x49)], resolved: None }
68 49 
# inline_RpnCalc_handle_putc_21_t3 <- inline_RpnCalc_handle_putc_21_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_21_t3 <- inline_RpnCalc_handle_putc_21_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# None <= call lcd_write_char(inline_RpnCalc_handle_putc_21_t3,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })"] }
# 009a7 Instruction { source: "Arg0[ch]=inline_RpnCalc_handle_putc_21_t3 None <= call lcd_write_char(inline_RpnCalc_handle_putc_21_t3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy8, args: [Register(0x49), Register(0x00)], resolved: None }
0b 49 00 
# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 152, 153, 154, 155, 156, 157, 158, 159, 217, 233, 234, 235, 236, 240, 241, 242, 243, 244, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 009aa Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 009b0 Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c ba 09 00 00 
# 009b6 Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: JmpImm, args: [Label24(:lcd_write_char)], resolved: None }
70 1a 22 00 
# 009ba Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# goto inline_RpnCalc_handle_putc_21_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_21_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_21_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_21_function_end_putc
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_putc_21_function_end_putc
# t44 <- stack U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] })", "Ident(\"stack\")", "Ident(\"stack\")"] }
# 009c0 Instruction { source: "t44 <- stack U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] })\", \"Ident(\\\"stack\\\")\", \"Ident(\\\"stack\\\")\"] }", opcode: Copy32, args: [Register(0x6c), Register(0x3c)], resolved: None }
21 6c 3c 
# t45 <- sum U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] })", "Ident(\"sum\")", "Ident(\"sum\")"] }
# 009c3 Instruction { source: "t45 <- sum U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] })\", \"Ident(\\\"sum\\\")\", \"Ident(\\\"sum\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x44)], resolved: None }
21 40 44 
# inline_RpnCalc_handle_stack_push_56_s <- t44 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] })"] }
# 009c6 Instruction { source: "inline_RpnCalc_handle_stack_push_56_s <- t44 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] })\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x40)], resolved: None }
21 3c 40 
# inline_RpnCalc_handle_stack_push_56_n <- t45 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] })"] }
# 009c9 Instruction { source: "inline_RpnCalc_handle_stack_push_56_n <- t45 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"sum\\\")] })\"] }", opcode: Copy32, args: [Register(0x44), Register(0x3c)], resolved: None }
21 44 3c 
# inline_RpnCalc_handle_stack_push_56_t0 <- inline_RpnCalc_handle_stack_push_56_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_56_t0 <- inline_RpnCalc_handle_stack_push_56_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_56_values <- inline_RpnCalc_handle_stack_push_56_t0 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# 009cc Instruction { source: "inline_RpnCalc_handle_stack_push_56_values <- inline_RpnCalc_handle_stack_push_56_t0 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0x40), Register(0x44)], resolved: None }
21 40 44 
# inline_RpnCalc_handle_stack_push_56_t2 <- inline_RpnCalc_handle_stack_push_56_values U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_56_t2 <- inline_RpnCalc_handle_stack_push_56_values U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_stack_push_56_t6 <- inline_RpnCalc_handle_stack_push_56_s U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_56_t6 <- inline_RpnCalc_handle_stack_push_56_s U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_56_t7 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 009cf Instruction { source: "inline_RpnCalc_handle_stack_push_56_t7 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x64), Constant32(0x00000040=64)], resolved: None }
20 64 40 00 00 00 
# inline_RpnCalc_handle_stack_push_56_t5 <- inline_RpnCalc_handle_stack_push_56_t6 Add inline_RpnCalc_handle_stack_push_56_t7
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 009d5 Instruction { source: "inline_RpnCalc_handle_stack_push_56_t5 <- inline_RpnCalc_handle_stack_push_56_t6 Add inline_RpnCalc_handle_stack_push_56_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 009d6 Instruction { source: "inline_RpnCalc_handle_stack_push_56_t5 <- inline_RpnCalc_handle_stack_push_56_t6 Add inline_RpnCalc_handle_stack_push_56_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x40), Register(0x64), Register(0x64)], resolved: None }
30 40 64 64 
# 009da Instruction { source: "inline_RpnCalc_handle_stack_push_56_t5 <- inline_RpnCalc_handle_stack_push_56_t6 Add inline_RpnCalc_handle_stack_push_56_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_56_t4 <- mem[inline_RpnCalc_handle_stack_push_56_t5] U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 009db Instruction { source: "inline_RpnCalc_handle_stack_push_56_t4 <- mem[inline_RpnCalc_handle_stack_push_56_t5] U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x64), Register(0x64)], resolved: None }
22 64 64 
# inline_RpnCalc_handle_stack_push_56_t3 <- inline_RpnCalc_handle_stack_push_56_t4 Add inline_RpnCalc_handle_stack_push_56_t4
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 009de Instruction { source: "inline_RpnCalc_handle_stack_push_56_t3 <- inline_RpnCalc_handle_stack_push_56_t4 Add inline_RpnCalc_handle_stack_push_56_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 009df Instruction { source: "inline_RpnCalc_handle_stack_push_56_t3 <- inline_RpnCalc_handle_stack_push_56_t4 Add inline_RpnCalc_handle_stack_push_56_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_1, args: [Register(0x64), Register(0x64), Register(0x64)], resolved: None }
30 64 64 64 
# 009e3 Instruction { source: "inline_RpnCalc_handle_stack_push_56_t3 <- inline_RpnCalc_handle_stack_push_56_t4 Add inline_RpnCalc_handle_stack_push_56_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_56_t3 <- inline_RpnCalc_handle_stack_push_56_t3 Add inline_RpnCalc_handle_stack_push_56_t3
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))"] }
# 009e4 Instruction { source: "inline_RpnCalc_handle_stack_push_56_t3 <- inline_RpnCalc_handle_stack_push_56_t3 Add inline_RpnCalc_handle_stack_push_56_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 009e5 Instruction { source: "inline_RpnCalc_handle_stack_push_56_t3 <- inline_RpnCalc_handle_stack_push_56_t3 Add inline_RpnCalc_handle_stack_push_56_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x64), Register(0x64), Register(0x64)], resolved: None }
30 64 64 64 
# 009e9 Instruction { source: "inline_RpnCalc_handle_stack_push_56_t3 <- inline_RpnCalc_handle_stack_push_56_t3 Add inline_RpnCalc_handle_stack_push_56_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_56_t1 <- inline_RpnCalc_handle_stack_push_56_t2 Add inline_RpnCalc_handle_stack_push_56_t3
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))"] }
# 009ea Instruction { source: "inline_RpnCalc_handle_stack_push_56_t1 <- inline_RpnCalc_handle_stack_push_56_t2 Add inline_RpnCalc_handle_stack_push_56_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 009eb Instruction { source: "inline_RpnCalc_handle_stack_push_56_t1 <- inline_RpnCalc_handle_stack_push_56_t2 Add inline_RpnCalc_handle_stack_push_56_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_1, args: [Register(0x44), Register(0x64), Register(0x44)], resolved: None }
30 44 64 44 
# 009ef Instruction { source: "inline_RpnCalc_handle_stack_push_56_t1 <- inline_RpnCalc_handle_stack_push_56_t2 Add inline_RpnCalc_handle_stack_push_56_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_56_t9 <- inline_RpnCalc_handle_stack_push_56_n U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_56_t9 <- inline_RpnCalc_handle_stack_push_56_n U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# mem[inline_RpnCalc_handle_stack_push_56_t1] <- inline_RpnCalc_handle_stack_push_56_t9 U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }"] }
# 009f0 Instruction { source: "mem[inline_RpnCalc_handle_stack_push_56_t1] <- inline_RpnCalc_handle_stack_push_56_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_1, args: [Register(0x3c), Register(0x44)], resolved: None }
23 3c 44 
# 009f3 Instruction { source: "mem[inline_RpnCalc_handle_stack_push_56_t1] <- inline_RpnCalc_handle_stack_push_56_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_RpnCalc_handle_stack_push_56_t11 <- inline_RpnCalc_handle_stack_push_56_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# 009f4 Instruction { source: "inline_RpnCalc_handle_stack_push_56_t11 <- inline_RpnCalc_handle_stack_push_56_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x3c)], resolved: None }
21 40 3c 
# inline_RpnCalc_handle_stack_push_56_t12 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 009f7 Instruction { source: "inline_RpnCalc_handle_stack_push_56_t12 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x44), Constant32(0x00000040=64)], resolved: None }
20 44 40 00 00 00 
# inline_RpnCalc_handle_stack_push_56_t10 <- inline_RpnCalc_handle_stack_push_56_t11 Add inline_RpnCalc_handle_stack_push_56_t12
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 009fd Instruction { source: "inline_RpnCalc_handle_stack_push_56_t10 <- inline_RpnCalc_handle_stack_push_56_t11 Add inline_RpnCalc_handle_stack_push_56_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 009fe Instruction { source: "inline_RpnCalc_handle_stack_push_56_t10 <- inline_RpnCalc_handle_stack_push_56_t11 Add inline_RpnCalc_handle_stack_push_56_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x3c), Register(0x44), Register(0x3c)], resolved: None }
30 3c 44 3c 
# 00a02 Instruction { source: "inline_RpnCalc_handle_stack_push_56_t10 <- inline_RpnCalc_handle_stack_push_56_t11 Add inline_RpnCalc_handle_stack_push_56_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_56_t16 <- inline_RpnCalc_handle_stack_push_56_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_56_t16 <- inline_RpnCalc_handle_stack_push_56_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_56_t17 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 00a03 Instruction { source: "inline_RpnCalc_handle_stack_push_56_t17 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x44), Constant32(0x00000040=64)], resolved: None }
20 44 40 00 00 00 
# inline_RpnCalc_handle_stack_push_56_t15 <- inline_RpnCalc_handle_stack_push_56_t16 Add inline_RpnCalc_handle_stack_push_56_t17
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 00a09 Instruction { source: "inline_RpnCalc_handle_stack_push_56_t15 <- inline_RpnCalc_handle_stack_push_56_t16 Add inline_RpnCalc_handle_stack_push_56_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00a0a Instruction { source: "inline_RpnCalc_handle_stack_push_56_t15 <- inline_RpnCalc_handle_stack_push_56_t16 Add inline_RpnCalc_handle_stack_push_56_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x40), Register(0x44), Register(0x40)], resolved: None }
30 40 44 40 
# 00a0e Instruction { source: "inline_RpnCalc_handle_stack_push_56_t15 <- inline_RpnCalc_handle_stack_push_56_t16 Add inline_RpnCalc_handle_stack_push_56_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_56_t14 <- mem[inline_RpnCalc_handle_stack_push_56_t15] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 00a0f Instruction { source: "inline_RpnCalc_handle_stack_push_56_t14 <- mem[inline_RpnCalc_handle_stack_push_56_t15] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x40), Register(0x40)], resolved: None }
22 40 40 
# inline_RpnCalc_handle_stack_push_56_t18 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 00a12 Instruction { source: "inline_RpnCalc_handle_stack_push_56_t18 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x44), Constant32(0x00000001=1)], resolved: None }
20 44 01 00 00 00 
# inline_RpnCalc_handle_stack_push_56_t13 <- inline_RpnCalc_handle_stack_push_56_t14 Add inline_RpnCalc_handle_stack_push_56_t18
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))"] }
# 00a18 Instruction { source: "inline_RpnCalc_handle_stack_push_56_t13 <- inline_RpnCalc_handle_stack_push_56_t14 Add inline_RpnCalc_handle_stack_push_56_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00a19 Instruction { source: "inline_RpnCalc_handle_stack_push_56_t13 <- inline_RpnCalc_handle_stack_push_56_t14 Add inline_RpnCalc_handle_stack_push_56_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x40), Register(0x44), Register(0x40)], resolved: None }
30 40 44 40 
# 00a1d Instruction { source: "inline_RpnCalc_handle_stack_push_56_t13 <- inline_RpnCalc_handle_stack_push_56_t14 Add inline_RpnCalc_handle_stack_push_56_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# mem[inline_RpnCalc_handle_stack_push_56_t10] <- inline_RpnCalc_handle_stack_push_56_t13 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }"] }
# 00a1e Instruction { source: "mem[inline_RpnCalc_handle_stack_push_56_t10] <- inline_RpnCalc_handle_stack_push_56_t13 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_1, args: [Register(0x40), Register(0x3c)], resolved: None }
23 40 3c 
# 00a21 Instruction { source: "mem[inline_RpnCalc_handle_stack_push_56_t10] <- inline_RpnCalc_handle_stack_push_56_t13 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto inline_RpnCalc_handle_stack_push_56_function_end_stack_push
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_push_56_function_end_stack_push\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_push_56_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_stack_push_56_function_end_stack_push
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_stack_push_56_function_end_stack_push
# goto RpnCalc_handle_if_end_23
# 	SourceContext { contexts: [] }
# 00a22 Instruction { source: "goto RpnCalc_handle_if_end_23\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_23)], resolved: None }
70 cf 15 00 
# :RpnCalc_handle_if_else_0_25
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_0_25
# t46 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t46 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# t47 <- 0n45/0x2du8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }", "Number(U8, 45)", "Number(U8, 45)"] }
# 00a26 Instruction { source: "t47 <- 0n45/0x2du8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }\", \"Number(U8, 45)\", \"Number(U8, 45)\"] }", opcode: LoadImm8, args: [Register(0x71), Constant8(0x2d=45)], resolved: None }
04 71 2d 
# if t46 == t47 then 'RpnCalc_handle_if_true_1_26' else 'RpnCalc_handle_if_else_1_27'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }"] }
# 00a29 Instruction { source: "if t46 == t47 then 'RpnCalc_handle_if_true_1_26' else 'RpnCalc_handle_if_else_1_27'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }\"] }", opcode: Cmp8, args: [Register(0x48), Register(0x71)], resolved: None }
15 48 71 
# 00a2c Instruction { source: "if t46 == t47 then 'RpnCalc_handle_if_true_1_26' else 'RpnCalc_handle_if_else_1_27'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_handle_if_true_1_26)], resolved: None }
72 34 0a 00 
# 00a30 Instruction { source: "if t46 == t47 then 'RpnCalc_handle_if_true_1_26' else 'RpnCalc_handle_if_else_1_27'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 45) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_1_27)], resolved: None }
70 73 0b 00 
# :RpnCalc_handle_if_true_1_26
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_true_1_26
# t48 <- b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"diff\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"b\"), Ident(\"a\")) }", "Arithmetic(Subtract, Ident(\"b\"), Ident(\"a\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "t48 <- b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# t49 <- a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"diff\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"b\"), Ident(\"a\")) }", "Arithmetic(Subtract, Ident(\"b\"), Ident(\"a\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t49 <- a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# diff <- t48 Subtract t49
# 	SourceContext { contexts: ["Assign { target: Ident(\"diff\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"b\"), Ident(\"a\")) }", "Arithmetic(Subtract, Ident(\"b\"), Ident(\"a\"))"] }
# 00a34 Instruction { source: "diff <- t48 Subtract t49\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x00)], resolved: None }
21 3c 00 
# 00a37 Instruction { source: "diff <- t48 Subtract t49\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: Invert8, args: [Register(0x00)], resolved: None }
01 00 
# 00a39 Instruction { source: "diff <- t48 Subtract t49\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: Invert8, args: [Register(0x01)], resolved: None }
01 01 
# 00a3b Instruction { source: "diff <- t48 Subtract t49\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: Invert8, args: [Register(0x02)], resolved: None }
01 02 
# 00a3d Instruction { source: "diff <- t48 Subtract t49\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: Invert8, args: [Register(0x03)], resolved: None }
01 03 
# 00a3f Instruction { source: "diff <- t48 Subtract t49\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x00), Constant32(0x00000001=1)], resolved: None }
32 00 01 00 00 00 
# 00a45 Instruction { source: "diff <- t48 Subtract t49\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00a46 Instruction { source: "diff <- t48 Subtract t49\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x40), Register(0x00), Register(0x3c)], resolved: None }
30 40 00 3c 
# 00a4a Instruction { source: "diff <- t48 Subtract t49\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"diff\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t51 <- diff U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] }) }", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] })", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] })", "Ident(\"diff\")", "Ident(\"diff\")"] }
# optimized away noop copy Instruction { source: "t51 <- diff U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Ident(\\\"diff\\\")\", \"Ident(\\\"diff\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# None <= call print_dec32(t51,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] }) }", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] })", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] })"] }
# 00a4b Instruction { source: "Arg0[a]=t51 None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x00)], resolved: None }
21 3c 00 
# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 124, 125, 126, 127, 128, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 216, 217, 233, 234, 235, 236, 240, 241, 242, 243, 244, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: [72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113]
# 00a4e Instruction { source: "Saving reg0x71 before None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x71)], resolved: None }
09 71 
# 00a50 Instruction { source: "Saving reg0x70 before None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x70)], resolved: None }
09 70 
# 00a52 Instruction { source: "Saving reg0x6f before None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x6f)], resolved: None }
09 6f 
# 00a54 Instruction { source: "Saving reg0x6e before None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x6e)], resolved: None }
09 6e 
# 00a56 Instruction { source: "Saving reg0x6d before None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x6d)], resolved: None }
09 6d 
# 00a58 Instruction { source: "Saving reg0x6c before None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x6c)], resolved: None }
09 6c 
# 00a5a Instruction { source: "Saving reg0x6a before None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x6a)], resolved: None }
09 6a 
# 00a5c Instruction { source: "Saving reg0x69 before None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x69)], resolved: None }
09 69 
# 00a5e Instruction { source: "Saving reg0x68 before None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x68)], resolved: None }
09 68 
# 00a60 Instruction { source: "Saving reg0x67 before None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x67)], resolved: None }
09 67 
# 00a62 Instruction { source: "Saving reg0x66 before None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x66)], resolved: None }
09 66 
# 00a64 Instruction { source: "Saving reg0x65 before None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x65)], resolved: None }
09 65 
# 00a66 Instruction { source: "Saving reg0x64 before None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x64)], resolved: None }
09 64 
# 00a68 Instruction { source: "Saving reg0x61 before None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x61)], resolved: None }
09 61 
# 00a6a Instruction { source: "Saving reg0x60 before None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x60)], resolved: None }
09 60 
# 00a6c Instruction { source: "Saving reg0x5f before None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x5f)], resolved: None }
09 5f 
# 00a6e Instruction { source: "Saving reg0x5e before None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x5e)], resolved: None }
09 5e 
# 00a70 Instruction { source: "Saving reg0x5d before None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x5d)], resolved: None }
09 5d 
# 00a72 Instruction { source: "Saving reg0x5c before None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x5c)], resolved: None }
09 5c 
# 00a74 Instruction { source: "Saving reg0x5b before None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x5b)], resolved: None }
09 5b 
# 00a76 Instruction { source: "Saving reg0x5a before None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x5a)], resolved: None }
09 5a 
# 00a78 Instruction { source: "Saving reg0x59 before None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x59)], resolved: None }
09 59 
# 00a7a Instruction { source: "Saving reg0x58 before None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x58)], resolved: None }
09 58 
# 00a7c Instruction { source: "Saving reg0x57 before None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x57)], resolved: None }
09 57 
# 00a7e Instruction { source: "Saving reg0x56 before None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x56)], resolved: None }
09 56 
# 00a80 Instruction { source: "Saving reg0x55 before None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x55)], resolved: None }
09 55 
# 00a82 Instruction { source: "Saving reg0x54 before None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x54)], resolved: None }
09 54 
# 00a84 Instruction { source: "Saving reg0x53 before None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x53)], resolved: None }
09 53 
# 00a86 Instruction { source: "Saving reg0x52 before None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x52)], resolved: None }
09 52 
# 00a88 Instruction { source: "Saving reg0x51 before None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x51)], resolved: None }
09 51 
# 00a8a Instruction { source: "Saving reg0x50 before None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x50)], resolved: None }
09 50 
# 00a8c Instruction { source: "Saving reg0x4f before None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x4f)], resolved: None }
09 4f 
# 00a8e Instruction { source: "Saving reg0x4e before None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x4e)], resolved: None }
09 4e 
# 00a90 Instruction { source: "Saving reg0x4d before None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x4d)], resolved: None }
09 4d 
# 00a92 Instruction { source: "Saving reg0x4c before None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x4c)], resolved: None }
09 4c 
# 00a94 Instruction { source: "Saving reg0x49 before None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x49)], resolved: None }
09 49 
# 00a96 Instruction { source: "Saving reg0x48 before None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Push8, args: [Register(0x48)], resolved: None }
09 48 
# 00a98 Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 00a9e Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c a8 0a 00 00 
# 00aa4 Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: JmpImm, args: [Label24(:print_dec32)], resolved: None }
70 d5 29 00 
# 00aa8 Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 00aae Instruction { source: "Restoring reg0x48 after None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x48)], resolved: None }
0a 48 
# 00ab0 Instruction { source: "Restoring reg0x49 after None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x49)], resolved: None }
0a 49 
# 00ab2 Instruction { source: "Restoring reg0x4c after None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x4c)], resolved: None }
0a 4c 
# 00ab4 Instruction { source: "Restoring reg0x4d after None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x4d)], resolved: None }
0a 4d 
# 00ab6 Instruction { source: "Restoring reg0x4e after None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x4e)], resolved: None }
0a 4e 
# 00ab8 Instruction { source: "Restoring reg0x4f after None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x4f)], resolved: None }
0a 4f 
# 00aba Instruction { source: "Restoring reg0x50 after None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x50)], resolved: None }
0a 50 
# 00abc Instruction { source: "Restoring reg0x51 after None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x51)], resolved: None }
0a 51 
# 00abe Instruction { source: "Restoring reg0x52 after None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x52)], resolved: None }
0a 52 
# 00ac0 Instruction { source: "Restoring reg0x53 after None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x53)], resolved: None }
0a 53 
# 00ac2 Instruction { source: "Restoring reg0x54 after None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x54)], resolved: None }
0a 54 
# 00ac4 Instruction { source: "Restoring reg0x55 after None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x55)], resolved: None }
0a 55 
# 00ac6 Instruction { source: "Restoring reg0x56 after None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x56)], resolved: None }
0a 56 
# 00ac8 Instruction { source: "Restoring reg0x57 after None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x57)], resolved: None }
0a 57 
# 00aca Instruction { source: "Restoring reg0x58 after None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x58)], resolved: None }
0a 58 
# 00acc Instruction { source: "Restoring reg0x59 after None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x59)], resolved: None }
0a 59 
# 00ace Instruction { source: "Restoring reg0x5a after None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x5a)], resolved: None }
0a 5a 
# 00ad0 Instruction { source: "Restoring reg0x5b after None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x5b)], resolved: None }
0a 5b 
# 00ad2 Instruction { source: "Restoring reg0x5c after None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x5c)], resolved: None }
0a 5c 
# 00ad4 Instruction { source: "Restoring reg0x5d after None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x5d)], resolved: None }
0a 5d 
# 00ad6 Instruction { source: "Restoring reg0x5e after None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x5e)], resolved: None }
0a 5e 
# 00ad8 Instruction { source: "Restoring reg0x5f after None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x5f)], resolved: None }
0a 5f 
# 00ada Instruction { source: "Restoring reg0x60 after None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x60)], resolved: None }
0a 60 
# 00adc Instruction { source: "Restoring reg0x61 after None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x61)], resolved: None }
0a 61 
# 00ade Instruction { source: "Restoring reg0x64 after None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x64)], resolved: None }
0a 64 
# 00ae0 Instruction { source: "Restoring reg0x65 after None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x65)], resolved: None }
0a 65 
# 00ae2 Instruction { source: "Restoring reg0x66 after None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x66)], resolved: None }
0a 66 
# 00ae4 Instruction { source: "Restoring reg0x67 after None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x67)], resolved: None }
0a 67 
# 00ae6 Instruction { source: "Restoring reg0x68 after None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x68)], resolved: None }
0a 68 
# 00ae8 Instruction { source: "Restoring reg0x69 after None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x69)], resolved: None }
0a 69 
# 00aea Instruction { source: "Restoring reg0x6a after None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x6a)], resolved: None }
0a 6a 
# 00aec Instruction { source: "Restoring reg0x6c after None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x6c)], resolved: None }
0a 6c 
# 00aee Instruction { source: "Restoring reg0x6d after None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x6d)], resolved: None }
0a 6d 
# 00af0 Instruction { source: "Restoring reg0x6e after None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x6e)], resolved: None }
0a 6e 
# 00af2 Instruction { source: "Restoring reg0x6f after None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x6f)], resolved: None }
0a 6f 
# 00af4 Instruction { source: "Restoring reg0x70 after None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x70)], resolved: None }
0a 70 
# 00af6 Instruction { source: "Restoring reg0x71 after None <= call print_dec32(t51,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"diff\\\")] })\"] }", opcode: Pop8, args: [Register(0x71)], resolved: None }
0a 71 
# t53 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Number(U8, 10)", "Number(U8, 10)"] }
# 00af8 Instruction { source: "t53 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x68), Constant8(0x0a=10)], resolved: None }
04 68 0a 
# inline_RpnCalc_handle_putc_22_c <- t53 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_22_c <- t53 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\"] }", opcode: Copy8, args: [Register(0x68), Register(0x68)], resolved: None }
# inline_RpnCalc_handle_putc_22_t1 <- inline_RpnCalc_handle_putc_22_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_22_t1 <- inline_RpnCalc_handle_putc_22_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x68), Register(0x68)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_22_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 00afb Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x68)], resolved: None }
68 68 
# inline_RpnCalc_handle_putc_22_t3 <- inline_RpnCalc_handle_putc_22_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_22_t3 <- inline_RpnCalc_handle_putc_22_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x68), Register(0x68)], resolved: None }
# None <= call lcd_write_char(inline_RpnCalc_handle_putc_22_t3,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })"] }
# 00afd Instruction { source: "Arg0[ch]=inline_RpnCalc_handle_putc_22_t3 None <= call lcd_write_char(inline_RpnCalc_handle_putc_22_t3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy8, args: [Register(0x68), Register(0x00)], resolved: None }
0b 68 00 
# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 152, 153, 154, 155, 156, 157, 158, 159, 217, 233, 234, 235, 236, 240, 241, 242, 243, 244, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 00b00 Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 00b06 Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 10 0b 00 00 
# 00b0c Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: JmpImm, args: [Label24(:lcd_write_char)], resolved: None }
70 1a 22 00 
# 00b10 Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# goto inline_RpnCalc_handle_putc_22_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_22_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_22_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_22_function_end_putc
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_putc_22_function_end_putc
# t55 <- stack U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] })", "Ident(\"stack\")", "Ident(\"stack\")"] }
# 00b16 Instruction { source: "t55 <- stack U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] })\", \"Ident(\\\"stack\\\")\", \"Ident(\\\"stack\\\")\"] }", opcode: Copy32, args: [Register(0x6c), Register(0x40)], resolved: None }
21 6c 40 
# t56 <- diff U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] })", "Ident(\"diff\")", "Ident(\"diff\")"] }
# optimized away noop copy Instruction { source: "t56 <- diff U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] })\", \"Ident(\\\"diff\\\")\", \"Ident(\\\"diff\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_57_s <- t55 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_57_s <- t55 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] })\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_57_n <- t56 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_57_n <- t56 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"diff\\\")] })\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_57_t0 <- inline_RpnCalc_handle_stack_push_57_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_57_t0 <- inline_RpnCalc_handle_stack_push_57_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_57_values <- inline_RpnCalc_handle_stack_push_57_t0 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# 00b19 Instruction { source: "inline_RpnCalc_handle_stack_push_57_values <- inline_RpnCalc_handle_stack_push_57_t0 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0x40), Register(0x44)], resolved: None }
21 40 44 
# inline_RpnCalc_handle_stack_push_57_t2 <- inline_RpnCalc_handle_stack_push_57_values U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_57_t2 <- inline_RpnCalc_handle_stack_push_57_values U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_stack_push_57_t6 <- inline_RpnCalc_handle_stack_push_57_s U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_57_t6 <- inline_RpnCalc_handle_stack_push_57_s U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_57_t7 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 00b1c Instruction { source: "inline_RpnCalc_handle_stack_push_57_t7 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x64), Constant32(0x00000040=64)], resolved: None }
20 64 40 00 00 00 
# inline_RpnCalc_handle_stack_push_57_t5 <- inline_RpnCalc_handle_stack_push_57_t6 Add inline_RpnCalc_handle_stack_push_57_t7
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 00b22 Instruction { source: "inline_RpnCalc_handle_stack_push_57_t5 <- inline_RpnCalc_handle_stack_push_57_t6 Add inline_RpnCalc_handle_stack_push_57_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00b23 Instruction { source: "inline_RpnCalc_handle_stack_push_57_t5 <- inline_RpnCalc_handle_stack_push_57_t6 Add inline_RpnCalc_handle_stack_push_57_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x40), Register(0x64), Register(0x64)], resolved: None }
30 40 64 64 
# 00b27 Instruction { source: "inline_RpnCalc_handle_stack_push_57_t5 <- inline_RpnCalc_handle_stack_push_57_t6 Add inline_RpnCalc_handle_stack_push_57_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_57_t4 <- mem[inline_RpnCalc_handle_stack_push_57_t5] U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 00b28 Instruction { source: "inline_RpnCalc_handle_stack_push_57_t4 <- mem[inline_RpnCalc_handle_stack_push_57_t5] U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x64), Register(0x64)], resolved: None }
22 64 64 
# inline_RpnCalc_handle_stack_push_57_t3 <- inline_RpnCalc_handle_stack_push_57_t4 Add inline_RpnCalc_handle_stack_push_57_t4
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 00b2b Instruction { source: "inline_RpnCalc_handle_stack_push_57_t3 <- inline_RpnCalc_handle_stack_push_57_t4 Add inline_RpnCalc_handle_stack_push_57_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00b2c Instruction { source: "inline_RpnCalc_handle_stack_push_57_t3 <- inline_RpnCalc_handle_stack_push_57_t4 Add inline_RpnCalc_handle_stack_push_57_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_1, args: [Register(0x64), Register(0x64), Register(0x64)], resolved: None }
30 64 64 64 
# 00b30 Instruction { source: "inline_RpnCalc_handle_stack_push_57_t3 <- inline_RpnCalc_handle_stack_push_57_t4 Add inline_RpnCalc_handle_stack_push_57_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_57_t3 <- inline_RpnCalc_handle_stack_push_57_t3 Add inline_RpnCalc_handle_stack_push_57_t3
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))"] }
# 00b31 Instruction { source: "inline_RpnCalc_handle_stack_push_57_t3 <- inline_RpnCalc_handle_stack_push_57_t3 Add inline_RpnCalc_handle_stack_push_57_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00b32 Instruction { source: "inline_RpnCalc_handle_stack_push_57_t3 <- inline_RpnCalc_handle_stack_push_57_t3 Add inline_RpnCalc_handle_stack_push_57_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x64), Register(0x64), Register(0x64)], resolved: None }
30 64 64 64 
# 00b36 Instruction { source: "inline_RpnCalc_handle_stack_push_57_t3 <- inline_RpnCalc_handle_stack_push_57_t3 Add inline_RpnCalc_handle_stack_push_57_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_57_t1 <- inline_RpnCalc_handle_stack_push_57_t2 Add inline_RpnCalc_handle_stack_push_57_t3
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))"] }
# 00b37 Instruction { source: "inline_RpnCalc_handle_stack_push_57_t1 <- inline_RpnCalc_handle_stack_push_57_t2 Add inline_RpnCalc_handle_stack_push_57_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00b38 Instruction { source: "inline_RpnCalc_handle_stack_push_57_t1 <- inline_RpnCalc_handle_stack_push_57_t2 Add inline_RpnCalc_handle_stack_push_57_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_1, args: [Register(0x44), Register(0x64), Register(0x44)], resolved: None }
30 44 64 44 
# 00b3c Instruction { source: "inline_RpnCalc_handle_stack_push_57_t1 <- inline_RpnCalc_handle_stack_push_57_t2 Add inline_RpnCalc_handle_stack_push_57_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_57_t9 <- inline_RpnCalc_handle_stack_push_57_n U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_57_t9 <- inline_RpnCalc_handle_stack_push_57_n U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# mem[inline_RpnCalc_handle_stack_push_57_t1] <- inline_RpnCalc_handle_stack_push_57_t9 U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }"] }
# 00b3d Instruction { source: "mem[inline_RpnCalc_handle_stack_push_57_t1] <- inline_RpnCalc_handle_stack_push_57_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_1, args: [Register(0x3c), Register(0x44)], resolved: None }
23 3c 44 
# 00b40 Instruction { source: "mem[inline_RpnCalc_handle_stack_push_57_t1] <- inline_RpnCalc_handle_stack_push_57_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_RpnCalc_handle_stack_push_57_t11 <- inline_RpnCalc_handle_stack_push_57_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# 00b41 Instruction { source: "inline_RpnCalc_handle_stack_push_57_t11 <- inline_RpnCalc_handle_stack_push_57_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x3c)], resolved: None }
21 40 3c 
# inline_RpnCalc_handle_stack_push_57_t12 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 00b44 Instruction { source: "inline_RpnCalc_handle_stack_push_57_t12 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x44), Constant32(0x00000040=64)], resolved: None }
20 44 40 00 00 00 
# inline_RpnCalc_handle_stack_push_57_t10 <- inline_RpnCalc_handle_stack_push_57_t11 Add inline_RpnCalc_handle_stack_push_57_t12
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 00b4a Instruction { source: "inline_RpnCalc_handle_stack_push_57_t10 <- inline_RpnCalc_handle_stack_push_57_t11 Add inline_RpnCalc_handle_stack_push_57_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00b4b Instruction { source: "inline_RpnCalc_handle_stack_push_57_t10 <- inline_RpnCalc_handle_stack_push_57_t11 Add inline_RpnCalc_handle_stack_push_57_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x3c), Register(0x44), Register(0x3c)], resolved: None }
30 3c 44 3c 
# 00b4f Instruction { source: "inline_RpnCalc_handle_stack_push_57_t10 <- inline_RpnCalc_handle_stack_push_57_t11 Add inline_RpnCalc_handle_stack_push_57_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_57_t16 <- inline_RpnCalc_handle_stack_push_57_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_57_t16 <- inline_RpnCalc_handle_stack_push_57_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_57_t17 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 00b50 Instruction { source: "inline_RpnCalc_handle_stack_push_57_t17 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x44), Constant32(0x00000040=64)], resolved: None }
20 44 40 00 00 00 
# inline_RpnCalc_handle_stack_push_57_t15 <- inline_RpnCalc_handle_stack_push_57_t16 Add inline_RpnCalc_handle_stack_push_57_t17
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 00b56 Instruction { source: "inline_RpnCalc_handle_stack_push_57_t15 <- inline_RpnCalc_handle_stack_push_57_t16 Add inline_RpnCalc_handle_stack_push_57_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00b57 Instruction { source: "inline_RpnCalc_handle_stack_push_57_t15 <- inline_RpnCalc_handle_stack_push_57_t16 Add inline_RpnCalc_handle_stack_push_57_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x40), Register(0x44), Register(0x40)], resolved: None }
30 40 44 40 
# 00b5b Instruction { source: "inline_RpnCalc_handle_stack_push_57_t15 <- inline_RpnCalc_handle_stack_push_57_t16 Add inline_RpnCalc_handle_stack_push_57_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_57_t14 <- mem[inline_RpnCalc_handle_stack_push_57_t15] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 00b5c Instruction { source: "inline_RpnCalc_handle_stack_push_57_t14 <- mem[inline_RpnCalc_handle_stack_push_57_t15] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x40), Register(0x40)], resolved: None }
22 40 40 
# inline_RpnCalc_handle_stack_push_57_t18 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 00b5f Instruction { source: "inline_RpnCalc_handle_stack_push_57_t18 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x44), Constant32(0x00000001=1)], resolved: None }
20 44 01 00 00 00 
# inline_RpnCalc_handle_stack_push_57_t13 <- inline_RpnCalc_handle_stack_push_57_t14 Add inline_RpnCalc_handle_stack_push_57_t18
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))"] }
# 00b65 Instruction { source: "inline_RpnCalc_handle_stack_push_57_t13 <- inline_RpnCalc_handle_stack_push_57_t14 Add inline_RpnCalc_handle_stack_push_57_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00b66 Instruction { source: "inline_RpnCalc_handle_stack_push_57_t13 <- inline_RpnCalc_handle_stack_push_57_t14 Add inline_RpnCalc_handle_stack_push_57_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x40), Register(0x44), Register(0x40)], resolved: None }
30 40 44 40 
# 00b6a Instruction { source: "inline_RpnCalc_handle_stack_push_57_t13 <- inline_RpnCalc_handle_stack_push_57_t14 Add inline_RpnCalc_handle_stack_push_57_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# mem[inline_RpnCalc_handle_stack_push_57_t10] <- inline_RpnCalc_handle_stack_push_57_t13 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }"] }
# 00b6b Instruction { source: "mem[inline_RpnCalc_handle_stack_push_57_t10] <- inline_RpnCalc_handle_stack_push_57_t13 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_1, args: [Register(0x40), Register(0x3c)], resolved: None }
23 40 3c 
# 00b6e Instruction { source: "mem[inline_RpnCalc_handle_stack_push_57_t10] <- inline_RpnCalc_handle_stack_push_57_t13 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto inline_RpnCalc_handle_stack_push_57_function_end_stack_push
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_push_57_function_end_stack_push\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_push_57_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_stack_push_57_function_end_stack_push
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_stack_push_57_function_end_stack_push
# goto RpnCalc_handle_if_end_23
# 	SourceContext { contexts: [] }
# 00b6f Instruction { source: "goto RpnCalc_handle_if_end_23\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_23)], resolved: None }
70 cf 15 00 
# :RpnCalc_handle_if_else_1_27
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_1_27
# t57 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t57 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# t58 <- 0n42/0x2au8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }", "Number(U8, 42)", "Number(U8, 42)"] }
# 00b73 Instruction { source: "t58 <- 0n42/0x2au8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }\", \"Number(U8, 42)\", \"Number(U8, 42)\"] }", opcode: LoadImm8, args: [Register(0x71), Constant8(0x2a=42)], resolved: None }
04 71 2a 
# if t57 == t58 then 'RpnCalc_handle_if_true_2_28' else 'RpnCalc_handle_if_else_2_29'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }"] }
# 00b76 Instruction { source: "if t57 == t58 then 'RpnCalc_handle_if_true_2_28' else 'RpnCalc_handle_if_else_2_29'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }\"] }", opcode: Cmp8, args: [Register(0x48), Register(0x71)], resolved: None }
15 48 71 
# 00b79 Instruction { source: "if t57 == t58 then 'RpnCalc_handle_if_true_2_28' else 'RpnCalc_handle_if_else_2_29'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_handle_if_true_2_28)], resolved: None }
72 81 0b 00 
# 00b7d Instruction { source: "if t57 == t58 then 'RpnCalc_handle_if_true_2_28' else 'RpnCalc_handle_if_else_2_29'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 42) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_2_29)], resolved: None }
70 01 0f 00 
# :RpnCalc_handle_if_true_2_28
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_true_2_28
# t59 <- b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"product\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul32_32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }", "Call(Call { function: \"mul32_32\", parameters: [Ident(\"b\"), Ident(\"a\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "t59 <- b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"product\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul32_32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"mul32_32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# t60 <- a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"product\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul32_32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }", "Call(Call { function: \"mul32_32\", parameters: [Ident(\"b\"), Ident(\"a\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# 00b81 Instruction { source: "t60 <- a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"product\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul32_32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"mul32_32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x44)], resolved: None }
21 3c 44 
# inline_RpnCalc_handle_mul32_32_14_a <- t59 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"product\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul32_32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }", "Call(Call { function: \"mul32_32\", parameters: [Ident(\"b\"), Ident(\"a\")] })"] }
# 00b84 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_a <- t59 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"product\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul32_32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"mul32_32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Copy32, args: [Register(0x40), Register(0x3c)], resolved: None }
21 40 3c 
# inline_RpnCalc_handle_mul32_32_14_b <- t60 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"product\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul32_32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }", "Call(Call { function: \"mul32_32\", parameters: [Ident(\"b\"), Ident(\"a\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_b <- t60 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"product\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul32_32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"mul32_32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_t0 <- inline_RpnCalc_handle_mul32_32_14_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t0 <- inline_RpnCalc_handle_mul32_32_14_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_t1 <- inline_RpnCalc_handle_mul32_32_14_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t1 <- inline_RpnCalc_handle_mul32_32_14_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_a <- inline_RpnCalc_handle_mul32_32_14_t0 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })"] }
# 00b87 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_a <- inline_RpnCalc_handle_mul32_32_14_t0 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x40)], resolved: None }
21 3c 40 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_b <- inline_RpnCalc_handle_mul32_32_14_t1 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })"] }
# 00b8a Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_b <- inline_RpnCalc_handle_mul32_32_14_t1 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0x44), Register(0x64)], resolved: None }
21 44 64 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t0 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t0 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t1 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t1 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x64), Register(0x64)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t0 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t1
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))"] }
# 00b8d Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t0 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0x40), Register(0x64), Register(0x4c)], resolved: None }
11 40 64 4c 
# 00b91 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t0 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x4e), Constant8(0x00=0)], resolved: None }
04 4e 00 
# 00b94 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t0 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x4f), Constant8(0x00=0)], resolved: None }
04 4f 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t3 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 00b97 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t3 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x41), Register(0x68)], resolved: None }
0b 41 68 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t2 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t3 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 00b9a Instruction { source: "Zero-pad for inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t2 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x50), Constant32(0x00000000=0)], resolved: None }
20 50 00 00 00 00 
# 00ba0 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t2 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x68), Register(0x50)], resolved: None }
0b 68 50 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t5 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 00ba3 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t5 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x65), Register(0x48)], resolved: None }
0b 65 48 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t4 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t5 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 00ba6 Instruction { source: "Zero-pad for inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t4 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t5 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x54), Constant32(0x00000000=0)], resolved: None }
20 54 00 00 00 00 
# 00bac Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t4 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t5 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x48), Register(0x54)], resolved: None }
0b 48 54 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_f <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t2 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t4
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 00baf Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_f <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t2 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0x50), Register(0x54), Register(0x50)], resolved: None }
11 50 54 50 
# 00bb3 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_f <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t2 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x52), Constant8(0x00=0)], resolved: None }
04 52 00 
# 00bb6 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_f <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t2 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x53), Constant8(0x00=0)], resolved: None }
04 53 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t6 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_f[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }", "Index(\"f\", Number(U8, 1))", "Index(\"f\", Number(U8, 1))"] }
# 00bb9 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t6 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_f[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\", \"Index(\\\"f\\\", Number(U8, 1))\", \"Index(\\\"f\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x51), Register(0x60)], resolved: None }
0b 51 60 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t6 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }"] }
# 00bbc Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t6 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x60), Register(0x53)], resolved: None }
0b 60 53 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t7 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_f[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }", "Index(\"f\", Number(U8, 0))", "Index(\"f\", Number(U8, 0))"] }
# 00bbf Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t7 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_f[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\", \"Index(\\\"f\\\", Number(U8, 0))\", \"Index(\\\"f\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x50), Register(0x60)], resolved: None }
0b 50 60 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t7 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }"] }
# 00bc2 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t7 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x60), Register(0x52)], resolved: None }
0b 60 52 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t8 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00bc5 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t8 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x61), Constant8(0x00=0)], resolved: None }
04 61 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t8 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }"] }
# 00bc8 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t8 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x61), Register(0x51)], resolved: None }
0b 61 51 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t9 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00bcb Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t9 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x61), Constant8(0x00=0)], resolved: None }
04 61 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t9 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 00bce Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t9 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x61), Register(0x50)], resolved: None }
0b 61 50 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t10 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t10 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t11 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_f U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"f\")", "Ident(\"f\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t11 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_f U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"f\\\")\", \"Ident(\\\"f\\\")\"] }", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t10 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t11
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))"] }
# 00bd1 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t10 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00bd2 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t10 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x4c), Register(0x50), Register(0x4c)], resolved: None }
30 4c 50 4c 
# 00bd6 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t10 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t12 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t12 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t14 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 00bd7 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t14 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x65), Register(0x48)], resolved: None }
0b 65 48 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t13 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t14 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 00bda Instruction { source: "Zero-pad for inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t13 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t14 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x50), Constant32(0x00000000=0)], resolved: None }
20 50 00 00 00 00 
# 00be0 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t13 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t14 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x48), Register(0x50)], resolved: None }
0b 48 50 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t12 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t13
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 00be3 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t12 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0x40), Register(0x50), Register(0x50)], resolved: None }
11 40 50 50 
# 00be7 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t12 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x52), Constant8(0x00=0)], resolved: None }
04 52 00 
# 00bea Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t12 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x53), Constant8(0x00=0)], resolved: None }
04 53 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t16 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 00bed Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t16 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x41), Register(0x68)], resolved: None }
0b 41 68 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t15 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t16 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 00bf0 Instruction { source: "Zero-pad for inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t15 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t16 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x40), Constant32(0x00000000=0)], resolved: None }
20 40 00 00 00 00 
# 00bf6 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t15 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t16 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x68), Register(0x40)], resolved: None }
0b 68 40 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t17 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t17 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x64), Register(0x64)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_e <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t15 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t17
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))"] }
# 00bf9 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_e <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t15 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0x40), Register(0x64), Register(0x40)], resolved: None }
11 40 64 40 
# 00bfd Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_e <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t15 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x42), Constant8(0x00=0)], resolved: None }
04 42 00 
# 00c00 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_e <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t15 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x43), Constant8(0x00=0)], resolved: None }
04 43 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t18 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 00c03 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t18 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0x50), Register(0x64)], resolved: None }
21 50 64 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t19 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_e U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"e\")", "Ident(\"e\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t19 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_e U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"e\\\")\", \"Ident(\\\"e\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t18 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t19
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))"] }
# 00c06 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t18 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00c07 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t18 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x64), Register(0x40), Register(0x50)], resolved: None }
30 64 40 50 
# 00c0b Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t18 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t20 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }", "Index(\"d\", Number(U8, 2))", "Index(\"d\", Number(U8, 2))"] }
# 00c0c Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t20 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\", \"Index(\\\"d\\\", Number(U8, 2))\", \"Index(\\\"d\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x52), Register(0x68)], resolved: None }
0b 52 68 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t20 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }"] }
# 00c0f Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t20 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\"] }", opcode: Copy8, args: [Register(0x68), Register(0x53)], resolved: None }
0b 68 53 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t21 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }", "Index(\"d\", Number(U8, 1))", "Index(\"d\", Number(U8, 1))"] }
# 00c12 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t21 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\", \"Index(\\\"d\\\", Number(U8, 1))\", \"Index(\\\"d\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x51), Register(0x68)], resolved: None }
0b 51 68 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t21 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }"] }
# 00c15 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t21 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x68), Register(0x52)], resolved: None }
0b 68 52 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t22 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }", "Index(\"d\", Number(U8, 0))", "Index(\"d\", Number(U8, 0))"] }
# 00c18 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t22 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\", \"Index(\\\"d\\\", Number(U8, 0))\", \"Index(\\\"d\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x50), Register(0x68)], resolved: None }
0b 50 68 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t22 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }"] }
# 00c1b Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t22 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x68), Register(0x51)], resolved: None }
0b 68 51 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t23 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00c1e Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t23 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x68), Constant8(0x00=0)], resolved: None }
04 68 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t23 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 00c21 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t23 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x68), Register(0x50)], resolved: None }
0b 68 50 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t25 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_c U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# 00c24 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t25 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_c U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x40)], resolved: None }
21 4c 40 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t26 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 00c27 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t26 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_d U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0x50), Register(0x64)], resolved: None }
21 50 64 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t24 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t25 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t26
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))"] }
# 00c2a Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t24 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t25 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00c2b Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t24 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t25 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x40), Register(0x64), Register(0x40)], resolved: None }
30 40 64 40 
# 00c2f Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t24 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t25 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_mul32_32_14_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t24 U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# 00c30 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_t24 U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: Copy32, args: [Register(0x40), Register(0x4c)], resolved: None }
21 40 4c 
# goto inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_function_end_mul16_32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_function_end_mul16_32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_function_end_mul16_32)], resolved: None }
# :inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_function_end_mul16_32
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_7_function_end_mul16_32
# inline_RpnCalc_handle_mul32_32_14_a_hi <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a_hi\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }", "Number(USIZE, 0)"] }
# 00c33 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_a_hi <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a_hi\\\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x40), Constant32(0x00000000=0)], resolved: None }
20 40 00 00 00 00 
# inline_RpnCalc_handle_mul32_32_14_t2 <- inline_RpnCalc_handle_mul32_32_14_a[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a_hi\", Number(U8, 1)), var_type: None, value: Index(\"a\", Number(U8, 3)) }", "Index(\"a\", Number(U8, 3))", "Index(\"a\", Number(U8, 3))"] }
# 00c39 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t2 <- inline_RpnCalc_handle_mul32_32_14_a[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a_hi\\\", Number(U8, 1)), var_type: None, value: Index(\\\"a\\\", Number(U8, 3)) }\", \"Index(\\\"a\\\", Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0x3f), Register(0x49)], resolved: None }
0b 3f 49 
# inline_RpnCalc_handle_mul32_32_14_a_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_14_t2 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a_hi\", Number(U8, 1)), var_type: None, value: Index(\"a\", Number(U8, 3)) }"] }
# 00c3c Instruction { source: "inline_RpnCalc_handle_mul32_32_14_a_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_14_t2 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a_hi\\\", Number(U8, 1)), var_type: None, value: Index(\\\"a\\\", Number(U8, 3)) }\"] }", opcode: Copy8, args: [Register(0x49), Register(0x41)], resolved: None }
0b 49 41 
# inline_RpnCalc_handle_mul32_32_14_t3 <- inline_RpnCalc_handle_mul32_32_14_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a_hi\", Number(U8, 0)), var_type: None, value: Index(\"a\", Number(U8, 2)) }", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 00c3f Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t3 <- inline_RpnCalc_handle_mul32_32_14_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a_hi\\\", Number(U8, 0)), var_type: None, value: Index(\\\"a\\\", Number(U8, 2)) }\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x3e), Register(0x49)], resolved: None }
0b 3e 49 
# inline_RpnCalc_handle_mul32_32_14_a_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_14_t3 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a_hi\", Number(U8, 0)), var_type: None, value: Index(\"a\", Number(U8, 2)) }"] }
# 00c42 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_a_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_14_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a_hi\\\", Number(U8, 0)), var_type: None, value: Index(\\\"a\\\", Number(U8, 2)) }\"] }", opcode: Copy8, args: [Register(0x49), Register(0x40)], resolved: None }
0b 49 40 
# inline_RpnCalc_handle_mul32_32_14_b_hi <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"b_hi\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }", "Number(USIZE, 0)"] }
# 00c45 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_b_hi <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b_hi\\\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x64), Constant32(0x00000000=0)], resolved: None }
20 64 00 00 00 00 
# inline_RpnCalc_handle_mul32_32_14_t4 <- inline_RpnCalc_handle_mul32_32_14_b[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"b_hi\", Number(U8, 1)), var_type: None, value: Index(\"b\", Number(U8, 3)) }", "Index(\"b\", Number(U8, 3))", "Index(\"b\", Number(U8, 3))"] }
# 00c4b Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t4 <- inline_RpnCalc_handle_mul32_32_14_b[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"b_hi\\\", Number(U8, 1)), var_type: None, value: Index(\\\"b\\\", Number(U8, 3)) }\", \"Index(\\\"b\\\", Number(U8, 3))\", \"Index(\\\"b\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0x47), Register(0x69)], resolved: None }
0b 47 69 
# inline_RpnCalc_handle_mul32_32_14_b_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_14_t4 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"b_hi\", Number(U8, 1)), var_type: None, value: Index(\"b\", Number(U8, 3)) }"] }
# 00c4e Instruction { source: "inline_RpnCalc_handle_mul32_32_14_b_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_14_t4 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"b_hi\\\", Number(U8, 1)), var_type: None, value: Index(\\\"b\\\", Number(U8, 3)) }\"] }", opcode: Copy8, args: [Register(0x69), Register(0x65)], resolved: None }
0b 69 65 
# inline_RpnCalc_handle_mul32_32_14_t5 <- inline_RpnCalc_handle_mul32_32_14_b[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"b_hi\", Number(U8, 0)), var_type: None, value: Index(\"b\", Number(U8, 2)) }", "Index(\"b\", Number(U8, 2))", "Index(\"b\", Number(U8, 2))"] }
# 00c51 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t5 <- inline_RpnCalc_handle_mul32_32_14_b[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"b_hi\\\", Number(U8, 0)), var_type: None, value: Index(\\\"b\\\", Number(U8, 2)) }\", \"Index(\\\"b\\\", Number(U8, 2))\", \"Index(\\\"b\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x46), Register(0x69)], resolved: None }
0b 46 69 
# inline_RpnCalc_handle_mul32_32_14_b_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_14_t5 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"b_hi\", Number(U8, 0)), var_type: None, value: Index(\"b\", Number(U8, 2)) }"] }
# 00c54 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_b_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_14_t5 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"b_hi\\\", Number(U8, 0)), var_type: None, value: Index(\\\"b\\\", Number(U8, 2)) }\"] }", opcode: Copy8, args: [Register(0x69), Register(0x64)], resolved: None }
0b 69 64 
# inline_RpnCalc_handle_mul32_32_14_t7 <- inline_RpnCalc_handle_mul32_32_14_a_hi U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }", "Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })", "Ident(\"a_hi\")", "Ident(\"a_hi\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t7 <- inline_RpnCalc_handle_mul32_32_14_a_hi U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] }))\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] })\", \"Ident(\\\"a_hi\\\")\", \"Ident(\\\"a_hi\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_t8 <- inline_RpnCalc_handle_mul32_32_14_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }", "Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t8 <- inline_RpnCalc_handle_mul32_32_14_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] }))\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_a <- inline_RpnCalc_handle_mul32_32_14_t7 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }", "Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_a <- inline_RpnCalc_handle_mul32_32_14_t7 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] }))\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_b <- inline_RpnCalc_handle_mul32_32_14_t8 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }", "Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_b <- inline_RpnCalc_handle_mul32_32_14_t8 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] }))\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t0 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t0 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t1 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t1 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t0 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t1
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))"] }
# 00c57 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t0 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0x40), Register(0x44), Register(0x50)], resolved: None }
11 40 44 50 
# 00c5b Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t0 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x52), Constant8(0x00=0)], resolved: None }
04 52 00 
# 00c5e Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t0 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x53), Constant8(0x00=0)], resolved: None }
04 53 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t3 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 00c61 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t3 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x41), Register(0x68)], resolved: None }
0b 41 68 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t2 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t3 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 00c64 Instruction { source: "Zero-pad for inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t2 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x54), Constant32(0x00000000=0)], resolved: None }
20 54 00 00 00 00 
# 00c6a Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t2 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x68), Register(0x54)], resolved: None }
0b 68 54 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t5 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 00c6d Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t5 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x45), Register(0x69)], resolved: None }
0b 45 69 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t4 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t5 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 00c70 Instruction { source: "Zero-pad for inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t4 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t5 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x58), Constant32(0x00000000=0)], resolved: None }
20 58 00 00 00 00 
# 00c76 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t4 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t5 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x69), Register(0x58)], resolved: None }
0b 69 58 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_f <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t2 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t4
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 00c79 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_f <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t2 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0x54), Register(0x58), Register(0x54)], resolved: None }
11 54 58 54 
# 00c7d Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_f <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t2 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x56), Constant8(0x00=0)], resolved: None }
04 56 00 
# 00c80 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_f <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t2 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x57), Constant8(0x00=0)], resolved: None }
04 57 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t6 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_f[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }", "Index(\"f\", Number(U8, 1))", "Index(\"f\", Number(U8, 1))"] }
# 00c83 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t6 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_f[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\", \"Index(\\\"f\\\", Number(U8, 1))\", \"Index(\\\"f\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x55), Register(0x61)], resolved: None }
0b 55 61 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t6 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }"] }
# 00c86 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t6 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x61), Register(0x57)], resolved: None }
0b 61 57 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t7 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_f[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }", "Index(\"f\", Number(U8, 0))", "Index(\"f\", Number(U8, 0))"] }
# 00c89 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t7 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_f[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\", \"Index(\\\"f\\\", Number(U8, 0))\", \"Index(\\\"f\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x54), Register(0x61)], resolved: None }
0b 54 61 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t7 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }"] }
# 00c8c Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t7 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x61), Register(0x56)], resolved: None }
0b 61 56 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t8 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00c8f Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t8 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x6a), Constant8(0x00=0)], resolved: None }
04 6a 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t8 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }"] }
# 00c92 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t8 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x6a), Register(0x55)], resolved: None }
0b 6a 55 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t9 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00c95 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t9 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x6a), Constant8(0x00=0)], resolved: None }
04 6a 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t9 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 00c98 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t9 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x6a), Register(0x54)], resolved: None }
0b 6a 54 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t10 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t10 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t11 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_f U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"f\")", "Ident(\"f\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t11 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_f U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"f\\\")\", \"Ident(\\\"f\\\")\"] }", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t10 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t11
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))"] }
# 00c9b Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t10 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00c9c Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t10 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x50), Register(0x54), Register(0x50)], resolved: None }
30 50 54 50 
# 00ca0 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t10 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t12 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t12 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t14 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 00ca1 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t14 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x45), Register(0x69)], resolved: None }
0b 45 69 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t13 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t14 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 00ca4 Instruction { source: "Zero-pad for inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t13 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t14 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x54), Constant32(0x00000000=0)], resolved: None }
20 54 00 00 00 00 
# 00caa Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t13 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t14 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x69), Register(0x54)], resolved: None }
0b 69 54 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t12 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t13
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 00cad Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t12 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0x40), Register(0x54), Register(0x54)], resolved: None }
11 40 54 54 
# 00cb1 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t12 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x56), Constant8(0x00=0)], resolved: None }
04 56 00 
# 00cb4 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t12 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x57), Constant8(0x00=0)], resolved: None }
04 57 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t16 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 00cb7 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t16 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x41), Register(0x68)], resolved: None }
0b 41 68 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t15 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t16 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 00cba Instruction { source: "Zero-pad for inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t15 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t16 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x40), Constant32(0x00000000=0)], resolved: None }
20 40 00 00 00 00 
# 00cc0 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t15 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t16 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x68), Register(0x40)], resolved: None }
0b 68 40 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t17 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t17 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_e <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t15 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t17
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))"] }
# 00cc3 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_e <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t15 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0x40), Register(0x44), Register(0x40)], resolved: None }
11 40 44 40 
# 00cc7 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_e <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t15 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x42), Constant8(0x00=0)], resolved: None }
04 42 00 
# 00cca Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_e <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t15 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x43), Constant8(0x00=0)], resolved: None }
04 43 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t18 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 00ccd Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t18 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0x54), Register(0x44)], resolved: None }
21 54 44 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t19 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_e U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"e\")", "Ident(\"e\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t19 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_e U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"e\\\")\", \"Ident(\\\"e\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t18 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t19
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))"] }
# 00cd0 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t18 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00cd1 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t18 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x44), Register(0x40), Register(0x54)], resolved: None }
30 44 40 54 
# 00cd5 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t18 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t20 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }", "Index(\"d\", Number(U8, 2))", "Index(\"d\", Number(U8, 2))"] }
# 00cd6 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t20 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\", \"Index(\\\"d\\\", Number(U8, 2))\", \"Index(\\\"d\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x56), Register(0x68)], resolved: None }
0b 56 68 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t20 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }"] }
# 00cd9 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t20 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\"] }", opcode: Copy8, args: [Register(0x68), Register(0x57)], resolved: None }
0b 68 57 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t21 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }", "Index(\"d\", Number(U8, 1))", "Index(\"d\", Number(U8, 1))"] }
# 00cdc Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t21 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\", \"Index(\\\"d\\\", Number(U8, 1))\", \"Index(\\\"d\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x55), Register(0x68)], resolved: None }
0b 55 68 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t21 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }"] }
# 00cdf Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t21 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x68), Register(0x56)], resolved: None }
0b 68 56 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t22 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }", "Index(\"d\", Number(U8, 0))", "Index(\"d\", Number(U8, 0))"] }
# 00ce2 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t22 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\", \"Index(\\\"d\\\", Number(U8, 0))\", \"Index(\\\"d\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x54), Register(0x68)], resolved: None }
0b 54 68 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t22 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }"] }
# 00ce5 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t22 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x68), Register(0x55)], resolved: None }
0b 68 55 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t23 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00ce8 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t23 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x68), Constant8(0x00=0)], resolved: None }
04 68 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t23 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 00ceb Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t23 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x68), Register(0x54)], resolved: None }
0b 68 54 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t25 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_c U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# 00cee Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t25 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_c U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x50), Register(0x40)], resolved: None }
21 50 40 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t26 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 00cf1 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t26 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_d U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0x54), Register(0x44)], resolved: None }
21 54 44 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t24 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t25 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t26
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))"] }
# 00cf4 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t24 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t25 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00cf5 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t24 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t25 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x40), Register(0x44), Register(0x40)], resolved: None }
30 40 44 40 
# 00cf9 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t24 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t25 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_mul32_32_14_t6 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t24 U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# 00cfa Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t6 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_t24 U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: Copy32, args: [Register(0x40), Register(0x54)], resolved: None }
21 40 54 
# goto inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_function_end_mul16_32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_function_end_mul16_32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_function_end_mul16_32)], resolved: None }
# :inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_function_end_mul16_32
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_8_function_end_mul16_32
# inline_RpnCalc_handle_mul32_32_14_t10 <- inline_RpnCalc_handle_mul32_32_14_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }", "Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t10 <- inline_RpnCalc_handle_mul32_32_14_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] }))\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_t11 <- inline_RpnCalc_handle_mul32_32_14_b_hi U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }", "Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })", "Ident(\"b_hi\")", "Ident(\"b_hi\")"] }
# 00cfd Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t11 <- inline_RpnCalc_handle_mul32_32_14_b_hi U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] }))\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })\", \"Ident(\\\"b_hi\\\")\", \"Ident(\\\"b_hi\\\")\"] }", opcode: Copy32, args: [Register(0x64), Register(0x40)], resolved: None }
21 64 40 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_a <- inline_RpnCalc_handle_mul32_32_14_t10 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }", "Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_a <- inline_RpnCalc_handle_mul32_32_14_t10 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] }))\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_b <- inline_RpnCalc_handle_mul32_32_14_t11 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }", "Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_b <- inline_RpnCalc_handle_mul32_32_14_t11 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] }))\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t0 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t0 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t1 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t1 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t0 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t1
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))"] }
# 00d00 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t0 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0x3c), Register(0x40), Register(0x44)], resolved: None }
11 3c 40 44 
# 00d04 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t0 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x46), Constant8(0x00=0)], resolved: None }
04 46 00 
# 00d07 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t0 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x47), Constant8(0x00=0)], resolved: None }
04 47 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t3 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 00d0a Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t3 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x3d), Register(0x49)], resolved: None }
0b 3d 49 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t2 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t3 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 00d0d Instruction { source: "Zero-pad for inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t2 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x64), Constant32(0x00000000=0)], resolved: None }
20 64 00 00 00 00 
# 00d13 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t2 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x49), Register(0x64)], resolved: None }
0b 49 64 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t5 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 00d16 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t5 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x41), Register(0x68)], resolved: None }
0b 41 68 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t4 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t5 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 00d19 Instruction { source: "Zero-pad for inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t4 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t5 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x50), Constant32(0x00000000=0)], resolved: None }
20 50 00 00 00 00 
# 00d1f Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t4 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t5 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x68), Register(0x50)], resolved: None }
0b 68 50 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_f <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t2 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t4
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 00d22 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_f <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t2 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0x64), Register(0x50), Register(0x64)], resolved: None }
11 64 50 64 
# 00d26 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_f <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t2 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x66), Constant8(0x00=0)], resolved: None }
04 66 00 
# 00d29 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_f <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t2 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x67), Constant8(0x00=0)], resolved: None }
04 67 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t6 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_f[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }", "Index(\"f\", Number(U8, 1))", "Index(\"f\", Number(U8, 1))"] }
# 00d2c Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t6 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_f[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\", \"Index(\\\"f\\\", Number(U8, 1))\", \"Index(\\\"f\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x65), Register(0x48)], resolved: None }
0b 65 48 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t6 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }"] }
# 00d2f Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t6 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x48), Register(0x67)], resolved: None }
0b 48 67 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t7 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_f[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }", "Index(\"f\", Number(U8, 0))", "Index(\"f\", Number(U8, 0))"] }
# 00d32 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t7 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_f[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\", \"Index(\\\"f\\\", Number(U8, 0))\", \"Index(\\\"f\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x64), Register(0x48)], resolved: None }
0b 64 48 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t7 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }"] }
# 00d35 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t7 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x48), Register(0x66)], resolved: None }
0b 48 66 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t8 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00d38 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t8 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x60), Constant8(0x00=0)], resolved: None }
04 60 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t8 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }"] }
# 00d3b Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t8 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x60), Register(0x65)], resolved: None }
0b 60 65 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t9 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00d3e Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t9 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x60), Constant8(0x00=0)], resolved: None }
04 60 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t9 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 00d41 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t9 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x60), Register(0x64)], resolved: None }
0b 60 64 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t10 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t10 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t11 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_f U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"f\")", "Ident(\"f\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t11 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_f U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"f\\\")\", \"Ident(\\\"f\\\")\"] }", opcode: Copy32, args: [Register(0x64), Register(0x64)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t10 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t11
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))"] }
# 00d44 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t10 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00d45 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t10 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x44), Register(0x64), Register(0x44)], resolved: None }
30 44 64 44 
# 00d49 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_c <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t10 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t12 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t12 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t14 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 00d4a Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t14 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x41), Register(0x68)], resolved: None }
0b 41 68 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t13 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t14 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 00d4d Instruction { source: "Zero-pad for inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t13 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t14 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x64), Constant32(0x00000000=0)], resolved: None }
20 64 00 00 00 00 
# 00d53 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t13 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t14 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x68), Register(0x64)], resolved: None }
0b 68 64 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t12 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t13
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 00d56 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t12 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0x3c), Register(0x64), Register(0x64)], resolved: None }
11 3c 64 64 
# 00d5a Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t12 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x66), Constant8(0x00=0)], resolved: None }
04 66 00 
# 00d5d Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t12 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x67), Constant8(0x00=0)], resolved: None }
04 67 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t16 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 00d60 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t16 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x3d), Register(0x49)], resolved: None }
0b 3d 49 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t15 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t16 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 00d63 Instruction { source: "Zero-pad for inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t15 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t16 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x3c), Constant32(0x00000000=0)], resolved: None }
20 3c 00 00 00 00 
# 00d69 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t15 U32 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t16 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x49), Register(0x3c)], resolved: None }
0b 49 3c 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t17 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t17 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_e <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t15 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t17
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))"] }
# 00d6c Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_e <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t15 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0x3c), Register(0x40), Register(0x3c)], resolved: None }
11 3c 40 3c 
# 00d70 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_e <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t15 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x3e), Constant8(0x00=0)], resolved: None }
04 3e 00 
# 00d73 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_e <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t15 Multiply inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x3f), Constant8(0x00=0)], resolved: None }
04 3f 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t18 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 00d76 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t18 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0x64), Register(0x40)], resolved: None }
21 64 40 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t19 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_e U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"e\")", "Ident(\"e\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t19 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_e U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"e\\\")\", \"Ident(\\\"e\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t18 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t19
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))"] }
# 00d79 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t18 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00d7a Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t18 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x40), Register(0x3c), Register(0x64)], resolved: None }
30 40 3c 64 
# 00d7e Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t18 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t20 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }", "Index(\"d\", Number(U8, 2))", "Index(\"d\", Number(U8, 2))"] }
# 00d7f Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t20 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\", \"Index(\\\"d\\\", Number(U8, 2))\", \"Index(\\\"d\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x66), Register(0x49)], resolved: None }
0b 66 49 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t20 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }"] }
# 00d82 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t20 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\"] }", opcode: Copy8, args: [Register(0x49), Register(0x67)], resolved: None }
0b 49 67 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t21 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }", "Index(\"d\", Number(U8, 1))", "Index(\"d\", Number(U8, 1))"] }
# 00d85 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t21 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\", \"Index(\\\"d\\\", Number(U8, 1))\", \"Index(\\\"d\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x65), Register(0x49)], resolved: None }
0b 65 49 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t21 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }"] }
# 00d88 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t21 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x49), Register(0x66)], resolved: None }
0b 49 66 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t22 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }", "Index(\"d\", Number(U8, 0))", "Index(\"d\", Number(U8, 0))"] }
# 00d8b Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t22 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\", \"Index(\\\"d\\\", Number(U8, 0))\", \"Index(\\\"d\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x64), Register(0x49)], resolved: None }
0b 64 49 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t22 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }"] }
# 00d8e Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t22 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x49), Register(0x65)], resolved: None }
0b 49 65 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t23 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00d91 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t23 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x49), Constant8(0x00=0)], resolved: None }
04 49 00 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t23 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 00d94 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t23 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x49), Register(0x64)], resolved: None }
0b 49 64 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t25 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_c U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# 00d97 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t25 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_c U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x3c)], resolved: None }
21 44 3c 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t26 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 00d9a Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t26 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_d U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0x64), Register(0x40)], resolved: None }
21 64 40 
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t24 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t25 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t26
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))"] }
# 00d9d Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t24 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t25 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00d9e Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t24 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t25 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x3c), Register(0x40), Register(0x3c)], resolved: None }
30 3c 40 3c 
# 00da2 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t24 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t25 Add inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_mul32_32_14_t9 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t24 U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t9 <- inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_t24 U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# goto inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_function_end_mul16_32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_function_end_mul16_32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_function_end_mul16_32)], resolved: None }
# :inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_function_end_mul16_32
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_mul32_32_14_inline_mul32_32_mul16_32_9_function_end_mul16_32
# inline_RpnCalc_handle_mul32_32_14_d <- inline_RpnCalc_handle_mul32_32_14_t6 Add inline_RpnCalc_handle_mul32_32_14_t9
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }", "Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))"] }
# 00da3 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_d <- inline_RpnCalc_handle_mul32_32_14_t6 Add inline_RpnCalc_handle_mul32_32_14_t9\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] }))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00da4 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_d <- inline_RpnCalc_handle_mul32_32_14_t6 Add inline_RpnCalc_handle_mul32_32_14_t9\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] }))\"] }", opcode: AddCarry32_1, args: [Register(0x54), Register(0x3c), Register(0x3c)], resolved: None }
30 54 3c 3c 
# 00da8 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_d <- inline_RpnCalc_handle_mul32_32_14_t6 Add inline_RpnCalc_handle_mul32_32_14_t9\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }), Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] }))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_mul32_32_14_t12 <- inline_RpnCalc_handle_mul32_32_14_d[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 1)) }", "Index(\"d\", Number(U8, 1))", "Index(\"d\", Number(U8, 1))"] }
# 00da9 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t12 <- inline_RpnCalc_handle_mul32_32_14_d[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\", \"Index(\\\"d\\\", Number(U8, 1))\", \"Index(\\\"d\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x3d), Register(0x49)], resolved: None }
0b 3d 49 
# inline_RpnCalc_handle_mul32_32_14_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_14_t12 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 1)) }"] }
# 00dac Instruction { source: "inline_RpnCalc_handle_mul32_32_14_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_14_t12 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x49), Register(0x3f)], resolved: None }
0b 49 3f 
# inline_RpnCalc_handle_mul32_32_14_t13 <- inline_RpnCalc_handle_mul32_32_14_d[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 0)) }", "Index(\"d\", Number(U8, 0))", "Index(\"d\", Number(U8, 0))"] }
# 00daf Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t13 <- inline_RpnCalc_handle_mul32_32_14_d[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\", \"Index(\\\"d\\\", Number(U8, 0))\", \"Index(\\\"d\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x3c), Register(0x49)], resolved: None }
0b 3c 49 
# inline_RpnCalc_handle_mul32_32_14_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_14_t13 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 0)) }"] }
# 00db2 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_14_t13 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x49), Register(0x3e)], resolved: None }
0b 49 3e 
# inline_RpnCalc_handle_mul32_32_14_t14 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00db5 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t14 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x68), Constant8(0x00=0)], resolved: None }
04 68 00 
# inline_RpnCalc_handle_mul32_32_14_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_14_t14 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }"] }
# 00db8 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_14_t14 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x68), Register(0x3d)], resolved: None }
0b 68 3d 
# inline_RpnCalc_handle_mul32_32_14_t15 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 00dbb Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t15 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x68), Constant8(0x00=0)], resolved: None }
04 68 00 
# inline_RpnCalc_handle_mul32_32_14_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_14_t15 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 00dbe Instruction { source: "inline_RpnCalc_handle_mul32_32_14_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_14_t15 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x68), Register(0x3c)], resolved: None }
0b 68 3c 
# inline_RpnCalc_handle_mul32_32_14_t17 <- inline_RpnCalc_handle_mul32_32_14_c U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# 00dc1 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t17 <- inline_RpnCalc_handle_mul32_32_14_c U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x40)], resolved: None }
21 4c 40 
# inline_RpnCalc_handle_mul32_32_14_t18 <- inline_RpnCalc_handle_mul32_32_14_d U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t18 <- inline_RpnCalc_handle_mul32_32_14_d U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_14_t16 <- inline_RpnCalc_handle_mul32_32_14_t17 Add inline_RpnCalc_handle_mul32_32_14_t18
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))"] }
# 00dc4 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t16 <- inline_RpnCalc_handle_mul32_32_14_t17 Add inline_RpnCalc_handle_mul32_32_14_t18\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00dc5 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t16 <- inline_RpnCalc_handle_mul32_32_14_t17 Add inline_RpnCalc_handle_mul32_32_14_t18\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x40), Register(0x3c), Register(0x3c)], resolved: None }
30 40 3c 3c 
# 00dc9 Instruction { source: "inline_RpnCalc_handle_mul32_32_14_t16 <- inline_RpnCalc_handle_mul32_32_14_t17 Add inline_RpnCalc_handle_mul32_32_14_t18\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# product <- inline_RpnCalc_handle_mul32_32_14_t16 U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# 00dca Instruction { source: "product <- inline_RpnCalc_handle_mul32_32_14_t16 U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x40)], resolved: None }
21 3c 40 
# goto inline_RpnCalc_handle_mul32_32_14_function_end_mul32_32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_mul32_32_14_function_end_mul32_32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_mul32_32_14_function_end_mul32_32)], resolved: None }
# :inline_RpnCalc_handle_mul32_32_14_function_end_mul32_32
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_mul32_32_14_function_end_mul32_32
# t62 <- product U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"product\")] }) }", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"product\")] })", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"product\")] })", "Ident(\"product\")", "Ident(\"product\")"] }
# 00dcd Instruction { source: "t62 <- product U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Ident(\\\"product\\\")\", \"Ident(\\\"product\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x3c)], resolved: None }
21 40 3c 
# None <= call print_dec32(t62,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"product\")] }) }", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"product\")] })", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"product\")] })"] }
# 00dd0 Instruction { source: "Arg0[a]=t62 None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x00)], resolved: None }
21 3c 00 
# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 124, 125, 126, 127, 128, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 216, 217, 233, 234, 235, 236, 240, 241, 242, 243, 244, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: [72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113]
# 00dd3 Instruction { source: "Saving reg0x71 before None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x71)], resolved: None }
09 71 
# 00dd5 Instruction { source: "Saving reg0x70 before None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x70)], resolved: None }
09 70 
# 00dd7 Instruction { source: "Saving reg0x6f before None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x6f)], resolved: None }
09 6f 
# 00dd9 Instruction { source: "Saving reg0x6e before None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x6e)], resolved: None }
09 6e 
# 00ddb Instruction { source: "Saving reg0x6d before None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x6d)], resolved: None }
09 6d 
# 00ddd Instruction { source: "Saving reg0x6c before None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x6c)], resolved: None }
09 6c 
# 00ddf Instruction { source: "Saving reg0x6a before None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x6a)], resolved: None }
09 6a 
# 00de1 Instruction { source: "Saving reg0x69 before None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x69)], resolved: None }
09 69 
# 00de3 Instruction { source: "Saving reg0x68 before None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x68)], resolved: None }
09 68 
# 00de5 Instruction { source: "Saving reg0x67 before None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x67)], resolved: None }
09 67 
# 00de7 Instruction { source: "Saving reg0x66 before None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x66)], resolved: None }
09 66 
# 00de9 Instruction { source: "Saving reg0x65 before None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x65)], resolved: None }
09 65 
# 00deb Instruction { source: "Saving reg0x64 before None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x64)], resolved: None }
09 64 
# 00ded Instruction { source: "Saving reg0x61 before None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x61)], resolved: None }
09 61 
# 00def Instruction { source: "Saving reg0x60 before None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x60)], resolved: None }
09 60 
# 00df1 Instruction { source: "Saving reg0x5f before None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x5f)], resolved: None }
09 5f 
# 00df3 Instruction { source: "Saving reg0x5e before None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x5e)], resolved: None }
09 5e 
# 00df5 Instruction { source: "Saving reg0x5d before None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x5d)], resolved: None }
09 5d 
# 00df7 Instruction { source: "Saving reg0x5c before None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x5c)], resolved: None }
09 5c 
# 00df9 Instruction { source: "Saving reg0x5b before None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x5b)], resolved: None }
09 5b 
# 00dfb Instruction { source: "Saving reg0x5a before None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x5a)], resolved: None }
09 5a 
# 00dfd Instruction { source: "Saving reg0x59 before None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x59)], resolved: None }
09 59 
# 00dff Instruction { source: "Saving reg0x58 before None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x58)], resolved: None }
09 58 
# 00e01 Instruction { source: "Saving reg0x57 before None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x57)], resolved: None }
09 57 
# 00e03 Instruction { source: "Saving reg0x56 before None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x56)], resolved: None }
09 56 
# 00e05 Instruction { source: "Saving reg0x55 before None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x55)], resolved: None }
09 55 
# 00e07 Instruction { source: "Saving reg0x54 before None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x54)], resolved: None }
09 54 
# 00e09 Instruction { source: "Saving reg0x53 before None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x53)], resolved: None }
09 53 
# 00e0b Instruction { source: "Saving reg0x52 before None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x52)], resolved: None }
09 52 
# 00e0d Instruction { source: "Saving reg0x51 before None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x51)], resolved: None }
09 51 
# 00e0f Instruction { source: "Saving reg0x50 before None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x50)], resolved: None }
09 50 
# 00e11 Instruction { source: "Saving reg0x4f before None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x4f)], resolved: None }
09 4f 
# 00e13 Instruction { source: "Saving reg0x4e before None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x4e)], resolved: None }
09 4e 
# 00e15 Instruction { source: "Saving reg0x4d before None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x4d)], resolved: None }
09 4d 
# 00e17 Instruction { source: "Saving reg0x4c before None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x4c)], resolved: None }
09 4c 
# 00e19 Instruction { source: "Saving reg0x49 before None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x49)], resolved: None }
09 49 
# 00e1b Instruction { source: "Saving reg0x48 before None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Push8, args: [Register(0x48)], resolved: None }
09 48 
# 00e1d Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 00e23 Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 2d 0e 00 00 
# 00e29 Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: JmpImm, args: [Label24(:print_dec32)], resolved: None }
70 d5 29 00 
# 00e2d Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 00e33 Instruction { source: "Restoring reg0x48 after None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x48)], resolved: None }
0a 48 
# 00e35 Instruction { source: "Restoring reg0x49 after None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x49)], resolved: None }
0a 49 
# 00e37 Instruction { source: "Restoring reg0x4c after None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x4c)], resolved: None }
0a 4c 
# 00e39 Instruction { source: "Restoring reg0x4d after None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x4d)], resolved: None }
0a 4d 
# 00e3b Instruction { source: "Restoring reg0x4e after None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x4e)], resolved: None }
0a 4e 
# 00e3d Instruction { source: "Restoring reg0x4f after None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x4f)], resolved: None }
0a 4f 
# 00e3f Instruction { source: "Restoring reg0x50 after None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x50)], resolved: None }
0a 50 
# 00e41 Instruction { source: "Restoring reg0x51 after None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x51)], resolved: None }
0a 51 
# 00e43 Instruction { source: "Restoring reg0x52 after None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x52)], resolved: None }
0a 52 
# 00e45 Instruction { source: "Restoring reg0x53 after None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x53)], resolved: None }
0a 53 
# 00e47 Instruction { source: "Restoring reg0x54 after None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x54)], resolved: None }
0a 54 
# 00e49 Instruction { source: "Restoring reg0x55 after None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x55)], resolved: None }
0a 55 
# 00e4b Instruction { source: "Restoring reg0x56 after None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x56)], resolved: None }
0a 56 
# 00e4d Instruction { source: "Restoring reg0x57 after None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x57)], resolved: None }
0a 57 
# 00e4f Instruction { source: "Restoring reg0x58 after None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x58)], resolved: None }
0a 58 
# 00e51 Instruction { source: "Restoring reg0x59 after None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x59)], resolved: None }
0a 59 
# 00e53 Instruction { source: "Restoring reg0x5a after None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x5a)], resolved: None }
0a 5a 
# 00e55 Instruction { source: "Restoring reg0x5b after None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x5b)], resolved: None }
0a 5b 
# 00e57 Instruction { source: "Restoring reg0x5c after None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x5c)], resolved: None }
0a 5c 
# 00e59 Instruction { source: "Restoring reg0x5d after None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x5d)], resolved: None }
0a 5d 
# 00e5b Instruction { source: "Restoring reg0x5e after None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x5e)], resolved: None }
0a 5e 
# 00e5d Instruction { source: "Restoring reg0x5f after None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x5f)], resolved: None }
0a 5f 
# 00e5f Instruction { source: "Restoring reg0x60 after None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x60)], resolved: None }
0a 60 
# 00e61 Instruction { source: "Restoring reg0x61 after None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x61)], resolved: None }
0a 61 
# 00e63 Instruction { source: "Restoring reg0x64 after None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x64)], resolved: None }
0a 64 
# 00e65 Instruction { source: "Restoring reg0x65 after None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x65)], resolved: None }
0a 65 
# 00e67 Instruction { source: "Restoring reg0x66 after None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x66)], resolved: None }
0a 66 
# 00e69 Instruction { source: "Restoring reg0x67 after None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x67)], resolved: None }
0a 67 
# 00e6b Instruction { source: "Restoring reg0x68 after None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x68)], resolved: None }
0a 68 
# 00e6d Instruction { source: "Restoring reg0x69 after None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x69)], resolved: None }
0a 69 
# 00e6f Instruction { source: "Restoring reg0x6a after None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x6a)], resolved: None }
0a 6a 
# 00e71 Instruction { source: "Restoring reg0x6c after None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x6c)], resolved: None }
0a 6c 
# 00e73 Instruction { source: "Restoring reg0x6d after None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x6d)], resolved: None }
0a 6d 
# 00e75 Instruction { source: "Restoring reg0x6e after None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x6e)], resolved: None }
0a 6e 
# 00e77 Instruction { source: "Restoring reg0x6f after None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x6f)], resolved: None }
0a 6f 
# 00e79 Instruction { source: "Restoring reg0x70 after None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x70)], resolved: None }
0a 70 
# 00e7b Instruction { source: "Restoring reg0x71 after None <= call print_dec32(t62,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"product\\\")] })\"] }", opcode: Pop8, args: [Register(0x71)], resolved: None }
0a 71 
# t64 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Number(U8, 10)", "Number(U8, 10)"] }
# 00e7d Instruction { source: "t64 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x49), Constant8(0x0a=10)], resolved: None }
04 49 0a 
# inline_RpnCalc_handle_putc_23_c <- t64 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_23_c <- t64 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\"] }", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# inline_RpnCalc_handle_putc_23_t1 <- inline_RpnCalc_handle_putc_23_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_23_t1 <- inline_RpnCalc_handle_putc_23_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_23_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 00e80 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x49)], resolved: None }
68 49 
# inline_RpnCalc_handle_putc_23_t3 <- inline_RpnCalc_handle_putc_23_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_23_t3 <- inline_RpnCalc_handle_putc_23_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# None <= call lcd_write_char(inline_RpnCalc_handle_putc_23_t3,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })"] }
# 00e82 Instruction { source: "Arg0[ch]=inline_RpnCalc_handle_putc_23_t3 None <= call lcd_write_char(inline_RpnCalc_handle_putc_23_t3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy8, args: [Register(0x49), Register(0x00)], resolved: None }
0b 49 00 
# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 152, 153, 154, 155, 156, 157, 158, 159, 217, 233, 234, 235, 236, 240, 241, 242, 243, 244, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 00e85 Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 00e8b Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 95 0e 00 00 
# 00e91 Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: JmpImm, args: [Label24(:lcd_write_char)], resolved: None }
70 1a 22 00 
# 00e95 Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# goto inline_RpnCalc_handle_putc_23_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_23_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_23_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_23_function_end_putc
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_putc_23_function_end_putc
# t66 <- stack U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] })", "Ident(\"stack\")", "Ident(\"stack\")"] }
# 00e9b Instruction { source: "t66 <- stack U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] })\", \"Ident(\\\"stack\\\")\", \"Ident(\\\"stack\\\")\"] }", opcode: Copy32, args: [Register(0x6c), Register(0x3c)], resolved: None }
21 6c 3c 
# t67 <- product U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] })", "Ident(\"product\")", "Ident(\"product\")"] }
# 00e9e Instruction { source: "t67 <- product U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] })\", \"Ident(\\\"product\\\")\", \"Ident(\\\"product\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x44)], resolved: None }
21 40 44 
# inline_RpnCalc_handle_stack_push_58_s <- t66 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] })"] }
# 00ea1 Instruction { source: "inline_RpnCalc_handle_stack_push_58_s <- t66 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] })\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x40)], resolved: None }
21 3c 40 
# inline_RpnCalc_handle_stack_push_58_n <- t67 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] })"] }
# 00ea4 Instruction { source: "inline_RpnCalc_handle_stack_push_58_n <- t67 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"product\\\")] })\"] }", opcode: Copy32, args: [Register(0x44), Register(0x3c)], resolved: None }
21 44 3c 
# inline_RpnCalc_handle_stack_push_58_t0 <- inline_RpnCalc_handle_stack_push_58_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_58_t0 <- inline_RpnCalc_handle_stack_push_58_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_58_values <- inline_RpnCalc_handle_stack_push_58_t0 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# 00ea7 Instruction { source: "inline_RpnCalc_handle_stack_push_58_values <- inline_RpnCalc_handle_stack_push_58_t0 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0x40), Register(0x44)], resolved: None }
21 40 44 
# inline_RpnCalc_handle_stack_push_58_t2 <- inline_RpnCalc_handle_stack_push_58_values U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_58_t2 <- inline_RpnCalc_handle_stack_push_58_values U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_stack_push_58_t6 <- inline_RpnCalc_handle_stack_push_58_s U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_58_t6 <- inline_RpnCalc_handle_stack_push_58_s U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_58_t7 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 00eaa Instruction { source: "inline_RpnCalc_handle_stack_push_58_t7 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x64), Constant32(0x00000040=64)], resolved: None }
20 64 40 00 00 00 
# inline_RpnCalc_handle_stack_push_58_t5 <- inline_RpnCalc_handle_stack_push_58_t6 Add inline_RpnCalc_handle_stack_push_58_t7
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 00eb0 Instruction { source: "inline_RpnCalc_handle_stack_push_58_t5 <- inline_RpnCalc_handle_stack_push_58_t6 Add inline_RpnCalc_handle_stack_push_58_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00eb1 Instruction { source: "inline_RpnCalc_handle_stack_push_58_t5 <- inline_RpnCalc_handle_stack_push_58_t6 Add inline_RpnCalc_handle_stack_push_58_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x40), Register(0x64), Register(0x64)], resolved: None }
30 40 64 64 
# 00eb5 Instruction { source: "inline_RpnCalc_handle_stack_push_58_t5 <- inline_RpnCalc_handle_stack_push_58_t6 Add inline_RpnCalc_handle_stack_push_58_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_58_t4 <- mem[inline_RpnCalc_handle_stack_push_58_t5] U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 00eb6 Instruction { source: "inline_RpnCalc_handle_stack_push_58_t4 <- mem[inline_RpnCalc_handle_stack_push_58_t5] U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x64), Register(0x64)], resolved: None }
22 64 64 
# inline_RpnCalc_handle_stack_push_58_t3 <- inline_RpnCalc_handle_stack_push_58_t4 Add inline_RpnCalc_handle_stack_push_58_t4
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 00eb9 Instruction { source: "inline_RpnCalc_handle_stack_push_58_t3 <- inline_RpnCalc_handle_stack_push_58_t4 Add inline_RpnCalc_handle_stack_push_58_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00eba Instruction { source: "inline_RpnCalc_handle_stack_push_58_t3 <- inline_RpnCalc_handle_stack_push_58_t4 Add inline_RpnCalc_handle_stack_push_58_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_1, args: [Register(0x64), Register(0x64), Register(0x64)], resolved: None }
30 64 64 64 
# 00ebe Instruction { source: "inline_RpnCalc_handle_stack_push_58_t3 <- inline_RpnCalc_handle_stack_push_58_t4 Add inline_RpnCalc_handle_stack_push_58_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_58_t3 <- inline_RpnCalc_handle_stack_push_58_t3 Add inline_RpnCalc_handle_stack_push_58_t3
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))"] }
# 00ebf Instruction { source: "inline_RpnCalc_handle_stack_push_58_t3 <- inline_RpnCalc_handle_stack_push_58_t3 Add inline_RpnCalc_handle_stack_push_58_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00ec0 Instruction { source: "inline_RpnCalc_handle_stack_push_58_t3 <- inline_RpnCalc_handle_stack_push_58_t3 Add inline_RpnCalc_handle_stack_push_58_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x64), Register(0x64), Register(0x64)], resolved: None }
30 64 64 64 
# 00ec4 Instruction { source: "inline_RpnCalc_handle_stack_push_58_t3 <- inline_RpnCalc_handle_stack_push_58_t3 Add inline_RpnCalc_handle_stack_push_58_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_58_t1 <- inline_RpnCalc_handle_stack_push_58_t2 Add inline_RpnCalc_handle_stack_push_58_t3
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))"] }
# 00ec5 Instruction { source: "inline_RpnCalc_handle_stack_push_58_t1 <- inline_RpnCalc_handle_stack_push_58_t2 Add inline_RpnCalc_handle_stack_push_58_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00ec6 Instruction { source: "inline_RpnCalc_handle_stack_push_58_t1 <- inline_RpnCalc_handle_stack_push_58_t2 Add inline_RpnCalc_handle_stack_push_58_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_1, args: [Register(0x44), Register(0x64), Register(0x44)], resolved: None }
30 44 64 44 
# 00eca Instruction { source: "inline_RpnCalc_handle_stack_push_58_t1 <- inline_RpnCalc_handle_stack_push_58_t2 Add inline_RpnCalc_handle_stack_push_58_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_58_t9 <- inline_RpnCalc_handle_stack_push_58_n U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_58_t9 <- inline_RpnCalc_handle_stack_push_58_n U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# mem[inline_RpnCalc_handle_stack_push_58_t1] <- inline_RpnCalc_handle_stack_push_58_t9 U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }"] }
# 00ecb Instruction { source: "mem[inline_RpnCalc_handle_stack_push_58_t1] <- inline_RpnCalc_handle_stack_push_58_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_1, args: [Register(0x3c), Register(0x44)], resolved: None }
23 3c 44 
# 00ece Instruction { source: "mem[inline_RpnCalc_handle_stack_push_58_t1] <- inline_RpnCalc_handle_stack_push_58_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_RpnCalc_handle_stack_push_58_t11 <- inline_RpnCalc_handle_stack_push_58_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# 00ecf Instruction { source: "inline_RpnCalc_handle_stack_push_58_t11 <- inline_RpnCalc_handle_stack_push_58_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x3c)], resolved: None }
21 40 3c 
# inline_RpnCalc_handle_stack_push_58_t12 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 00ed2 Instruction { source: "inline_RpnCalc_handle_stack_push_58_t12 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x44), Constant32(0x00000040=64)], resolved: None }
20 44 40 00 00 00 
# inline_RpnCalc_handle_stack_push_58_t10 <- inline_RpnCalc_handle_stack_push_58_t11 Add inline_RpnCalc_handle_stack_push_58_t12
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 00ed8 Instruction { source: "inline_RpnCalc_handle_stack_push_58_t10 <- inline_RpnCalc_handle_stack_push_58_t11 Add inline_RpnCalc_handle_stack_push_58_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00ed9 Instruction { source: "inline_RpnCalc_handle_stack_push_58_t10 <- inline_RpnCalc_handle_stack_push_58_t11 Add inline_RpnCalc_handle_stack_push_58_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x3c), Register(0x44), Register(0x3c)], resolved: None }
30 3c 44 3c 
# 00edd Instruction { source: "inline_RpnCalc_handle_stack_push_58_t10 <- inline_RpnCalc_handle_stack_push_58_t11 Add inline_RpnCalc_handle_stack_push_58_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_58_t16 <- inline_RpnCalc_handle_stack_push_58_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_58_t16 <- inline_RpnCalc_handle_stack_push_58_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_58_t17 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 00ede Instruction { source: "inline_RpnCalc_handle_stack_push_58_t17 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x44), Constant32(0x00000040=64)], resolved: None }
20 44 40 00 00 00 
# inline_RpnCalc_handle_stack_push_58_t15 <- inline_RpnCalc_handle_stack_push_58_t16 Add inline_RpnCalc_handle_stack_push_58_t17
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 00ee4 Instruction { source: "inline_RpnCalc_handle_stack_push_58_t15 <- inline_RpnCalc_handle_stack_push_58_t16 Add inline_RpnCalc_handle_stack_push_58_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00ee5 Instruction { source: "inline_RpnCalc_handle_stack_push_58_t15 <- inline_RpnCalc_handle_stack_push_58_t16 Add inline_RpnCalc_handle_stack_push_58_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x40), Register(0x44), Register(0x40)], resolved: None }
30 40 44 40 
# 00ee9 Instruction { source: "inline_RpnCalc_handle_stack_push_58_t15 <- inline_RpnCalc_handle_stack_push_58_t16 Add inline_RpnCalc_handle_stack_push_58_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_58_t14 <- mem[inline_RpnCalc_handle_stack_push_58_t15] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 00eea Instruction { source: "inline_RpnCalc_handle_stack_push_58_t14 <- mem[inline_RpnCalc_handle_stack_push_58_t15] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x40), Register(0x40)], resolved: None }
22 40 40 
# inline_RpnCalc_handle_stack_push_58_t18 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 00eed Instruction { source: "inline_RpnCalc_handle_stack_push_58_t18 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x44), Constant32(0x00000001=1)], resolved: None }
20 44 01 00 00 00 
# inline_RpnCalc_handle_stack_push_58_t13 <- inline_RpnCalc_handle_stack_push_58_t14 Add inline_RpnCalc_handle_stack_push_58_t18
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))"] }
# 00ef3 Instruction { source: "inline_RpnCalc_handle_stack_push_58_t13 <- inline_RpnCalc_handle_stack_push_58_t14 Add inline_RpnCalc_handle_stack_push_58_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 00ef4 Instruction { source: "inline_RpnCalc_handle_stack_push_58_t13 <- inline_RpnCalc_handle_stack_push_58_t14 Add inline_RpnCalc_handle_stack_push_58_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x40), Register(0x44), Register(0x40)], resolved: None }
30 40 44 40 
# 00ef8 Instruction { source: "inline_RpnCalc_handle_stack_push_58_t13 <- inline_RpnCalc_handle_stack_push_58_t14 Add inline_RpnCalc_handle_stack_push_58_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# mem[inline_RpnCalc_handle_stack_push_58_t10] <- inline_RpnCalc_handle_stack_push_58_t13 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }"] }
# 00ef9 Instruction { source: "mem[inline_RpnCalc_handle_stack_push_58_t10] <- inline_RpnCalc_handle_stack_push_58_t13 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_1, args: [Register(0x40), Register(0x3c)], resolved: None }
23 40 3c 
# 00efc Instruction { source: "mem[inline_RpnCalc_handle_stack_push_58_t10] <- inline_RpnCalc_handle_stack_push_58_t13 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto inline_RpnCalc_handle_stack_push_58_function_end_stack_push
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_push_58_function_end_stack_push\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_push_58_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_stack_push_58_function_end_stack_push
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_stack_push_58_function_end_stack_push
# goto RpnCalc_handle_if_end_23
# 	SourceContext { contexts: [] }
# 00efd Instruction { source: "goto RpnCalc_handle_if_end_23\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_23)], resolved: None }
70 cf 15 00 
# :RpnCalc_handle_if_else_2_29
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_2_29
# t68 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t68 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# t69 <- 0n47/0x2fu8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }", "Number(U8, 47)", "Number(U8, 47)"] }
# 00f01 Instruction { source: "t69 <- 0n47/0x2fu8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }\", \"Number(U8, 47)\", \"Number(U8, 47)\"] }", opcode: LoadImm8, args: [Register(0x71), Constant8(0x2f=47)], resolved: None }
04 71 2f 
# if t68 == t69 then 'RpnCalc_handle_if_true_3_30' else 'RpnCalc_handle_if_else_3_31'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }"] }
# 00f04 Instruction { source: "if t68 == t69 then 'RpnCalc_handle_if_true_3_30' else 'RpnCalc_handle_if_else_3_31'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }\"] }", opcode: Cmp8, args: [Register(0x48), Register(0x71)], resolved: None }
15 48 71 
# 00f07 Instruction { source: "if t68 == t69 then 'RpnCalc_handle_if_true_3_30' else 'RpnCalc_handle_if_else_3_31'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_handle_if_true_3_30)], resolved: None }
72 0f 0f 00 
# 00f0b Instruction { source: "if t68 == t69 then 'RpnCalc_handle_if_true_3_30' else 'RpnCalc_handle_if_else_3_31'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 47) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_3_31)], resolved: None }
70 f6 10 00 
# :RpnCalc_handle_if_true_3_30
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_true_3_30
# t70 <- b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"quotient\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"div32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }", "Call(Call { function: \"div32\", parameters: [Ident(\"b\"), Ident(\"a\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "t70 <- b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# t71 <- a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"quotient\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"div32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }", "Call(Call { function: \"div32\", parameters: [Ident(\"b\"), Ident(\"a\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t71 <- a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# Some(quotient) <= call div32(t70,t71,)
# 	SourceContext { contexts: ["Assign { target: Ident(\"quotient\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"div32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }", "Call(Call { function: \"div32\", parameters: [Ident(\"b\"), Ident(\"a\")] })"] }
# 00f0f Instruction { source: "Arg0[a]=t70 Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Copy32, args: [Register(0x40), Register(0x00)], resolved: None }
21 40 00 
# 00f12 Instruction { source: "Arg1[b]=t71 Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x04)], resolved: None }
21 3c 04 
# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113}
# Registers used by callee tree: {72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 124, 125, 126, 127, 128, 132, 133, 134, 135, 136, 137, 138, 139, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215}
# Registers to save: [72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113]
# 00f15 Instruction { source: "Saving reg0x71 before Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Push8, args: [Register(0x71)], resolved: None }
09 71 
# 00f17 Instruction { source: "Saving reg0x70 before Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Push8, args: [Register(0x70)], resolved: None }
09 70 
# 00f19 Instruction { source: "Saving reg0x6f before Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Push8, args: [Register(0x6f)], resolved: None }
09 6f 
# 00f1b Instruction { source: "Saving reg0x6e before Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Push8, args: [Register(0x6e)], resolved: None }
09 6e 
# 00f1d Instruction { source: "Saving reg0x6d before Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Push8, args: [Register(0x6d)], resolved: None }
09 6d 
# 00f1f Instruction { source: "Saving reg0x6c before Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Push8, args: [Register(0x6c)], resolved: None }
09 6c 
# 00f21 Instruction { source: "Saving reg0x6a before Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Push8, args: [Register(0x6a)], resolved: None }
09 6a 
# 00f23 Instruction { source: "Saving reg0x69 before Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Push8, args: [Register(0x69)], resolved: None }
09 69 
# 00f25 Instruction { source: "Saving reg0x68 before Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Push8, args: [Register(0x68)], resolved: None }
09 68 
# 00f27 Instruction { source: "Saving reg0x67 before Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Push8, args: [Register(0x67)], resolved: None }
09 67 
# 00f29 Instruction { source: "Saving reg0x66 before Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Push8, args: [Register(0x66)], resolved: None }
09 66 
# 00f2b Instruction { source: "Saving reg0x65 before Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Push8, args: [Register(0x65)], resolved: None }
09 65 
# 00f2d Instruction { source: "Saving reg0x64 before Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Push8, args: [Register(0x64)], resolved: None }
09 64 
# 00f2f Instruction { source: "Saving reg0x61 before Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Push8, args: [Register(0x61)], resolved: None }
09 61 
# 00f31 Instruction { source: "Saving reg0x60 before Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Push8, args: [Register(0x60)], resolved: None }
09 60 
# 00f33 Instruction { source: "Saving reg0x5f before Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Push8, args: [Register(0x5f)], resolved: None }
09 5f 
# 00f35 Instruction { source: "Saving reg0x5e before Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Push8, args: [Register(0x5e)], resolved: None }
09 5e 
# 00f37 Instruction { source: "Saving reg0x5d before Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Push8, args: [Register(0x5d)], resolved: None }
09 5d 
# 00f39 Instruction { source: "Saving reg0x5c before Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Push8, args: [Register(0x5c)], resolved: None }
09 5c 
# 00f3b Instruction { source: "Saving reg0x5b before Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Push8, args: [Register(0x5b)], resolved: None }
09 5b 
# 00f3d Instruction { source: "Saving reg0x5a before Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Push8, args: [Register(0x5a)], resolved: None }
09 5a 
# 00f3f Instruction { source: "Saving reg0x59 before Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Push8, args: [Register(0x59)], resolved: None }
09 59 
# 00f41 Instruction { source: "Saving reg0x58 before Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Push8, args: [Register(0x58)], resolved: None }
09 58 
# 00f43 Instruction { source: "Saving reg0x57 before Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Push8, args: [Register(0x57)], resolved: None }
09 57 
# 00f45 Instruction { source: "Saving reg0x56 before Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Push8, args: [Register(0x56)], resolved: None }
09 56 
# 00f47 Instruction { source: "Saving reg0x55 before Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Push8, args: [Register(0x55)], resolved: None }
09 55 
# 00f49 Instruction { source: "Saving reg0x54 before Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Push8, args: [Register(0x54)], resolved: None }
09 54 
# 00f4b Instruction { source: "Saving reg0x53 before Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Push8, args: [Register(0x53)], resolved: None }
09 53 
# 00f4d Instruction { source: "Saving reg0x52 before Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Push8, args: [Register(0x52)], resolved: None }
09 52 
# 00f4f Instruction { source: "Saving reg0x51 before Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Push8, args: [Register(0x51)], resolved: None }
09 51 
# 00f51 Instruction { source: "Saving reg0x50 before Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Push8, args: [Register(0x50)], resolved: None }
09 50 
# 00f53 Instruction { source: "Saving reg0x4f before Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Push8, args: [Register(0x4f)], resolved: None }
09 4f 
# 00f55 Instruction { source: "Saving reg0x4e before Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Push8, args: [Register(0x4e)], resolved: None }
09 4e 
# 00f57 Instruction { source: "Saving reg0x4d before Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Push8, args: [Register(0x4d)], resolved: None }
09 4d 
# 00f59 Instruction { source: "Saving reg0x4c before Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Push8, args: [Register(0x4c)], resolved: None }
09 4c 
# 00f5b Instruction { source: "Saving reg0x49 before Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Push8, args: [Register(0x49)], resolved: None }
09 49 
# 00f5d Instruction { source: "Saving reg0x48 before Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Push8, args: [Register(0x48)], resolved: None }
09 48 
# 00f5f Instruction { source: "PseudoCall(Label24(:div32))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 00f65 Instruction { source: "PseudoCall(Label24(:div32))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 6f 0f 00 00 
# 00f6b Instruction { source: "PseudoCall(Label24(:div32))", opcode: JmpImm, args: [Label24(:div32)], resolved: None }
70 00 18 00 
# 00f6f Instruction { source: "PseudoCall(Label24(:div32))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 00f75 Instruction { source: "Restoring reg0x48 after Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Pop8, args: [Register(0x48)], resolved: None }
0a 48 
# 00f77 Instruction { source: "Restoring reg0x49 after Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Pop8, args: [Register(0x49)], resolved: None }
0a 49 
# 00f79 Instruction { source: "Restoring reg0x4c after Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Pop8, args: [Register(0x4c)], resolved: None }
0a 4c 
# 00f7b Instruction { source: "Restoring reg0x4d after Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Pop8, args: [Register(0x4d)], resolved: None }
0a 4d 
# 00f7d Instruction { source: "Restoring reg0x4e after Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Pop8, args: [Register(0x4e)], resolved: None }
0a 4e 
# 00f7f Instruction { source: "Restoring reg0x4f after Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Pop8, args: [Register(0x4f)], resolved: None }
0a 4f 
# 00f81 Instruction { source: "Restoring reg0x50 after Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Pop8, args: [Register(0x50)], resolved: None }
0a 50 
# 00f83 Instruction { source: "Restoring reg0x51 after Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Pop8, args: [Register(0x51)], resolved: None }
0a 51 
# 00f85 Instruction { source: "Restoring reg0x52 after Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Pop8, args: [Register(0x52)], resolved: None }
0a 52 
# 00f87 Instruction { source: "Restoring reg0x53 after Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Pop8, args: [Register(0x53)], resolved: None }
0a 53 
# 00f89 Instruction { source: "Restoring reg0x54 after Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Pop8, args: [Register(0x54)], resolved: None }
0a 54 
# 00f8b Instruction { source: "Restoring reg0x55 after Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Pop8, args: [Register(0x55)], resolved: None }
0a 55 
# 00f8d Instruction { source: "Restoring reg0x56 after Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Pop8, args: [Register(0x56)], resolved: None }
0a 56 
# 00f8f Instruction { source: "Restoring reg0x57 after Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Pop8, args: [Register(0x57)], resolved: None }
0a 57 
# 00f91 Instruction { source: "Restoring reg0x58 after Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Pop8, args: [Register(0x58)], resolved: None }
0a 58 
# 00f93 Instruction { source: "Restoring reg0x59 after Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Pop8, args: [Register(0x59)], resolved: None }
0a 59 
# 00f95 Instruction { source: "Restoring reg0x5a after Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Pop8, args: [Register(0x5a)], resolved: None }
0a 5a 
# 00f97 Instruction { source: "Restoring reg0x5b after Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Pop8, args: [Register(0x5b)], resolved: None }
0a 5b 
# 00f99 Instruction { source: "Restoring reg0x5c after Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Pop8, args: [Register(0x5c)], resolved: None }
0a 5c 
# 00f9b Instruction { source: "Restoring reg0x5d after Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Pop8, args: [Register(0x5d)], resolved: None }
0a 5d 
# 00f9d Instruction { source: "Restoring reg0x5e after Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Pop8, args: [Register(0x5e)], resolved: None }
0a 5e 
# 00f9f Instruction { source: "Restoring reg0x5f after Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Pop8, args: [Register(0x5f)], resolved: None }
0a 5f 
# 00fa1 Instruction { source: "Restoring reg0x60 after Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Pop8, args: [Register(0x60)], resolved: None }
0a 60 
# 00fa3 Instruction { source: "Restoring reg0x61 after Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Pop8, args: [Register(0x61)], resolved: None }
0a 61 
# 00fa5 Instruction { source: "Restoring reg0x64 after Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Pop8, args: [Register(0x64)], resolved: None }
0a 64 
# 00fa7 Instruction { source: "Restoring reg0x65 after Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Pop8, args: [Register(0x65)], resolved: None }
0a 65 
# 00fa9 Instruction { source: "Restoring reg0x66 after Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Pop8, args: [Register(0x66)], resolved: None }
0a 66 
# 00fab Instruction { source: "Restoring reg0x67 after Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Pop8, args: [Register(0x67)], resolved: None }
0a 67 
# 00fad Instruction { source: "Restoring reg0x68 after Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Pop8, args: [Register(0x68)], resolved: None }
0a 68 
# 00faf Instruction { source: "Restoring reg0x69 after Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Pop8, args: [Register(0x69)], resolved: None }
0a 69 
# 00fb1 Instruction { source: "Restoring reg0x6a after Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Pop8, args: [Register(0x6a)], resolved: None }
0a 6a 
# 00fb3 Instruction { source: "Restoring reg0x6c after Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Pop8, args: [Register(0x6c)], resolved: None }
0a 6c 
# 00fb5 Instruction { source: "Restoring reg0x6d after Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Pop8, args: [Register(0x6d)], resolved: None }
0a 6d 
# 00fb7 Instruction { source: "Restoring reg0x6e after Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Pop8, args: [Register(0x6e)], resolved: None }
0a 6e 
# 00fb9 Instruction { source: "Restoring reg0x6f after Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Pop8, args: [Register(0x6f)], resolved: None }
0a 6f 
# 00fbb Instruction { source: "Restoring reg0x70 after Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Pop8, args: [Register(0x70)], resolved: None }
0a 70 
# 00fbd Instruction { source: "Restoring reg0x71 after Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Pop8, args: [Register(0x71)], resolved: None }
0a 71 
# 00fbf Instruction { source: "Some(quotient) <= call div32(t70,t71,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"quotient\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32\\\", parameters: [Ident(\\\"b\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Copy32, args: [Register(0x00), Register(0x40)], resolved: None }
21 00 40 
# t73 <- quotient U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"quotient\")] }) }", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"quotient\")] })", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"quotient\")] })", "Ident(\"quotient\")", "Ident(\"quotient\")"] }
# 00fc2 Instruction { source: "t73 <- quotient U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Ident(\\\"quotient\\\")\", \"Ident(\\\"quotient\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x3c)], resolved: None }
21 40 3c 
# None <= call print_dec32(t73,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"quotient\")] }) }", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"quotient\")] })", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"quotient\")] })"] }
# 00fc5 Instruction { source: "Arg0[a]=t73 None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x00)], resolved: None }
21 3c 00 
# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 124, 125, 126, 127, 128, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 216, 217, 233, 234, 235, 236, 240, 241, 242, 243, 244, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: [72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113]
# 00fc8 Instruction { source: "Saving reg0x71 before None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x71)], resolved: None }
09 71 
# 00fca Instruction { source: "Saving reg0x70 before None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x70)], resolved: None }
09 70 
# 00fcc Instruction { source: "Saving reg0x6f before None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x6f)], resolved: None }
09 6f 
# 00fce Instruction { source: "Saving reg0x6e before None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x6e)], resolved: None }
09 6e 
# 00fd0 Instruction { source: "Saving reg0x6d before None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x6d)], resolved: None }
09 6d 
# 00fd2 Instruction { source: "Saving reg0x6c before None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x6c)], resolved: None }
09 6c 
# 00fd4 Instruction { source: "Saving reg0x6a before None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x6a)], resolved: None }
09 6a 
# 00fd6 Instruction { source: "Saving reg0x69 before None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x69)], resolved: None }
09 69 
# 00fd8 Instruction { source: "Saving reg0x68 before None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x68)], resolved: None }
09 68 
# 00fda Instruction { source: "Saving reg0x67 before None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x67)], resolved: None }
09 67 
# 00fdc Instruction { source: "Saving reg0x66 before None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x66)], resolved: None }
09 66 
# 00fde Instruction { source: "Saving reg0x65 before None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x65)], resolved: None }
09 65 
# 00fe0 Instruction { source: "Saving reg0x64 before None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x64)], resolved: None }
09 64 
# 00fe2 Instruction { source: "Saving reg0x61 before None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x61)], resolved: None }
09 61 
# 00fe4 Instruction { source: "Saving reg0x60 before None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x60)], resolved: None }
09 60 
# 00fe6 Instruction { source: "Saving reg0x5f before None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x5f)], resolved: None }
09 5f 
# 00fe8 Instruction { source: "Saving reg0x5e before None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x5e)], resolved: None }
09 5e 
# 00fea Instruction { source: "Saving reg0x5d before None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x5d)], resolved: None }
09 5d 
# 00fec Instruction { source: "Saving reg0x5c before None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x5c)], resolved: None }
09 5c 
# 00fee Instruction { source: "Saving reg0x5b before None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x5b)], resolved: None }
09 5b 
# 00ff0 Instruction { source: "Saving reg0x5a before None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x5a)], resolved: None }
09 5a 
# 00ff2 Instruction { source: "Saving reg0x59 before None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x59)], resolved: None }
09 59 
# 00ff4 Instruction { source: "Saving reg0x58 before None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x58)], resolved: None }
09 58 
# 00ff6 Instruction { source: "Saving reg0x57 before None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x57)], resolved: None }
09 57 
# 00ff8 Instruction { source: "Saving reg0x56 before None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x56)], resolved: None }
09 56 
# 00ffa Instruction { source: "Saving reg0x55 before None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x55)], resolved: None }
09 55 
# 00ffc Instruction { source: "Saving reg0x54 before None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x54)], resolved: None }
09 54 
# 00ffe Instruction { source: "Saving reg0x53 before None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x53)], resolved: None }
09 53 
# 01000 Instruction { source: "Saving reg0x52 before None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x52)], resolved: None }
09 52 
# 01002 Instruction { source: "Saving reg0x51 before None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x51)], resolved: None }
09 51 
# 01004 Instruction { source: "Saving reg0x50 before None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x50)], resolved: None }
09 50 
# 01006 Instruction { source: "Saving reg0x4f before None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x4f)], resolved: None }
09 4f 
# 01008 Instruction { source: "Saving reg0x4e before None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x4e)], resolved: None }
09 4e 
# 0100a Instruction { source: "Saving reg0x4d before None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x4d)], resolved: None }
09 4d 
# 0100c Instruction { source: "Saving reg0x4c before None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x4c)], resolved: None }
09 4c 
# 0100e Instruction { source: "Saving reg0x49 before None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x49)], resolved: None }
09 49 
# 01010 Instruction { source: "Saving reg0x48 before None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Push8, args: [Register(0x48)], resolved: None }
09 48 
# 01012 Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 01018 Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 22 10 00 00 
# 0101e Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: JmpImm, args: [Label24(:print_dec32)], resolved: None }
70 d5 29 00 
# 01022 Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 01028 Instruction { source: "Restoring reg0x48 after None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x48)], resolved: None }
0a 48 
# 0102a Instruction { source: "Restoring reg0x49 after None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x49)], resolved: None }
0a 49 
# 0102c Instruction { source: "Restoring reg0x4c after None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x4c)], resolved: None }
0a 4c 
# 0102e Instruction { source: "Restoring reg0x4d after None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x4d)], resolved: None }
0a 4d 
# 01030 Instruction { source: "Restoring reg0x4e after None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x4e)], resolved: None }
0a 4e 
# 01032 Instruction { source: "Restoring reg0x4f after None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x4f)], resolved: None }
0a 4f 
# 01034 Instruction { source: "Restoring reg0x50 after None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x50)], resolved: None }
0a 50 
# 01036 Instruction { source: "Restoring reg0x51 after None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x51)], resolved: None }
0a 51 
# 01038 Instruction { source: "Restoring reg0x52 after None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x52)], resolved: None }
0a 52 
# 0103a Instruction { source: "Restoring reg0x53 after None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x53)], resolved: None }
0a 53 
# 0103c Instruction { source: "Restoring reg0x54 after None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x54)], resolved: None }
0a 54 
# 0103e Instruction { source: "Restoring reg0x55 after None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x55)], resolved: None }
0a 55 
# 01040 Instruction { source: "Restoring reg0x56 after None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x56)], resolved: None }
0a 56 
# 01042 Instruction { source: "Restoring reg0x57 after None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x57)], resolved: None }
0a 57 
# 01044 Instruction { source: "Restoring reg0x58 after None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x58)], resolved: None }
0a 58 
# 01046 Instruction { source: "Restoring reg0x59 after None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x59)], resolved: None }
0a 59 
# 01048 Instruction { source: "Restoring reg0x5a after None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x5a)], resolved: None }
0a 5a 
# 0104a Instruction { source: "Restoring reg0x5b after None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x5b)], resolved: None }
0a 5b 
# 0104c Instruction { source: "Restoring reg0x5c after None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x5c)], resolved: None }
0a 5c 
# 0104e Instruction { source: "Restoring reg0x5d after None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x5d)], resolved: None }
0a 5d 
# 01050 Instruction { source: "Restoring reg0x5e after None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x5e)], resolved: None }
0a 5e 
# 01052 Instruction { source: "Restoring reg0x5f after None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x5f)], resolved: None }
0a 5f 
# 01054 Instruction { source: "Restoring reg0x60 after None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x60)], resolved: None }
0a 60 
# 01056 Instruction { source: "Restoring reg0x61 after None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x61)], resolved: None }
0a 61 
# 01058 Instruction { source: "Restoring reg0x64 after None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x64)], resolved: None }
0a 64 
# 0105a Instruction { source: "Restoring reg0x65 after None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x65)], resolved: None }
0a 65 
# 0105c Instruction { source: "Restoring reg0x66 after None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x66)], resolved: None }
0a 66 
# 0105e Instruction { source: "Restoring reg0x67 after None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x67)], resolved: None }
0a 67 
# 01060 Instruction { source: "Restoring reg0x68 after None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x68)], resolved: None }
0a 68 
# 01062 Instruction { source: "Restoring reg0x69 after None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x69)], resolved: None }
0a 69 
# 01064 Instruction { source: "Restoring reg0x6a after None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x6a)], resolved: None }
0a 6a 
# 01066 Instruction { source: "Restoring reg0x6c after None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x6c)], resolved: None }
0a 6c 
# 01068 Instruction { source: "Restoring reg0x6d after None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x6d)], resolved: None }
0a 6d 
# 0106a Instruction { source: "Restoring reg0x6e after None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x6e)], resolved: None }
0a 6e 
# 0106c Instruction { source: "Restoring reg0x6f after None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x6f)], resolved: None }
0a 6f 
# 0106e Instruction { source: "Restoring reg0x70 after None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x70)], resolved: None }
0a 70 
# 01070 Instruction { source: "Restoring reg0x71 after None <= call print_dec32(t73,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"quotient\\\")] })\"] }", opcode: Pop8, args: [Register(0x71)], resolved: None }
0a 71 
# t75 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Number(U8, 10)", "Number(U8, 10)"] }
# 01072 Instruction { source: "t75 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x49), Constant8(0x0a=10)], resolved: None }
04 49 0a 
# inline_RpnCalc_handle_putc_24_c <- t75 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_24_c <- t75 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\"] }", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# inline_RpnCalc_handle_putc_24_t1 <- inline_RpnCalc_handle_putc_24_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_24_t1 <- inline_RpnCalc_handle_putc_24_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_24_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 01075 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x49)], resolved: None }
68 49 
# inline_RpnCalc_handle_putc_24_t3 <- inline_RpnCalc_handle_putc_24_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_24_t3 <- inline_RpnCalc_handle_putc_24_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# None <= call lcd_write_char(inline_RpnCalc_handle_putc_24_t3,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })"] }
# 01077 Instruction { source: "Arg0[ch]=inline_RpnCalc_handle_putc_24_t3 None <= call lcd_write_char(inline_RpnCalc_handle_putc_24_t3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy8, args: [Register(0x49), Register(0x00)], resolved: None }
0b 49 00 
# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 152, 153, 154, 155, 156, 157, 158, 159, 217, 233, 234, 235, 236, 240, 241, 242, 243, 244, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 0107a Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 01080 Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 8a 10 00 00 
# 01086 Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: JmpImm, args: [Label24(:lcd_write_char)], resolved: None }
70 1a 22 00 
# 0108a Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# goto inline_RpnCalc_handle_putc_24_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_24_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_24_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_24_function_end_putc
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_putc_24_function_end_putc
# t77 <- stack U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] })", "Ident(\"stack\")", "Ident(\"stack\")"] }
# 01090 Instruction { source: "t77 <- stack U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] })\", \"Ident(\\\"stack\\\")\", \"Ident(\\\"stack\\\")\"] }", opcode: Copy32, args: [Register(0x6c), Register(0x3c)], resolved: None }
21 6c 3c 
# t78 <- quotient U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] })", "Ident(\"quotient\")", "Ident(\"quotient\")"] }
# 01093 Instruction { source: "t78 <- quotient U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] })\", \"Ident(\\\"quotient\\\")\", \"Ident(\\\"quotient\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x44)], resolved: None }
21 40 44 
# inline_RpnCalc_handle_stack_push_59_s <- t77 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] })"] }
# 01096 Instruction { source: "inline_RpnCalc_handle_stack_push_59_s <- t77 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] })\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x40)], resolved: None }
21 3c 40 
# inline_RpnCalc_handle_stack_push_59_n <- t78 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] })"] }
# 01099 Instruction { source: "inline_RpnCalc_handle_stack_push_59_n <- t78 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"quotient\\\")] })\"] }", opcode: Copy32, args: [Register(0x44), Register(0x3c)], resolved: None }
21 44 3c 
# inline_RpnCalc_handle_stack_push_59_t0 <- inline_RpnCalc_handle_stack_push_59_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_59_t0 <- inline_RpnCalc_handle_stack_push_59_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_59_values <- inline_RpnCalc_handle_stack_push_59_t0 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# 0109c Instruction { source: "inline_RpnCalc_handle_stack_push_59_values <- inline_RpnCalc_handle_stack_push_59_t0 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0x40), Register(0x44)], resolved: None }
21 40 44 
# inline_RpnCalc_handle_stack_push_59_t2 <- inline_RpnCalc_handle_stack_push_59_values U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_59_t2 <- inline_RpnCalc_handle_stack_push_59_values U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_stack_push_59_t6 <- inline_RpnCalc_handle_stack_push_59_s U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_59_t6 <- inline_RpnCalc_handle_stack_push_59_s U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_59_t7 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 0109f Instruction { source: "inline_RpnCalc_handle_stack_push_59_t7 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x64), Constant32(0x00000040=64)], resolved: None }
20 64 40 00 00 00 
# inline_RpnCalc_handle_stack_push_59_t5 <- inline_RpnCalc_handle_stack_push_59_t6 Add inline_RpnCalc_handle_stack_push_59_t7
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 010a5 Instruction { source: "inline_RpnCalc_handle_stack_push_59_t5 <- inline_RpnCalc_handle_stack_push_59_t6 Add inline_RpnCalc_handle_stack_push_59_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 010a6 Instruction { source: "inline_RpnCalc_handle_stack_push_59_t5 <- inline_RpnCalc_handle_stack_push_59_t6 Add inline_RpnCalc_handle_stack_push_59_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x40), Register(0x64), Register(0x64)], resolved: None }
30 40 64 64 
# 010aa Instruction { source: "inline_RpnCalc_handle_stack_push_59_t5 <- inline_RpnCalc_handle_stack_push_59_t6 Add inline_RpnCalc_handle_stack_push_59_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_59_t4 <- mem[inline_RpnCalc_handle_stack_push_59_t5] U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 010ab Instruction { source: "inline_RpnCalc_handle_stack_push_59_t4 <- mem[inline_RpnCalc_handle_stack_push_59_t5] U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x64), Register(0x64)], resolved: None }
22 64 64 
# inline_RpnCalc_handle_stack_push_59_t3 <- inline_RpnCalc_handle_stack_push_59_t4 Add inline_RpnCalc_handle_stack_push_59_t4
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 010ae Instruction { source: "inline_RpnCalc_handle_stack_push_59_t3 <- inline_RpnCalc_handle_stack_push_59_t4 Add inline_RpnCalc_handle_stack_push_59_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 010af Instruction { source: "inline_RpnCalc_handle_stack_push_59_t3 <- inline_RpnCalc_handle_stack_push_59_t4 Add inline_RpnCalc_handle_stack_push_59_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_1, args: [Register(0x64), Register(0x64), Register(0x64)], resolved: None }
30 64 64 64 
# 010b3 Instruction { source: "inline_RpnCalc_handle_stack_push_59_t3 <- inline_RpnCalc_handle_stack_push_59_t4 Add inline_RpnCalc_handle_stack_push_59_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_59_t3 <- inline_RpnCalc_handle_stack_push_59_t3 Add inline_RpnCalc_handle_stack_push_59_t3
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))"] }
# 010b4 Instruction { source: "inline_RpnCalc_handle_stack_push_59_t3 <- inline_RpnCalc_handle_stack_push_59_t3 Add inline_RpnCalc_handle_stack_push_59_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 010b5 Instruction { source: "inline_RpnCalc_handle_stack_push_59_t3 <- inline_RpnCalc_handle_stack_push_59_t3 Add inline_RpnCalc_handle_stack_push_59_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x64), Register(0x64), Register(0x64)], resolved: None }
30 64 64 64 
# 010b9 Instruction { source: "inline_RpnCalc_handle_stack_push_59_t3 <- inline_RpnCalc_handle_stack_push_59_t3 Add inline_RpnCalc_handle_stack_push_59_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_59_t1 <- inline_RpnCalc_handle_stack_push_59_t2 Add inline_RpnCalc_handle_stack_push_59_t3
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))"] }
# 010ba Instruction { source: "inline_RpnCalc_handle_stack_push_59_t1 <- inline_RpnCalc_handle_stack_push_59_t2 Add inline_RpnCalc_handle_stack_push_59_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 010bb Instruction { source: "inline_RpnCalc_handle_stack_push_59_t1 <- inline_RpnCalc_handle_stack_push_59_t2 Add inline_RpnCalc_handle_stack_push_59_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_1, args: [Register(0x44), Register(0x64), Register(0x44)], resolved: None }
30 44 64 44 
# 010bf Instruction { source: "inline_RpnCalc_handle_stack_push_59_t1 <- inline_RpnCalc_handle_stack_push_59_t2 Add inline_RpnCalc_handle_stack_push_59_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_59_t9 <- inline_RpnCalc_handle_stack_push_59_n U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_59_t9 <- inline_RpnCalc_handle_stack_push_59_n U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# mem[inline_RpnCalc_handle_stack_push_59_t1] <- inline_RpnCalc_handle_stack_push_59_t9 U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }"] }
# 010c0 Instruction { source: "mem[inline_RpnCalc_handle_stack_push_59_t1] <- inline_RpnCalc_handle_stack_push_59_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_1, args: [Register(0x3c), Register(0x44)], resolved: None }
23 3c 44 
# 010c3 Instruction { source: "mem[inline_RpnCalc_handle_stack_push_59_t1] <- inline_RpnCalc_handle_stack_push_59_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_RpnCalc_handle_stack_push_59_t11 <- inline_RpnCalc_handle_stack_push_59_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# 010c4 Instruction { source: "inline_RpnCalc_handle_stack_push_59_t11 <- inline_RpnCalc_handle_stack_push_59_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x3c)], resolved: None }
21 40 3c 
# inline_RpnCalc_handle_stack_push_59_t12 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 010c7 Instruction { source: "inline_RpnCalc_handle_stack_push_59_t12 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x44), Constant32(0x00000040=64)], resolved: None }
20 44 40 00 00 00 
# inline_RpnCalc_handle_stack_push_59_t10 <- inline_RpnCalc_handle_stack_push_59_t11 Add inline_RpnCalc_handle_stack_push_59_t12
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 010cd Instruction { source: "inline_RpnCalc_handle_stack_push_59_t10 <- inline_RpnCalc_handle_stack_push_59_t11 Add inline_RpnCalc_handle_stack_push_59_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 010ce Instruction { source: "inline_RpnCalc_handle_stack_push_59_t10 <- inline_RpnCalc_handle_stack_push_59_t11 Add inline_RpnCalc_handle_stack_push_59_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x3c), Register(0x44), Register(0x3c)], resolved: None }
30 3c 44 3c 
# 010d2 Instruction { source: "inline_RpnCalc_handle_stack_push_59_t10 <- inline_RpnCalc_handle_stack_push_59_t11 Add inline_RpnCalc_handle_stack_push_59_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_59_t16 <- inline_RpnCalc_handle_stack_push_59_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_59_t16 <- inline_RpnCalc_handle_stack_push_59_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_59_t17 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 010d3 Instruction { source: "inline_RpnCalc_handle_stack_push_59_t17 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x44), Constant32(0x00000040=64)], resolved: None }
20 44 40 00 00 00 
# inline_RpnCalc_handle_stack_push_59_t15 <- inline_RpnCalc_handle_stack_push_59_t16 Add inline_RpnCalc_handle_stack_push_59_t17
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 010d9 Instruction { source: "inline_RpnCalc_handle_stack_push_59_t15 <- inline_RpnCalc_handle_stack_push_59_t16 Add inline_RpnCalc_handle_stack_push_59_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 010da Instruction { source: "inline_RpnCalc_handle_stack_push_59_t15 <- inline_RpnCalc_handle_stack_push_59_t16 Add inline_RpnCalc_handle_stack_push_59_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x40), Register(0x44), Register(0x40)], resolved: None }
30 40 44 40 
# 010de Instruction { source: "inline_RpnCalc_handle_stack_push_59_t15 <- inline_RpnCalc_handle_stack_push_59_t16 Add inline_RpnCalc_handle_stack_push_59_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_59_t14 <- mem[inline_RpnCalc_handle_stack_push_59_t15] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 010df Instruction { source: "inline_RpnCalc_handle_stack_push_59_t14 <- mem[inline_RpnCalc_handle_stack_push_59_t15] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x40), Register(0x40)], resolved: None }
22 40 40 
# inline_RpnCalc_handle_stack_push_59_t18 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 010e2 Instruction { source: "inline_RpnCalc_handle_stack_push_59_t18 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x44), Constant32(0x00000001=1)], resolved: None }
20 44 01 00 00 00 
# inline_RpnCalc_handle_stack_push_59_t13 <- inline_RpnCalc_handle_stack_push_59_t14 Add inline_RpnCalc_handle_stack_push_59_t18
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))"] }
# 010e8 Instruction { source: "inline_RpnCalc_handle_stack_push_59_t13 <- inline_RpnCalc_handle_stack_push_59_t14 Add inline_RpnCalc_handle_stack_push_59_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 010e9 Instruction { source: "inline_RpnCalc_handle_stack_push_59_t13 <- inline_RpnCalc_handle_stack_push_59_t14 Add inline_RpnCalc_handle_stack_push_59_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x40), Register(0x44), Register(0x40)], resolved: None }
30 40 44 40 
# 010ed Instruction { source: "inline_RpnCalc_handle_stack_push_59_t13 <- inline_RpnCalc_handle_stack_push_59_t14 Add inline_RpnCalc_handle_stack_push_59_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# mem[inline_RpnCalc_handle_stack_push_59_t10] <- inline_RpnCalc_handle_stack_push_59_t13 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }"] }
# 010ee Instruction { source: "mem[inline_RpnCalc_handle_stack_push_59_t10] <- inline_RpnCalc_handle_stack_push_59_t13 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_1, args: [Register(0x40), Register(0x3c)], resolved: None }
23 40 3c 
# 010f1 Instruction { source: "mem[inline_RpnCalc_handle_stack_push_59_t10] <- inline_RpnCalc_handle_stack_push_59_t13 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto inline_RpnCalc_handle_stack_push_59_function_end_stack_push
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_push_59_function_end_stack_push\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_push_59_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_stack_push_59_function_end_stack_push
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_stack_push_59_function_end_stack_push
# goto RpnCalc_handle_if_end_23
# 	SourceContext { contexts: [] }
# 010f2 Instruction { source: "goto RpnCalc_handle_if_end_23\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_23)], resolved: None }
70 cf 15 00 
# :RpnCalc_handle_if_else_3_31
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_3_31
# t79 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t79 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# t80 <- 0n115/0x73u8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }", "Number(U8, 115)", "Number(U8, 115)"] }
# 010f6 Instruction { source: "t80 <- 0n115/0x73u8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }\", \"Number(U8, 115)\", \"Number(U8, 115)\"] }", opcode: LoadImm8, args: [Register(0x71), Constant8(0x73=115)], resolved: None }
04 71 73 
# if t79 == t80 then 'RpnCalc_handle_if_true_4_32' else 'RpnCalc_handle_if_else_4_33'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }"] }
# 010f9 Instruction { source: "if t79 == t80 then 'RpnCalc_handle_if_true_4_32' else 'RpnCalc_handle_if_else_4_33'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }\"] }", opcode: Cmp8, args: [Register(0x48), Register(0x71)], resolved: None }
15 48 71 
# 010fc Instruction { source: "if t79 == t80 then 'RpnCalc_handle_if_true_4_32' else 'RpnCalc_handle_if_else_4_33'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_handle_if_true_4_32)], resolved: None }
72 04 11 00 
# 01100 Instruction { source: "if t79 == t80 then 'RpnCalc_handle_if_true_4_32' else 'RpnCalc_handle_if_else_4_33'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 115) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_4_33)], resolved: None }
70 c3 11 00 
# :RpnCalc_handle_if_true_4_32
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_true_4_32
# t82 <- stack U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] })", "Ident(\"stack\")", "Ident(\"stack\")"] }
# 01104 Instruction { source: "t82 <- stack U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] })\", \"Ident(\\\"stack\\\")\", \"Ident(\\\"stack\\\")\"] }", opcode: Copy32, args: [Register(0x6c), Register(0x44)], resolved: None }
21 6c 44 
# t83 <- a U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t83 <- a U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_60_s <- t82 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_60_s <- t82 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_stack_push_60_n <- t83 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_60_n <- t83 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"a\\\")] })\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_60_t0 <- inline_RpnCalc_handle_stack_push_60_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_60_t0 <- inline_RpnCalc_handle_stack_push_60_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_stack_push_60_values <- inline_RpnCalc_handle_stack_push_60_t0 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# 01107 Instruction { source: "inline_RpnCalc_handle_stack_push_60_values <- inline_RpnCalc_handle_stack_push_60_t0 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0x44), Register(0x64)], resolved: None }
21 44 64 
# inline_RpnCalc_handle_stack_push_60_t2 <- inline_RpnCalc_handle_stack_push_60_values U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_60_t2 <- inline_RpnCalc_handle_stack_push_60_values U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0x64), Register(0x64)], resolved: None }
# inline_RpnCalc_handle_stack_push_60_t6 <- inline_RpnCalc_handle_stack_push_60_s U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_60_t6 <- inline_RpnCalc_handle_stack_push_60_s U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_stack_push_60_t7 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 0110a Instruction { source: "inline_RpnCalc_handle_stack_push_60_t7 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x4c), Constant32(0x00000040=64)], resolved: None }
20 4c 40 00 00 00 
# inline_RpnCalc_handle_stack_push_60_t5 <- inline_RpnCalc_handle_stack_push_60_t6 Add inline_RpnCalc_handle_stack_push_60_t7
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 01110 Instruction { source: "inline_RpnCalc_handle_stack_push_60_t5 <- inline_RpnCalc_handle_stack_push_60_t6 Add inline_RpnCalc_handle_stack_push_60_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01111 Instruction { source: "inline_RpnCalc_handle_stack_push_60_t5 <- inline_RpnCalc_handle_stack_push_60_t6 Add inline_RpnCalc_handle_stack_push_60_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x44), Register(0x4c), Register(0x4c)], resolved: None }
30 44 4c 4c 
# 01115 Instruction { source: "inline_RpnCalc_handle_stack_push_60_t5 <- inline_RpnCalc_handle_stack_push_60_t6 Add inline_RpnCalc_handle_stack_push_60_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_60_t4 <- mem[inline_RpnCalc_handle_stack_push_60_t5] U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 01116 Instruction { source: "inline_RpnCalc_handle_stack_push_60_t4 <- mem[inline_RpnCalc_handle_stack_push_60_t5] U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x4c), Register(0x4c)], resolved: None }
22 4c 4c 
# inline_RpnCalc_handle_stack_push_60_t3 <- inline_RpnCalc_handle_stack_push_60_t4 Add inline_RpnCalc_handle_stack_push_60_t4
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 01119 Instruction { source: "inline_RpnCalc_handle_stack_push_60_t3 <- inline_RpnCalc_handle_stack_push_60_t4 Add inline_RpnCalc_handle_stack_push_60_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0111a Instruction { source: "inline_RpnCalc_handle_stack_push_60_t3 <- inline_RpnCalc_handle_stack_push_60_t4 Add inline_RpnCalc_handle_stack_push_60_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_1, args: [Register(0x4c), Register(0x4c), Register(0x4c)], resolved: None }
30 4c 4c 4c 
# 0111e Instruction { source: "inline_RpnCalc_handle_stack_push_60_t3 <- inline_RpnCalc_handle_stack_push_60_t4 Add inline_RpnCalc_handle_stack_push_60_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_60_t3 <- inline_RpnCalc_handle_stack_push_60_t3 Add inline_RpnCalc_handle_stack_push_60_t3
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))"] }
# 0111f Instruction { source: "inline_RpnCalc_handle_stack_push_60_t3 <- inline_RpnCalc_handle_stack_push_60_t3 Add inline_RpnCalc_handle_stack_push_60_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01120 Instruction { source: "inline_RpnCalc_handle_stack_push_60_t3 <- inline_RpnCalc_handle_stack_push_60_t3 Add inline_RpnCalc_handle_stack_push_60_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x4c), Register(0x4c), Register(0x4c)], resolved: None }
30 4c 4c 4c 
# 01124 Instruction { source: "inline_RpnCalc_handle_stack_push_60_t3 <- inline_RpnCalc_handle_stack_push_60_t3 Add inline_RpnCalc_handle_stack_push_60_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_60_t1 <- inline_RpnCalc_handle_stack_push_60_t2 Add inline_RpnCalc_handle_stack_push_60_t3
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))"] }
# 01125 Instruction { source: "inline_RpnCalc_handle_stack_push_60_t1 <- inline_RpnCalc_handle_stack_push_60_t2 Add inline_RpnCalc_handle_stack_push_60_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01126 Instruction { source: "inline_RpnCalc_handle_stack_push_60_t1 <- inline_RpnCalc_handle_stack_push_60_t2 Add inline_RpnCalc_handle_stack_push_60_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_1, args: [Register(0x64), Register(0x4c), Register(0x64)], resolved: None }
30 64 4c 64 
# 0112a Instruction { source: "inline_RpnCalc_handle_stack_push_60_t1 <- inline_RpnCalc_handle_stack_push_60_t2 Add inline_RpnCalc_handle_stack_push_60_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_60_t9 <- inline_RpnCalc_handle_stack_push_60_n U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_60_t9 <- inline_RpnCalc_handle_stack_push_60_n U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# mem[inline_RpnCalc_handle_stack_push_60_t1] <- inline_RpnCalc_handle_stack_push_60_t9 U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }"] }
# 0112b Instruction { source: "mem[inline_RpnCalc_handle_stack_push_60_t1] <- inline_RpnCalc_handle_stack_push_60_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_1, args: [Register(0x3c), Register(0x64)], resolved: None }
23 3c 64 
# 0112e Instruction { source: "mem[inline_RpnCalc_handle_stack_push_60_t1] <- inline_RpnCalc_handle_stack_push_60_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_RpnCalc_handle_stack_push_60_t11 <- inline_RpnCalc_handle_stack_push_60_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# 0112f Instruction { source: "inline_RpnCalc_handle_stack_push_60_t11 <- inline_RpnCalc_handle_stack_push_60_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x3c)], resolved: None }
21 44 3c 
# inline_RpnCalc_handle_stack_push_60_t12 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 01132 Instruction { source: "inline_RpnCalc_handle_stack_push_60_t12 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x64), Constant32(0x00000040=64)], resolved: None }
20 64 40 00 00 00 
# inline_RpnCalc_handle_stack_push_60_t10 <- inline_RpnCalc_handle_stack_push_60_t11 Add inline_RpnCalc_handle_stack_push_60_t12
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 01138 Instruction { source: "inline_RpnCalc_handle_stack_push_60_t10 <- inline_RpnCalc_handle_stack_push_60_t11 Add inline_RpnCalc_handle_stack_push_60_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01139 Instruction { source: "inline_RpnCalc_handle_stack_push_60_t10 <- inline_RpnCalc_handle_stack_push_60_t11 Add inline_RpnCalc_handle_stack_push_60_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x3c), Register(0x64), Register(0x3c)], resolved: None }
30 3c 64 3c 
# 0113d Instruction { source: "inline_RpnCalc_handle_stack_push_60_t10 <- inline_RpnCalc_handle_stack_push_60_t11 Add inline_RpnCalc_handle_stack_push_60_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_60_t16 <- inline_RpnCalc_handle_stack_push_60_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_60_t16 <- inline_RpnCalc_handle_stack_push_60_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_stack_push_60_t17 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 0113e Instruction { source: "inline_RpnCalc_handle_stack_push_60_t17 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x64), Constant32(0x00000040=64)], resolved: None }
20 64 40 00 00 00 
# inline_RpnCalc_handle_stack_push_60_t15 <- inline_RpnCalc_handle_stack_push_60_t16 Add inline_RpnCalc_handle_stack_push_60_t17
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 01144 Instruction { source: "inline_RpnCalc_handle_stack_push_60_t15 <- inline_RpnCalc_handle_stack_push_60_t16 Add inline_RpnCalc_handle_stack_push_60_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01145 Instruction { source: "inline_RpnCalc_handle_stack_push_60_t15 <- inline_RpnCalc_handle_stack_push_60_t16 Add inline_RpnCalc_handle_stack_push_60_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x44), Register(0x64), Register(0x44)], resolved: None }
30 44 64 44 
# 01149 Instruction { source: "inline_RpnCalc_handle_stack_push_60_t15 <- inline_RpnCalc_handle_stack_push_60_t16 Add inline_RpnCalc_handle_stack_push_60_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_60_t14 <- mem[inline_RpnCalc_handle_stack_push_60_t15] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 0114a Instruction { source: "inline_RpnCalc_handle_stack_push_60_t14 <- mem[inline_RpnCalc_handle_stack_push_60_t15] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x44), Register(0x44)], resolved: None }
22 44 44 
# inline_RpnCalc_handle_stack_push_60_t18 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 0114d Instruction { source: "inline_RpnCalc_handle_stack_push_60_t18 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x64), Constant32(0x00000001=1)], resolved: None }
20 64 01 00 00 00 
# inline_RpnCalc_handle_stack_push_60_t13 <- inline_RpnCalc_handle_stack_push_60_t14 Add inline_RpnCalc_handle_stack_push_60_t18
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))"] }
# 01153 Instruction { source: "inline_RpnCalc_handle_stack_push_60_t13 <- inline_RpnCalc_handle_stack_push_60_t14 Add inline_RpnCalc_handle_stack_push_60_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01154 Instruction { source: "inline_RpnCalc_handle_stack_push_60_t13 <- inline_RpnCalc_handle_stack_push_60_t14 Add inline_RpnCalc_handle_stack_push_60_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x44), Register(0x64), Register(0x44)], resolved: None }
30 44 64 44 
# 01158 Instruction { source: "inline_RpnCalc_handle_stack_push_60_t13 <- inline_RpnCalc_handle_stack_push_60_t14 Add inline_RpnCalc_handle_stack_push_60_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# mem[inline_RpnCalc_handle_stack_push_60_t10] <- inline_RpnCalc_handle_stack_push_60_t13 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }"] }
# 01159 Instruction { source: "mem[inline_RpnCalc_handle_stack_push_60_t10] <- inline_RpnCalc_handle_stack_push_60_t13 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_1, args: [Register(0x44), Register(0x3c)], resolved: None }
23 44 3c 
# 0115c Instruction { source: "mem[inline_RpnCalc_handle_stack_push_60_t10] <- inline_RpnCalc_handle_stack_push_60_t13 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto inline_RpnCalc_handle_stack_push_60_function_end_stack_push
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_push_60_function_end_stack_push\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_push_60_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_stack_push_60_function_end_stack_push
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_stack_push_60_function_end_stack_push
# t85 <- stack U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] })", "Ident(\"stack\")", "Ident(\"stack\")"] }
# 0115d Instruction { source: "t85 <- stack U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] })\", \"Ident(\\\"stack\\\")\", \"Ident(\\\"stack\\\")\"] }", opcode: Copy32, args: [Register(0x6c), Register(0x3c)], resolved: None }
21 6c 3c 
# t86 <- b U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# 01160 Instruction { source: "t86 <- b U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x44)], resolved: None }
21 40 44 
# inline_RpnCalc_handle_stack_push_61_s <- t85 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] })"] }
# 01163 Instruction { source: "inline_RpnCalc_handle_stack_push_61_s <- t85 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x40)], resolved: None }
21 3c 40 
# inline_RpnCalc_handle_stack_push_61_n <- t86 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] }) }", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] })", "Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] })"] }
# 01166 Instruction { source: "inline_RpnCalc_handle_stack_push_61_n <- t86 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [Ident(\\\"stack\\\"), Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0x44), Register(0x3c)], resolved: None }
21 44 3c 
# inline_RpnCalc_handle_stack_push_61_t0 <- inline_RpnCalc_handle_stack_push_61_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_61_t0 <- inline_RpnCalc_handle_stack_push_61_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_61_values <- inline_RpnCalc_handle_stack_push_61_t0 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# 01169 Instruction { source: "inline_RpnCalc_handle_stack_push_61_values <- inline_RpnCalc_handle_stack_push_61_t0 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0x40), Register(0x44)], resolved: None }
21 40 44 
# inline_RpnCalc_handle_stack_push_61_t2 <- inline_RpnCalc_handle_stack_push_61_values U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_61_t2 <- inline_RpnCalc_handle_stack_push_61_values U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_stack_push_61_t6 <- inline_RpnCalc_handle_stack_push_61_s U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_61_t6 <- inline_RpnCalc_handle_stack_push_61_s U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_61_t7 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 0116c Instruction { source: "inline_RpnCalc_handle_stack_push_61_t7 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x64), Constant32(0x00000040=64)], resolved: None }
20 64 40 00 00 00 
# inline_RpnCalc_handle_stack_push_61_t5 <- inline_RpnCalc_handle_stack_push_61_t6 Add inline_RpnCalc_handle_stack_push_61_t7
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 01172 Instruction { source: "inline_RpnCalc_handle_stack_push_61_t5 <- inline_RpnCalc_handle_stack_push_61_t6 Add inline_RpnCalc_handle_stack_push_61_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01173 Instruction { source: "inline_RpnCalc_handle_stack_push_61_t5 <- inline_RpnCalc_handle_stack_push_61_t6 Add inline_RpnCalc_handle_stack_push_61_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x40), Register(0x64), Register(0x64)], resolved: None }
30 40 64 64 
# 01177 Instruction { source: "inline_RpnCalc_handle_stack_push_61_t5 <- inline_RpnCalc_handle_stack_push_61_t6 Add inline_RpnCalc_handle_stack_push_61_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_61_t4 <- mem[inline_RpnCalc_handle_stack_push_61_t5] U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 01178 Instruction { source: "inline_RpnCalc_handle_stack_push_61_t4 <- mem[inline_RpnCalc_handle_stack_push_61_t5] U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x64), Register(0x64)], resolved: None }
22 64 64 
# inline_RpnCalc_handle_stack_push_61_t3 <- inline_RpnCalc_handle_stack_push_61_t4 Add inline_RpnCalc_handle_stack_push_61_t4
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 0117b Instruction { source: "inline_RpnCalc_handle_stack_push_61_t3 <- inline_RpnCalc_handle_stack_push_61_t4 Add inline_RpnCalc_handle_stack_push_61_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0117c Instruction { source: "inline_RpnCalc_handle_stack_push_61_t3 <- inline_RpnCalc_handle_stack_push_61_t4 Add inline_RpnCalc_handle_stack_push_61_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_1, args: [Register(0x64), Register(0x64), Register(0x64)], resolved: None }
30 64 64 64 
# 01180 Instruction { source: "inline_RpnCalc_handle_stack_push_61_t3 <- inline_RpnCalc_handle_stack_push_61_t4 Add inline_RpnCalc_handle_stack_push_61_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_61_t3 <- inline_RpnCalc_handle_stack_push_61_t3 Add inline_RpnCalc_handle_stack_push_61_t3
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))"] }
# 01181 Instruction { source: "inline_RpnCalc_handle_stack_push_61_t3 <- inline_RpnCalc_handle_stack_push_61_t3 Add inline_RpnCalc_handle_stack_push_61_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01182 Instruction { source: "inline_RpnCalc_handle_stack_push_61_t3 <- inline_RpnCalc_handle_stack_push_61_t3 Add inline_RpnCalc_handle_stack_push_61_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x64), Register(0x64), Register(0x64)], resolved: None }
30 64 64 64 
# 01186 Instruction { source: "inline_RpnCalc_handle_stack_push_61_t3 <- inline_RpnCalc_handle_stack_push_61_t3 Add inline_RpnCalc_handle_stack_push_61_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_61_t1 <- inline_RpnCalc_handle_stack_push_61_t2 Add inline_RpnCalc_handle_stack_push_61_t3
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))"] }
# 01187 Instruction { source: "inline_RpnCalc_handle_stack_push_61_t1 <- inline_RpnCalc_handle_stack_push_61_t2 Add inline_RpnCalc_handle_stack_push_61_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01188 Instruction { source: "inline_RpnCalc_handle_stack_push_61_t1 <- inline_RpnCalc_handle_stack_push_61_t2 Add inline_RpnCalc_handle_stack_push_61_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_1, args: [Register(0x44), Register(0x64), Register(0x44)], resolved: None }
30 44 64 44 
# 0118c Instruction { source: "inline_RpnCalc_handle_stack_push_61_t1 <- inline_RpnCalc_handle_stack_push_61_t2 Add inline_RpnCalc_handle_stack_push_61_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_61_t9 <- inline_RpnCalc_handle_stack_push_61_n U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_61_t9 <- inline_RpnCalc_handle_stack_push_61_n U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# mem[inline_RpnCalc_handle_stack_push_61_t1] <- inline_RpnCalc_handle_stack_push_61_t9 U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }"] }
# 0118d Instruction { source: "mem[inline_RpnCalc_handle_stack_push_61_t1] <- inline_RpnCalc_handle_stack_push_61_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_1, args: [Register(0x3c), Register(0x44)], resolved: None }
23 3c 44 
# 01190 Instruction { source: "mem[inline_RpnCalc_handle_stack_push_61_t1] <- inline_RpnCalc_handle_stack_push_61_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_RpnCalc_handle_stack_push_61_t11 <- inline_RpnCalc_handle_stack_push_61_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# 01191 Instruction { source: "inline_RpnCalc_handle_stack_push_61_t11 <- inline_RpnCalc_handle_stack_push_61_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x3c)], resolved: None }
21 40 3c 
# inline_RpnCalc_handle_stack_push_61_t12 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 01194 Instruction { source: "inline_RpnCalc_handle_stack_push_61_t12 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x44), Constant32(0x00000040=64)], resolved: None }
20 44 40 00 00 00 
# inline_RpnCalc_handle_stack_push_61_t10 <- inline_RpnCalc_handle_stack_push_61_t11 Add inline_RpnCalc_handle_stack_push_61_t12
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 0119a Instruction { source: "inline_RpnCalc_handle_stack_push_61_t10 <- inline_RpnCalc_handle_stack_push_61_t11 Add inline_RpnCalc_handle_stack_push_61_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0119b Instruction { source: "inline_RpnCalc_handle_stack_push_61_t10 <- inline_RpnCalc_handle_stack_push_61_t11 Add inline_RpnCalc_handle_stack_push_61_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x3c), Register(0x44), Register(0x3c)], resolved: None }
30 3c 44 3c 
# 0119f Instruction { source: "inline_RpnCalc_handle_stack_push_61_t10 <- inline_RpnCalc_handle_stack_push_61_t11 Add inline_RpnCalc_handle_stack_push_61_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_61_t16 <- inline_RpnCalc_handle_stack_push_61_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_61_t16 <- inline_RpnCalc_handle_stack_push_61_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_61_t17 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 011a0 Instruction { source: "inline_RpnCalc_handle_stack_push_61_t17 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x44), Constant32(0x00000040=64)], resolved: None }
20 44 40 00 00 00 
# inline_RpnCalc_handle_stack_push_61_t15 <- inline_RpnCalc_handle_stack_push_61_t16 Add inline_RpnCalc_handle_stack_push_61_t17
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 011a6 Instruction { source: "inline_RpnCalc_handle_stack_push_61_t15 <- inline_RpnCalc_handle_stack_push_61_t16 Add inline_RpnCalc_handle_stack_push_61_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 011a7 Instruction { source: "inline_RpnCalc_handle_stack_push_61_t15 <- inline_RpnCalc_handle_stack_push_61_t16 Add inline_RpnCalc_handle_stack_push_61_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x40), Register(0x44), Register(0x40)], resolved: None }
30 40 44 40 
# 011ab Instruction { source: "inline_RpnCalc_handle_stack_push_61_t15 <- inline_RpnCalc_handle_stack_push_61_t16 Add inline_RpnCalc_handle_stack_push_61_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_push_61_t14 <- mem[inline_RpnCalc_handle_stack_push_61_t15] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 011ac Instruction { source: "inline_RpnCalc_handle_stack_push_61_t14 <- mem[inline_RpnCalc_handle_stack_push_61_t15] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x40), Register(0x40)], resolved: None }
22 40 40 
# inline_RpnCalc_handle_stack_push_61_t18 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 011af Instruction { source: "inline_RpnCalc_handle_stack_push_61_t18 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x44), Constant32(0x00000001=1)], resolved: None }
20 44 01 00 00 00 
# inline_RpnCalc_handle_stack_push_61_t13 <- inline_RpnCalc_handle_stack_push_61_t14 Add inline_RpnCalc_handle_stack_push_61_t18
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))"] }
# 011b5 Instruction { source: "inline_RpnCalc_handle_stack_push_61_t13 <- inline_RpnCalc_handle_stack_push_61_t14 Add inline_RpnCalc_handle_stack_push_61_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 011b6 Instruction { source: "inline_RpnCalc_handle_stack_push_61_t13 <- inline_RpnCalc_handle_stack_push_61_t14 Add inline_RpnCalc_handle_stack_push_61_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x40), Register(0x44), Register(0x40)], resolved: None }
30 40 44 40 
# 011ba Instruction { source: "inline_RpnCalc_handle_stack_push_61_t13 <- inline_RpnCalc_handle_stack_push_61_t14 Add inline_RpnCalc_handle_stack_push_61_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# mem[inline_RpnCalc_handle_stack_push_61_t10] <- inline_RpnCalc_handle_stack_push_61_t13 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }"] }
# 011bb Instruction { source: "mem[inline_RpnCalc_handle_stack_push_61_t10] <- inline_RpnCalc_handle_stack_push_61_t13 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_1, args: [Register(0x40), Register(0x3c)], resolved: None }
23 40 3c 
# 011be Instruction { source: "mem[inline_RpnCalc_handle_stack_push_61_t10] <- inline_RpnCalc_handle_stack_push_61_t13 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto inline_RpnCalc_handle_stack_push_61_function_end_stack_push
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_push_61_function_end_stack_push\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_push_61_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_stack_push_61_function_end_stack_push
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_stack_push_61_function_end_stack_push
# goto RpnCalc_handle_if_end_23
# 	SourceContext { contexts: [] }
# 011bf Instruction { source: "goto RpnCalc_handle_if_end_23\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_23)], resolved: None }
70 cf 15 00 
# :RpnCalc_handle_if_else_4_33
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_4_33
# t87 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# 011c3 Instruction { source: "t87 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x48), Register(0x49)], resolved: None }
0b 48 49 
# t88 <- 0n113/0x71u8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }", "Number(U8, 113)", "Number(U8, 113)"] }
# 011c6 Instruction { source: "t88 <- 0n113/0x71u8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }\", \"Number(U8, 113)\", \"Number(U8, 113)\"] }", opcode: LoadImm8, args: [Register(0x68), Constant8(0x71=113)], resolved: None }
04 68 71 
# if t87 == t88 then 'RpnCalc_handle_if_true_5_34' else 'RpnCalc_handle_if_else_5_35'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }"] }
# 011c9 Instruction { source: "if t87 == t88 then 'RpnCalc_handle_if_true_5_34' else 'RpnCalc_handle_if_else_5_35'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }\"] }", opcode: Cmp8, args: [Register(0x49), Register(0x68)], resolved: None }
15 49 68 
# 011cc Instruction { source: "if t87 == t88 then 'RpnCalc_handle_if_true_5_34' else 'RpnCalc_handle_if_else_5_35'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_handle_if_true_5_34)], resolved: None }
72 d4 11 00 
# 011d0 Instruction { source: "if t87 == t88 then 'RpnCalc_handle_if_true_5_34' else 'RpnCalc_handle_if_else_5_35'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_5_35)], resolved: None }
70 e0 11 00 
# :RpnCalc_handle_if_true_5_34
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_true_5_34
# t89 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 011d4 Instruction { source: "t89 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x49), Constant8(0x00=0)], resolved: None }
04 49 00 
# return Some(t89)
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }"] }
# 011d7 Instruction { source: "return Some(t89)\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x49), Register(0x00)], resolved: None }
0b 49 00 
# 011da Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# goto RpnCalc_handle_if_end_23
# 	SourceContext { contexts: [] }
# 011dc Instruction { source: "goto RpnCalc_handle_if_end_23\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_23)], resolved: None }
70 cf 15 00 
# :RpnCalc_handle_if_else_5_35
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_5_35
# t90 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# 011e0 Instruction { source: "t90 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x48), Register(0x49)], resolved: None }
0b 48 49 
# t91 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 011e3 Instruction { source: "t91 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x68), Constant8(0x0a=10)], resolved: None }
04 68 0a 
# if t90 == t91 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }"] }
# 011e6 Instruction { source: "if t90 == t91 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\"] }", opcode: Cmp8, args: [Register(0x49), Register(0x68)], resolved: None }
15 49 68 
# 011e9 Instruction { source: "if t90 == t91 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_handle_if_true_6_36)], resolved: None }
72 f1 11 00 
# 011ed Instruction { source: "if t90 == t91 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_6_37)], resolved: None }
70 a5 12 00 
# :RpnCalc_handle_if_true_6_36
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_true_6_36
# t93 <- c U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# 011f1 Instruction { source: "t93 <- c U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x3c)], resolved: None }
21 44 3c 
# inline_RpnCalc_handle_RpnCalc_push_pending_64_c <- t93 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_c <- t93 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_64_t2 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_c U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }", "PtrFieldDeref(\"c\", \"have_num\")", "PtrFieldDeref(\"c\", \"have_num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_t2 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_c U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_64_t3 <- 0n72/0x00000048u32 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }", "PtrFieldDeref(\"c\", \"have_num\")", "PtrFieldDeref(\"c\", \"have_num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))", "Number(USIZE, 72)", "Number(USIZE, 72)"] }
# 011f4 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_t3 <- 0n72/0x00000048u32 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\", \"Number(USIZE, 72)\", \"Number(USIZE, 72)\"] }", opcode: LoadImm32, args: [Register(0x40), Constant32(0x00000048=72)], resolved: None }
20 40 48 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_64_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_64_t3
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }", "PtrFieldDeref(\"c\", \"have_num\")", "PtrFieldDeref(\"c\", \"have_num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))"] }
# 011fa Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_64_t3\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 011fb Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_64_t3\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: AddCarry32_1, args: [Register(0x3c), Register(0x40), Register(0x40)], resolved: None }
30 3c 40 40 
# 011ff Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_64_t3\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_64_t0 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_64_t1] U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }", "PtrFieldDeref(\"c\", \"have_num\")", "PtrFieldDeref(\"c\", \"have_num\")"] }
# 01200 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_t0 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_64_t1] U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\"] }", opcode: Load8, args: [Register(0x40), Register(0x68)], resolved: None }
05 40 68 
# inline_RpnCalc_handle_RpnCalc_push_pending_64_t4 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 01203 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_t4 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x69), Constant8(0x00=0)], resolved: None }
04 69 00 
# if inline_RpnCalc_handle_RpnCalc_push_pending_64_t0 != inline_RpnCalc_handle_RpnCalc_push_pending_64_t4 then 'inline_RpnCalc_handle_RpnCalc_push_pending_64_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_64_RpnCalc_push_pending_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }"] }
# 01206 Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_64_t0 != inline_RpnCalc_handle_RpnCalc_push_pending_64_t4 then 'inline_RpnCalc_handle_RpnCalc_push_pending_64_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_64_RpnCalc_push_pending_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x68), Register(0x69)], resolved: None }
15 68 69 
# 01209 Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_64_t0 != inline_RpnCalc_handle_RpnCalc_push_pending_64_t4 then 'inline_RpnCalc_handle_RpnCalc_push_pending_64_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_64_RpnCalc_push_pending_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_64_RpnCalc_push_pending_if_else_0_2)], resolved: None }
72 a1 12 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_64_t0 != inline_RpnCalc_handle_RpnCalc_push_pending_64_t4 then 'inline_RpnCalc_handle_RpnCalc_push_pending_64_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_64_RpnCalc_push_pending_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_64_RpnCalc_push_pending_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_64_RpnCalc_push_pending_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }"] }
# inline_RpnCalc_handle_RpnCalc_push_pending_64_RpnCalc_push_pending_if_true_0_1
# inline_RpnCalc_handle_RpnCalc_push_pending_64_t7 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_c U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_t7 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_c U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Stack\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Stack\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_64_t6 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_t7 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))"] }
# 0120d Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_t6 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_t7 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x44)], resolved: None }
21 3c 44 
# inline_RpnCalc_handle_RpnCalc_push_pending_64_t10 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_c U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_t10 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_c U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_64_t11 <- 0n68/0x00000044u32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Number(USIZE, 68)", "Number(USIZE, 68)"] }
# 01210 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_t11 <- 0n68/0x00000044u32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Number(USIZE, 68)\", \"Number(USIZE, 68)\"] }", opcode: LoadImm32, args: [Register(0x40), Constant32(0x00000044=68)], resolved: None }
20 40 44 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_64_t9 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_t10 Add inline_RpnCalc_handle_RpnCalc_push_pending_64_t11
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))"] }
# 01216 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_t9 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_t10 Add inline_RpnCalc_handle_RpnCalc_push_pending_64_t11\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01217 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_t9 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_t10 Add inline_RpnCalc_handle_RpnCalc_push_pending_64_t11\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_1, args: [Register(0x3c), Register(0x40), Register(0x40)], resolved: None }
30 3c 40 40 
# 0121b Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_t9 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_t10 Add inline_RpnCalc_handle_RpnCalc_push_pending_64_t11\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_64_t8 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_64_t9] U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")"] }
# 0121c Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_t8 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_64_t9] U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\"] }", opcode: Load32, args: [Register(0x40), Register(0x40)], resolved: None }
22 40 40 
# inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_s <- inline_RpnCalc_handle_RpnCalc_push_pending_64_t6 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_s <- inline_RpnCalc_handle_RpnCalc_push_pending_64_t6 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\"] }", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_n <- inline_RpnCalc_handle_RpnCalc_push_pending_64_t8 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_n <- inline_RpnCalc_handle_RpnCalc_push_pending_64_t8 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t0 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t0 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_values <- inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t0 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# 0121f Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_values <- inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t0 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0x44), Register(0x64)], resolved: None }
21 44 64 
# inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t2 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_values U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t2 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_values U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0x64), Register(0x64)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t6 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_s U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t6 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_s U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t7 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 01222 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t7 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x4c), Constant32(0x00000040=64)], resolved: None }
20 4c 40 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t5 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t6 Add inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t7
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 01228 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t5 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t6 Add inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01229 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t5 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t6 Add inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x44), Register(0x4c), Register(0x4c)], resolved: None }
30 44 4c 4c 
# 0122d Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t5 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t6 Add inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t4 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t5] U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 0122e Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t4 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t5] U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x4c), Register(0x4c)], resolved: None }
22 4c 4c 
# inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t4 Add inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t4
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 01231 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t4 Add inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01232 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t4 Add inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_1, args: [Register(0x4c), Register(0x4c), Register(0x4c)], resolved: None }
30 4c 4c 4c 
# 01236 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t4 Add inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t3 Add inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t3
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))"] }
# 01237 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t3 Add inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01238 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t3 Add inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x4c), Register(0x4c), Register(0x4c)], resolved: None }
30 4c 4c 4c 
# 0123c Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t3 Add inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t3
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))"] }
# 0123d Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0123e Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_1, args: [Register(0x64), Register(0x4c), Register(0x64)], resolved: None }
30 64 4c 64 
# 01242 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t9 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_n U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t9 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_n U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t1] <- inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t9 U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }"] }
# 01243 Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t1] <- inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_1, args: [Register(0x40), Register(0x64)], resolved: None }
23 40 64 
# 01246 Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t1] <- inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t11 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# 01247 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t11 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x40)], resolved: None }
21 44 40 
# inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t12 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 0124a Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t12 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x64), Constant32(0x00000040=64)], resolved: None }
20 64 40 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t10 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t11 Add inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t12
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 01250 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t10 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t11 Add inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01251 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t10 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t11 Add inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x40), Register(0x64), Register(0x40)], resolved: None }
30 40 64 40 
# 01255 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t10 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t11 Add inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t16 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t16 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t17 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 01256 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t17 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x64), Constant32(0x00000040=64)], resolved: None }
20 64 40 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t15 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t16 Add inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t17
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 0125c Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t15 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t16 Add inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0125d Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t15 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t16 Add inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x44), Register(0x64), Register(0x44)], resolved: None }
30 44 64 44 
# 01261 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t15 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t16 Add inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t14 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t15] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 01262 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t14 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t15] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x44), Register(0x44)], resolved: None }
22 44 44 
# inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t18 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 01265 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t18 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x64), Constant32(0x00000001=1)], resolved: None }
20 64 01 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t13 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t14 Add inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t18
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))"] }
# 0126b Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t13 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t14 Add inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0126c Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t13 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t14 Add inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x44), Register(0x64), Register(0x44)], resolved: None }
30 44 64 44 
# 01270 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t13 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t14 Add inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t10] <- inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t13 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }"] }
# 01271 Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t10] <- inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t13 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_1, args: [Register(0x44), Register(0x40)], resolved: None }
23 44 40 
# 01274 Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t10] <- inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_t13 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_function_end_stack_push
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_function_end_stack_push\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_function_end_stack_push
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_64_inline_RpnCalc_push_pending_stack_push_62_function_end_stack_push
# inline_RpnCalc_handle_RpnCalc_push_pending_64_t13 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_t13 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_64_t14 <- 0n68/0x00000044u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Number(USIZE, 68)", "Number(USIZE, 68)"] }
# 01275 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_t14 <- 0n68/0x00000044u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Number(USIZE, 68)\", \"Number(USIZE, 68)\"] }", opcode: LoadImm32, args: [Register(0x40), Constant32(0x00000044=68)], resolved: None }
20 40 44 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_64_t12 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_t13 Add inline_RpnCalc_handle_RpnCalc_push_pending_64_t14
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))"] }
# 0127b Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_t12 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_t13 Add inline_RpnCalc_handle_RpnCalc_push_pending_64_t14\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0127c Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_t12 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_t13 Add inline_RpnCalc_handle_RpnCalc_push_pending_64_t14\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_1, args: [Register(0x3c), Register(0x40), Register(0x40)], resolved: None }
30 3c 40 40 
# 01280 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_t12 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_t13 Add inline_RpnCalc_handle_RpnCalc_push_pending_64_t14\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_64_t15 <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 01281 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_t15 <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x44), Constant32(0x00000000=0)], resolved: None }
20 44 00 00 00 00 
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_64_t12] <- inline_RpnCalc_handle_RpnCalc_push_pending_64_t15 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }"] }
# 01287 Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_64_t12] <- inline_RpnCalc_handle_RpnCalc_push_pending_64_t15 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\"] }", opcode: Store32_1, args: [Register(0x44), Register(0x40)], resolved: None }
23 44 40 
# 0128a Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_64_t12] <- inline_RpnCalc_handle_RpnCalc_push_pending_64_t15 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_RpnCalc_handle_RpnCalc_push_pending_64_t17 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_t17 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_64_t18 <- 0n72/0x00000048u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))", "Number(USIZE, 72)", "Number(USIZE, 72)"] }
# 0128b Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_t18 <- 0n72/0x00000048u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\", \"Number(USIZE, 72)\", \"Number(USIZE, 72)\"] }", opcode: LoadImm32, args: [Register(0x40), Constant32(0x00000048=72)], resolved: None }
20 40 48 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_64_t16 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_t17 Add inline_RpnCalc_handle_RpnCalc_push_pending_64_t18
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))"] }
# 01291 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_t16 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_t17 Add inline_RpnCalc_handle_RpnCalc_push_pending_64_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01292 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_t16 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_t17 Add inline_RpnCalc_handle_RpnCalc_push_pending_64_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: AddCarry32_1, args: [Register(0x3c), Register(0x40), Register(0x3c)], resolved: None }
30 3c 40 3c 
# 01296 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_t16 <- inline_RpnCalc_handle_RpnCalc_push_pending_64_t17 Add inline_RpnCalc_handle_RpnCalc_push_pending_64_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_64_t19 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 01297 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_64_t19 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x68), Constant8(0x00=0)], resolved: None }
04 68 00 
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_64_t16] <- inline_RpnCalc_handle_RpnCalc_push_pending_64_t19 U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }"] }
# 0129a Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_64_t16] <- inline_RpnCalc_handle_RpnCalc_push_pending_64_t19 U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\"] }", opcode: Store8, args: [Register(0x68), Register(0x3c)], resolved: None }
06 68 3c 
# goto inline_RpnCalc_handle_RpnCalc_push_pending_64_RpnCalc_push_pending_if_end_0
# 	SourceContext { contexts: [] }
# 0129d Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_64_RpnCalc_push_pending_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_64_RpnCalc_push_pending_if_end_0)], resolved: None }
70 a1 12 00 
# :inline_RpnCalc_handle_RpnCalc_push_pending_64_RpnCalc_push_pending_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_64_RpnCalc_push_pending_if_else_0_2
# :inline_RpnCalc_handle_RpnCalc_push_pending_64_RpnCalc_push_pending_if_end_0
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_64_RpnCalc_push_pending_if_end_0
# goto inline_RpnCalc_handle_RpnCalc_push_pending_64_function_end_RpnCalc_push_pending
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_64_function_end_RpnCalc_push_pending\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_64_function_end_RpnCalc_push_pending)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_64_function_end_RpnCalc_push_pending
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_64_function_end_RpnCalc_push_pending
# goto RpnCalc_handle_if_end_23
# 	SourceContext { contexts: [] }
# 012a1 Instruction { source: "goto RpnCalc_handle_if_end_23\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_23)], resolved: None }
70 cf 15 00 
# :RpnCalc_handle_if_else_6_37
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_6_37
# t94 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 32) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# 012a5 Instruction { source: "t94 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 32) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x48), Register(0x49)], resolved: None }
0b 48 49 
# t95 <- 0n32/0x20u8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 32) }", "Number(U8, 32)", "Number(U8, 32)"] }
# 012a8 Instruction { source: "t95 <- 0n32/0x20u8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 32) }\", \"Number(U8, 32)\", \"Number(U8, 32)\"] }", opcode: LoadImm8, args: [Register(0x68), Constant8(0x20=32)], resolved: None }
04 68 20 
# if t94 == t95 then 'RpnCalc_handle_if_true_7_38' else 'RpnCalc_handle_if_else_7_39'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 32) }"] }
# 012ab Instruction { source: "if t94 == t95 then 'RpnCalc_handle_if_true_7_38' else 'RpnCalc_handle_if_else_7_39'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 32) }\"] }", opcode: Cmp8, args: [Register(0x49), Register(0x68)], resolved: None }
15 49 68 
# 012ae Instruction { source: "if t94 == t95 then 'RpnCalc_handle_if_true_7_38' else 'RpnCalc_handle_if_else_7_39'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 32) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_handle_if_true_7_38)], resolved: None }
72 b6 12 00 
# 012b2 Instruction { source: "if t94 == t95 then 'RpnCalc_handle_if_true_7_38' else 'RpnCalc_handle_if_else_7_39'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 32) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_7_39)], resolved: None }
70 6a 13 00 
# :RpnCalc_handle_if_true_7_38
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_true_7_38
# t97 <- c U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# 012b6 Instruction { source: "t97 <- c U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x3c)], resolved: None }
21 44 3c 
# inline_RpnCalc_handle_RpnCalc_push_pending_65_c <- t97 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_c <- t97 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"RpnCalc_push_pending\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_65_t2 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_c U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }", "PtrFieldDeref(\"c\", \"have_num\")", "PtrFieldDeref(\"c\", \"have_num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_t2 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_c U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_65_t3 <- 0n72/0x00000048u32 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }", "PtrFieldDeref(\"c\", \"have_num\")", "PtrFieldDeref(\"c\", \"have_num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))", "Number(USIZE, 72)", "Number(USIZE, 72)"] }
# 012b9 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_t3 <- 0n72/0x00000048u32 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\", \"Number(USIZE, 72)\", \"Number(USIZE, 72)\"] }", opcode: LoadImm32, args: [Register(0x40), Constant32(0x00000048=72)], resolved: None }
20 40 48 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_65_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_65_t3
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }", "PtrFieldDeref(\"c\", \"have_num\")", "PtrFieldDeref(\"c\", \"have_num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))"] }
# 012bf Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_65_t3\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 012c0 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_65_t3\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: AddCarry32_1, args: [Register(0x3c), Register(0x40), Register(0x40)], resolved: None }
30 3c 40 40 
# 012c4 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_65_t3\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_65_t0 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_65_t1] U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }", "PtrFieldDeref(\"c\", \"have_num\")", "PtrFieldDeref(\"c\", \"have_num\")"] }
# 012c5 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_t0 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_65_t1] U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"have_num\\\")\"] }", opcode: Load8, args: [Register(0x40), Register(0x68)], resolved: None }
05 40 68 
# inline_RpnCalc_handle_RpnCalc_push_pending_65_t4 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 012c8 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_t4 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x69), Constant8(0x00=0)], resolved: None }
04 69 00 
# if inline_RpnCalc_handle_RpnCalc_push_pending_65_t0 != inline_RpnCalc_handle_RpnCalc_push_pending_65_t4 then 'inline_RpnCalc_handle_RpnCalc_push_pending_65_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_65_RpnCalc_push_pending_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }", "Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }"] }
# 012cb Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_65_t0 != inline_RpnCalc_handle_RpnCalc_push_pending_65_t4 then 'inline_RpnCalc_handle_RpnCalc_push_pending_65_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_65_RpnCalc_push_pending_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x68), Register(0x69)], resolved: None }
15 68 69 
# 012ce Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_65_t0 != inline_RpnCalc_handle_RpnCalc_push_pending_65_t4 then 'inline_RpnCalc_handle_RpnCalc_push_pending_65_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_65_RpnCalc_push_pending_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_65_RpnCalc_push_pending_if_else_0_2)], resolved: None }
72 66 13 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_65_t0 != inline_RpnCalc_handle_RpnCalc_push_pending_65_t4 then 'inline_RpnCalc_handle_RpnCalc_push_pending_65_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_65_RpnCalc_push_pending_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\", \"Comparison { op: NotEquals, left: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_65_RpnCalc_push_pending_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_65_RpnCalc_push_pending_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }"] }
# inline_RpnCalc_handle_RpnCalc_push_pending_65_RpnCalc_push_pending_if_true_0_1
# inline_RpnCalc_handle_RpnCalc_push_pending_65_t7 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_c U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_t7 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_c U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Stack\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Stack\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_65_t6 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_t7 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))"] }
# 012d2 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_t6 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_t7 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x44)], resolved: None }
21 3c 44 
# inline_RpnCalc_handle_RpnCalc_push_pending_65_t10 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_c U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_t10 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_c U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_65_t11 <- 0n68/0x00000044u32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Number(USIZE, 68)", "Number(USIZE, 68)"] }
# 012d5 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_t11 <- 0n68/0x00000044u32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Number(USIZE, 68)\", \"Number(USIZE, 68)\"] }", opcode: LoadImm32, args: [Register(0x40), Constant32(0x00000044=68)], resolved: None }
20 40 44 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_65_t9 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_t10 Add inline_RpnCalc_handle_RpnCalc_push_pending_65_t11
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))"] }
# 012db Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_t9 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_t10 Add inline_RpnCalc_handle_RpnCalc_push_pending_65_t11\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 012dc Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_t9 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_t10 Add inline_RpnCalc_handle_RpnCalc_push_pending_65_t11\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_1, args: [Register(0x3c), Register(0x40), Register(0x40)], resolved: None }
30 3c 40 40 
# 012e0 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_t9 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_t10 Add inline_RpnCalc_handle_RpnCalc_push_pending_65_t11\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_65_t8 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_65_t9] U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")"] }
# 012e1 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_t8 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_65_t9] U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\"] }", opcode: Load32, args: [Register(0x40), Register(0x40)], resolved: None }
22 40 40 
# inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_s <- inline_RpnCalc_handle_RpnCalc_push_pending_65_t6 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_s <- inline_RpnCalc_handle_RpnCalc_push_pending_65_t6 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\"] }", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_n <- inline_RpnCalc_handle_RpnCalc_push_pending_65_t8 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_n <- inline_RpnCalc_handle_RpnCalc_push_pending_65_t8 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"stack_push\\\", parameters: [AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")), PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t0 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t0 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_values <- inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t0 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# 012e4 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_values <- inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t0 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0x44), Register(0x64)], resolved: None }
21 44 64 
# inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t2 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_values U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t2 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_values U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0x64), Register(0x64)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t6 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_s U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t6 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_s U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t7 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 012e7 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t7 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x4c), Constant32(0x00000040=64)], resolved: None }
20 4c 40 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t5 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t6 Add inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t7
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 012ed Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t5 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t6 Add inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 012ee Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t5 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t6 Add inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x44), Register(0x4c), Register(0x4c)], resolved: None }
30 44 4c 4c 
# 012f2 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t5 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t6 Add inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t4 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t5] U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 012f3 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t4 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t5] U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x4c), Register(0x4c)], resolved: None }
22 4c 4c 
# inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t4 Add inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t4
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 012f6 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t4 Add inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 012f7 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t4 Add inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_1, args: [Register(0x4c), Register(0x4c), Register(0x4c)], resolved: None }
30 4c 4c 4c 
# 012fb Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t4 Add inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t3 Add inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t3
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))", "Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))"] }
# 012fc Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t3 Add inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 012fd Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t3 Add inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x4c), Register(0x4c), Register(0x4c)], resolved: None }
30 4c 4c 4c 
# 01301 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t3 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t3 Add inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t3
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))"] }
# 01302 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01303 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_1, args: [Register(0x64), Register(0x4c), Register(0x64)], resolved: None }
30 64 4c 64 
# 01307 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t1 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t2 Add inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t9 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_n U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t9 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_n U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t1] <- inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t9 U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }"] }
# 01308 Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t1] <- inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_1, args: [Register(0x40), Register(0x64)], resolved: None }
23 40 64 
# 0130b Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t1] <- inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t11 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# 0130c Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t11 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x40)], resolved: None }
21 44 40 
# inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t12 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 0130f Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t12 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x64), Constant32(0x00000040=64)], resolved: None }
20 64 40 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t10 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t11 Add inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t12
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 01315 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t10 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t11 Add inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01316 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t10 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t11 Add inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x40), Register(0x64), Register(0x40)], resolved: None }
30 40 64 40 
# 0131a Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t10 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t11 Add inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t16 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t16 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t17 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 0131b Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t17 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x64), Constant32(0x00000040=64)], resolved: None }
20 64 40 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t15 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t16 Add inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t17
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 01321 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t15 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t16 Add inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01322 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t15 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t16 Add inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x44), Register(0x64), Register(0x44)], resolved: None }
30 44 64 44 
# 01326 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t15 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t16 Add inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t14 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t15] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first_free\")", "PtrFieldDeref(\"s\", \"first_free\")"] }
# 01327 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t14 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t15] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first_free\\\")\"] }", opcode: Load32, args: [Register(0x44), Register(0x44)], resolved: None }
22 44 44 
# inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t18 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 0132a Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t18 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x64), Constant32(0x00000001=1)], resolved: None }
20 64 01 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t13 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t14 Add inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t18
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))"] }
# 01330 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t13 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t14 Add inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01331 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t13 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t14 Add inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x44), Register(0x64), Register(0x44)], resolved: None }
30 44 64 44 
# 01335 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t13 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t14 Add inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t10] <- inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t13 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }"] }
# 01336 Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t10] <- inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t13 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_1, args: [Register(0x44), Register(0x40)], resolved: None }
23 44 40 
# 01339 Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t10] <- inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_t13 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), Number(U8, 1)) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_function_end_stack_push
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_function_end_stack_push\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_function_end_stack_push
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_65_inline_RpnCalc_push_pending_stack_push_62_function_end_stack_push
# inline_RpnCalc_handle_RpnCalc_push_pending_65_t13 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_t13 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_65_t14 <- 0n68/0x00000044u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Number(USIZE, 68)", "Number(USIZE, 68)"] }
# 0133a Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_t14 <- 0n68/0x00000044u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Number(USIZE, 68)\", \"Number(USIZE, 68)\"] }", opcode: LoadImm32, args: [Register(0x40), Constant32(0x00000044=68)], resolved: None }
20 40 44 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_65_t12 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_t13 Add inline_RpnCalc_handle_RpnCalc_push_pending_65_t14
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))"] }
# 01340 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_t12 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_t13 Add inline_RpnCalc_handle_RpnCalc_push_pending_65_t14\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01341 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_t12 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_t13 Add inline_RpnCalc_handle_RpnCalc_push_pending_65_t14\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_1, args: [Register(0x3c), Register(0x40), Register(0x40)], resolved: None }
30 3c 40 40 
# 01345 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_t12 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_t13 Add inline_RpnCalc_handle_RpnCalc_push_pending_65_t14\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_65_t15 <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 01346 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_t15 <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x44), Constant32(0x00000000=0)], resolved: None }
20 44 00 00 00 00 
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_65_t12] <- inline_RpnCalc_handle_RpnCalc_push_pending_65_t15 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }"] }
# 0134c Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_65_t12] <- inline_RpnCalc_handle_RpnCalc_push_pending_65_t15 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\"] }", opcode: Store32_1, args: [Register(0x44), Register(0x40)], resolved: None }
23 44 40 
# 0134f Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_65_t12] <- inline_RpnCalc_handle_RpnCalc_push_pending_65_t15 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_RpnCalc_handle_RpnCalc_push_pending_65_t17 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_t17 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_65_t18 <- 0n72/0x00000048u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))", "Number(USIZE, 72)", "Number(USIZE, 72)"] }
# 01350 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_t18 <- 0n72/0x00000048u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\", \"Number(USIZE, 72)\", \"Number(USIZE, 72)\"] }", opcode: LoadImm32, args: [Register(0x40), Constant32(0x00000048=72)], resolved: None }
20 40 48 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_65_t16 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_t17 Add inline_RpnCalc_handle_RpnCalc_push_pending_65_t18
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))"] }
# 01356 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_t16 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_t17 Add inline_RpnCalc_handle_RpnCalc_push_pending_65_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01357 Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_t16 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_t17 Add inline_RpnCalc_handle_RpnCalc_push_pending_65_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: AddCarry32_1, args: [Register(0x3c), Register(0x40), Register(0x3c)], resolved: None }
30 3c 40 3c 
# 0135b Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_t16 <- inline_RpnCalc_handle_RpnCalc_push_pending_65_t17 Add inline_RpnCalc_handle_RpnCalc_push_pending_65_t18\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_65_t19 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0135c Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_65_t19 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x68), Constant8(0x00=0)], resolved: None }
04 68 00 
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_65_t16] <- inline_RpnCalc_handle_RpnCalc_push_pending_65_t19 U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }"] }
# 0135f Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_push_pending_65_t16] <- inline_RpnCalc_handle_RpnCalc_push_pending_65_t19 U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 0) }\"] }", opcode: Store8, args: [Register(0x68), Register(0x3c)], resolved: None }
06 68 3c 
# goto inline_RpnCalc_handle_RpnCalc_push_pending_65_RpnCalc_push_pending_if_end_0
# 	SourceContext { contexts: [] }
# 01362 Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_65_RpnCalc_push_pending_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_65_RpnCalc_push_pending_if_end_0)], resolved: None }
70 66 13 00 
# :inline_RpnCalc_handle_RpnCalc_push_pending_65_RpnCalc_push_pending_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_65_RpnCalc_push_pending_if_else_0_2
# :inline_RpnCalc_handle_RpnCalc_push_pending_65_RpnCalc_push_pending_if_end_0
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_65_RpnCalc_push_pending_if_end_0
# goto inline_RpnCalc_handle_RpnCalc_push_pending_65_function_end_RpnCalc_push_pending
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_65_function_end_RpnCalc_push_pending\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_65_function_end_RpnCalc_push_pending)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_65_function_end_RpnCalc_push_pending
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_65_function_end_RpnCalc_push_pending
# goto RpnCalc_handle_if_end_23
# 	SourceContext { contexts: [] }
# 01366 Instruction { source: "goto RpnCalc_handle_if_end_23\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_23)], resolved: None }
70 cf 15 00 
# :RpnCalc_handle_if_else_7_39
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_7_39
# t98 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 99) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# 0136a Instruction { source: "t98 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 99) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x48), Register(0x49)], resolved: None }
0b 48 49 
# t99 <- 0n99/0x63u8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 99) }", "Number(U8, 99)", "Number(U8, 99)"] }
# 0136d Instruction { source: "t99 <- 0n99/0x63u8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 99) }\", \"Number(U8, 99)\", \"Number(U8, 99)\"] }", opcode: LoadImm8, args: [Register(0x68), Constant8(0x63=99)], resolved: None }
04 68 63 
# if t98 == t99 then 'RpnCalc_handle_if_true_8_40' else 'RpnCalc_handle_if_else_8_41'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 99) }"] }
# 01370 Instruction { source: "if t98 == t99 then 'RpnCalc_handle_if_true_8_40' else 'RpnCalc_handle_if_else_8_41'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 99) }\"] }", opcode: Cmp8, args: [Register(0x49), Register(0x68)], resolved: None }
15 49 68 
# 01373 Instruction { source: "if t98 == t99 then 'RpnCalc_handle_if_true_8_40' else 'RpnCalc_handle_if_else_8_41'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 99) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_handle_if_true_8_40)], resolved: None }
72 7b 13 00 
# 01377 Instruction { source: "if t98 == t99 then 'RpnCalc_handle_if_true_8_40' else 'RpnCalc_handle_if_else_8_41'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 99) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_8_41)], resolved: None }
70 b1 13 00 
# :RpnCalc_handle_if_true_8_40
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_true_8_40
# t101 <- c U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# 0137b Instruction { source: "t101 <- c U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"RpnCalc_init\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_init\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"RpnCalc_init\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x3c)], resolved: None }
21 44 3c 
# inline_RpnCalc_handle_RpnCalc_init_52_c <- t101 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_52_c <- t101 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"RpnCalc_init\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_init\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"RpnCalc_init\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_init_52_t0 <- inline_RpnCalc_handle_RpnCalc_init_52_c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"s\"), var_type: Some(Ptr(Struct(\"Stack\"))), value: AddressOf(PtrFieldDeref(\"c\", \"stack\")) }", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_52_t0 <- inline_RpnCalc_handle_RpnCalc_init_52_c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"s\\\"), var_type: Some(Ptr(Struct(\\\"Stack\\\"))), value: AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Stack\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Stack\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_init_52_s <- inline_RpnCalc_handle_RpnCalc_init_52_t0 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"s\"), var_type: Some(Ptr(Struct(\"Stack\"))), value: AddressOf(PtrFieldDeref(\"c\", \"stack\")) }", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))"] }
# 0137e Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_52_s <- inline_RpnCalc_handle_RpnCalc_init_52_t0 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"s\\\"), var_type: Some(Ptr(Struct(\\\"Stack\\\"))), value: AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x40)], resolved: None }
21 3c 40 
# inline_RpnCalc_handle_RpnCalc_init_52_t2 <- inline_RpnCalc_handle_RpnCalc_init_52_s U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] }) }", "Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] })", "Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] })", "Ident(\"s\")", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_52_t2 <- inline_RpnCalc_handle_RpnCalc_init_52_s U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_init\\\", parameters: [Ident(\\\"s\\\")] }) }\", \"Call(Call { function: \\\"stack_init\\\", parameters: [Ident(\\\"s\\\")] })\", \"Call(Call { function: \\\"stack_init\\\", parameters: [Ident(\\\"s\\\")] })\", \"Ident(\\\"s\\\")\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_init_52_inline_RpnCalc_init_stack_init_51_s <- inline_RpnCalc_handle_RpnCalc_init_52_t2 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] }) }", "Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] })", "Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_52_inline_RpnCalc_init_stack_init_51_s <- inline_RpnCalc_handle_RpnCalc_init_52_t2 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_init\\\", parameters: [Ident(\\\"s\\\")] }) }\", \"Call(Call { function: \\\"stack_init\\\", parameters: [Ident(\\\"s\\\")] })\", \"Call(Call { function: \\\"stack_init\\\", parameters: [Ident(\\\"s\\\")] })\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_init_52_inline_RpnCalc_init_stack_init_51_t1 <- inline_RpnCalc_handle_RpnCalc_init_52_inline_RpnCalc_init_stack_init_51_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_52_inline_RpnCalc_init_stack_init_51_t1 <- inline_RpnCalc_handle_RpnCalc_init_52_inline_RpnCalc_init_stack_init_51_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_init_52_inline_RpnCalc_init_stack_init_51_t2 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 01381 Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_52_inline_RpnCalc_init_stack_init_51_t2 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x44), Constant32(0x00000040=64)], resolved: None }
20 44 40 00 00 00 
# inline_RpnCalc_handle_RpnCalc_init_52_inline_RpnCalc_init_stack_init_51_t0 <- inline_RpnCalc_handle_RpnCalc_init_52_inline_RpnCalc_init_stack_init_51_t1 Add inline_RpnCalc_handle_RpnCalc_init_52_inline_RpnCalc_init_stack_init_51_t2
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 01387 Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_52_inline_RpnCalc_init_stack_init_51_t0 <- inline_RpnCalc_handle_RpnCalc_init_52_inline_RpnCalc_init_stack_init_51_t1 Add inline_RpnCalc_handle_RpnCalc_init_52_inline_RpnCalc_init_stack_init_51_t2\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01388 Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_52_inline_RpnCalc_init_stack_init_51_t0 <- inline_RpnCalc_handle_RpnCalc_init_52_inline_RpnCalc_init_stack_init_51_t1 Add inline_RpnCalc_handle_RpnCalc_init_52_inline_RpnCalc_init_stack_init_51_t2\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x40), Register(0x44), Register(0x40)], resolved: None }
30 40 44 40 
# 0138c Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_52_inline_RpnCalc_init_stack_init_51_t0 <- inline_RpnCalc_handle_RpnCalc_init_52_inline_RpnCalc_init_stack_init_51_t1 Add inline_RpnCalc_handle_RpnCalc_init_52_inline_RpnCalc_init_stack_init_51_t2\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_init_52_inline_RpnCalc_init_stack_init_51_t3 <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Number(USIZE, 0) }", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 0138d Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_52_inline_RpnCalc_init_stack_init_51_t3 <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x44), Constant32(0x00000000=0)], resolved: None }
20 44 00 00 00 00 
# mem[inline_RpnCalc_handle_RpnCalc_init_52_inline_RpnCalc_init_stack_init_51_t0] <- inline_RpnCalc_handle_RpnCalc_init_52_inline_RpnCalc_init_stack_init_51_t3 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Number(USIZE, 0) }"] }
# 01393 Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_init_52_inline_RpnCalc_init_stack_init_51_t0] <- inline_RpnCalc_handle_RpnCalc_init_52_inline_RpnCalc_init_stack_init_51_t3 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Number(USIZE, 0) }\"] }", opcode: Store32_1, args: [Register(0x44), Register(0x40)], resolved: None }
23 44 40 
# 01396 Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_init_52_inline_RpnCalc_init_stack_init_51_t0] <- inline_RpnCalc_handle_RpnCalc_init_52_inline_RpnCalc_init_stack_init_51_t3 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Number(USIZE, 0) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto inline_RpnCalc_handle_RpnCalc_init_52_inline_RpnCalc_init_stack_init_51_function_end_stack_init
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_init_52_inline_RpnCalc_init_stack_init_51_function_end_stack_init\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_init_52_inline_RpnCalc_init_stack_init_51_function_end_stack_init)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_init_52_inline_RpnCalc_init_stack_init_51_function_end_stack_init
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_RpnCalc_init_52_inline_RpnCalc_init_stack_init_51_function_end_stack_init
# inline_RpnCalc_handle_RpnCalc_init_52_t4 <- inline_RpnCalc_handle_RpnCalc_init_52_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_52_t4 <- inline_RpnCalc_handle_RpnCalc_init_52_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_init_52_t5 <- 0n68/0x00000044u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Number(USIZE, 68)", "Number(USIZE, 68)"] }
# 01397 Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_52_t5 <- 0n68/0x00000044u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Number(USIZE, 68)\", \"Number(USIZE, 68)\"] }", opcode: LoadImm32, args: [Register(0x40), Constant32(0x00000044=68)], resolved: None }
20 40 44 00 00 00 
# inline_RpnCalc_handle_RpnCalc_init_52_t3 <- inline_RpnCalc_handle_RpnCalc_init_52_t4 Add inline_RpnCalc_handle_RpnCalc_init_52_t5
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))"] }
# 0139d Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_52_t3 <- inline_RpnCalc_handle_RpnCalc_init_52_t4 Add inline_RpnCalc_handle_RpnCalc_init_52_t5\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0139e Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_52_t3 <- inline_RpnCalc_handle_RpnCalc_init_52_t4 Add inline_RpnCalc_handle_RpnCalc_init_52_t5\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_1, args: [Register(0x3c), Register(0x40), Register(0x3c)], resolved: None }
30 3c 40 3c 
# 013a2 Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_52_t3 <- inline_RpnCalc_handle_RpnCalc_init_52_t4 Add inline_RpnCalc_handle_RpnCalc_init_52_t5\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_RpnCalc_init_52_t6 <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 013a3 Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_52_t6 <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x40), Constant32(0x00000000=0)], resolved: None }
20 40 00 00 00 00 
# mem[inline_RpnCalc_handle_RpnCalc_init_52_t3] <- inline_RpnCalc_handle_RpnCalc_init_52_t6 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }"] }
# 013a9 Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_init_52_t3] <- inline_RpnCalc_handle_RpnCalc_init_52_t6 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\"] }", opcode: Store32_1, args: [Register(0x40), Register(0x3c)], resolved: None }
23 40 3c 
# 013ac Instruction { source: "mem[inline_RpnCalc_handle_RpnCalc_init_52_t3] <- inline_RpnCalc_handle_RpnCalc_init_52_t6 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto inline_RpnCalc_handle_RpnCalc_init_52_function_end_RpnCalc_init
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_init_52_function_end_RpnCalc_init\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_init_52_function_end_RpnCalc_init)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_init_52_function_end_RpnCalc_init
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_RpnCalc_init_52_function_end_RpnCalc_init
# goto RpnCalc_handle_if_end_23
# 	SourceContext { contexts: [] }
# 013ad Instruction { source: "goto RpnCalc_handle_if_end_23\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_23)], resolved: None }
70 cf 15 00 
# :RpnCalc_handle_if_else_8_41
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_8_41
# t102 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 100) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# 013b1 Instruction { source: "t102 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 100) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x48), Register(0x49)], resolved: None }
0b 48 49 
# t103 <- 0n100/0x64u8 
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 100) }", "Number(U8, 100)", "Number(U8, 100)"] }
# 013b4 Instruction { source: "t103 <- 0n100/0x64u8 \n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 100) }\", \"Number(U8, 100)\", \"Number(U8, 100)\"] }", opcode: LoadImm8, args: [Register(0x68), Constant8(0x64=100)], resolved: None }
04 68 64 
# if t102 == t103 then 'RpnCalc_handle_if_true_9_42' else 'RpnCalc_handle_if_else_9_43'
# 	SourceContext { contexts: ["Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 100) }"] }
# 013b7 Instruction { source: "if t102 == t103 then 'RpnCalc_handle_if_true_9_42' else 'RpnCalc_handle_if_else_9_43'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 100) }\"] }", opcode: Cmp8, args: [Register(0x49), Register(0x68)], resolved: None }
15 49 68 
# 013ba Instruction { source: "if t102 == t103 then 'RpnCalc_handle_if_true_9_42' else 'RpnCalc_handle_if_else_9_43'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 100) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_handle_if_true_9_42)], resolved: None }
72 c2 13 00 
# 013be Instruction { source: "if t102 == t103 then 'RpnCalc_handle_if_true_9_42' else 'RpnCalc_handle_if_else_9_43'\n\tSourceContext { contexts: [\"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 100) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_9_43)], resolved: None }
70 07 15 00 
# :RpnCalc_handle_if_true_9_42
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_true_9_42
# i <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: Some(Number(U8)), value: Number(U8, 0) }", "Number(U8, 0)"] }
# 013c2 Instruction { source: "i <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: Some(Number(U8)), value: Number(U8, 0) }\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x49), Constant8(0x00=0)], resolved: None }
04 49 00 
# :RpnCalc_handle_while_predicate_44
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }"] }
# RpnCalc_handle_while_predicate_44
# t104 <- i U8
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }", "Ident(\"i\")", "Ident(\"i\")"] }
# optimized away noop copy Instruction { source: "t104 <- i U8\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Ident(\\\"stack_count\\\") }, while_true: [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Ident(\\\"stack_count\\\") }\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# t105 <- stack_count U8
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }", "Ident(\"stack_count\")", "Ident(\"stack_count\")"] }
# 013c5 Instruction { source: "t105 <- stack_count U8\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Ident(\\\"stack_count\\\") }, while_true: [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Ident(\\\"stack_count\\\") }\", \"Ident(\\\"stack_count\\\")\", \"Ident(\\\"stack_count\\\")\"] }", opcode: Copy8, args: [Register(0x6a), Register(0x68)], resolved: None }
0b 6a 68 
# if t104 < t105 then 'RpnCalc_handle_while_body_45' else 'RpnCalc_handle_while_end_46'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }"] }
# 013c8 Instruction { source: "if t104 < t105 then 'RpnCalc_handle_while_body_45' else 'RpnCalc_handle_while_end_46'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Ident(\\\"stack_count\\\") }, while_true: [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Ident(\\\"stack_count\\\") }\"] }", opcode: Cmp8, args: [Register(0x68), Register(0x49)], resolved: None }
15 68 49 
# 013cb Instruction { source: "if t104 < t105 then 'RpnCalc_handle_while_body_45' else 'RpnCalc_handle_while_end_46'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Ident(\\\"stack_count\\\") }, while_true: [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Ident(\\\"stack_count\\\") }\"] }", opcode: JcImm, args: [Label24(RpnCalc_handle_while_end_46)], resolved: None }
71 03 15 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t104 < t105 then 'RpnCalc_handle_while_body_45' else 'RpnCalc_handle_while_end_46'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Ident(\\\"stack_count\\\") }, while_true: [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }, VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Ident(\\\"stack_count\\\") }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_while_body_45)], resolved: None }
# :RpnCalc_handle_while_body_45
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }"] }
# RpnCalc_handle_while_body_45
# t107 <- i U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }", "Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] })", "Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] })", "Ident(\"i\")", "Ident(\"i\")"] }
# optimized away noop copy Instruction { source: "t107 <- i U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# None <= call print_dec8(t107,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }", "Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] })", "Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] })"] }
# 013cf Instruction { source: "Arg0[a]=t107 None <= call print_dec8(t107,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"i\\\")] })\"] }", opcode: Copy8, args: [Register(0x49), Register(0x00)], resolved: None }
0b 49 00 
# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 216, 217, 233, 234, 235, 236, 240, 241, 242, 243, 244, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 013d2 Instruction { source: "PseudoCall(Label24(:print_dec8))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 013d8 Instruction { source: "PseudoCall(Label24(:print_dec8))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c e2 13 00 00 
# 013de Instruction { source: "PseudoCall(Label24(:print_dec8))", opcode: JmpImm, args: [Label24(:print_dec8)], resolved: None }
70 0e 2c 00 
# 013e2 Instruction { source: "PseudoCall(Label24(:print_dec8))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# t109 <- 0n58/0x3au8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 58)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 58)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 58)] })", "Number(U8, 58)", "Number(U8, 58)"] }
# 013e8 Instruction { source: "t109 <- 0n58/0x3au8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] })\", \"Number(U8, 58)\", \"Number(U8, 58)\"] }", opcode: LoadImm8, args: [Register(0x68), Constant8(0x3a=58)], resolved: None }
04 68 3a 
# inline_RpnCalc_handle_putc_25_c <- t109 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 58)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 58)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 58)] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_25_c <- t109 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 58)] })\"] }", opcode: Copy8, args: [Register(0x68), Register(0x68)], resolved: None }
# inline_RpnCalc_handle_putc_25_t1 <- inline_RpnCalc_handle_putc_25_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_25_t1 <- inline_RpnCalc_handle_putc_25_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x68), Register(0x68)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_25_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 013eb Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x68)], resolved: None }
68 68 
# inline_RpnCalc_handle_putc_25_t3 <- inline_RpnCalc_handle_putc_25_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_25_t3 <- inline_RpnCalc_handle_putc_25_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x68), Register(0x68)], resolved: None }
# None <= call lcd_write_char(inline_RpnCalc_handle_putc_25_t3,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })"] }
# 013ed Instruction { source: "Arg0[ch]=inline_RpnCalc_handle_putc_25_t3 None <= call lcd_write_char(inline_RpnCalc_handle_putc_25_t3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy8, args: [Register(0x68), Register(0x00)], resolved: None }
0b 68 00 
# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 152, 153, 154, 155, 156, 157, 158, 159, 217, 233, 234, 235, 236, 240, 241, 242, 243, 244, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 013f0 Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 013f6 Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 00 14 00 00 
# 013fc Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: JmpImm, args: [Label24(:lcd_write_char)], resolved: None }
70 1a 22 00 
# 01400 Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# goto inline_RpnCalc_handle_putc_25_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_25_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_25_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_25_function_end_putc
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_putc_25_function_end_putc
# t112 <- stack U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }", "Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] })", "Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] })", "Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })", "Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })", "Ident(\"stack\")", "Ident(\"stack\")"] }
# 01406 Instruction { source: "t112 <- stack U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })\", \"Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })\", \"Ident(\\\"stack\\\")\", \"Ident(\\\"stack\\\")\"] }", opcode: Copy32, args: [Register(0x6c), Register(0x40)], resolved: None }
21 6c 40 
# t114 <- i U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }", "Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] })", "Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] })", "Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })", "Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })", "Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }", "Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }", "Ident(\"i\")", "Ident(\"i\")"] }
# optimized away noop copy Instruction { source: "t114 <- i U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })\", \"Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# t113 U32 <- t114 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }", "Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] })", "Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] })", "Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })", "Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })", "Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }", "Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }"] }
# 01409 Instruction { source: "Zero-pad for t113 U32 <- t114 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })\", \"Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }\"] }", opcode: LoadImm32, args: [Register(0x64), Constant32(0x00000000=0)], resolved: None }
20 64 00 00 00 00 
# 0140f Instruction { source: "t113 U32 <- t114 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })\", \"Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }\"] }", opcode: Copy8, args: [Register(0x49), Register(0x64)], resolved: None }
0b 49 64 
# inline_RpnCalc_handle_stack_get_50_s <- t112 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }", "Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] })", "Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] })", "Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })", "Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })"] }
# 01412 Instruction { source: "inline_RpnCalc_handle_stack_get_50_s <- t112 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })\", \"Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })\"] }", opcode: Copy32, args: [Register(0x40), Register(0x44)], resolved: None }
21 40 44 
# inline_RpnCalc_handle_stack_get_50_n <- t113 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }", "Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] })", "Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] })", "Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })", "Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })"] }
# 01415 Instruction { source: "inline_RpnCalc_handle_stack_get_50_n <- t113 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })\", \"Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })\"] }", opcode: Copy32, args: [Register(0x64), Register(0x40)], resolved: None }
21 64 40 
# inline_RpnCalc_handle_stack_get_50_t0 <- inline_RpnCalc_handle_stack_get_50_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_get_50_t0 <- inline_RpnCalc_handle_stack_get_50_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_stack_get_50_values <- inline_RpnCalc_handle_stack_get_50_t0 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_get_50_values <- inline_RpnCalc_handle_stack_get_50_t0 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_stack_get_50_t3 <- inline_RpnCalc_handle_stack_get_50_values U32
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", Ident(\"n\"))) }", "Index(\"values\", Ident(\"n\"))", "Index(\"values\", Ident(\"n\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4)))", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_get_50_t3 <- inline_RpnCalc_handle_stack_get_50_values U32\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", Ident(\\\"n\\\"))) }\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4)))\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_stack_get_50_t5 <- inline_RpnCalc_handle_stack_get_50_n U32
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", Ident(\"n\"))) }", "Index(\"values\", Ident(\"n\"))", "Index(\"values\", Ident(\"n\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4)))", "Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))", "Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_get_50_t5 <- inline_RpnCalc_handle_stack_get_50_n U32\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", Ident(\\\"n\\\"))) }\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_get_50_t4 <- inline_RpnCalc_handle_stack_get_50_t5 Add inline_RpnCalc_handle_stack_get_50_t5
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", Ident(\"n\"))) }", "Index(\"values\", Ident(\"n\"))", "Index(\"values\", Ident(\"n\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4)))", "Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))", "Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 01418 Instruction { source: "inline_RpnCalc_handle_stack_get_50_t4 <- inline_RpnCalc_handle_stack_get_50_t5 Add inline_RpnCalc_handle_stack_get_50_t5\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", Ident(\\\"n\\\"))) }\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01419 Instruction { source: "inline_RpnCalc_handle_stack_get_50_t4 <- inline_RpnCalc_handle_stack_get_50_t5 Add inline_RpnCalc_handle_stack_get_50_t5\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", Ident(\\\"n\\\"))) }\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_1, args: [Register(0x40), Register(0x40), Register(0x40)], resolved: None }
30 40 40 40 
# 0141d Instruction { source: "inline_RpnCalc_handle_stack_get_50_t4 <- inline_RpnCalc_handle_stack_get_50_t5 Add inline_RpnCalc_handle_stack_get_50_t5\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", Ident(\\\"n\\\"))) }\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_get_50_t4 <- inline_RpnCalc_handle_stack_get_50_t4 Add inline_RpnCalc_handle_stack_get_50_t4
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", Ident(\"n\"))) }", "Index(\"values\", Ident(\"n\"))", "Index(\"values\", Ident(\"n\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4)))", "Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))", "Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))"] }
# 0141e Instruction { source: "inline_RpnCalc_handle_stack_get_50_t4 <- inline_RpnCalc_handle_stack_get_50_t4 Add inline_RpnCalc_handle_stack_get_50_t4\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", Ident(\\\"n\\\"))) }\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0141f Instruction { source: "inline_RpnCalc_handle_stack_get_50_t4 <- inline_RpnCalc_handle_stack_get_50_t4 Add inline_RpnCalc_handle_stack_get_50_t4\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", Ident(\\\"n\\\"))) }\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x40), Register(0x40), Register(0x40)], resolved: None }
30 40 40 40 
# 01423 Instruction { source: "inline_RpnCalc_handle_stack_get_50_t4 <- inline_RpnCalc_handle_stack_get_50_t4 Add inline_RpnCalc_handle_stack_get_50_t4\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", Ident(\\\"n\\\"))) }\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4)))\", \"Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))\", \"Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_get_50_t2 <- inline_RpnCalc_handle_stack_get_50_t3 Add inline_RpnCalc_handle_stack_get_50_t4
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", Ident(\"n\"))) }", "Index(\"values\", Ident(\"n\"))", "Index(\"values\", Ident(\"n\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4)))"] }
# 01424 Instruction { source: "inline_RpnCalc_handle_stack_get_50_t2 <- inline_RpnCalc_handle_stack_get_50_t3 Add inline_RpnCalc_handle_stack_get_50_t4\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", Ident(\\\"n\\\"))) }\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01425 Instruction { source: "inline_RpnCalc_handle_stack_get_50_t2 <- inline_RpnCalc_handle_stack_get_50_t3 Add inline_RpnCalc_handle_stack_get_50_t4\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", Ident(\\\"n\\\"))) }\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_1, args: [Register(0x44), Register(0x40), Register(0x40)], resolved: None }
30 44 40 40 
# 01429 Instruction { source: "inline_RpnCalc_handle_stack_get_50_t2 <- inline_RpnCalc_handle_stack_get_50_t3 Add inline_RpnCalc_handle_stack_get_50_t4\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", Ident(\\\"n\\\"))) }\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Arithmetic(Multiply, Ident(\\\"n\\\"), Number(USIZE, 4)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_stack_get_50_t1 <- mem[inline_RpnCalc_handle_stack_get_50_t2] U32
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", Ident(\"n\"))) }", "Index(\"values\", Ident(\"n\"))", "Index(\"values\", Ident(\"n\"))"] }
# 0142a Instruction { source: "inline_RpnCalc_handle_stack_get_50_t1 <- mem[inline_RpnCalc_handle_stack_get_50_t2] U32\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", Ident(\\\"n\\\"))) }\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\", \"Index(\\\"values\\\", Ident(\\\"n\\\"))\"] }", opcode: Load32, args: [Register(0x40), Register(0x40)], resolved: None }
22 40 40 
# t111 <- inline_RpnCalc_handle_stack_get_50_t1 U32
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", Ident(\"n\"))) }"] }
# optimized away noop copy Instruction { source: "t111 <- inline_RpnCalc_handle_stack_get_50_t1 U32\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", Ident(\\\"n\\\"))) }\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# goto inline_RpnCalc_handle_stack_get_50_function_end_stack_get
# 	SourceContext { contexts: ["Return { value: Some(Index(\"values\", Ident(\"n\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_get_50_function_end_stack_get\n\tSourceContext { contexts: [\"Return { value: Some(Index(\\\"values\\\", Ident(\\\"n\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_get_50_function_end_stack_get)], resolved: None }
# :inline_RpnCalc_handle_stack_get_50_function_end_stack_get
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_stack_get_50_function_end_stack_get
# None <= call print_dec32(t111,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }", "Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] })", "Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] })"] }
# 0142d Instruction { source: "Arg0[a]=t111 None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Copy32, args: [Register(0x40), Register(0x00)], resolved: None }
21 40 00 
# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 124, 125, 126, 127, 128, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 216, 217, 233, 234, 235, 236, 240, 241, 242, 243, 244, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: [72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113]
# 01430 Instruction { source: "Saving reg0x71 before None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x71)], resolved: None }
09 71 
# 01432 Instruction { source: "Saving reg0x70 before None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x70)], resolved: None }
09 70 
# 01434 Instruction { source: "Saving reg0x6f before None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x6f)], resolved: None }
09 6f 
# 01436 Instruction { source: "Saving reg0x6e before None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x6e)], resolved: None }
09 6e 
# 01438 Instruction { source: "Saving reg0x6d before None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x6d)], resolved: None }
09 6d 
# 0143a Instruction { source: "Saving reg0x6c before None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x6c)], resolved: None }
09 6c 
# 0143c Instruction { source: "Saving reg0x6a before None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x6a)], resolved: None }
09 6a 
# 0143e Instruction { source: "Saving reg0x69 before None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x69)], resolved: None }
09 69 
# 01440 Instruction { source: "Saving reg0x68 before None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x68)], resolved: None }
09 68 
# 01442 Instruction { source: "Saving reg0x67 before None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x67)], resolved: None }
09 67 
# 01444 Instruction { source: "Saving reg0x66 before None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x66)], resolved: None }
09 66 
# 01446 Instruction { source: "Saving reg0x65 before None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x65)], resolved: None }
09 65 
# 01448 Instruction { source: "Saving reg0x64 before None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x64)], resolved: None }
09 64 
# 0144a Instruction { source: "Saving reg0x61 before None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x61)], resolved: None }
09 61 
# 0144c Instruction { source: "Saving reg0x60 before None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x60)], resolved: None }
09 60 
# 0144e Instruction { source: "Saving reg0x5f before None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x5f)], resolved: None }
09 5f 
# 01450 Instruction { source: "Saving reg0x5e before None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x5e)], resolved: None }
09 5e 
# 01452 Instruction { source: "Saving reg0x5d before None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x5d)], resolved: None }
09 5d 
# 01454 Instruction { source: "Saving reg0x5c before None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x5c)], resolved: None }
09 5c 
# 01456 Instruction { source: "Saving reg0x5b before None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x5b)], resolved: None }
09 5b 
# 01458 Instruction { source: "Saving reg0x5a before None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x5a)], resolved: None }
09 5a 
# 0145a Instruction { source: "Saving reg0x59 before None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x59)], resolved: None }
09 59 
# 0145c Instruction { source: "Saving reg0x58 before None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x58)], resolved: None }
09 58 
# 0145e Instruction { source: "Saving reg0x57 before None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x57)], resolved: None }
09 57 
# 01460 Instruction { source: "Saving reg0x56 before None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x56)], resolved: None }
09 56 
# 01462 Instruction { source: "Saving reg0x55 before None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x55)], resolved: None }
09 55 
# 01464 Instruction { source: "Saving reg0x54 before None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x54)], resolved: None }
09 54 
# 01466 Instruction { source: "Saving reg0x53 before None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x53)], resolved: None }
09 53 
# 01468 Instruction { source: "Saving reg0x52 before None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x52)], resolved: None }
09 52 
# 0146a Instruction { source: "Saving reg0x51 before None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x51)], resolved: None }
09 51 
# 0146c Instruction { source: "Saving reg0x50 before None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x50)], resolved: None }
09 50 
# 0146e Instruction { source: "Saving reg0x4f before None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x4f)], resolved: None }
09 4f 
# 01470 Instruction { source: "Saving reg0x4e before None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x4e)], resolved: None }
09 4e 
# 01472 Instruction { source: "Saving reg0x4d before None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x4d)], resolved: None }
09 4d 
# 01474 Instruction { source: "Saving reg0x4c before None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x4c)], resolved: None }
09 4c 
# 01476 Instruction { source: "Saving reg0x49 before None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x49)], resolved: None }
09 49 
# 01478 Instruction { source: "Saving reg0x48 before None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Push8, args: [Register(0x48)], resolved: None }
09 48 
# 0147a Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 01480 Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 8a 14 00 00 
# 01486 Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: JmpImm, args: [Label24(:print_dec32)], resolved: None }
70 d5 29 00 
# 0148a Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 01490 Instruction { source: "Restoring reg0x48 after None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x48)], resolved: None }
0a 48 
# 01492 Instruction { source: "Restoring reg0x49 after None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x49)], resolved: None }
0a 49 
# 01494 Instruction { source: "Restoring reg0x4c after None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x4c)], resolved: None }
0a 4c 
# 01496 Instruction { source: "Restoring reg0x4d after None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x4d)], resolved: None }
0a 4d 
# 01498 Instruction { source: "Restoring reg0x4e after None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x4e)], resolved: None }
0a 4e 
# 0149a Instruction { source: "Restoring reg0x4f after None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x4f)], resolved: None }
0a 4f 
# 0149c Instruction { source: "Restoring reg0x50 after None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x50)], resolved: None }
0a 50 
# 0149e Instruction { source: "Restoring reg0x51 after None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x51)], resolved: None }
0a 51 
# 014a0 Instruction { source: "Restoring reg0x52 after None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x52)], resolved: None }
0a 52 
# 014a2 Instruction { source: "Restoring reg0x53 after None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x53)], resolved: None }
0a 53 
# 014a4 Instruction { source: "Restoring reg0x54 after None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x54)], resolved: None }
0a 54 
# 014a6 Instruction { source: "Restoring reg0x55 after None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x55)], resolved: None }
0a 55 
# 014a8 Instruction { source: "Restoring reg0x56 after None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x56)], resolved: None }
0a 56 
# 014aa Instruction { source: "Restoring reg0x57 after None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x57)], resolved: None }
0a 57 
# 014ac Instruction { source: "Restoring reg0x58 after None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x58)], resolved: None }
0a 58 
# 014ae Instruction { source: "Restoring reg0x59 after None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x59)], resolved: None }
0a 59 
# 014b0 Instruction { source: "Restoring reg0x5a after None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x5a)], resolved: None }
0a 5a 
# 014b2 Instruction { source: "Restoring reg0x5b after None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x5b)], resolved: None }
0a 5b 
# 014b4 Instruction { source: "Restoring reg0x5c after None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x5c)], resolved: None }
0a 5c 
# 014b6 Instruction { source: "Restoring reg0x5d after None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x5d)], resolved: None }
0a 5d 
# 014b8 Instruction { source: "Restoring reg0x5e after None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x5e)], resolved: None }
0a 5e 
# 014ba Instruction { source: "Restoring reg0x5f after None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x5f)], resolved: None }
0a 5f 
# 014bc Instruction { source: "Restoring reg0x60 after None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x60)], resolved: None }
0a 60 
# 014be Instruction { source: "Restoring reg0x61 after None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x61)], resolved: None }
0a 61 
# 014c0 Instruction { source: "Restoring reg0x64 after None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x64)], resolved: None }
0a 64 
# 014c2 Instruction { source: "Restoring reg0x65 after None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x65)], resolved: None }
0a 65 
# 014c4 Instruction { source: "Restoring reg0x66 after None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x66)], resolved: None }
0a 66 
# 014c6 Instruction { source: "Restoring reg0x67 after None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x67)], resolved: None }
0a 67 
# 014c8 Instruction { source: "Restoring reg0x68 after None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x68)], resolved: None }
0a 68 
# 014ca Instruction { source: "Restoring reg0x69 after None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x69)], resolved: None }
0a 69 
# 014cc Instruction { source: "Restoring reg0x6a after None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x6a)], resolved: None }
0a 6a 
# 014ce Instruction { source: "Restoring reg0x6c after None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x6c)], resolved: None }
0a 6c 
# 014d0 Instruction { source: "Restoring reg0x6d after None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x6d)], resolved: None }
0a 6d 
# 014d2 Instruction { source: "Restoring reg0x6e after None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x6e)], resolved: None }
0a 6e 
# 014d4 Instruction { source: "Restoring reg0x6f after None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x6f)], resolved: None }
0a 6f 
# 014d6 Instruction { source: "Restoring reg0x70 after None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x70)], resolved: None }
0a 70 
# 014d8 Instruction { source: "Restoring reg0x71 after None <= call print_dec32(t111,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Call(Call { function: \\\"stack_get\\\", parameters: [Ident(\\\"stack\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\\\"i\\\") }] })] })\"] }", opcode: Pop8, args: [Register(0x71)], resolved: None }
0a 71 
# t116 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Number(U8, 10)", "Number(U8, 10)"] }
# 014da Instruction { source: "t116 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x68), Constant8(0x0a=10)], resolved: None }
04 68 0a 
# inline_RpnCalc_handle_putc_26_c <- t116 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_26_c <- t116 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\"] }", opcode: Copy8, args: [Register(0x68), Register(0x68)], resolved: None }
# inline_RpnCalc_handle_putc_26_t1 <- inline_RpnCalc_handle_putc_26_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_26_t1 <- inline_RpnCalc_handle_putc_26_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x68), Register(0x68)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_26_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 014dd Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x68)], resolved: None }
68 68 
# inline_RpnCalc_handle_putc_26_t3 <- inline_RpnCalc_handle_putc_26_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_26_t3 <- inline_RpnCalc_handle_putc_26_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x68), Register(0x68)], resolved: None }
# None <= call lcd_write_char(inline_RpnCalc_handle_putc_26_t3,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })"] }
# 014df Instruction { source: "Arg0[ch]=inline_RpnCalc_handle_putc_26_t3 None <= call lcd_write_char(inline_RpnCalc_handle_putc_26_t3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy8, args: [Register(0x68), Register(0x00)], resolved: None }
0b 68 00 
# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 152, 153, 154, 155, 156, 157, 158, 159, 217, 233, 234, 235, 236, 240, 241, 242, 243, 244, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 014e2 Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 014e8 Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c f2 14 00 00 
# 014ee Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: JmpImm, args: [Label24(:lcd_write_char)], resolved: None }
70 1a 22 00 
# 014f2 Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# goto inline_RpnCalc_handle_putc_26_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_26_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_26_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_26_function_end_putc
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_putc_26_function_end_putc
# t117 <- i U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"i\"), Number(U8, 1))", "Ident(\"i\")", "Ident(\"i\")"] }
# optimized away noop copy Instruction { source: "t117 <- i U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1))\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# t118 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"i\"), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 014f8 Instruction { source: "t118 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x68), Constant8(0x01=1)], resolved: None }
04 68 01 
# i <- t117 Add t118
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"i\"), Number(U8, 1))"] }
# 014fb Instruction { source: "i <- t117 Add t118\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1))\"] }", opcode: Add8NoCarryIn, args: [Register(0x49), Register(0x68), Register(0x49)], resolved: None }
14 49 68 49 
# goto RpnCalc_handle_while_predicate_44
# 	SourceContext { contexts: [] }
# 014ff Instruction { source: "goto RpnCalc_handle_while_predicate_44\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_while_predicate_44)], resolved: None }
70 c5 13 00 
# :RpnCalc_handle_while_end_46
# 	SourceContext { contexts: [] }
# RpnCalc_handle_while_end_46
# goto RpnCalc_handle_if_end_23
# 	SourceContext { contexts: [] }
# 01503 Instruction { source: "goto RpnCalc_handle_if_end_23\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_23)], resolved: None }
70 cf 15 00 
# :RpnCalc_handle_if_else_9_43
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_9_43
# t119 <- ch U8
# 	SourceContext { contexts: ["Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# 01507 Instruction { source: "t119 <- ch U8\n\tSourceContext { contexts: [\"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x48), Register(0x49)], resolved: None }
0b 48 49 
# t120 <- 0n57/0x39u8 
# 	SourceContext { contexts: ["Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }", "Number(U8, 57)", "Number(U8, 57)"] }
# 0150a Instruction { source: "t120 <- 0n57/0x39u8 \n\tSourceContext { contexts: [\"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\", \"Number(U8, 57)\", \"Number(U8, 57)\"] }", opcode: LoadImm8, args: [Register(0x68), Constant8(0x39=57)], resolved: None }
04 68 39 
# if t119 <= t120 then 'RpnCalc_handle_if_true_10_47' else 'RpnCalc_handle_if_else_10_48'
# 	SourceContext { contexts: ["Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }"] }
# 0150d Instruction { source: "if t119 <= t120 then 'RpnCalc_handle_if_true_10_47' else 'RpnCalc_handle_if_else_10_48'\n\tSourceContext { contexts: [\"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\"] }", opcode: Cmp8, args: [Register(0x49), Register(0x68)], resolved: None }
15 49 68 
# 01510 Instruction { source: "if t119 <= t120 then 'RpnCalc_handle_if_true_10_47' else 'RpnCalc_handle_if_else_10_48'\n\tSourceContext { contexts: [\"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\"] }", opcode: JcImm, args: [Label24(RpnCalc_handle_if_true_10_47)], resolved: None }
71 18 15 00 
# 01514 Instruction { source: "if t119 <= t120 then 'RpnCalc_handle_if_true_10_47' else 'RpnCalc_handle_if_else_10_48'\n\tSourceContext { contexts: [\"Comparison { op: LessThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 57) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_10_48)], resolved: None }
70 cf 15 00 
# :RpnCalc_handle_if_true_10_47
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_true_10_47
# t121 <- ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 48) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# 01518 Instruction { source: "t121 <- ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 48) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x48), Register(0x49)], resolved: None }
0b 48 49 
# t122 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 48) }", "Number(U8, 48)", "Number(U8, 48)"] }
# 0151b Instruction { source: "t122 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 48) }\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0x68), Constant8(0x30=48)], resolved: None }
04 68 30 
# if t121 >= t122 then 'RpnCalc_handle_if_true_0_50' else 'RpnCalc_handle_if_else_0_51'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 48) }"] }
# 0151e Instruction { source: "if t121 >= t122 then 'RpnCalc_handle_if_true_0_50' else 'RpnCalc_handle_if_else_0_51'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 48) }\"] }", opcode: Cmp8, args: [Register(0x68), Register(0x49)], resolved: None }
15 68 49 
# 01521 Instruction { source: "if t121 >= t122 then 'RpnCalc_handle_if_true_0_50' else 'RpnCalc_handle_if_else_0_51'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 48) }\"] }", opcode: JcImm, args: [Label24(RpnCalc_handle_if_true_0_50)], resolved: None }
71 29 15 00 
# 01525 Instruction { source: "if t121 >= t122 then 'RpnCalc_handle_if_true_0_50' else 'RpnCalc_handle_if_else_0_51'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }, Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"ch\\\"), right: Number(U8, 48) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_else_0_51)], resolved: None }
70 cb 15 00 
# :RpnCalc_handle_if_true_0_50
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }])], else_block: [] }"] }
# RpnCalc_handle_if_true_0_50
# t124 <- c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 1) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# 01529 Instruction { source: "t124 <- c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x3c)], resolved: None }
21 44 3c 
# t125 <- 0n72/0x00000048u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 1) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))", "Number(USIZE, 72)", "Number(USIZE, 72)"] }
# 0152c Instruction { source: "t125 <- 0n72/0x00000048u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\", \"Number(USIZE, 72)\", \"Number(USIZE, 72)\"] }", opcode: LoadImm32, args: [Register(0x40), Constant32(0x00000048=72)], resolved: None }
20 40 48 00 00 00 
# t123 <- t124 Add t125
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 1) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))"] }
# 01532 Instruction { source: "t123 <- t124 Add t125\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01533 Instruction { source: "t123 <- t124 Add t125\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: AddCarry32_1, args: [Register(0x3c), Register(0x40), Register(0x3c)], resolved: None }
30 3c 40 3c 
# 01537 Instruction { source: "t123 <- t124 Add t125\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 72))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t126 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 1) }", "Number(U8, 1)", "Number(U8, 1)"] }
# 01538 Instruction { source: "t126 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x68), Constant8(0x01=1)], resolved: None }
04 68 01 
# mem[t123] <- t126 U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 1) }"] }
# 0153b Instruction { source: "mem[t123] <- t126 U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"have_num\\\"), var_type: None, value: Number(U8, 1) }\"] }", opcode: Store8, args: [Register(0x68), Register(0x3c)], resolved: None }
06 68 3c 
# t128 <- c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# 0153e Instruction { source: "t128 <- c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x3c)], resolved: None }
21 44 3c 
# t129 <- 0n68/0x00000044u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Number(USIZE, 68)", "Number(USIZE, 68)"] }
# 01541 Instruction { source: "t129 <- 0n68/0x00000044u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Number(USIZE, 68)\", \"Number(USIZE, 68)\"] }", opcode: LoadImm32, args: [Register(0x40), Constant32(0x00000044=68)], resolved: None }
20 40 44 00 00 00 
# t127 <- t128 Add t129
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))"] }
# 01547 Instruction { source: "t127 <- t128 Add t129\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01548 Instruction { source: "t127 <- t128 Add t129\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_1, args: [Register(0x3c), Register(0x40), Register(0x50)], resolved: None }
30 3c 40 50 
# 0154c Instruction { source: "t127 <- t128 Add t129\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t133 <- c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# 0154d Instruction { source: "t133 <- c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x3c)], resolved: None }
21 44 3c 
# t134 <- 0n68/0x00000044u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Number(USIZE, 68)", "Number(USIZE, 68)"] }
# 01550 Instruction { source: "t134 <- 0n68/0x00000044u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Number(USIZE, 68)\", \"Number(USIZE, 68)\"] }", opcode: LoadImm32, args: [Register(0x40), Constant32(0x00000044=68)], resolved: None }
20 40 44 00 00 00 
# t132 <- t133 Add t134
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))"] }
# 01556 Instruction { source: "t132 <- t133 Add t134\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01557 Instruction { source: "t132 <- t133 Add t134\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_1, args: [Register(0x3c), Register(0x40), Register(0x3c)], resolved: None }
30 3c 40 3c 
# 0155b Instruction { source: "t132 <- t133 Add t134\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t131 <- mem[t132] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")"] }
# 0155c Instruction { source: "t131 <- mem[t132] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\"] }", opcode: Load32, args: [Register(0x3c), Register(0x3c)], resolved: None }
22 3c 3c 
# inline_RpnCalc_handle_mul32_by10_15_a <- t131 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }", "Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] })", "Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_a <- t131 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] })\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_15_t0 <- inline_RpnCalc_handle_mul32_by10_15_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }", "Arithmetic(Add, Ident(\"a\"), Ident(\"a\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_t0 <- inline_RpnCalc_handle_mul32_by10_15_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_15_t1 <- inline_RpnCalc_handle_mul32_by10_15_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }", "Arithmetic(Add, Ident(\"a\"), Ident(\"a\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# 0155f Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_t1 <- inline_RpnCalc_handle_mul32_by10_15_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x40)], resolved: None }
21 3c 40 
# inline_RpnCalc_handle_mul32_by10_15_a <- inline_RpnCalc_handle_mul32_by10_15_t0 Add inline_RpnCalc_handle_mul32_by10_15_t1
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }", "Arithmetic(Add, Ident(\"a\"), Ident(\"a\"))"] }
# 01562 Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_a <- inline_RpnCalc_handle_mul32_by10_15_t0 Add inline_RpnCalc_handle_mul32_by10_15_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01563 Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_a <- inline_RpnCalc_handle_mul32_by10_15_t0 Add inline_RpnCalc_handle_mul32_by10_15_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x3c), Register(0x40), Register(0x3c)], resolved: None }
30 3c 40 3c 
# 01567 Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_a <- inline_RpnCalc_handle_mul32_by10_15_t0 Add inline_RpnCalc_handle_mul32_by10_15_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_mul32_by10_15_t2 <- inline_RpnCalc_handle_mul32_by10_15_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }", "Arithmetic(Add, Ident(\"a\"), Ident(\"a\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_t2 <- inline_RpnCalc_handle_mul32_by10_15_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_15_t3 <- inline_RpnCalc_handle_mul32_by10_15_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }", "Arithmetic(Add, Ident(\"a\"), Ident(\"a\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# 01568 Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_t3 <- inline_RpnCalc_handle_mul32_by10_15_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x40)], resolved: None }
21 3c 40 
# inline_RpnCalc_handle_mul32_by10_15_b <- inline_RpnCalc_handle_mul32_by10_15_t2 Add inline_RpnCalc_handle_mul32_by10_15_t3
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }", "Arithmetic(Add, Ident(\"a\"), Ident(\"a\"))"] }
# 0156b Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_b <- inline_RpnCalc_handle_mul32_by10_15_t2 Add inline_RpnCalc_handle_mul32_by10_15_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0156c Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_b <- inline_RpnCalc_handle_mul32_by10_15_t2 Add inline_RpnCalc_handle_mul32_by10_15_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x3c), Register(0x40), Register(0x40)], resolved: None }
30 3c 40 40 
# 01570 Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_b <- inline_RpnCalc_handle_mul32_by10_15_t2 Add inline_RpnCalc_handle_mul32_by10_15_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_mul32_by10_15_t4 <- inline_RpnCalc_handle_mul32_by10_15_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: None, value: Arithmetic(Add, Ident(\"b\"), Ident(\"b\")) }", "Arithmetic(Add, Ident(\"b\"), Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_t4 <- inline_RpnCalc_handle_mul32_by10_15_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_15_t5 <- inline_RpnCalc_handle_mul32_by10_15_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: None, value: Arithmetic(Add, Ident(\"b\"), Ident(\"b\")) }", "Arithmetic(Add, Ident(\"b\"), Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# 01571 Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_t5 <- inline_RpnCalc_handle_mul32_by10_15_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x4c)], resolved: None }
21 40 4c 
# inline_RpnCalc_handle_mul32_by10_15_b <- inline_RpnCalc_handle_mul32_by10_15_t4 Add inline_RpnCalc_handle_mul32_by10_15_t5
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: None, value: Arithmetic(Add, Ident(\"b\"), Ident(\"b\")) }", "Arithmetic(Add, Ident(\"b\"), Ident(\"b\"))"] }
# 01574 Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_b <- inline_RpnCalc_handle_mul32_by10_15_t4 Add inline_RpnCalc_handle_mul32_by10_15_t5\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01575 Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_b <- inline_RpnCalc_handle_mul32_by10_15_t4 Add inline_RpnCalc_handle_mul32_by10_15_t5\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x40), Register(0x4c), Register(0x40)], resolved: None }
30 40 4c 40 
# 01579 Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_b <- inline_RpnCalc_handle_mul32_by10_15_t4 Add inline_RpnCalc_handle_mul32_by10_15_t5\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_handle_mul32_by10_15_t7 <- inline_RpnCalc_handle_mul32_by10_15_b U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }", "Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))", "Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_t7 <- inline_RpnCalc_handle_mul32_by10_15_b U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_15_t8 <- inline_RpnCalc_handle_mul32_by10_15_a U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }", "Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))", "Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_t8 <- inline_RpnCalc_handle_mul32_by10_15_a U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_15_t6 <- inline_RpnCalc_handle_mul32_by10_15_t7 Add inline_RpnCalc_handle_mul32_by10_15_t8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }", "Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))", "Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))"] }
# 0157a Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_t6 <- inline_RpnCalc_handle_mul32_by10_15_t7 Add inline_RpnCalc_handle_mul32_by10_15_t8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0157b Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_t6 <- inline_RpnCalc_handle_mul32_by10_15_t7 Add inline_RpnCalc_handle_mul32_by10_15_t8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x40), Register(0x3c), Register(0x3c)], resolved: None }
30 40 3c 3c 
# 0157f Instruction { source: "inline_RpnCalc_handle_mul32_by10_15_t6 <- inline_RpnCalc_handle_mul32_by10_15_t7 Add inline_RpnCalc_handle_mul32_by10_15_t8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t130 <- inline_RpnCalc_handle_mul32_by10_15_t6 U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }"] }
# optimized away noop copy Instruction { source: "t130 <- inline_RpnCalc_handle_mul32_by10_15_t6 U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))) }\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# goto inline_RpnCalc_handle_mul32_by10_15_function_end_mul32_by10
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_mul32_by10_15_function_end_mul32_by10\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_mul32_by10_15_function_end_mul32_by10)], resolved: None }
# :inline_RpnCalc_handle_mul32_by10_15_function_end_mul32_by10
# 	SourceContext { contexts: [] }
# inline_RpnCalc_handle_mul32_by10_15_function_end_mul32_by10
# mem[t127] <- t130 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }"] }
# 01580 Instruction { source: "mem[t127] <- t130 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\"] }", opcode: Store32_1, args: [Register(0x3c), Register(0x50)], resolved: None }
23 3c 50 
# 01583 Instruction { source: "mem[t127] <- t130 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Call(Call { function: \\\"mul32_by10\\\", parameters: [PtrFieldDeref(\\\"c\\\", \\\"num\\\")] }) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# t136 <- c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# 01584 Instruction { source: "t136 <- c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x3c)], resolved: None }
21 44 3c 
# t137 <- 0n68/0x00000044u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Number(USIZE, 68)", "Number(USIZE, 68)"] }
# 01587 Instruction { source: "t137 <- 0n68/0x00000044u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Number(USIZE, 68)\", \"Number(USIZE, 68)\"] }", opcode: LoadImm32, args: [Register(0x40), Constant32(0x00000044=68)], resolved: None }
20 40 44 00 00 00 
# t135 <- t136 Add t137
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))"] }
# 0158d Instruction { source: "t135 <- t136 Add t137\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0158e Instruction { source: "t135 <- t136 Add t137\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_1, args: [Register(0x3c), Register(0x40), Register(0x3c)], resolved: None }
30 3c 40 3c 
# 01592 Instruction { source: "t135 <- t136 Add t137\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t141 <- c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# 01593 Instruction { source: "t141 <- c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x44), Register(0x40)], resolved: None }
21 44 40 
# t142 <- 0n68/0x00000044u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Number(USIZE, 68)", "Number(USIZE, 68)"] }
# 01596 Instruction { source: "t142 <- 0n68/0x00000044u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Number(USIZE, 68)\", \"Number(USIZE, 68)\"] }", opcode: LoadImm32, args: [Register(0x44), Constant32(0x00000044=68)], resolved: None }
20 44 44 00 00 00 
# t140 <- t141 Add t142
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))"] }
# 0159c Instruction { source: "t140 <- t141 Add t142\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0159d Instruction { source: "t140 <- t141 Add t142\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_1, args: [Register(0x40), Register(0x44), Register(0x40)], resolved: None }
30 40 44 40 
# 015a1 Instruction { source: "t140 <- t141 Add t142\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t139 <- mem[t140] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "PtrFieldDeref(\"c\", \"num\")", "PtrFieldDeref(\"c\", \"num\")"] }
# 015a2 Instruction { source: "t139 <- mem[t140] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"num\\\")\"] }", opcode: Load32, args: [Register(0x40), Register(0x40)], resolved: None }
22 40 40 
# t145 <- ch U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Ident(\"ch\")", "Ident(\"ch\")"] }
# 015a5 Instruction { source: "t145 <- ch U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x48), Register(0x69)], resolved: None }
0b 48 69 
# t146 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Number(U8, 48)", "Number(U8, 48)"] }
# 015a8 Instruction { source: "t146 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0x48), Constant8(0x30=48)], resolved: None }
04 48 30 
# t144 <- t145 Subtract t146
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))", "Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))"] }
# 015ab Instruction { source: "t144 <- t145 Subtract t146\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\"] }", opcode: Copy8, args: [Register(0x48), Register(0x00)], resolved: None }
0b 48 00 
# 015ae Instruction { source: "t144 <- t145 Subtract t146\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 015b0 Instruction { source: "t144 <- t145 Subtract t146\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\", \"Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48))\"] }", opcode: Add8NoCarryIn, args: [Register(0x69), Register(0x00), Register(0x69)], resolved: None }
14 69 00 69 
# t143 U32 <- t144 U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }"] }
# 015b4 Instruction { source: "Zero-pad for t143 U32 <- t144 U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }\"] }", opcode: LoadImm32, args: [Register(0x44), Constant32(0x00000000=0)], resolved: None }
20 44 00 00 00 00 
# 015ba Instruction { source: "t143 U32 <- t144 U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }\"] }", opcode: Copy8, args: [Register(0x69), Register(0x44)], resolved: None }
0b 69 44 
# t138 <- t139 Add t143
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })", "Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })"] }
# 015bd Instruction { source: "t138 <- t139 Add t143\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 015be Instruction { source: "t138 <- t139 Add t143\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\"] }", opcode: AddCarry32_1, args: [Register(0x40), Register(0x44), Register(0x40)], resolved: None }
30 40 44 40 
# 015c2 Instruction { source: "t138 <- t139 Add t143\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) })\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# mem[t135] <- t138 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }"] }
# 015c3 Instruction { source: "mem[t135] <- t138 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\"] }", opcode: Store32_1, args: [Register(0x40), Register(0x3c)], resolved: None }
23 40 3c 
# 015c6 Instruction { source: "mem[t135] <- t138 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"num\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\\\"ch\\\"), Number(U8, 48)) }) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto RpnCalc_handle_if_end_49
# 	SourceContext { contexts: [] }
# 015c7 Instruction { source: "goto RpnCalc_handle_if_end_49\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_49)], resolved: None }
70 cb 15 00 
# :RpnCalc_handle_if_else_0_51
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_0_51
# :RpnCalc_handle_if_end_49
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_end_49
# goto RpnCalc_handle_if_end_23
# 	SourceContext { contexts: [] }
# 015cb Instruction { source: "goto RpnCalc_handle_if_end_23\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_end_23)], resolved: None }
70 cf 15 00 
# :RpnCalc_handle_if_else_10_48
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_else_10_48
# :RpnCalc_handle_if_end_23
# 	SourceContext { contexts: [] }
# RpnCalc_handle_if_end_23
# t147 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 1)) }", "Number(U8, 1)", "Number(U8, 1)"] }
# 015cf Instruction { source: "t147 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 1)) }\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x49), Constant8(0x01=1)], resolved: None }
04 49 01 
# return Some(t147)
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 1)) }"] }
# 015d2 Instruction { source: "return Some(t147)\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x49), Register(0x00)], resolved: None }
0b 49 00 
# 015d5 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# :function_end_RpnCalc_handle
# 	SourceContext { contexts: [] }
# function_end_RpnCalc_handle
# Unreachable
# 	SourceContext { contexts: [] }
# 015d7 Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
# :RpnCalc_run
# Ret Some(U8)
# Arg0=calc
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var calc (Arg0 calc Ptr(Struct("RpnCalc"))) Reg(U32) Some([116, 117, 118, 119])
# Var ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([120])
# Var inline_RpnCalc_run_getchar_41_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_run_getchar_41_ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([120])
# Var inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([124, 125, 126, 127])
# Var inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t0 (t0 PtrFieldDeref("s", "first")) Reg(U8) Some([128])
# Var inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t1 (t1 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }) Reg(U32) Some([132, 133, 134, 135])
# Var inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t10 (t10 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }) Reg(U32) Some([132, 133, 134, 135])
# Var inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t11 (t11 Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([132, 133, 134, 135])
# Var inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t12 (t12 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) Reg(U32) Some([136, 137, 138, 139])
# Var inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t13 (t13 PtrFieldDeref("s", "first")) Reg(U8) Some([140])
# Var inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t14 (t14 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }) Reg(U32) Some([136, 137, 138, 139])
# Var inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t15 (t15 Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([124, 125, 126, 127])
# Var inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t16 (t16 Number(USIZE, 256)) Reg(U32) Some([136, 137, 138, 139])
# Var inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t17 (t17 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }) Reg(U32) Some([132, 133, 134, 135])
# Var inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t18 (t18 Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([124, 125, 126, 127])
# Var inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t19 (t19 Number(USIZE, 256)) Reg(U32) Some([132, 133, 134, 135])
# Var inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t2 (t2 Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([124, 125, 126, 127])
# Var inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t20 (t20 Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))) Reg(U8) Some([120])
# Var inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t21 (t21 PtrFieldDeref("s", "first")) Reg(U8) Some([120])
# Var inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t22 (t22 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }) Reg(U32) Some([124, 125, 126, 127])
# Var inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t23 (t23 Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([124, 125, 126, 127])
# Var inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t24 (t24 Number(USIZE, 256)) Reg(U32) Some([136, 137, 138, 139])
# Var inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t25 (t25 Number(U8, 1)) Reg(U8) Some([140])
# Var inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t26 (t26 Ident("value")) Reg(U8) Some([120])
# Var inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t3 (t3 Number(USIZE, 256)) Reg(U32) Some([132, 133, 134, 135])
# Var inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t4 (t4 PtrFieldDeref("s", "last")) Reg(U8) Some([140])
# Var inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t5 (t5 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([136, 137, 138, 139])
# Var inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t6 (t6 Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([124, 125, 126, 127])
# Var inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t7 (t7 Number(USIZE, 260)) Reg(U32) Some([136, 137, 138, 139])
# Var inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t8 (t8 Number(U8, 0)) Reg(U8) Some([120])
# Var inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t9 (t9 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([124, 125, 126, 127])
# Var inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_value (Local value Number(U8) Reg(U8)) Reg(U8) Some([141])
# Var inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_values (Local values Ptr(Number(U8)) Reg(U32)) Reg(U32) Some([132, 133, 134, 135])
# Var inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_n (Arg1 n Number(U8)) Reg(U8) Some([120])
# Var inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([132, 133, 134, 135])
# Var inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([132, 133, 134, 135])
# Var inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t1 (t1 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }) Reg(U32) Some([136, 137, 138, 139])
# Var inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t10 (t10 Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([124, 125, 126, 127])
# Var inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t11 (t11 Number(USIZE, 260)) Reg(U32) Some([136, 137, 138, 139])
# Var inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t12 (t12 Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))) Reg(U8) Some([120])
# Var inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t13 (t13 PtrFieldDeref("s", "last")) Reg(U8) Some([120])
# Var inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t14 (t14 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([124, 125, 126, 127])
# Var inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t15 (t15 Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([124, 125, 126, 127])
# Var inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t16 (t16 Number(USIZE, 260)) Reg(U32) Some([132, 133, 134, 135])
# Var inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t17 (t17 Number(U8, 1)) Reg(U8) Some([128])
# Var inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t2 (t2 Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([136, 137, 138, 139])
# Var inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t3 (t3 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) Reg(U32) Some([144, 145, 146, 147])
# Var inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t4 (t4 PtrFieldDeref("s", "last")) Reg(U8) Some([141])
# Var inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t5 (t5 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([144, 145, 146, 147])
# Var inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t6 (t6 Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([132, 133, 134, 135])
# Var inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t7 (t7 Number(USIZE, 260)) Reg(U32) Some([144, 145, 146, 147])
# Var inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t8 (t8 Ident("n")) Reg(U8) Some([120])
# Var inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t9 (t9 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([136, 137, 138, 139])
# Var inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_values (Local values Ptr(Number(U8)) Reg(U32)) Reg(U32) Some([136, 137, 138, 139])
# Var inline_RpnCalc_run_getchar_41_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_run_getchar_41_t0 (t0 Ident("ch")) Reg(U8) Some([120])
# Var inline_RpnCalc_run_getchar_41_t1 (t1 Number(U8, 0)) Reg(U8) Some([128])
# Var inline_RpnCalc_run_getchar_41_t10 (t10 Call(Call { function: "Keyboard_poll", parameters: [] })) Reg(U8) Some([148])
# Var inline_RpnCalc_run_getchar_41_t11 (t11 AddressOf(Ident("stdin"))) Reg(U32) Some([124, 125, 126, 127])
# Var inline_RpnCalc_run_getchar_41_t12 (static "stdin") Reg(U32) Some([124, 125, 126, 127])
# Var inline_RpnCalc_run_getchar_41_t13 (t13 Ident("ch")) Reg(U8) Some([120])
# Var inline_RpnCalc_run_getchar_41_t2 (t2 Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1))) Reg(U8) Some([120])
# Var inline_RpnCalc_run_getchar_41_t3 (t3 Call(Call { function: "io_ready_to_read", parameters: [] })) Reg(U8) Some([120])
# Var inline_RpnCalc_run_getchar_41_t4 (t4 Number(U8, 1)) Reg(U8) Some([128])
# Var inline_RpnCalc_run_getchar_41_t5 (t5 Number(U8, 0)) Reg(U8) Some([128])
# Var inline_RpnCalc_run_getchar_41_t6 (t6 Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })) Reg(U8) Some([148])
# Var inline_RpnCalc_run_getchar_41_t7 (t7 AddressOf(Ident("stdin"))) Reg(U32) Some([124, 125, 126, 127])
# Var inline_RpnCalc_run_getchar_41_t8 (static "stdin") Reg(U32) Some([124, 125, 126, 127])
# Var inline_RpnCalc_run_getchar_41_t9 (t9 TtyIn) Reg(U8) Some([140])
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var result (Local result Number(U8) Reg(U8)) Reg(U8) Some([120])
# Var t0 (t0 Number(U8, 0)) Reg(U8) Some([120])
# Var t1 (t1 Number(U8, 0)) Reg(U8) Some([128])
# Var t2 (t2 Ident("calc")) Reg(U32) Some([116, 117, 118, 119])
# Var t3 (t3 Ident("ch")) Reg(U8) Some([120])
# Var t4 (t4 Ident("result")) Reg(U8) Some([120])
# Var t5 (t5 Number(U8, 0)) Reg(U8) Some([128])
# Var t6 (t6 Number(U8, 0)) Reg(U8) Some([148])
# 015dc Instruction { source: "Save function parameter 'calc' registers [0, 1, 2, 3] to locals [116, 117, 118, 119].", opcode: Copy32, args: [Register(0x00), Register(0x74)], resolved: None }
21 00 74 
# :RpnCalc_run_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"getchar\", parameters: [] }) }, Assign { target: Ident(\"result\"), var_type: Some(Number(U8)), value: Call(Call { function: \"RpnCalc_handle\", parameters: [Ident(\"calc\"), Ident(\"ch\")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"result\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }"] }
# RpnCalc_run_while_predicate_0
# t0 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"getchar\", parameters: [] }) }, Assign { target: Ident(\"result\"), var_type: Some(Number(U8)), value: Call(Call { function: \"RpnCalc_handle\", parameters: [Ident(\"calc\"), Ident(\"ch\")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"result\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }", "Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 015df Instruction { source: "t0 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"getchar\\\", parameters: [] }) }, Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"result\\\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x78), Constant8(0x00=0)], resolved: None }
04 78 00 
# t1 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"getchar\", parameters: [] }) }, Assign { target: Ident(\"result\"), var_type: Some(Number(U8)), value: Call(Call { function: \"RpnCalc_handle\", parameters: [Ident(\"calc\"), Ident(\"ch\")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"result\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }", "Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 015e2 Instruction { source: "t1 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"getchar\\\", parameters: [] }) }, Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"result\\\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x80), Constant8(0x00=0)], resolved: None }
04 80 00 
# if t0 == t1 then 'RpnCalc_run_while_body_1' else 'RpnCalc_run_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"getchar\", parameters: [] }) }, Assign { target: Ident(\"result\"), var_type: Some(Number(U8)), value: Call(Call { function: \"RpnCalc_handle\", parameters: [Ident(\"calc\"), Ident(\"ch\")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"result\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }", "Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }"] }
# 015e5 Instruction { source: "if t0 == t1 then 'RpnCalc_run_while_body_1' else 'RpnCalc_run_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"getchar\\\", parameters: [] }) }, Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"result\\\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x78), Register(0x80)], resolved: None }
15 78 80 
# 015e8 Instruction { source: "if t0 == t1 then 'RpnCalc_run_while_body_1' else 'RpnCalc_run_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"getchar\\\", parameters: [] }) }, Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"result\\\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_run_while_body_1)], resolved: None }
72 f0 15 00 
# 015ec Instruction { source: "if t0 == t1 then 'RpnCalc_run_while_body_1' else 'RpnCalc_run_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"getchar\\\", parameters: [] }) }, Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"result\\\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_run_while_end_2)], resolved: None }
70 ba 17 00 
# :RpnCalc_run_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Call(Call { function: \"getchar\", parameters: [] }) }, Assign { target: Ident(\"result\"), var_type: Some(Number(U8)), value: Call(Call { function: \"RpnCalc_handle\", parameters: [Ident(\"calc\"), Ident(\"ch\")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"result\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }"] }
# RpnCalc_run_while_body_1
# inline_RpnCalc_run_getchar_41_ch <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Number(U8, 0) }", "Number(U8, 0)"] }
# 015f0 Instruction { source: "inline_RpnCalc_run_getchar_41_ch <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Number(U8, 0) }\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x78), Constant8(0x00=0)], resolved: None }
04 78 00 
# :inline_RpnCalc_run_getchar_41_getchar_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \"Keyboard_poll\", parameters: [] }) }] }, Assign { target: Ident(\"ch\"), var_type: None, value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"stdin\"))] }) }] }"] }
# inline_RpnCalc_run_getchar_41_getchar_while_predicate_0
# inline_RpnCalc_run_getchar_41_t0 <- inline_RpnCalc_run_getchar_41_ch U8
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \"Keyboard_poll\", parameters: [] }) }] }, Assign { target: Ident(\"ch\"), var_type: None, value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"stdin\"))] }) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 0) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_41_t0 <- inline_RpnCalc_run_getchar_41_ch U8\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"Keyboard_poll\\\", parameters: [] }) }] }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Call(Call { function: \\\"queue_pop\\\", parameters: [AddressOf(Ident(\\\"stdin\\\"))] }) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x78), Register(0x78)], resolved: None }
# inline_RpnCalc_run_getchar_41_t1 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \"Keyboard_poll\", parameters: [] }) }] }, Assign { target: Ident(\"ch\"), var_type: None, value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"stdin\"))] }) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 015f3 Instruction { source: "inline_RpnCalc_run_getchar_41_t1 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"Keyboard_poll\\\", parameters: [] }) }] }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Call(Call { function: \\\"queue_pop\\\", parameters: [AddressOf(Ident(\\\"stdin\\\"))] }) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x80), Constant8(0x00=0)], resolved: None }
04 80 00 
# if inline_RpnCalc_run_getchar_41_t0 == inline_RpnCalc_run_getchar_41_t1 then 'inline_RpnCalc_run_getchar_41_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_41_getchar_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \"Keyboard_poll\", parameters: [] }) }] }, Assign { target: Ident(\"ch\"), var_type: None, value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"stdin\"))] }) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 0) }"] }
# 015f6 Instruction { source: "if inline_RpnCalc_run_getchar_41_t0 == inline_RpnCalc_run_getchar_41_t1 then 'inline_RpnCalc_run_getchar_41_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_41_getchar_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"Keyboard_poll\\\", parameters: [] }) }] }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Call(Call { function: \\\"queue_pop\\\", parameters: [AddressOf(Ident(\\\"stdin\\\"))] }) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x78), Register(0x80)], resolved: None }
15 78 80 
# 015f9 Instruction { source: "if inline_RpnCalc_run_getchar_41_t0 == inline_RpnCalc_run_getchar_41_t1 then 'inline_RpnCalc_run_getchar_41_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_41_getchar_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"Keyboard_poll\\\", parameters: [] }) }] }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Call(Call { function: \\\"queue_pop\\\", parameters: [AddressOf(Ident(\\\"stdin\\\"))] }) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(inline_RpnCalc_run_getchar_41_getchar_while_body_1)], resolved: None }
72 01 16 00 
# 015fd Instruction { source: "if inline_RpnCalc_run_getchar_41_t0 == inline_RpnCalc_run_getchar_41_t1 then 'inline_RpnCalc_run_getchar_41_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_41_getchar_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"Keyboard_poll\\\", parameters: [] }) }] }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Call(Call { function: \\\"queue_pop\\\", parameters: [AddressOf(Ident(\\\"stdin\\\"))] }) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_run_getchar_41_getchar_while_end_2)], resolved: None }
70 19 17 00 
# :inline_RpnCalc_run_getchar_41_getchar_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \"Keyboard_poll\", parameters: [] }) }] }, Assign { target: Ident(\"ch\"), var_type: None, value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"stdin\"))] }) }] }"] }
# inline_RpnCalc_run_getchar_41_getchar_while_body_1
# Some(inline_RpnCalc_run_getchar_41_t3) <= call io_ready_to_read()
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \"Keyboard_poll\", parameters: [] }) }] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1))", "Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1))", "Call(Call { function: \"io_ready_to_read\", parameters: [] })", "Call(Call { function: \"io_ready_to_read\", parameters: [] })"] }
# 01601 Instruction { source: "ReadyToRead", opcode: IoReadyToRead, args: [Register(0x78)], resolved: None }
79 78 
# inline_RpnCalc_run_getchar_41_t4 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \"Keyboard_poll\", parameters: [] }) }] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1))", "Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 01603 Instruction { source: "inline_RpnCalc_run_getchar_41_t4 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"Keyboard_poll\\\", parameters: [] }) }] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1))\", \"Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x80), Constant8(0x01=1)], resolved: None }
04 80 01 
# inline_RpnCalc_run_getchar_41_t2 <- inline_RpnCalc_run_getchar_41_t3 BitwiseAnd inline_RpnCalc_run_getchar_41_t4
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \"Keyboard_poll\", parameters: [] }) }] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1))", "Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1))"] }
# 01606 Instruction { source: "inline_RpnCalc_run_getchar_41_t2 <- inline_RpnCalc_run_getchar_41_t3 BitwiseAnd inline_RpnCalc_run_getchar_41_t4\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"Keyboard_poll\\\", parameters: [] }) }] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1))\", \"Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1))\"] }", opcode: And8, args: [Register(0x78), Register(0x80), Register(0x78)], resolved: None }
1b 78 80 78 
# inline_RpnCalc_run_getchar_41_t5 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \"Keyboard_poll\", parameters: [] }) }] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0160a Instruction { source: "inline_RpnCalc_run_getchar_41_t5 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"Keyboard_poll\\\", parameters: [] }) }] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x80), Constant8(0x00=0)], resolved: None }
04 80 00 
# if inline_RpnCalc_run_getchar_41_t2 != inline_RpnCalc_run_getchar_41_t5 then 'inline_RpnCalc_run_getchar_41_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_41_getchar_if_else_0_5'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \"Keyboard_poll\", parameters: [] }) }] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }"] }
# 0160d Instruction { source: "if inline_RpnCalc_run_getchar_41_t2 != inline_RpnCalc_run_getchar_41_t5 then 'inline_RpnCalc_run_getchar_41_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_41_getchar_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"Keyboard_poll\\\", parameters: [] }) }] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x78), Register(0x80)], resolved: None }
15 78 80 
# 01610 Instruction { source: "if inline_RpnCalc_run_getchar_41_t2 != inline_RpnCalc_run_getchar_41_t5 then 'inline_RpnCalc_run_getchar_41_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_41_getchar_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"Keyboard_poll\\\", parameters: [] }) }] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(inline_RpnCalc_run_getchar_41_getchar_if_else_0_5)], resolved: None }
72 75 16 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_run_getchar_41_t2 != inline_RpnCalc_run_getchar_41_t5 then 'inline_RpnCalc_run_getchar_41_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_41_getchar_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"Keyboard_poll\\\", parameters: [] }) }] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_run_getchar_41_getchar_if_true_0_4)], resolved: None }
# :inline_RpnCalc_run_getchar_41_getchar_if_true_0_4
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \"Keyboard_poll\", parameters: [] }) }] }"] }
# inline_RpnCalc_run_getchar_41_getchar_if_true_0_4
# inline_RpnCalc_run_getchar_41_t8 <- 0n987228/0x000f105cu32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] })", "AddressOf(Ident(\"stdin\"))", "AddressOf(Ident(\"stdin\"))"] }
# 01614 Instruction { source: "inline_RpnCalc_run_getchar_41_t8 <- 0n987228/0x000f105cu32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] }) }\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] })\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] })\", \"AddressOf(Ident(\\\"stdin\\\"))\", \"AddressOf(Ident(\\\"stdin\\\"))\"] }", opcode: LoadImm32, args: [Register(0x7c), Constant32(0x000f105c=987228)], resolved: None }
20 7c 5c 10 0f 00 
# inline_RpnCalc_run_getchar_41_t7 <- inline_RpnCalc_run_getchar_41_t8 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] })", "AddressOf(Ident(\"stdin\"))", "AddressOf(Ident(\"stdin\"))"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_41_t7 <- inline_RpnCalc_run_getchar_41_t8 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] }) }\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] })\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] })\", \"AddressOf(Ident(\\\"stdin\\\"))\", \"AddressOf(Ident(\\\"stdin\\\"))\"] }", opcode: Copy32, args: [Register(0x7c), Register(0x7c)], resolved: None }
# inline_RpnCalc_run_getchar_41_t9 <- ttyin
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] })", "TtyIn", "TtyIn"] }
# 0161a Instruction { source: "inline_RpnCalc_run_getchar_41_t9 <- ttyin\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] }) }\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] })\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] })\", \"TtyIn\", \"TtyIn\"] }", opcode: In0, args: [Register(0x8c)], resolved: None }
60 8c 
# inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_s <- inline_RpnCalc_run_getchar_41_t7 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] })"] }
# 0161c Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_s <- inline_RpnCalc_run_getchar_41_t7 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] }) }\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] })\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] })\"] }", opcode: Copy32, args: [Register(0x7c), Register(0x84)], resolved: None }
21 7c 84 
# inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_n <- inline_RpnCalc_run_getchar_41_t9 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] })"] }
# 0161f Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_n <- inline_RpnCalc_run_getchar_41_t9 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] }) }\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] })\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] })\"] }", opcode: Copy8, args: [Register(0x8c), Register(0x78)], resolved: None }
0b 8c 78 
# inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t0 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t0 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x84), Register(0x84)], resolved: None }
# inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_values <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t0 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# 01622 Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_values <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t0 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0x84), Register(0x88)], resolved: None }
21 84 88 
# inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t2 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_values U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t2 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_values U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0x88), Register(0x88)], resolved: None }
# inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t6 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_s U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t6 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_s U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x84), Register(0x84)], resolved: None }
# inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t7 <- 0n260/0x00000104u32 
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Number(USIZE, 260)", "Number(USIZE, 260)"] }
# 01625 Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t7 <- 0n260/0x00000104u32 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Number(USIZE, 260)\", \"Number(USIZE, 260)\"] }", opcode: LoadImm32, args: [Register(0x90), Constant32(0x00000104=260)], resolved: None }
20 90 04 01 00 00 
# inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t5 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t6 Add inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t7
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))"] }
# 0162b Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t5 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t6 Add inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0162c Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t5 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t6 Add inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddCarry32_1, args: [Register(0x84), Register(0x90), Register(0x90)], resolved: None }
30 84 90 90 
# 01630 Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t5 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t6 Add inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t4 <- mem[inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t5] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")"] }
# 01631 Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t4 <- mem[inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t5] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\"] }", opcode: Load8, args: [Register(0x90), Register(0x8d)], resolved: None }
05 90 8d 
# inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t3 U32 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t4 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }"] }
# 01634 Instruction { source: "Zero-pad for inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t3 U32 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t4 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\"] }", opcode: LoadImm32, args: [Register(0x90), Constant32(0x00000000=0)], resolved: None }
20 90 00 00 00 00 
# 0163a Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t3 U32 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t4 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\"] }", opcode: Copy8, args: [Register(0x8d), Register(0x90)], resolved: None }
0b 8d 90 
# inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t1 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t2 Add inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t3
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })"] }
# 0163d Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t1 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t2 Add inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0163e Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t1 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t2 Add inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\"] }", opcode: AddCarry32_1, args: [Register(0x88), Register(0x90), Register(0x88)], resolved: None }
30 88 90 88 
# 01642 Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t1 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t2 Add inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t8 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_n U8
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t8 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_n U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy8, args: [Register(0x78), Register(0x78)], resolved: None }
# mem[inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t1] <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t8 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }"] }
# 01643 Instruction { source: "mem[inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t1] <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t8 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store8, args: [Register(0x78), Register(0x88)], resolved: None }
06 78 88 
# inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t10 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# 01646 Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t10 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x84), Register(0x7c)], resolved: None }
21 84 7c 
# inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t11 <- 0n260/0x00000104u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Number(USIZE, 260)", "Number(USIZE, 260)"] }
# 01649 Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t11 <- 0n260/0x00000104u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Number(USIZE, 260)\", \"Number(USIZE, 260)\"] }", opcode: LoadImm32, args: [Register(0x88), Constant32(0x00000104=260)], resolved: None }
20 88 04 01 00 00 
# inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t9 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t10 Add inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t11
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))"] }
# 0164f Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t9 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t10 Add inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t11\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01650 Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t9 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t10 Add inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t11\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddCarry32_1, args: [Register(0x7c), Register(0x88), Register(0x88)], resolved: None }
30 7c 88 88 
# 01654 Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t9 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t10 Add inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t11\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t15 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# 01655 Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t15 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x84), Register(0x7c)], resolved: None }
21 84 7c 
# inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t16 <- 0n260/0x00000104u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Number(USIZE, 260)", "Number(USIZE, 260)"] }
# 01658 Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t16 <- 0n260/0x00000104u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Number(USIZE, 260)\", \"Number(USIZE, 260)\"] }", opcode: LoadImm32, args: [Register(0x84), Constant32(0x00000104=260)], resolved: None }
20 84 04 01 00 00 
# inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t14 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t15 Add inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t16
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))"] }
# 0165e Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t14 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t15 Add inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t16\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0165f Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t14 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t15 Add inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t16\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddCarry32_1, args: [Register(0x7c), Register(0x84), Register(0x7c)], resolved: None }
30 7c 84 7c 
# 01663 Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t14 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t15 Add inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t16\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t13 <- mem[inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t14] U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")"] }
# 01664 Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t13 <- mem[inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t14] U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\"] }", opcode: Load8, args: [Register(0x7c), Register(0x78)], resolved: None }
05 7c 78 
# inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t17 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 01667 Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t17 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x80), Constant8(0x01=1)], resolved: None }
04 80 01 
# inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t12 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t13 Add inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t17
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))"] }
# 0166a Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t12 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t13 Add inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\"] }", opcode: Add8NoCarryIn, args: [Register(0x78), Register(0x80), Register(0x78)], resolved: None }
14 78 80 78 
# mem[inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t9] <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t12 U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }"] }
# 0166e Instruction { source: "mem[inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t9] <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_t12 U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\"] }", opcode: Store8, args: [Register(0x78), Register(0x88)], resolved: None }
06 78 88 
# goto inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_function_end_queue_push
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_function_end_queue_push\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_function_end_queue_push)], resolved: None }
# :inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_function_end_queue_push
# 	SourceContext { contexts: [] }
# inline_RpnCalc_run_getchar_41_inline_getchar_queue_push_40_function_end_queue_push
# goto inline_RpnCalc_run_getchar_41_getchar_if_end_3
# 	SourceContext { contexts: [] }
# 01671 Instruction { source: "goto inline_RpnCalc_run_getchar_41_getchar_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_run_getchar_41_getchar_if_end_3)], resolved: None }
70 8b 16 00 
# :inline_RpnCalc_run_getchar_41_getchar_if_else_0_5
# 	SourceContext { contexts: [] }
# inline_RpnCalc_run_getchar_41_getchar_if_else_0_5
# None <= call Keyboard_poll()
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"Keyboard_poll\", parameters: [] }) }", "Call(Call { function: \"Keyboard_poll\", parameters: [] })", "Call(Call { function: \"Keyboard_poll\", parameters: [] })"] }
# Registers used by this function: {116, 117, 118, 119, 120, 124, 125, 126, 127, 128, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 144, 145, 146, 147, 148}
# Registers used by callee tree: {28, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 56, 57, 58}
# Registers to save: []
# 01675 Instruction { source: "PseudoCall(Label24(:Keyboard_poll))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 0167b Instruction { source: "PseudoCall(Label24(:Keyboard_poll))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 85 16 00 00 
# 01681 Instruction { source: "PseudoCall(Label24(:Keyboard_poll))", opcode: JmpImm, args: [Label24(:Keyboard_poll)], resolved: None }
70 52 04 00 
# 01685 Instruction { source: "PseudoCall(Label24(:Keyboard_poll))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# :inline_RpnCalc_run_getchar_41_getchar_if_end_3
# 	SourceContext { contexts: [] }
# inline_RpnCalc_run_getchar_41_getchar_if_end_3
# inline_RpnCalc_run_getchar_41_t12 <- 0n987228/0x000f105cu32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"stdin\"))] }) }", "Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"stdin\"))] })", "AddressOf(Ident(\"stdin\"))", "AddressOf(Ident(\"stdin\"))"] }
# 0168b Instruction { source: "inline_RpnCalc_run_getchar_41_t12 <- 0n987228/0x000f105cu32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Call(Call { function: \\\"queue_pop\\\", parameters: [AddressOf(Ident(\\\"stdin\\\"))] }) }\", \"Call(Call { function: \\\"queue_pop\\\", parameters: [AddressOf(Ident(\\\"stdin\\\"))] })\", \"AddressOf(Ident(\\\"stdin\\\"))\", \"AddressOf(Ident(\\\"stdin\\\"))\"] }", opcode: LoadImm32, args: [Register(0x7c), Constant32(0x000f105c=987228)], resolved: None }
20 7c 5c 10 0f 00 
# inline_RpnCalc_run_getchar_41_t11 <- inline_RpnCalc_run_getchar_41_t12 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"stdin\"))] }) }", "Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"stdin\"))] })", "AddressOf(Ident(\"stdin\"))", "AddressOf(Ident(\"stdin\"))"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_41_t11 <- inline_RpnCalc_run_getchar_41_t12 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Call(Call { function: \\\"queue_pop\\\", parameters: [AddressOf(Ident(\\\"stdin\\\"))] }) }\", \"Call(Call { function: \\\"queue_pop\\\", parameters: [AddressOf(Ident(\\\"stdin\\\"))] })\", \"AddressOf(Ident(\\\"stdin\\\"))\", \"AddressOf(Ident(\\\"stdin\\\"))\"] }", opcode: Copy32, args: [Register(0x7c), Register(0x7c)], resolved: None }
# inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_s <- inline_RpnCalc_run_getchar_41_t11 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"stdin\"))] }) }", "Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"stdin\"))] })"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_s <- inline_RpnCalc_run_getchar_41_t11 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Call(Call { function: \\\"queue_pop\\\", parameters: [AddressOf(Ident(\\\"stdin\\\"))] }) }\", \"Call(Call { function: \\\"queue_pop\\\", parameters: [AddressOf(Ident(\\\"stdin\\\"))] })\"] }", opcode: Copy32, args: [Register(0x7c), Register(0x7c)], resolved: None }
# inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t2 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_s U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t2 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_s U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x7c), Register(0x7c)], resolved: None }
# inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t3 <- 0n256/0x00000100u32 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))", "Number(USIZE, 256)", "Number(USIZE, 256)"] }
# 01691 Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t3 <- 0n256/0x00000100u32 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\", \"Number(USIZE, 256)\", \"Number(USIZE, 256)\"] }", opcode: LoadImm32, args: [Register(0x84), Constant32(0x00000100=256)], resolved: None }
20 84 00 01 00 00 
# inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t1 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t2 Add inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t3
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))"] }
# 01697 Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t1 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t2 Add inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t3\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01698 Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t1 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t2 Add inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t3\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: AddCarry32_1, args: [Register(0x7c), Register(0x84), Register(0x84)], resolved: None }
30 7c 84 84 
# 0169c Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t1 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t2 Add inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t3\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t0 <- mem[inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t1] U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")"] }
# 0169d Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t0 <- mem[inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t1] U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\"] }", opcode: Load8, args: [Register(0x84), Register(0x80)], resolved: None }
05 84 80 
# inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t6 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_s U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t6 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_s U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x7c), Register(0x7c)], resolved: None }
# inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t7 <- 0n260/0x00000104u32 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Number(USIZE, 260)", "Number(USIZE, 260)"] }
# 016a0 Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t7 <- 0n260/0x00000104u32 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Number(USIZE, 260)\", \"Number(USIZE, 260)\"] }", opcode: LoadImm32, args: [Register(0x88), Constant32(0x00000104=260)], resolved: None }
20 88 04 01 00 00 
# inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t5 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t6 Add inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t7
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))"] }
# 016a6 Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t5 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t6 Add inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t7\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 016a7 Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t5 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t6 Add inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t7\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddCarry32_1, args: [Register(0x7c), Register(0x88), Register(0x88)], resolved: None }
30 7c 88 88 
# 016ab Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t5 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t6 Add inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t7\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t4 <- mem[inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t5] U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")"] }
# 016ac Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t4 <- mem[inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t5] U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\"] }", opcode: Load8, args: [Register(0x88), Register(0x8c)], resolved: None }
05 88 8c 
# if inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t0 == inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t4 then 'inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_queue_pop_if_true_0_1' else 'inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_queue_pop_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }"] }
# 016af Instruction { source: "if inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t0 == inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t4 then 'inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_queue_pop_if_true_0_1' else 'inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_queue_pop_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\"] }", opcode: Cmp8, args: [Register(0x80), Register(0x8c)], resolved: None }
15 80 8c 
# 016b2 Instruction { source: "if inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t0 == inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t4 then 'inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_queue_pop_if_true_0_1' else 'inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_queue_pop_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\"] }", opcode: JzImm, args: [Label24(inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_queue_pop_if_true_0_1)], resolved: None }
72 ba 16 00 
# 016b6 Instruction { source: "if inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t0 == inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t4 then 'inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_queue_pop_if_true_0_1' else 'inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_queue_pop_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_queue_pop_if_else_0_2)], resolved: None }
70 c5 16 00 
# :inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_queue_pop_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }"] }
# inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_queue_pop_if_true_0_1
# inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t8 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 016ba Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t8 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x78), Constant8(0x00=0)], resolved: None }
04 78 00 
# inline_RpnCalc_run_getchar_41_ch <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t8 U8
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_41_ch <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t8 U8\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x78), Register(0x78)], resolved: None }
# goto inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_function_end_queue_pop
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }"] }
# 016bd Instruction { source: "goto inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_function_end_queue_pop\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_function_end_queue_pop)], resolved: None }
70 15 17 00 
# goto inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_queue_pop_if_end_0
# 	SourceContext { contexts: [] }
# 016c1 Instruction { source: "goto inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_queue_pop_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_queue_pop_if_end_0)], resolved: None }
70 c5 16 00 
# :inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_queue_pop_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_queue_pop_if_else_0_2
# :inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_queue_pop_if_end_0
# 	SourceContext { contexts: [] }
# inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_queue_pop_if_end_0
# inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t9 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t9 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x7c), Register(0x7c)], resolved: None }
# inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_values <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t9 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# 016c5 Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_values <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0x7c), Register(0x84)], resolved: None }
21 7c 84 
# inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t11 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_values U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") })", "Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t11 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_values U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\", \"Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0x84), Register(0x84)], resolved: None }
# inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t15 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t15 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x7c), Register(0x7c)], resolved: None }
# inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t16 <- 0n256/0x00000100u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))", "Number(USIZE, 256)", "Number(USIZE, 256)"] }
# 016c8 Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t16 <- 0n256/0x00000100u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\", \"Number(USIZE, 256)\", \"Number(USIZE, 256)\"] }", opcode: LoadImm32, args: [Register(0x88), Constant32(0x00000100=256)], resolved: None }
20 88 00 01 00 00 
# inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t14 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t15 Add inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t16
# 	SourceContext { contexts: ["Assign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))"] }
# 016ce Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t14 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t15 Add inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t16\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 016cf Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t14 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t15 Add inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t16\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: AddCarry32_1, args: [Register(0x7c), Register(0x88), Register(0x88)], resolved: None }
30 7c 88 88 
# 016d3 Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t14 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t15 Add inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t16\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t13 <- mem[inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t14] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")"] }
# 016d4 Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t13 <- mem[inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t14] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\"] }", opcode: Load8, args: [Register(0x88), Register(0x8c)], resolved: None }
05 88 8c 
# inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t12 U32 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t13 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }"] }
# 016d7 Instruction { source: "Zero-pad for inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t12 U32 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t13 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\"] }", opcode: LoadImm32, args: [Register(0x88), Constant32(0x00000000=0)], resolved: None }
20 88 00 00 00 00 
# 016dd Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t12 U32 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t13 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\"] }", opcode: Copy8, args: [Register(0x8c), Register(0x88)], resolved: None }
0b 8c 88 
# inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t10 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t11 Add inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t12
# 	SourceContext { contexts: ["Assign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") })"] }
# 016e0 Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t10 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t11 Add inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t12\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 016e1 Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t10 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t11 Add inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t12\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\"] }", opcode: AddCarry32_1, args: [Register(0x84), Register(0x88), Register(0x84)], resolved: None }
30 84 88 84 
# 016e5 Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t10 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t11 Add inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t12\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_value <- mem[inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t10] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first\"))"] }
# 016e6 Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_value <- mem[inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t10] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\"] }", opcode: Load8, args: [Register(0x84), Register(0x8d)], resolved: None }
05 84 8d 
# inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t18 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t18 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x7c), Register(0x7c)], resolved: None }
# inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t19 <- 0n256/0x00000100u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))", "Number(USIZE, 256)", "Number(USIZE, 256)"] }
# 016e9 Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t19 <- 0n256/0x00000100u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\", \"Number(USIZE, 256)\", \"Number(USIZE, 256)\"] }", opcode: LoadImm32, args: [Register(0x84), Constant32(0x00000100=256)], resolved: None }
20 84 00 01 00 00 
# inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t17 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t18 Add inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t19
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))"] }
# 016ef Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t17 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t18 Add inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t19\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 016f0 Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t17 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t18 Add inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t19\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: AddCarry32_1, args: [Register(0x7c), Register(0x84), Register(0x84)], resolved: None }
30 7c 84 84 
# 016f4 Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t17 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t18 Add inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t19\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t23 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t23 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x7c), Register(0x7c)], resolved: None }
# inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t24 <- 0n256/0x00000100u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))", "Number(USIZE, 256)", "Number(USIZE, 256)"] }
# 016f5 Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t24 <- 0n256/0x00000100u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\", \"Number(USIZE, 256)\", \"Number(USIZE, 256)\"] }", opcode: LoadImm32, args: [Register(0x88), Constant32(0x00000100=256)], resolved: None }
20 88 00 01 00 00 
# inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t22 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t23 Add inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t24
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))"] }
# 016fb Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t22 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t23 Add inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t24\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 016fc Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t22 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t23 Add inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t24\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: AddCarry32_1, args: [Register(0x7c), Register(0x88), Register(0x7c)], resolved: None }
30 7c 88 7c 
# 01700 Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t22 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t23 Add inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t24\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t21 <- mem[inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t22] U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")"] }
# 01701 Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t21 <- mem[inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t22] U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\"] }", opcode: Load8, args: [Register(0x7c), Register(0x78)], resolved: None }
05 7c 78 
# inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t25 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 01704 Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t25 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x8c), Constant8(0x01=1)], resolved: None }
04 8c 01 
# inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t20 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t21 Add inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t25
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))"] }
# 01707 Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t20 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t21 Add inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t25\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\"] }", opcode: Add8NoCarryIn, args: [Register(0x78), Register(0x8c), Register(0x78)], resolved: None }
14 78 8c 78 
# mem[inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t17] <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t20 U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }"] }
# 0170b Instruction { source: "mem[inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t17] <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t20 U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\"] }", opcode: Store8, args: [Register(0x78), Register(0x84)], resolved: None }
06 78 84 
# inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t26 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_value U8
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"value\")) }", "Ident(\"value\")", "Ident(\"value\")"] }
# 0170e Instruction { source: "inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t26 <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_value U8\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"value\\\")) }\", \"Ident(\\\"value\\\")\", \"Ident(\\\"value\\\")\"] }", opcode: Copy8, args: [Register(0x8d), Register(0x78)], resolved: None }
0b 8d 78 
# inline_RpnCalc_run_getchar_41_ch <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t26 U8
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"value\")) }"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_41_ch <- inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_t26 U8\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"value\\\")) }\"] }", opcode: Copy8, args: [Register(0x78), Register(0x78)], resolved: None }
# goto inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_function_end_queue_pop
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"value\")) }"] }
# 01711 Instruction { source: "goto inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_function_end_queue_pop\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"value\\\")) }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_function_end_queue_pop)], resolved: None }
70 15 17 00 
# :inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_function_end_queue_pop
# 	SourceContext { contexts: [] }
# inline_RpnCalc_run_getchar_41_inline_getchar_queue_pop_38_function_end_queue_pop
# goto inline_RpnCalc_run_getchar_41_getchar_while_predicate_0
# 	SourceContext { contexts: [] }
# 01715 Instruction { source: "goto inline_RpnCalc_run_getchar_41_getchar_while_predicate_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_run_getchar_41_getchar_while_predicate_0)], resolved: None }
70 f3 15 00 
# :inline_RpnCalc_run_getchar_41_getchar_while_end_2
# 	SourceContext { contexts: [] }
# inline_RpnCalc_run_getchar_41_getchar_while_end_2
# inline_RpnCalc_run_getchar_41_t13 <- inline_RpnCalc_run_getchar_41_ch U8
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"ch\")) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_41_t13 <- inline_RpnCalc_run_getchar_41_ch U8\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"ch\\\")) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x78), Register(0x78)], resolved: None }
# ch <- inline_RpnCalc_run_getchar_41_t13 U8
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"ch\")) }"] }
# optimized away noop copy Instruction { source: "ch <- inline_RpnCalc_run_getchar_41_t13 U8\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"ch\\\")) }\"] }", opcode: Copy8, args: [Register(0x78), Register(0x78)], resolved: None }
# goto inline_RpnCalc_run_getchar_41_function_end_getchar
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"ch\")) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_run_getchar_41_function_end_getchar\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"ch\\\")) }\"] }", opcode: JmpImm, args: [Label24(inline_RpnCalc_run_getchar_41_function_end_getchar)], resolved: None }
# :inline_RpnCalc_run_getchar_41_function_end_getchar
# 	SourceContext { contexts: [] }
# inline_RpnCalc_run_getchar_41_function_end_getchar
# t2 <- calc U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"result\"), var_type: Some(Number(U8)), value: Call(Call { function: \"RpnCalc_handle\", parameters: [Ident(\"calc\"), Ident(\"ch\")] }) }", "Call(Call { function: \"RpnCalc_handle\", parameters: [Ident(\"calc\"), Ident(\"ch\")] })", "Ident(\"calc\")", "Ident(\"calc\")"] }
# optimized away noop copy Instruction { source: "t2 <- calc U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\", \"Ident(\\\"calc\\\")\", \"Ident(\\\"calc\\\")\"] }", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# t3 <- ch U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"result\"), var_type: Some(Number(U8)), value: Call(Call { function: \"RpnCalc_handle\", parameters: [Ident(\"calc\"), Ident(\"ch\")] }) }", "Call(Call { function: \"RpnCalc_handle\", parameters: [Ident(\"calc\"), Ident(\"ch\")] })", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t3 <- ch U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x78), Register(0x78)], resolved: None }
# Some(result) <= call RpnCalc_handle(t2,t3,)
# 	SourceContext { contexts: ["Assign { target: Ident(\"result\"), var_type: Some(Number(U8)), value: Call(Call { function: \"RpnCalc_handle\", parameters: [Ident(\"calc\"), Ident(\"ch\")] }) }", "Call(Call { function: \"RpnCalc_handle\", parameters: [Ident(\"calc\"), Ident(\"ch\")] })"] }
# 01719 Instruction { source: "Arg0[c]=t2 Some(result) <= call RpnCalc_handle(t2,t3,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Copy32, args: [Register(0x74), Register(0x00)], resolved: None }
21 74 00 
# 0171c Instruction { source: "Arg1[ch]=t3 Some(result) <= call RpnCalc_handle(t2,t3,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Copy8, args: [Register(0x78), Register(0x04)], resolved: None }
0b 78 04 
# Registers used by this function: {116, 117, 118, 119, 120, 124, 125, 126, 127, 128, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 144, 145, 146, 147, 148}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 124, 125, 126, 127, 128, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 233, 234, 235, 236, 240, 241, 242, 243, 244, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: [116, 117, 118, 119, 120, 124, 125, 126, 127, 128, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 144, 145, 146, 147, 148]
# 0171f Instruction { source: "Saving reg0x94 before Some(result) <= call RpnCalc_handle(t2,t3,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0x94)], resolved: None }
09 94 
# 01721 Instruction { source: "Saving reg0x93 before Some(result) <= call RpnCalc_handle(t2,t3,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0x93)], resolved: None }
09 93 
# 01723 Instruction { source: "Saving reg0x92 before Some(result) <= call RpnCalc_handle(t2,t3,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0x92)], resolved: None }
09 92 
# 01725 Instruction { source: "Saving reg0x91 before Some(result) <= call RpnCalc_handle(t2,t3,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0x91)], resolved: None }
09 91 
# 01727 Instruction { source: "Saving reg0x90 before Some(result) <= call RpnCalc_handle(t2,t3,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0x90)], resolved: None }
09 90 
# 01729 Instruction { source: "Saving reg0x8d before Some(result) <= call RpnCalc_handle(t2,t3,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0x8d)], resolved: None }
09 8d 
# 0172b Instruction { source: "Saving reg0x8c before Some(result) <= call RpnCalc_handle(t2,t3,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0x8c)], resolved: None }
09 8c 
# 0172d Instruction { source: "Saving reg0x8b before Some(result) <= call RpnCalc_handle(t2,t3,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0x8b)], resolved: None }
09 8b 
# 0172f Instruction { source: "Saving reg0x8a before Some(result) <= call RpnCalc_handle(t2,t3,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0x8a)], resolved: None }
09 8a 
# 01731 Instruction { source: "Saving reg0x89 before Some(result) <= call RpnCalc_handle(t2,t3,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0x89)], resolved: None }
09 89 
# 01733 Instruction { source: "Saving reg0x88 before Some(result) <= call RpnCalc_handle(t2,t3,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0x88)], resolved: None }
09 88 
# 01735 Instruction { source: "Saving reg0x87 before Some(result) <= call RpnCalc_handle(t2,t3,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0x87)], resolved: None }
09 87 
# 01737 Instruction { source: "Saving reg0x86 before Some(result) <= call RpnCalc_handle(t2,t3,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0x86)], resolved: None }
09 86 
# 01739 Instruction { source: "Saving reg0x85 before Some(result) <= call RpnCalc_handle(t2,t3,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0x85)], resolved: None }
09 85 
# 0173b Instruction { source: "Saving reg0x84 before Some(result) <= call RpnCalc_handle(t2,t3,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0x84)], resolved: None }
09 84 
# 0173d Instruction { source: "Saving reg0x80 before Some(result) <= call RpnCalc_handle(t2,t3,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0x80)], resolved: None }
09 80 
# 0173f Instruction { source: "Saving reg0x7f before Some(result) <= call RpnCalc_handle(t2,t3,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0x7f)], resolved: None }
09 7f 
# 01741 Instruction { source: "Saving reg0x7e before Some(result) <= call RpnCalc_handle(t2,t3,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0x7e)], resolved: None }
09 7e 
# 01743 Instruction { source: "Saving reg0x7d before Some(result) <= call RpnCalc_handle(t2,t3,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0x7d)], resolved: None }
09 7d 
# 01745 Instruction { source: "Saving reg0x7c before Some(result) <= call RpnCalc_handle(t2,t3,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0x7c)], resolved: None }
09 7c 
# 01747 Instruction { source: "Saving reg0x78 before Some(result) <= call RpnCalc_handle(t2,t3,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0x78)], resolved: None }
09 78 
# 01749 Instruction { source: "Saving reg0x77 before Some(result) <= call RpnCalc_handle(t2,t3,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0x77)], resolved: None }
09 77 
# 0174b Instruction { source: "Saving reg0x76 before Some(result) <= call RpnCalc_handle(t2,t3,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0x76)], resolved: None }
09 76 
# 0174d Instruction { source: "Saving reg0x75 before Some(result) <= call RpnCalc_handle(t2,t3,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0x75)], resolved: None }
09 75 
# 0174f Instruction { source: "Saving reg0x74 before Some(result) <= call RpnCalc_handle(t2,t3,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0x74)], resolved: None }
09 74 
# 01751 Instruction { source: "PseudoCall(Label24(:RpnCalc_handle))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 01757 Instruction { source: "PseudoCall(Label24(:RpnCalc_handle))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 61 17 00 00 
# 0175d Instruction { source: "PseudoCall(Label24(:RpnCalc_handle))", opcode: JmpImm, args: [Label24(:RpnCalc_handle)], resolved: None }
70 0b 06 00 
# 01761 Instruction { source: "PseudoCall(Label24(:RpnCalc_handle))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 01767 Instruction { source: "Restoring reg0x74 after Some(result) <= call RpnCalc_handle(t2,t3,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0x74)], resolved: None }
0a 74 
# 01769 Instruction { source: "Restoring reg0x75 after Some(result) <= call RpnCalc_handle(t2,t3,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0x75)], resolved: None }
0a 75 
# 0176b Instruction { source: "Restoring reg0x76 after Some(result) <= call RpnCalc_handle(t2,t3,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0x76)], resolved: None }
0a 76 
# 0176d Instruction { source: "Restoring reg0x77 after Some(result) <= call RpnCalc_handle(t2,t3,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0x77)], resolved: None }
0a 77 
# 0176f Instruction { source: "Restoring reg0x78 after Some(result) <= call RpnCalc_handle(t2,t3,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0x78)], resolved: None }
0a 78 
# 01771 Instruction { source: "Restoring reg0x7c after Some(result) <= call RpnCalc_handle(t2,t3,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0x7c)], resolved: None }
0a 7c 
# 01773 Instruction { source: "Restoring reg0x7d after Some(result) <= call RpnCalc_handle(t2,t3,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0x7d)], resolved: None }
0a 7d 
# 01775 Instruction { source: "Restoring reg0x7e after Some(result) <= call RpnCalc_handle(t2,t3,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0x7e)], resolved: None }
0a 7e 
# 01777 Instruction { source: "Restoring reg0x7f after Some(result) <= call RpnCalc_handle(t2,t3,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0x7f)], resolved: None }
0a 7f 
# 01779 Instruction { source: "Restoring reg0x80 after Some(result) <= call RpnCalc_handle(t2,t3,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0x80)], resolved: None }
0a 80 
# 0177b Instruction { source: "Restoring reg0x84 after Some(result) <= call RpnCalc_handle(t2,t3,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0x84)], resolved: None }
0a 84 
# 0177d Instruction { source: "Restoring reg0x85 after Some(result) <= call RpnCalc_handle(t2,t3,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0x85)], resolved: None }
0a 85 
# 0177f Instruction { source: "Restoring reg0x86 after Some(result) <= call RpnCalc_handle(t2,t3,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0x86)], resolved: None }
0a 86 
# 01781 Instruction { source: "Restoring reg0x87 after Some(result) <= call RpnCalc_handle(t2,t3,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0x87)], resolved: None }
0a 87 
# 01783 Instruction { source: "Restoring reg0x88 after Some(result) <= call RpnCalc_handle(t2,t3,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0x88)], resolved: None }
0a 88 
# 01785 Instruction { source: "Restoring reg0x89 after Some(result) <= call RpnCalc_handle(t2,t3,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0x89)], resolved: None }
0a 89 
# 01787 Instruction { source: "Restoring reg0x8a after Some(result) <= call RpnCalc_handle(t2,t3,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0x8a)], resolved: None }
0a 8a 
# 01789 Instruction { source: "Restoring reg0x8b after Some(result) <= call RpnCalc_handle(t2,t3,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0x8b)], resolved: None }
0a 8b 
# 0178b Instruction { source: "Restoring reg0x8c after Some(result) <= call RpnCalc_handle(t2,t3,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0x8c)], resolved: None }
0a 8c 
# 0178d Instruction { source: "Restoring reg0x8d after Some(result) <= call RpnCalc_handle(t2,t3,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0x8d)], resolved: None }
0a 8d 
# 0178f Instruction { source: "Restoring reg0x90 after Some(result) <= call RpnCalc_handle(t2,t3,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0x90)], resolved: None }
0a 90 
# 01791 Instruction { source: "Restoring reg0x91 after Some(result) <= call RpnCalc_handle(t2,t3,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0x91)], resolved: None }
0a 91 
# 01793 Instruction { source: "Restoring reg0x92 after Some(result) <= call RpnCalc_handle(t2,t3,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0x92)], resolved: None }
0a 92 
# 01795 Instruction { source: "Restoring reg0x93 after Some(result) <= call RpnCalc_handle(t2,t3,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0x93)], resolved: None }
0a 93 
# 01797 Instruction { source: "Restoring reg0x94 after Some(result) <= call RpnCalc_handle(t2,t3,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0x94)], resolved: None }
0a 94 
# 01799 Instruction { source: "Some(result) <= call RpnCalc_handle(t2,t3,)\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"result\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"RpnCalc_handle\\\", parameters: [Ident(\\\"calc\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Copy8, args: [Register(0x00), Register(0x78)], resolved: None }
0b 00 78 
# t4 <- result U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"result\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: Ident(\"result\"), right: Number(U8, 0) }", "Ident(\"result\")", "Ident(\"result\")"] }
# optimized away noop copy Instruction { source: "t4 <- result U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"result\\\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"result\\\"), right: Number(U8, 0) }\", \"Ident(\\\"result\\\")\", \"Ident(\\\"result\\\")\"] }", opcode: Copy8, args: [Register(0x78), Register(0x78)], resolved: None }
# t5 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"result\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: Ident(\"result\"), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0179c Instruction { source: "t5 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"result\\\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"result\\\"), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x80), Constant8(0x00=0)], resolved: None }
04 80 00 
# if t4 == t5 then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_else_0_5'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"result\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: Ident(\"result\"), right: Number(U8, 0) }"] }
# 0179f Instruction { source: "if t4 == t5 then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"result\\\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"result\\\"), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x78), Register(0x80)], resolved: None }
15 78 80 
# 017a2 Instruction { source: "if t4 == t5 then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"result\\\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"result\\\"), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(RpnCalc_run_if_true_0_4)], resolved: None }
72 aa 17 00 
# 017a6 Instruction { source: "if t4 == t5 then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"result\\\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"result\\\"), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(RpnCalc_run_if_else_0_5)], resolved: None }
70 b6 17 00 
# :RpnCalc_run_if_true_0_4
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"result\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }"] }
# RpnCalc_run_if_true_0_4
# t6 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 017aa Instruction { source: "t6 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x94), Constant8(0x00=0)], resolved: None }
04 94 00 
# return Some(t6)
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }"] }
# 017ad Instruction { source: "return Some(t6)\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x94), Register(0x00)], resolved: None }
0b 94 00 
# 017b0 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# goto RpnCalc_run_if_end_3
# 	SourceContext { contexts: [] }
# 017b2 Instruction { source: "goto RpnCalc_run_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_run_if_end_3)], resolved: None }
70 b6 17 00 
# :RpnCalc_run_if_else_0_5
# 	SourceContext { contexts: [] }
# RpnCalc_run_if_else_0_5
# :RpnCalc_run_if_end_3
# 	SourceContext { contexts: [] }
# RpnCalc_run_if_end_3
# goto RpnCalc_run_while_predicate_0
# 	SourceContext { contexts: [] }
# 017b6 Instruction { source: "goto RpnCalc_run_while_predicate_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(RpnCalc_run_while_predicate_0)], resolved: None }
70 df 15 00 
# :RpnCalc_run_while_end_2
# 	SourceContext { contexts: [] }
# RpnCalc_run_while_end_2
# :function_end_RpnCalc_run
# 	SourceContext { contexts: [] }
# function_end_RpnCalc_run
# Unreachable
# 	SourceContext { contexts: [] }
# 017ba Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
# :delay
# Ret None
# Arg0=x
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var t0 (t0 Ident("x")) Reg(U32) Some([152, 153, 154, 155])
# Var t1 (t1 Number(USIZE, 0)) Reg(U32) Some([156, 157, 158, 159])
# Var t2 (t2 Ident("x")) Reg(U32) Some([152, 153, 154, 155])
# Var t3 (t3 Number(USIZE, 1)) Reg(U32) Some([156, 157, 158, 159])
# Var x (Arg0 x Number(USIZE)) Reg(U32) Some([152, 153, 154, 155])
# 017bf Instruction { source: "Save function parameter 'x' registers [0, 1, 2, 3] to locals [152, 153, 154, 155].", opcode: Copy32, args: [Register(0x00), Register(0x98)], resolved: None }
21 00 98 
# :delay_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Ident(\"x\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\"x\"), var_type: None, value: Arithmetic(Subtract, Ident(\"x\"), Number(USIZE, 1)) }] }"] }
# delay_while_predicate_0
# t0 <- x U32
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Ident(\"x\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\"x\"), var_type: None, value: Arithmetic(Subtract, Ident(\"x\"), Number(USIZE, 1)) }] }", "Comparison { op: NotEquals, left: Ident(\"x\"), right: Number(USIZE, 0) }", "Ident(\"x\")", "Ident(\"x\")"] }
# optimized away noop copy Instruction { source: "t0 <- x U32\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"x\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"x\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"x\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"x\\\"), right: Number(USIZE, 0) }\", \"Ident(\\\"x\\\")\", \"Ident(\\\"x\\\")\"] }", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# t1 <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Ident(\"x\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\"x\"), var_type: None, value: Arithmetic(Subtract, Ident(\"x\"), Number(USIZE, 1)) }] }", "Comparison { op: NotEquals, left: Ident(\"x\"), right: Number(USIZE, 0) }", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 017c2 Instruction { source: "t1 <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"x\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"x\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"x\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"x\\\"), right: Number(USIZE, 0) }\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x9c), Constant32(0x00000000=0)], resolved: None }
20 9c 00 00 00 00 
# if t0 != t1 then 'delay_while_body_1' else 'delay_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Ident(\"x\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\"x\"), var_type: None, value: Arithmetic(Subtract, Ident(\"x\"), Number(USIZE, 1)) }] }", "Comparison { op: NotEquals, left: Ident(\"x\"), right: Number(USIZE, 0) }"] }
# 017c8 Instruction { source: "if t0 != t1 then 'delay_while_body_1' else 'delay_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"x\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"x\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"x\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"x\\\"), right: Number(USIZE, 0) }\"] }", opcode: Cmp8, args: [Register(0x9b), Register(0x9f)], resolved: None }
15 9b 9f 
# 017cb Instruction { source: "if t0 != t1 then 'delay_while_body_1' else 'delay_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"x\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"x\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"x\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"x\\\"), right: Number(USIZE, 0) }\"] }", opcode: Cmp8IfZero, args: [Register(0x9a), Register(0x9e)], resolved: None }
16 9a 9e 
# 017ce Instruction { source: "if t0 != t1 then 'delay_while_body_1' else 'delay_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"x\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"x\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"x\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"x\\\"), right: Number(USIZE, 0) }\"] }", opcode: Cmp8IfZero, args: [Register(0x99), Register(0x9d)], resolved: None }
16 99 9d 
# 017d1 Instruction { source: "if t0 != t1 then 'delay_while_body_1' else 'delay_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"x\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"x\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"x\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"x\\\"), right: Number(USIZE, 0) }\"] }", opcode: Cmp8IfZero, args: [Register(0x98), Register(0x9c)], resolved: None }
16 98 9c 
# 017d4 Instruction { source: "if t0 != t1 then 'delay_while_body_1' else 'delay_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"x\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"x\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"x\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"x\\\"), right: Number(USIZE, 0) }\"] }", opcode: JzImm, args: [Label24(delay_while_end_2)], resolved: None }
72 f9 17 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t0 != t1 then 'delay_while_body_1' else 'delay_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"x\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"x\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"x\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"x\\\"), right: Number(USIZE, 0) }\"] }", opcode: JmpImm, args: [Label24(delay_while_body_1)], resolved: None }
# :delay_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Ident(\"x\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\"x\"), var_type: None, value: Arithmetic(Subtract, Ident(\"x\"), Number(USIZE, 1)) }] }"] }
# delay_while_body_1
# t2 <- x U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"x\"), var_type: None, value: Arithmetic(Subtract, Ident(\"x\"), Number(USIZE, 1)) }", "Arithmetic(Subtract, Ident(\"x\"), Number(USIZE, 1))", "Ident(\"x\")", "Ident(\"x\")"] }
# optimized away noop copy Instruction { source: "t2 <- x U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"x\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"x\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"x\\\"), Number(USIZE, 1))\", \"Ident(\\\"x\\\")\", \"Ident(\\\"x\\\")\"] }", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# t3 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"x\"), var_type: None, value: Arithmetic(Subtract, Ident(\"x\"), Number(USIZE, 1)) }", "Arithmetic(Subtract, Ident(\"x\"), Number(USIZE, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 017d8 Instruction { source: "t3 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"x\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"x\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"x\\\"), Number(USIZE, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x9c), Constant32(0x00000001=1)], resolved: None }
20 9c 01 00 00 00 
# x <- t2 Subtract t3
# 	SourceContext { contexts: ["Assign { target: Ident(\"x\"), var_type: None, value: Arithmetic(Subtract, Ident(\"x\"), Number(USIZE, 1)) }", "Arithmetic(Subtract, Ident(\"x\"), Number(USIZE, 1))"] }
# 017de Instruction { source: "x <- t2 Subtract t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"x\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"x\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"x\\\"), Number(USIZE, 1))\"] }", opcode: Copy32, args: [Register(0x9c), Register(0x00)], resolved: None }
21 9c 00 
# 017e1 Instruction { source: "x <- t2 Subtract t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"x\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"x\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"x\\\"), Number(USIZE, 1))\"] }", opcode: Invert8, args: [Register(0x00)], resolved: None }
01 00 
# 017e3 Instruction { source: "x <- t2 Subtract t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"x\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"x\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"x\\\"), Number(USIZE, 1))\"] }", opcode: Invert8, args: [Register(0x01)], resolved: None }
01 01 
# 017e5 Instruction { source: "x <- t2 Subtract t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"x\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"x\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"x\\\"), Number(USIZE, 1))\"] }", opcode: Invert8, args: [Register(0x02)], resolved: None }
01 02 
# 017e7 Instruction { source: "x <- t2 Subtract t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"x\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"x\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"x\\\"), Number(USIZE, 1))\"] }", opcode: Invert8, args: [Register(0x03)], resolved: None }
01 03 
# 017e9 Instruction { source: "x <- t2 Subtract t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"x\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"x\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"x\\\"), Number(USIZE, 1))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x00), Constant32(0x00000001=1)], resolved: None }
32 00 01 00 00 00 
# 017ef Instruction { source: "x <- t2 Subtract t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"x\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"x\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"x\\\"), Number(USIZE, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 017f0 Instruction { source: "x <- t2 Subtract t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"x\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"x\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"x\\\"), Number(USIZE, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x98), Register(0x00), Register(0x98)], resolved: None }
30 98 00 98 
# 017f4 Instruction { source: "x <- t2 Subtract t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"x\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"x\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"x\\\"), Number(USIZE, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# goto delay_while_predicate_0
# 	SourceContext { contexts: [] }
# 017f5 Instruction { source: "goto delay_while_predicate_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(delay_while_predicate_0)], resolved: None }
70 c2 17 00 
# :delay_while_end_2
# 	SourceContext { contexts: [] }
# delay_while_end_2
# return None
# 	SourceContext { contexts: ["Return { value: None }"] }
# 017f9 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# :function_end_delay
# 	SourceContext { contexts: [] }
# function_end_delay
# Unreachable
# 	SourceContext { contexts: [] }
# 017fb Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
# :div32
# Ret Some(U32)
# Arg0=a
# Arg1=b
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var __frame_pointer (__frame_pointer) Reg(U32) Some([12, 13, 14, 15])
# Var a (Arg0 a Number(USIZE)) Reg(U32) Some([160, 161, 162, 163])
# Var b (Arg1 b Number(USIZE)) Reg(U32) Some([164, 165, 166, 167])
# Var hi (Local hi Number(USIZE) Reg(U32)) Reg(U32) Some([168, 169, 170, 171])
# Var inline_div32_div16_45_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_div32_div16_45_a (Arg0 a Number(USIZE)) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_45_b (Arg1 b Number(USIZE)) Reg(U32) Some([164, 165, 166, 167])
# Var inline_div32_div16_45_hi (Local hi Number(USIZE) Reg(U32)) Reg(U32) Some([168, 169, 170, 171])
# Var inline_div32_div16_45_inline_div16_mul16_32_6_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_div32_div16_45_inline_div16_mul16_32_6_a (Arg0 a Number(USIZE)) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_div16_45_inline_div16_mul16_32_6_b (Arg1 b Number(USIZE)) Reg(U32) Some([176, 177, 178, 179])
# Var inline_div32_div16_45_inline_div16_mul16_32_6_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([180, 181, 182, 183])
# Var inline_div32_div16_45_inline_div16_mul16_32_6_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_div16_45_inline_div16_mul16_32_6_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_div16_45_inline_div16_mul16_32_6_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_div16_45_inline_div16_mul16_32_6_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_div32_div16_45_inline_div16_mul16_32_6_t0 (t0 Ident("a")) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_div16_45_inline_div16_mul16_32_6_t1 (t1 Ident("b")) Reg(U32) Some([176, 177, 178, 179])
# Var inline_div32_div16_45_inline_div16_mul16_32_6_t10 (t10 Ident("c")) Reg(U32) Some([180, 181, 182, 183])
# Var inline_div32_div16_45_inline_div16_mul16_32_6_t11 (t11 Ident("f")) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_div16_45_inline_div16_mul16_32_6_t12 (t12 Ident("a")) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_div16_45_inline_div16_mul16_32_6_t13 (t13 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_div16_45_inline_div16_mul16_32_6_t14 (t14 Index("b", Number(U8, 1))) Reg(U8) Some([188])
# Var inline_div32_div16_45_inline_div16_mul16_32_6_t15 (t15 Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_div16_45_inline_div16_mul16_32_6_t16 (t16 Index("a", Number(U8, 1))) Reg(U8) Some([189])
# Var inline_div32_div16_45_inline_div16_mul16_32_6_t17 (t17 Ident("b")) Reg(U32) Some([176, 177, 178, 179])
# Var inline_div32_div16_45_inline_div16_mul16_32_6_t18 (t18 Ident("d")) Reg(U32) Some([176, 177, 178, 179])
# Var inline_div32_div16_45_inline_div16_mul16_32_6_t19 (t19 Ident("e")) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_div16_45_inline_div16_mul16_32_6_t2 (t2 Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_div16_45_inline_div16_mul16_32_6_t20 (t20 Index("d", Number(U8, 2))) Reg(U8) Some([189])
# Var inline_div32_div16_45_inline_div16_mul16_32_6_t21 (t21 Index("d", Number(U8, 1))) Reg(U8) Some([189])
# Var inline_div32_div16_45_inline_div16_mul16_32_6_t22 (t22 Index("d", Number(U8, 0))) Reg(U8) Some([189])
# Var inline_div32_div16_45_inline_div16_mul16_32_6_t23 (t23 Number(U8, 0)) Reg(U8) Some([189])
# Var inline_div32_div16_45_inline_div16_mul16_32_6_t24 (t24 Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_div16_45_inline_div16_mul16_32_6_t25 (t25 Ident("c")) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_div16_45_inline_div16_mul16_32_6_t26 (t26 Ident("d")) Reg(U32) Some([176, 177, 178, 179])
# Var inline_div32_div16_45_inline_div16_mul16_32_6_t3 (t3 Index("a", Number(U8, 1))) Reg(U8) Some([189])
# Var inline_div32_div16_45_inline_div16_mul16_32_6_t4 (t4 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([192, 193, 194, 195])
# Var inline_div32_div16_45_inline_div16_mul16_32_6_t5 (t5 Index("b", Number(U8, 1))) Reg(U8) Some([188])
# Var inline_div32_div16_45_inline_div16_mul16_32_6_t6 (t6 Index("f", Number(U8, 1))) Reg(U8) Some([196])
# Var inline_div32_div16_45_inline_div16_mul16_32_6_t7 (t7 Index("f", Number(U8, 0))) Reg(U8) Some([196])
# Var inline_div32_div16_45_inline_div16_mul16_32_6_t8 (t8 Number(U8, 0)) Reg(U8) Some([197])
# Var inline_div32_div16_45_inline_div16_mul16_32_6_t9 (t9 Number(U8, 0)) Reg(U8) Some([197])
# Var inline_div32_div16_45_inline_div16_shiftright1_44_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_div32_div16_45_inline_div16_shiftright1_44_a (Arg0 a Number(USIZE)) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_div16_45_inline_div16_shiftright1_44_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_div32_div16_45_inline_div16_shiftright1_44_t0 (t0 Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))) Reg(U8) Some([188])
# Var inline_div32_div16_45_inline_div16_shiftright1_44_t1 (t1 Index("a", Number(U8, 0))) Reg(U8) Some([189])
# Var inline_div32_div16_45_inline_div16_shiftright1_44_t10 (t10 Index("a", Number(U8, 3))) Reg(U8) Some([189])
# Var inline_div32_div16_45_inline_div16_shiftright1_44_t11 (t11 Number(U8, 1)) Reg(U8) Some([188])
# Var inline_div32_div16_45_inline_div16_shiftright1_44_t12 (t12 Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))) Reg(U8) Some([188])
# Var inline_div32_div16_45_inline_div16_shiftright1_44_t13 (t13 Index("a", Number(U8, 0))) Reg(U8) Some([189])
# Var inline_div32_div16_45_inline_div16_shiftright1_44_t14 (t14 Number(U8, 127)) Reg(U8) Some([188])
# Var inline_div32_div16_45_inline_div16_shiftright1_44_t15 (t15 Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))) Reg(U8) Some([188])
# Var inline_div32_div16_45_inline_div16_shiftright1_44_t16 (t16 Index("a", Number(U8, 0))) Reg(U8) Some([189])
# Var inline_div32_div16_45_inline_div16_shiftright1_44_t17 (t17 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) Reg(U8) Some([188])
# Var inline_div32_div16_45_inline_div16_shiftright1_44_t18 (t18 Index("a", Number(U8, 1))) Reg(U8) Some([188])
# Var inline_div32_div16_45_inline_div16_shiftright1_44_t19 (t19 Number(U8, 128)) Reg(U8) Some([198])
# Var inline_div32_div16_45_inline_div16_shiftright1_44_t2 (t2 Number(U8, 1)) Reg(U8) Some([188])
# Var inline_div32_div16_45_inline_div16_shiftright1_44_t20 (t20 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))) Reg(U8) Some([188])
# Var inline_div32_div16_45_inline_div16_shiftright1_44_t21 (t21 Index("a", Number(U8, 1))) Reg(U8) Some([189])
# Var inline_div32_div16_45_inline_div16_shiftright1_44_t22 (t22 Number(U8, 127)) Reg(U8) Some([188])
# Var inline_div32_div16_45_inline_div16_shiftright1_44_t23 (t23 Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))) Reg(U8) Some([188])
# Var inline_div32_div16_45_inline_div16_shiftright1_44_t24 (t24 Index("a", Number(U8, 1))) Reg(U8) Some([189])
# Var inline_div32_div16_45_inline_div16_shiftright1_44_t25 (t25 Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) Reg(U8) Some([188])
# Var inline_div32_div16_45_inline_div16_shiftright1_44_t26 (t26 Index("a", Number(U8, 2))) Reg(U8) Some([188])
# Var inline_div32_div16_45_inline_div16_shiftright1_44_t27 (t27 Number(U8, 128)) Reg(U8) Some([198])
# Var inline_div32_div16_45_inline_div16_shiftright1_44_t28 (t28 Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))) Reg(U8) Some([188])
# Var inline_div32_div16_45_inline_div16_shiftright1_44_t29 (t29 Index("a", Number(U8, 2))) Reg(U8) Some([189])
# Var inline_div32_div16_45_inline_div16_shiftright1_44_t3 (t3 Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))) Reg(U8) Some([188])
# Var inline_div32_div16_45_inline_div16_shiftright1_44_t30 (t30 Number(U8, 127)) Reg(U8) Some([188])
# Var inline_div32_div16_45_inline_div16_shiftright1_44_t31 (t31 Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))) Reg(U8) Some([188])
# Var inline_div32_div16_45_inline_div16_shiftright1_44_t32 (t32 Index("a", Number(U8, 2))) Reg(U8) Some([189])
# Var inline_div32_div16_45_inline_div16_shiftright1_44_t33 (t33 Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) Reg(U8) Some([188])
# Var inline_div32_div16_45_inline_div16_shiftright1_44_t34 (t34 Index("a", Number(U8, 3))) Reg(U8) Some([188])
# Var inline_div32_div16_45_inline_div16_shiftright1_44_t35 (t35 Number(U8, 128)) Reg(U8) Some([198])
# Var inline_div32_div16_45_inline_div16_shiftright1_44_t36 (t36 Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))) Reg(U8) Some([188])
# Var inline_div32_div16_45_inline_div16_shiftright1_44_t37 (t37 Index("a", Number(U8, 3))) Reg(U8) Some([189])
# Var inline_div32_div16_45_inline_div16_shiftright1_44_t38 (t38 Number(U8, 127)) Reg(U8) Some([188])
# Var inline_div32_div16_45_inline_div16_shiftright1_44_t39 (t39 Ident("a")) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_div16_45_inline_div16_shiftright1_44_t4 (t4 Index("a", Number(U8, 1))) Reg(U8) Some([189])
# Var inline_div32_div16_45_inline_div16_shiftright1_44_t5 (t5 Number(U8, 1)) Reg(U8) Some([188])
# Var inline_div32_div16_45_inline_div16_shiftright1_44_t6 (t6 Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))) Reg(U8) Some([188])
# Var inline_div32_div16_45_inline_div16_shiftright1_44_t7 (t7 Index("a", Number(U8, 2))) Reg(U8) Some([189])
# Var inline_div32_div16_45_inline_div16_shiftright1_44_t8 (t8 Number(U8, 1)) Reg(U8) Some([188])
# Var inline_div32_div16_45_inline_div16_shiftright1_44_t9 (t9 Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))) Reg(U8) Some([188])
# Var inline_div32_div16_45_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_div32_div16_45_lo (Local lo Number(USIZE) Reg(U32)) Reg(U32) Some([200, 201, 202, 203])
# Var inline_div32_div16_45_mid (Local mid Number(USIZE) Reg(U32)) Reg(U32) Some([204, 205, 206, 207])
# Var inline_div32_div16_45_r (Local r Number(USIZE) Reg(U32)) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_div16_45_t0 (t0 Ident("a")) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_45_t1 (t1 Ident("b")) Reg(U32) Some([164, 165, 166, 167])
# Var inline_div32_div16_45_t10 (t10 Ident("hi")) Reg(U32) Some([168, 169, 170, 171])
# Var inline_div32_div16_45_t11 (t11 Arithmetic(Add, Ident("lo"), Ident("hi"))) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_div16_45_t12 (t12 Ident("lo")) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_div16_45_t13 (t13 Ident("hi")) Reg(U32) Some([168, 169, 170, 171])
# Var inline_div32_div16_45_t14 (t14 Ident("mid")) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_div16_45_t15 (t15 Ident("b")) Reg(U32) Some([164, 165, 166, 167])
# Var inline_div32_div16_45_t16 (t16 Index("x", Number(U8, 2))) Reg(U8) Some([189])
# Var inline_div32_div16_45_t17 (t17 Number(U8, 0)) Reg(U8) Some([188])
# Var inline_div32_div16_45_t18 (t18 Ident("mid")) Reg(U32) Some([168, 169, 170, 171])
# Var inline_div32_div16_45_t19 (t19 Number(USIZE, 1)) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_div16_45_t2 (t2 Number(USIZE, 0)) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_45_t20 (t20 Index("x", Number(U8, 3))) Reg(U8) Some([189])
# Var inline_div32_div16_45_t21 (t21 Number(U8, 0)) Reg(U8) Some([188])
# Var inline_div32_div16_45_t22 (t22 Ident("mid")) Reg(U32) Some([168, 169, 170, 171])
# Var inline_div32_div16_45_t23 (t23 Number(USIZE, 1)) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_div16_45_t24 (t24 Ident("x")) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_div16_45_t25 (t25 Ident("a")) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_45_t26 (t26 Ident("mid")) Reg(U32) Some([168, 169, 170, 171])
# Var inline_div32_div16_45_t27 (t27 Number(USIZE, 1)) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_div16_45_t28 (t28 Ident("x")) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_div16_45_t29 (t29 Ident("a")) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_45_t3 (t3 Ident("a")) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_45_t30 (t30 Ident("mid")) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_45_t31 (t31 Ident("a")) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_45_t32 (t32 Ident("x")) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_div16_45_t33 (t33 Ident("r")) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_div16_45_t34 (t34 Ident("b")) Reg(U32) Some([164, 165, 166, 167])
# Var inline_div32_div16_45_t35 (t35 Ident("mid")) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_45_t36 (t36 Ident("mid")) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_div16_45_t37 (t37 Number(USIZE, 1)) Reg(U32) Some([176, 177, 178, 179])
# Var inline_div32_div16_45_t38 (t38 Ident("lo")) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_45_t4 (t4 Number(USIZE, 256)) Reg(U32) Some([168, 169, 170, 171])
# Var inline_div32_div16_45_t5 (t5 Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_45_t6 (t6 Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0)))) Reg(U8) Some([208])
# Var inline_div32_div16_45_t7 (t7 Index("a", Number(U8, 0))) Reg(U8) Some([208])
# Var inline_div32_div16_45_t8 (t8 Index("b", Number(U8, 0))) Reg(U8) Some([209])
# Var inline_div32_div16_45_t9 (t9 Ident("lo")) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_div16_45_x (Local x Number(USIZE) Reg(U32)) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_shiftright1_46_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_div32_shiftright1_46_a (Arg0 a Number(USIZE)) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_shiftright1_46_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_div32_shiftright1_46_t0 (t0 Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))) Reg(U8) Some([188])
# Var inline_div32_shiftright1_46_t1 (t1 Index("a", Number(U8, 0))) Reg(U8) Some([189])
# Var inline_div32_shiftright1_46_t10 (t10 Index("a", Number(U8, 3))) Reg(U8) Some([189])
# Var inline_div32_shiftright1_46_t11 (t11 Number(U8, 1)) Reg(U8) Some([188])
# Var inline_div32_shiftright1_46_t12 (t12 Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))) Reg(U8) Some([188])
# Var inline_div32_shiftright1_46_t13 (t13 Index("a", Number(U8, 0))) Reg(U8) Some([189])
# Var inline_div32_shiftright1_46_t14 (t14 Number(U8, 127)) Reg(U8) Some([188])
# Var inline_div32_shiftright1_46_t15 (t15 Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))) Reg(U8) Some([188])
# Var inline_div32_shiftright1_46_t16 (t16 Index("a", Number(U8, 0))) Reg(U8) Some([189])
# Var inline_div32_shiftright1_46_t17 (t17 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) Reg(U8) Some([188])
# Var inline_div32_shiftright1_46_t18 (t18 Index("a", Number(U8, 1))) Reg(U8) Some([188])
# Var inline_div32_shiftright1_46_t19 (t19 Number(U8, 128)) Reg(U8) Some([198])
# Var inline_div32_shiftright1_46_t2 (t2 Number(U8, 1)) Reg(U8) Some([188])
# Var inline_div32_shiftright1_46_t20 (t20 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))) Reg(U8) Some([188])
# Var inline_div32_shiftright1_46_t21 (t21 Index("a", Number(U8, 1))) Reg(U8) Some([189])
# Var inline_div32_shiftright1_46_t22 (t22 Number(U8, 127)) Reg(U8) Some([188])
# Var inline_div32_shiftright1_46_t23 (t23 Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))) Reg(U8) Some([188])
# Var inline_div32_shiftright1_46_t24 (t24 Index("a", Number(U8, 1))) Reg(U8) Some([189])
# Var inline_div32_shiftright1_46_t25 (t25 Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) Reg(U8) Some([188])
# Var inline_div32_shiftright1_46_t26 (t26 Index("a", Number(U8, 2))) Reg(U8) Some([188])
# Var inline_div32_shiftright1_46_t27 (t27 Number(U8, 128)) Reg(U8) Some([198])
# Var inline_div32_shiftright1_46_t28 (t28 Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))) Reg(U8) Some([188])
# Var inline_div32_shiftright1_46_t29 (t29 Index("a", Number(U8, 2))) Reg(U8) Some([189])
# Var inline_div32_shiftright1_46_t3 (t3 Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))) Reg(U8) Some([188])
# Var inline_div32_shiftright1_46_t30 (t30 Number(U8, 127)) Reg(U8) Some([188])
# Var inline_div32_shiftright1_46_t31 (t31 Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))) Reg(U8) Some([188])
# Var inline_div32_shiftright1_46_t32 (t32 Index("a", Number(U8, 2))) Reg(U8) Some([189])
# Var inline_div32_shiftright1_46_t33 (t33 Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) Reg(U8) Some([188])
# Var inline_div32_shiftright1_46_t34 (t34 Index("a", Number(U8, 3))) Reg(U8) Some([188])
# Var inline_div32_shiftright1_46_t35 (t35 Number(U8, 128)) Reg(U8) Some([198])
# Var inline_div32_shiftright1_46_t36 (t36 Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))) Reg(U8) Some([188])
# Var inline_div32_shiftright1_46_t37 (t37 Index("a", Number(U8, 3))) Reg(U8) Some([189])
# Var inline_div32_shiftright1_46_t38 (t38 Number(U8, 127)) Reg(U8) Some([188])
# Var inline_div32_shiftright1_46_t39 (t39 Ident("a")) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_shiftright1_46_t4 (t4 Index("a", Number(U8, 1))) Reg(U8) Some([189])
# Var inline_div32_shiftright1_46_t5 (t5 Number(U8, 1)) Reg(U8) Some([188])
# Var inline_div32_shiftright1_46_t6 (t6 Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))) Reg(U8) Some([188])
# Var inline_div32_shiftright1_46_t7 (t7 Index("a", Number(U8, 2))) Reg(U8) Some([189])
# Var inline_div32_shiftright1_46_t8 (t8 Number(U8, 1)) Reg(U8) Some([188])
# Var inline_div32_shiftright1_46_t9 (t9 Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))) Reg(U8) Some([188])
# Var inline_div32_shiftright1_47_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_div32_shiftright1_47_a (Arg0 a Number(USIZE)) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_shiftright1_47_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_div32_shiftright1_47_t0 (t0 Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))) Reg(U8) Some([188])
# Var inline_div32_shiftright1_47_t1 (t1 Index("a", Number(U8, 0))) Reg(U8) Some([189])
# Var inline_div32_shiftright1_47_t10 (t10 Index("a", Number(U8, 3))) Reg(U8) Some([189])
# Var inline_div32_shiftright1_47_t11 (t11 Number(U8, 1)) Reg(U8) Some([188])
# Var inline_div32_shiftright1_47_t12 (t12 Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))) Reg(U8) Some([188])
# Var inline_div32_shiftright1_47_t13 (t13 Index("a", Number(U8, 0))) Reg(U8) Some([189])
# Var inline_div32_shiftright1_47_t14 (t14 Number(U8, 127)) Reg(U8) Some([188])
# Var inline_div32_shiftright1_47_t15 (t15 Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))) Reg(U8) Some([188])
# Var inline_div32_shiftright1_47_t16 (t16 Index("a", Number(U8, 0))) Reg(U8) Some([189])
# Var inline_div32_shiftright1_47_t17 (t17 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) Reg(U8) Some([188])
# Var inline_div32_shiftright1_47_t18 (t18 Index("a", Number(U8, 1))) Reg(U8) Some([188])
# Var inline_div32_shiftright1_47_t19 (t19 Number(U8, 128)) Reg(U8) Some([198])
# Var inline_div32_shiftright1_47_t2 (t2 Number(U8, 1)) Reg(U8) Some([188])
# Var inline_div32_shiftright1_47_t20 (t20 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))) Reg(U8) Some([188])
# Var inline_div32_shiftright1_47_t21 (t21 Index("a", Number(U8, 1))) Reg(U8) Some([189])
# Var inline_div32_shiftright1_47_t22 (t22 Number(U8, 127)) Reg(U8) Some([188])
# Var inline_div32_shiftright1_47_t23 (t23 Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))) Reg(U8) Some([188])
# Var inline_div32_shiftright1_47_t24 (t24 Index("a", Number(U8, 1))) Reg(U8) Some([189])
# Var inline_div32_shiftright1_47_t25 (t25 Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) Reg(U8) Some([188])
# Var inline_div32_shiftright1_47_t26 (t26 Index("a", Number(U8, 2))) Reg(U8) Some([188])
# Var inline_div32_shiftright1_47_t27 (t27 Number(U8, 128)) Reg(U8) Some([198])
# Var inline_div32_shiftright1_47_t28 (t28 Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))) Reg(U8) Some([188])
# Var inline_div32_shiftright1_47_t29 (t29 Index("a", Number(U8, 2))) Reg(U8) Some([189])
# Var inline_div32_shiftright1_47_t3 (t3 Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))) Reg(U8) Some([188])
# Var inline_div32_shiftright1_47_t30 (t30 Number(U8, 127)) Reg(U8) Some([188])
# Var inline_div32_shiftright1_47_t31 (t31 Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))) Reg(U8) Some([188])
# Var inline_div32_shiftright1_47_t32 (t32 Index("a", Number(U8, 2))) Reg(U8) Some([189])
# Var inline_div32_shiftright1_47_t33 (t33 Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) Reg(U8) Some([188])
# Var inline_div32_shiftright1_47_t34 (t34 Index("a", Number(U8, 3))) Reg(U8) Some([188])
# Var inline_div32_shiftright1_47_t35 (t35 Number(U8, 128)) Reg(U8) Some([198])
# Var inline_div32_shiftright1_47_t36 (t36 Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))) Reg(U8) Some([188])
# Var inline_div32_shiftright1_47_t37 (t37 Index("a", Number(U8, 3))) Reg(U8) Some([189])
# Var inline_div32_shiftright1_47_t38 (t38 Number(U8, 127)) Reg(U8) Some([188])
# Var inline_div32_shiftright1_47_t39 (t39 Ident("a")) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_shiftright1_47_t4 (t4 Index("a", Number(U8, 1))) Reg(U8) Some([189])
# Var inline_div32_shiftright1_47_t5 (t5 Number(U8, 1)) Reg(U8) Some([188])
# Var inline_div32_shiftright1_47_t6 (t6 Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))) Reg(U8) Some([188])
# Var inline_div32_shiftright1_47_t7 (t7 Index("a", Number(U8, 2))) Reg(U8) Some([189])
# Var inline_div32_shiftright1_47_t8 (t8 Number(U8, 1)) Reg(U8) Some([188])
# Var inline_div32_shiftright1_47_t9 (t9 Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))) Reg(U8) Some([188])
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var lo (Local lo Number(USIZE) Reg(U32)) Reg(U32) Some([184, 185, 186, 187])
# Var mid (Local mid Number(USIZE) Reg(U32)) Reg(U32) Some([172, 173, 174, 175])
# Var r (Local r Number(USIZE) Reg(U32)) Reg(U32) Some([176, 177, 178, 179])
# Var t0 (Stack size negated) Reg(U32) Some([168, 169, 170, 171])
# Var t1 (t1 Ident("a")) Reg(U32) Some([160, 161, 162, 163])
# Var t10 (Stack size) Reg(U32) Some([160, 161, 162, 163])
# Var t11 (t11 Ident("lo")) Reg(U32) Some([172, 173, 174, 175])
# Var t12 (t12 Ident("hi")) Reg(U32) Some([168, 169, 170, 171])
# Var t13 (t13 Call(Call { function: "shiftright1", parameters: [Ident("lo")] })) Reg(U32) Some([192, 193, 194, 195])
# Var t14 (t14 Ident("lo")) Reg(U32) Some([172, 173, 174, 175])
# Var t15 (t15 Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) Reg(U32) Some([172, 173, 174, 175])
# Var t16 (t16 Ident("hi")) Reg(U32) Some([168, 169, 170, 171])
# Var t17 (t17 Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })) Reg(U8) Some([210])
# Var t18 (t18 Ident("mid")) Reg(U32) Some([172, 173, 174, 175])
# Var t19 (t19 Ident("b")) Reg(U32) Some([164, 165, 166, 167])
# Var t2 (t2 Ident("b")) Reg(U32) Some([164, 165, 166, 167])
# Var t20 (t20 AddressOf(Ident("x64"))) Reg(U32) Some([176, 177, 178, 179])
# Var t21 (t21 Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))) Reg(U32) Some([176, 177, 178, 179])
# Var t22 (t22 Ident("__frame_pointer")) Reg(U32) Some([212, 213, 214, 215])
# Var t23 (t23 Number(USIZE, 0)) Reg(U32) Some([176, 177, 178, 179])
# Var t24 (t24 LocalFieldDeref("x64", "hi")) Reg(U32) Some([176, 177, 178, 179])
# Var t25 (t25 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }) Reg(U32) Some([176, 177, 178, 179])
# Var t26 (t26 Ident("__frame_pointer")) Reg(U32) Some([212, 213, 214, 215])
# Var t27 (t27 Number(USIZE, 4)) Reg(U32) Some([176, 177, 178, 179])
# Var t28 (t28 Number(USIZE, 0)) Reg(U32) Some([180, 181, 182, 183])
# Var t29 (t29 Ident("mid")) Reg(U32) Some([168, 169, 170, 171])
# Var t3 (t3 Number(USIZE, 0)) Reg(U32) Some([160, 161, 162, 163])
# Var t30 (t30 Number(USIZE, 1)) Reg(U32) Some([172, 173, 174, 175])
# Var t31 (t31 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident("__frame_pointer") }) Reg(U32) Some([212, 213, 214, 215])
# Var t32 (t32 Ident("x")) Reg(U32) Some([176, 177, 178, 179])
# Var t33 (t33 Ident("a")) Reg(U32) Some([160, 161, 162, 163])
# Var t34 (t34 Ident("mid")) Reg(U32) Some([168, 169, 170, 171])
# Var t35 (t35 Number(USIZE, 1)) Reg(U32) Some([172, 173, 174, 175])
# Var t36 (t36 Ident("x")) Reg(U32) Some([176, 177, 178, 179])
# Var t37 (t37 Ident("a")) Reg(U32) Some([160, 161, 162, 163])
# Var t38 (t38 Ident("mid")) Reg(U32) Some([160, 161, 162, 163])
# Var t39 (Stack size) Reg(U32) Some([164, 165, 166, 167])
# Var t4 (Stack size) Reg(U32) Some([164, 165, 166, 167])
# Var t40 (t40 Ident("a")) Reg(U32) Some([160, 161, 162, 163])
# Var t41 (t41 Ident("x")) Reg(U32) Some([176, 177, 178, 179])
# Var t42 (t42 Ident("r")) Reg(U32) Some([176, 177, 178, 179])
# Var t43 (t43 Ident("b")) Reg(U32) Some([164, 165, 166, 167])
# Var t44 (t44 Ident("mid")) Reg(U32) Some([160, 161, 162, 163])
# Var t45 (Stack size) Reg(U32) Some([164, 165, 166, 167])
# Var t46 (t46 Ident("mid")) Reg(U32) Some([172, 173, 174, 175])
# Var t47 (t47 Number(USIZE, 1)) Reg(U32) Some([176, 177, 178, 179])
# Var t48 (t48 Ident("lo")) Reg(U32) Some([160, 161, 162, 163])
# Var t49 (Stack size) Reg(U32) Some([164, 165, 166, 167])
# Var t5 (t5 Ident("a")) Reg(U32) Some([160, 161, 162, 163])
# Var t6 (t6 Number(USIZE, 65536)) Reg(U32) Some([168, 169, 170, 171])
# Var t7 (t7 Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) Reg(U32) Some([164, 165, 166, 167])
# Var t8 (t8 Ident("a")) Reg(U32) Some([160, 161, 162, 163])
# Var t9 (t9 Ident("b")) Reg(U32) Some([164, 165, 166, 167])
# Var x (Local x Number(USIZE) Reg(U32)) Reg(U32) Some([176, 177, 178, 179])
# Var x64 (Local x64 Struct("U64") FrameOffset(0)) FrameOffset(0) None
# 01800 Instruction { source: "reserve 8 bytes of stack space for locals", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffff8=4294967288)], resolved: None }
32 0c f8 ff ff ff 
# 01806 Instruction { source: "Save function parameter 'a' registers [0, 1, 2, 3] to locals [160, 161, 162, 163].", opcode: Copy32, args: [Register(0x00), Register(0xa0)], resolved: None }
21 00 a0 
# 01809 Instruction { source: "Save function parameter 'b' registers [4, 5, 6, 7] to locals [164, 165, 166, 167].", opcode: Copy32, args: [Register(0x04), Register(0xa4)], resolved: None }
21 04 a4 
# t0 <- 0xfffffff8u32 
# 	SourceContext { contexts: [] }
# 0180c Instruction { source: "t0 <- 0xfffffff8u32 \n\tSourceContext { contexts: [] }", opcode: LoadImm32, args: [Register(0xa8), Constant32(0xfffffff8=4294967288)], resolved: None }
20 a8 f8 ff ff ff 
# __frame_pointer <- __frame_pointer Add t0
# 	SourceContext { contexts: [] }
# 01812 Instruction { source: "__frame_pointer <- __frame_pointer Add t0\n\tSourceContext { contexts: [] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01813 Instruction { source: "__frame_pointer <- __frame_pointer Add t0\n\tSourceContext { contexts: [] }", opcode: AddCarry32_1, args: [Register(0x0c), Register(0xa8), Register(0x0c)], resolved: None }
30 0c a8 0c 
# 01817 Instruction { source: "__frame_pointer <- __frame_pointer Add t0\n\tSourceContext { contexts: [] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t1 <- a U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t1 <- a U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# t2 <- b U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "t2 <- b U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# if t1 < t2 then 'div32_if_true_0_1' else 'div32_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }"] }
# 01818 Instruction { source: "if t1 < t2 then 'div32_if_true_0_1' else 'div32_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8, args: [Register(0xa7), Register(0xa3)], resolved: None }
15 a7 a3 
# 0181b Instruction { source: "if t1 < t2 then 'div32_if_true_0_1' else 'div32_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xa6), Register(0xa2)], resolved: None }
16 a6 a2 
# 0181e Instruction { source: "if t1 < t2 then 'div32_if_true_0_1' else 'div32_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xa5), Register(0xa1)], resolved: None }
16 a5 a1 
# 01821 Instruction { source: "if t1 < t2 then 'div32_if_true_0_1' else 'div32_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xa4), Register(0xa0)], resolved: None }
16 a4 a0 
# 01824 Instruction { source: "if t1 < t2 then 'div32_if_true_0_1' else 'div32_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: JcImm, args: [Label24(div32_if_else_0_2)], resolved: None }
71 49 18 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t1 < t2 then 'div32_if_true_0_1' else 'div32_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: JmpImm, args: [Label24(div32_if_true_0_1)], resolved: None }
# :div32_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }"] }
# div32_if_true_0_1
# t3 <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Return { value: Some(Number(USIZE, 0)) }", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 01828 Instruction { source: "t3 <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Return { value: Some(Number(USIZE, 0)) }\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0xa0), Constant32(0x00000000=0)], resolved: None }
20 a0 00 00 00 00 
# t4 <- 0n8/0x00000008u32 
# 	SourceContext { contexts: ["Return { value: Some(Number(USIZE, 0)) }"] }
# 0182e Instruction { source: "t4 <- 0n8/0x00000008u32 \n\tSourceContext { contexts: [\"Return { value: Some(Number(USIZE, 0)) }\"] }", opcode: LoadImm32, args: [Register(0xa4), Constant32(0x00000008=8)], resolved: None }
20 a4 08 00 00 00 
# __frame_pointer <- __frame_pointer Add t4
# 	SourceContext { contexts: ["Return { value: Some(Number(USIZE, 0)) }"] }
# 01834 Instruction { source: "__frame_pointer <- __frame_pointer Add t4\n\tSourceContext { contexts: [\"Return { value: Some(Number(USIZE, 0)) }\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01835 Instruction { source: "__frame_pointer <- __frame_pointer Add t4\n\tSourceContext { contexts: [\"Return { value: Some(Number(USIZE, 0)) }\"] }", opcode: AddCarry32_1, args: [Register(0x0c), Register(0xa4), Register(0x0c)], resolved: None }
30 0c a4 0c 
# 01839 Instruction { source: "__frame_pointer <- __frame_pointer Add t4\n\tSourceContext { contexts: [\"Return { value: Some(Number(USIZE, 0)) }\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# return Some(t3)
# 	SourceContext { contexts: ["Return { value: Some(Number(USIZE, 0)) }"] }
# 0183a Instruction { source: "return Some(t3)\n\tSourceContext { contexts: [\"Return { value: Some(Number(USIZE, 0)) }\"] }", opcode: Copy32, args: [Register(0xa0), Register(0x00)], resolved: None }
21 a0 00 
# 0183d Instruction { source: "Dealloc 8 bytes from stack", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000008=8)], resolved: None }
32 0c 08 00 00 00 
# 01843 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# goto div32_if_end_0
# 	SourceContext { contexts: [] }
# 01845 Instruction { source: "goto div32_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(div32_if_end_0)], resolved: None }
70 49 18 00 
# :div32_if_else_0_2
# 	SourceContext { contexts: [] }
# div32_if_else_0_2
# :div32_if_end_0
# 	SourceContext { contexts: [] }
# div32_if_end_0
# t5 <- a U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 65536) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t5 <- a U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# t6 <- 0n65536/0x00010000u32 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 65536) }", "Number(USIZE, 65536)", "Number(USIZE, 65536)"] }
# 01849 Instruction { source: "t6 <- 0n65536/0x00010000u32 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }\", \"Number(USIZE, 65536)\", \"Number(USIZE, 65536)\"] }", opcode: LoadImm32, args: [Register(0xa8), Constant32(0x00010000=65536)], resolved: None }
20 a8 00 00 01 00 
# if t5 < t6 then 'div32_if_true_0_4' else 'div32_if_else_0_5'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 65536) }"] }
# 0184f Instruction { source: "if t5 < t6 then 'div32_if_true_0_4' else 'div32_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }\"] }", opcode: Cmp8, args: [Register(0xab), Register(0xa3)], resolved: None }
15 ab a3 
# 01852 Instruction { source: "if t5 < t6 then 'div32_if_true_0_4' else 'div32_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }\"] }", opcode: Cmp8IfZero, args: [Register(0xaa), Register(0xa2)], resolved: None }
16 aa a2 
# 01855 Instruction { source: "if t5 < t6 then 'div32_if_true_0_4' else 'div32_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }\"] }", opcode: Cmp8IfZero, args: [Register(0xa9), Register(0xa1)], resolved: None }
16 a9 a1 
# 01858 Instruction { source: "if t5 < t6 then 'div32_if_true_0_4' else 'div32_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }\"] }", opcode: Cmp8IfZero, args: [Register(0xa8), Register(0xa0)], resolved: None }
16 a8 a0 
# 0185b Instruction { source: "if t5 < t6 then 'div32_if_true_0_4' else 'div32_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }\"] }", opcode: JcImm, args: [Label24(div32_if_else_0_5)], resolved: None }
71 61 1b 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t5 < t6 then 'div32_if_true_0_4' else 'div32_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 65536) }\"] }", opcode: JmpImm, args: [Label24(div32_if_true_0_4)], resolved: None }
# :div32_if_true_0_4
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }])], else_block: [] }"] }
# div32_if_true_0_4
# t8 <- a U32
# 	SourceContext { contexts: ["Return { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }", "Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })", "Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t8 <- a U32\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }\", \"Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# t9 <- b U32
# 	SourceContext { contexts: ["Return { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }", "Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })", "Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "t9 <- b U32\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }\", \"Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# inline_div32_div16_45_a <- t8 U32
# 	SourceContext { contexts: ["Return { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }", "Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })", "Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_45_a <- t8 U32\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }\", \"Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_div32_div16_45_b <- t9 U32
# 	SourceContext { contexts: ["Return { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }", "Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })", "Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_45_b <- t9 U32\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }\", \"Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# inline_div32_div16_45_t0 <- inline_div32_div16_45_a U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_45_t0 <- inline_div32_div16_45_a U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_div32_div16_45_t1 <- inline_div32_div16_45_b U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_45_t1 <- inline_div32_div16_45_b U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# if inline_div32_div16_45_t0 < inline_div32_div16_45_t1 then 'inline_div32_div16_45_div16_if_true_0_1' else 'inline_div32_div16_45_div16_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }"] }
# 0185f Instruction { source: "if inline_div32_div16_45_t0 < inline_div32_div16_45_t1 then 'inline_div32_div16_45_div16_if_true_0_1' else 'inline_div32_div16_45_div16_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8, args: [Register(0xa7), Register(0xa3)], resolved: None }
15 a7 a3 
# 01862 Instruction { source: "if inline_div32_div16_45_t0 < inline_div32_div16_45_t1 then 'inline_div32_div16_45_div16_if_true_0_1' else 'inline_div32_div16_45_div16_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xa6), Register(0xa2)], resolved: None }
16 a6 a2 
# 01865 Instruction { source: "if inline_div32_div16_45_t0 < inline_div32_div16_45_t1 then 'inline_div32_div16_45_div16_if_true_0_1' else 'inline_div32_div16_45_div16_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xa5), Register(0xa1)], resolved: None }
16 a5 a1 
# 01868 Instruction { source: "if inline_div32_div16_45_t0 < inline_div32_div16_45_t1 then 'inline_div32_div16_45_div16_if_true_0_1' else 'inline_div32_div16_45_div16_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xa4), Register(0xa0)], resolved: None }
16 a4 a0 
# 0186b Instruction { source: "if inline_div32_div16_45_t0 < inline_div32_div16_45_t1 then 'inline_div32_div16_45_div16_if_true_0_1' else 'inline_div32_div16_45_div16_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: JcImm, args: [Label24(inline_div32_div16_45_div16_if_else_0_2)], resolved: None }
71 80 18 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_45_t0 < inline_div32_div16_45_t1 then 'inline_div32_div16_45_div16_if_true_0_1' else 'inline_div32_div16_45_div16_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_45_div16_if_true_0_1)], resolved: None }
# :inline_div32_div16_45_div16_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }"] }
# inline_div32_div16_45_div16_if_true_0_1
# inline_div32_div16_45_t2 <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Return { value: Some(Number(USIZE, 0)) }", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 0186f Instruction { source: "inline_div32_div16_45_t2 <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Return { value: Some(Number(USIZE, 0)) }\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0xa0), Constant32(0x00000000=0)], resolved: None }
20 a0 00 00 00 00 
# t7 <- inline_div32_div16_45_t2 U32
# 	SourceContext { contexts: ["Return { value: Some(Number(USIZE, 0)) }"] }
# 01875 Instruction { source: "t7 <- inline_div32_div16_45_t2 U32\n\tSourceContext { contexts: [\"Return { value: Some(Number(USIZE, 0)) }\"] }", opcode: Copy32, args: [Register(0xa0), Register(0xa4)], resolved: None }
21 a0 a4 
# goto inline_div32_div16_45_function_end_div16
# 	SourceContext { contexts: ["Return { value: Some(Number(USIZE, 0)) }"] }
# 01878 Instruction { source: "goto inline_div32_div16_45_function_end_div16\n\tSourceContext { contexts: [\"Return { value: Some(Number(USIZE, 0)) }\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_45_function_end_div16)], resolved: None }
70 46 1b 00 
# goto inline_div32_div16_45_div16_if_end_0
# 	SourceContext { contexts: [] }
# 0187c Instruction { source: "goto inline_div32_div16_45_div16_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_div32_div16_45_div16_if_end_0)], resolved: None }
70 80 18 00 
# :inline_div32_div16_45_div16_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_div32_div16_45_div16_if_else_0_2
# :inline_div32_div16_45_div16_if_end_0
# 	SourceContext { contexts: [] }
# inline_div32_div16_45_div16_if_end_0
# inline_div32_div16_45_t3 <- inline_div32_div16_45_a U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_45_t3 <- inline_div32_div16_45_a U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_div32_div16_45_t4 <- 0n256/0x00000100u32 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }", "Number(USIZE, 256)", "Number(USIZE, 256)"] }
# 01880 Instruction { source: "inline_div32_div16_45_t4 <- 0n256/0x00000100u32 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\", \"Number(USIZE, 256)\", \"Number(USIZE, 256)\"] }", opcode: LoadImm32, args: [Register(0xa8), Constant32(0x00000100=256)], resolved: None }
20 a8 00 01 00 00 
# if inline_div32_div16_45_t3 < inline_div32_div16_45_t4 then 'inline_div32_div16_45_div16_if_true_0_4' else 'inline_div32_div16_45_div16_if_else_0_5'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }"] }
# 01886 Instruction { source: "if inline_div32_div16_45_t3 < inline_div32_div16_45_t4 then 'inline_div32_div16_45_div16_if_true_0_4' else 'inline_div32_div16_45_div16_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\"] }", opcode: Cmp8, args: [Register(0xab), Register(0xa3)], resolved: None }
15 ab a3 
# 01889 Instruction { source: "if inline_div32_div16_45_t3 < inline_div32_div16_45_t4 then 'inline_div32_div16_45_div16_if_true_0_4' else 'inline_div32_div16_45_div16_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\"] }", opcode: Cmp8IfZero, args: [Register(0xaa), Register(0xa2)], resolved: None }
16 aa a2 
# 0188c Instruction { source: "if inline_div32_div16_45_t3 < inline_div32_div16_45_t4 then 'inline_div32_div16_45_div16_if_true_0_4' else 'inline_div32_div16_45_div16_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\"] }", opcode: Cmp8IfZero, args: [Register(0xa9), Register(0xa1)], resolved: None }
16 a9 a1 
# 0188f Instruction { source: "if inline_div32_div16_45_t3 < inline_div32_div16_45_t4 then 'inline_div32_div16_45_div16_if_true_0_4' else 'inline_div32_div16_45_div16_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\"] }", opcode: Cmp8IfZero, args: [Register(0xa8), Register(0xa0)], resolved: None }
16 a8 a0 
# 01892 Instruction { source: "if inline_div32_div16_45_t3 < inline_div32_div16_45_t4 then 'inline_div32_div16_45_div16_if_true_0_4' else 'inline_div32_div16_45_div16_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\"] }", opcode: JcImm, args: [Label24(inline_div32_div16_45_div16_if_else_0_5)], resolved: None }
71 b4 18 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_45_t3 < inline_div32_div16_45_t4 then 'inline_div32_div16_45_div16_if_true_0_4' else 'inline_div32_div16_45_div16_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_45_div16_if_true_0_4)], resolved: None }
# :inline_div32_div16_45_div16_if_true_0_4
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }) }])], else_block: [] }"] }
# inline_div32_div16_45_div16_if_true_0_4
# inline_div32_div16_45_t7 <- inline_div32_div16_45_a[0x00..0x01] U8
# 	SourceContext { contexts: ["Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }) }", "Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }", "Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }", "Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0)))", "Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0)))", "Index(\"a\", Number(U8, 0))", "Index(\"a\", Number(U8, 0))"] }
# 01896 Instruction { source: "inline_div32_div16_45_t7 <- inline_div32_div16_45_a[0x00..0x01] U8\n\tSourceContext { contexts: [\"Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }\", \"Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0)))\", \"Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0)))\", \"Index(\\\"a\\\", Number(U8, 0))\", \"Index(\\\"a\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0xa0), Register(0xd0)], resolved: None }
0b a0 d0 
# inline_div32_div16_45_t8 <- inline_div32_div16_45_b[0x00..0x01] U8
# 	SourceContext { contexts: ["Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }) }", "Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }", "Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }", "Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0)))", "Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0)))", "Index(\"b\", Number(U8, 0))", "Index(\"b\", Number(U8, 0))"] }
# 01899 Instruction { source: "inline_div32_div16_45_t8 <- inline_div32_div16_45_b[0x00..0x01] U8\n\tSourceContext { contexts: [\"Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }\", \"Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0)))\", \"Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0)))\", \"Index(\\\"b\\\", Number(U8, 0))\", \"Index(\\\"b\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0xa4), Register(0xd1)], resolved: None }
0b a4 d1 
# inline_div32_div16_45_t6 <- inline_div32_div16_45_t7 Divide inline_div32_div16_45_t8
# 	SourceContext { contexts: ["Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }) }", "Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }", "Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }", "Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0)))", "Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0)))"] }
# 0189c Instruction { source: "inline_div32_div16_45_t6 <- inline_div32_div16_45_t7 Divide inline_div32_div16_45_t8\n\tSourceContext { contexts: [\"Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }\", \"Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0)))\", \"Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0)))\"] }", opcode: Divide8, args: [Register(0xd0), Register(0xd1), Register(0xd0)], resolved: None }
17 d0 d1 d0 
# inline_div32_div16_45_t5 U32 <- inline_div32_div16_45_t6 U8
# 	SourceContext { contexts: ["Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }) }", "Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }", "Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }"] }
# 018a0 Instruction { source: "Zero-pad for inline_div32_div16_45_t5 U32 <- inline_div32_div16_45_t6 U8\n\tSourceContext { contexts: [\"Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }\"] }", opcode: LoadImm32, args: [Register(0xa0), Constant32(0x00000000=0)], resolved: None }
20 a0 00 00 00 00 
# 018a6 Instruction { source: "inline_div32_div16_45_t5 U32 <- inline_div32_div16_45_t6 U8\n\tSourceContext { contexts: [\"Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }\"] }", opcode: Copy8, args: [Register(0xd0), Register(0xa0)], resolved: None }
0b d0 a0 
# t7 <- inline_div32_div16_45_t5 U32
# 	SourceContext { contexts: ["Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }) }"] }
# 018a9 Instruction { source: "t7 <- inline_div32_div16_45_t5 U32\n\tSourceContext { contexts: [\"Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }) }\"] }", opcode: Copy32, args: [Register(0xa0), Register(0xa4)], resolved: None }
21 a0 a4 
# goto inline_div32_div16_45_function_end_div16
# 	SourceContext { contexts: ["Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }) }"] }
# 018ac Instruction { source: "goto inline_div32_div16_45_function_end_div16\n\tSourceContext { contexts: [\"Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\\\"a\\\", Number(U8, 0)), Index(\\\"b\\\", Number(U8, 0))) }) }\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_45_function_end_div16)], resolved: None }
70 46 1b 00 
# goto inline_div32_div16_45_div16_if_end_3
# 	SourceContext { contexts: [] }
# 018b0 Instruction { source: "goto inline_div32_div16_45_div16_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_div32_div16_45_div16_if_end_3)], resolved: None }
70 b4 18 00 
# :inline_div32_div16_45_div16_if_else_0_5
# 	SourceContext { contexts: [] }
# inline_div32_div16_45_div16_if_else_0_5
# :inline_div32_div16_45_div16_if_end_3
# 	SourceContext { contexts: [] }
# inline_div32_div16_45_div16_if_end_3
# inline_div32_div16_45_lo <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"lo\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }", "Number(USIZE, 0)"] }
# 018b4 Instruction { source: "inline_div32_div16_45_lo <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lo\\\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0xc8), Constant32(0x00000000=0)], resolved: None }
20 c8 00 00 00 00 
# inline_div32_div16_45_hi <- 0n65535/0x0000ffffu32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 65535) }", "Number(USIZE, 65535)"] }
# 018ba Instruction { source: "inline_div32_div16_45_hi <- 0n65535/0x0000ffffu32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 65535) }\", \"Number(USIZE, 65535)\"] }", opcode: LoadImm32, args: [Register(0xa8), Constant32(0x0000ffff=65535)], resolved: None }
20 a8 ff ff 00 00 
# :inline_div32_div16_45_div16_while_predicate_6
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }, Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }] }"] }
# inline_div32_div16_45_div16_while_predicate_6
# inline_div32_div16_45_t9 <- inline_div32_div16_45_lo U32
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }, Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }", "Ident(\"lo\")", "Ident(\"lo\")"] }
# 018c0 Instruction { source: "inline_div32_div16_45_t9 <- inline_div32_div16_45_lo U32\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] }) }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\", \"Ident(\\\"lo\\\")\", \"Ident(\\\"lo\\\")\"] }", opcode: Copy32, args: [Register(0xc8), Register(0xac)], resolved: None }
21 c8 ac 
# inline_div32_div16_45_t10 <- inline_div32_div16_45_hi U32
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }, Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }", "Ident(\"hi\")", "Ident(\"hi\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_45_t10 <- inline_div32_div16_45_hi U32\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] }) }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\", \"Ident(\\\"hi\\\")\", \"Ident(\\\"hi\\\")\"] }", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# if inline_div32_div16_45_t9 < inline_div32_div16_45_t10 then 'inline_div32_div16_45_div16_while_body_7' else 'inline_div32_div16_45_div16_while_end_8'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }, Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }"] }
# 018c3 Instruction { source: "if inline_div32_div16_45_t9 < inline_div32_div16_45_t10 then 'inline_div32_div16_45_div16_while_body_7' else 'inline_div32_div16_45_div16_while_end_8'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] }) }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\"] }", opcode: Cmp8, args: [Register(0xab), Register(0xaf)], resolved: None }
15 ab af 
# 018c6 Instruction { source: "if inline_div32_div16_45_t9 < inline_div32_div16_45_t10 then 'inline_div32_div16_45_div16_while_body_7' else 'inline_div32_div16_45_div16_while_end_8'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] }) }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xaa), Register(0xae)], resolved: None }
16 aa ae 
# 018c9 Instruction { source: "if inline_div32_div16_45_t9 < inline_div32_div16_45_t10 then 'inline_div32_div16_45_div16_while_body_7' else 'inline_div32_div16_45_div16_while_end_8'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] }) }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xa9), Register(0xad)], resolved: None }
16 a9 ad 
# 018cc Instruction { source: "if inline_div32_div16_45_t9 < inline_div32_div16_45_t10 then 'inline_div32_div16_45_div16_while_body_7' else 'inline_div32_div16_45_div16_while_end_8'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] }) }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xa8), Register(0xac)], resolved: None }
16 a8 ac 
# 018cf Instruction { source: "if inline_div32_div16_45_t9 < inline_div32_div16_45_t10 then 'inline_div32_div16_45_div16_while_body_7' else 'inline_div32_div16_45_div16_while_end_8'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] }) }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\"] }", opcode: JcImm, args: [Label24(inline_div32_div16_45_div16_while_end_8)], resolved: None }
71 3c 1b 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_45_t9 < inline_div32_div16_45_t10 then 'inline_div32_div16_45_div16_while_body_7' else 'inline_div32_div16_45_div16_while_end_8'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] }) }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_45_div16_while_body_7)], resolved: None }
# :inline_div32_div16_45_div16_while_body_7
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }, Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }] }"] }
# inline_div32_div16_45_div16_while_body_7
# inline_div32_div16_45_t12 <- inline_div32_div16_45_lo U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }", "Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] })", "Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))", "Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))", "Ident(\"lo\")", "Ident(\"lo\")"] }
# 018d3 Instruction { source: "inline_div32_div16_45_t12 <- inline_div32_div16_45_lo U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] }) }\", \"Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] })\", \"Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))\", \"Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))\", \"Ident(\\\"lo\\\")\", \"Ident(\\\"lo\\\")\"] }", opcode: Copy32, args: [Register(0xc8), Register(0xac)], resolved: None }
21 c8 ac 
# inline_div32_div16_45_t13 <- inline_div32_div16_45_hi U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }", "Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] })", "Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))", "Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))", "Ident(\"hi\")", "Ident(\"hi\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_45_t13 <- inline_div32_div16_45_hi U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] }) }\", \"Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] })\", \"Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))\", \"Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))\", \"Ident(\\\"hi\\\")\", \"Ident(\\\"hi\\\")\"] }", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# inline_div32_div16_45_t11 <- inline_div32_div16_45_t12 Add inline_div32_div16_45_t13
# 	SourceContext { contexts: ["Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }", "Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] })", "Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))", "Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))"] }
# 018d6 Instruction { source: "inline_div32_div16_45_t11 <- inline_div32_div16_45_t12 Add inline_div32_div16_45_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] }) }\", \"Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] })\", \"Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))\", \"Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 018d7 Instruction { source: "inline_div32_div16_45_t11 <- inline_div32_div16_45_t12 Add inline_div32_div16_45_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] }) }\", \"Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] })\", \"Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))\", \"Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0xac), Register(0xa8), Register(0xac)], resolved: None }
30 ac a8 ac 
# 018db Instruction { source: "inline_div32_div16_45_t11 <- inline_div32_div16_45_t12 Add inline_div32_div16_45_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] }) }\", \"Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] })\", \"Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))\", \"Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_div32_div16_45_inline_div16_shiftright1_44_a <- inline_div32_div16_45_t11 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }", "Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] })"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_45_inline_div16_shiftright1_44_a <- inline_div32_div16_45_t11 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] }) }\", \"Call(Call { function: \\\"shiftright1\\\", parameters: [Arithmetic(Add, Ident(\\\"lo\\\"), Ident(\\\"hi\\\"))] })\"] }", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# inline_div32_div16_45_inline_div16_shiftright1_44_t1 <- inline_div32_div16_45_inline_div16_shiftright1_44_a[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))", "Index(\"a\", Number(U8, 0))", "Index(\"a\", Number(U8, 0))"] }
# 018dc Instruction { source: "inline_div32_div16_45_inline_div16_shiftright1_44_t1 <- inline_div32_div16_45_inline_div16_shiftright1_44_a[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 0))\", \"Index(\\\"a\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0xac), Register(0xbd)], resolved: None }
0b ac bd 
# inline_div32_div16_45_inline_div16_shiftright1_44_t2 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 018df Instruction { source: "inline_div32_div16_45_inline_div16_shiftright1_44_t2 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0xbc), Constant8(0x01=1)], resolved: None }
04 bc 01 
# inline_div32_div16_45_inline_div16_shiftright1_44_t0 <- inline_div32_div16_45_inline_div16_shiftright1_44_t1 RotateRight inline_div32_div16_45_inline_div16_shiftright1_44_t2
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))"] }
# 018e2 Instruction { source: "inline_div32_div16_45_inline_div16_shiftright1_44_t0 <- inline_div32_div16_45_inline_div16_shiftright1_44_t1 RotateRight inline_div32_div16_45_inline_div16_shiftright1_44_t2\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0xbc), Register(0xbd), Register(0xbc)], resolved: None }
1e 04 bc bd bc 
# inline_div32_div16_45_inline_div16_shiftright1_44_a[0x00..0x01] <- inline_div32_div16_45_inline_div16_shiftright1_44_t0 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1)) }"] }
# 018e7 Instruction { source: "inline_div32_div16_45_inline_div16_shiftright1_44_a[0x00..0x01] <- inline_div32_div16_45_inline_div16_shiftright1_44_t0 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xbc), Register(0xac)], resolved: None }
0b bc ac 
# inline_div32_div16_45_inline_div16_shiftright1_44_t4 <- inline_div32_div16_45_inline_div16_shiftright1_44_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 018ea Instruction { source: "inline_div32_div16_45_inline_div16_shiftright1_44_t4 <- inline_div32_div16_45_inline_div16_shiftright1_44_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xad), Register(0xbd)], resolved: None }
0b ad bd 
# inline_div32_div16_45_inline_div16_shiftright1_44_t5 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 018ed Instruction { source: "inline_div32_div16_45_inline_div16_shiftright1_44_t5 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0xbc), Constant8(0x01=1)], resolved: None }
04 bc 01 
# inline_div32_div16_45_inline_div16_shiftright1_44_t3 <- inline_div32_div16_45_inline_div16_shiftright1_44_t4 RotateRight inline_div32_div16_45_inline_div16_shiftright1_44_t5
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))"] }
# 018f0 Instruction { source: "inline_div32_div16_45_inline_div16_shiftright1_44_t3 <- inline_div32_div16_45_inline_div16_shiftright1_44_t4 RotateRight inline_div32_div16_45_inline_div16_shiftright1_44_t5\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0xbc), Register(0xbd), Register(0xbc)], resolved: None }
1e 04 bc bd bc 
# inline_div32_div16_45_inline_div16_shiftright1_44_a[0x01..0x02] <- inline_div32_div16_45_inline_div16_shiftright1_44_t3 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1)) }"] }
# 018f5 Instruction { source: "inline_div32_div16_45_inline_div16_shiftright1_44_a[0x01..0x02] <- inline_div32_div16_45_inline_div16_shiftright1_44_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xbc), Register(0xad)], resolved: None }
0b bc ad 
# inline_div32_div16_45_inline_div16_shiftright1_44_t7 <- inline_div32_div16_45_inline_div16_shiftright1_44_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 018f8 Instruction { source: "inline_div32_div16_45_inline_div16_shiftright1_44_t7 <- inline_div32_div16_45_inline_div16_shiftright1_44_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0xae), Register(0xbd)], resolved: None }
0b ae bd 
# inline_div32_div16_45_inline_div16_shiftright1_44_t8 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 018fb Instruction { source: "inline_div32_div16_45_inline_div16_shiftright1_44_t8 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0xbc), Constant8(0x01=1)], resolved: None }
04 bc 01 
# inline_div32_div16_45_inline_div16_shiftright1_44_t6 <- inline_div32_div16_45_inline_div16_shiftright1_44_t7 RotateRight inline_div32_div16_45_inline_div16_shiftright1_44_t8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))"] }
# 018fe Instruction { source: "inline_div32_div16_45_inline_div16_shiftright1_44_t6 <- inline_div32_div16_45_inline_div16_shiftright1_44_t7 RotateRight inline_div32_div16_45_inline_div16_shiftright1_44_t8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0xbc), Register(0xbd), Register(0xbc)], resolved: None }
1e 04 bc bd bc 
# inline_div32_div16_45_inline_div16_shiftright1_44_a[0x02..0x03] <- inline_div32_div16_45_inline_div16_shiftright1_44_t6 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1)) }"] }
# 01903 Instruction { source: "inline_div32_div16_45_inline_div16_shiftright1_44_a[0x02..0x03] <- inline_div32_div16_45_inline_div16_shiftright1_44_t6 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xbc), Register(0xae)], resolved: None }
0b bc ae 
# inline_div32_div16_45_inline_div16_shiftright1_44_t10 <- inline_div32_div16_45_inline_div16_shiftright1_44_a[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))", "Index(\"a\", Number(U8, 3))", "Index(\"a\", Number(U8, 3))"] }
# 01906 Instruction { source: "inline_div32_div16_45_inline_div16_shiftright1_44_t10 <- inline_div32_div16_45_inline_div16_shiftright1_44_a[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0xaf), Register(0xbd)], resolved: None }
0b af bd 
# inline_div32_div16_45_inline_div16_shiftright1_44_t11 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 01909 Instruction { source: "inline_div32_div16_45_inline_div16_shiftright1_44_t11 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0xbc), Constant8(0x01=1)], resolved: None }
04 bc 01 
# inline_div32_div16_45_inline_div16_shiftright1_44_t9 <- inline_div32_div16_45_inline_div16_shiftright1_44_t10 RotateRight inline_div32_div16_45_inline_div16_shiftright1_44_t11
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))"] }
# 0190c Instruction { source: "inline_div32_div16_45_inline_div16_shiftright1_44_t9 <- inline_div32_div16_45_inline_div16_shiftright1_44_t10 RotateRight inline_div32_div16_45_inline_div16_shiftright1_44_t11\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0xbc), Register(0xbd), Register(0xbc)], resolved: None }
1e 04 bc bd bc 
# inline_div32_div16_45_inline_div16_shiftright1_44_a[0x03..0x04] <- inline_div32_div16_45_inline_div16_shiftright1_44_t9 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1)) }"] }
# 01911 Instruction { source: "inline_div32_div16_45_inline_div16_shiftright1_44_a[0x03..0x04] <- inline_div32_div16_45_inline_div16_shiftright1_44_t9 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xbc), Register(0xaf)], resolved: None }
0b bc af 
# inline_div32_div16_45_inline_div16_shiftright1_44_t13 <- inline_div32_div16_45_inline_div16_shiftright1_44_a[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))", "Index(\"a\", Number(U8, 0))", "Index(\"a\", Number(U8, 0))"] }
# 01914 Instruction { source: "inline_div32_div16_45_inline_div16_shiftright1_44_t13 <- inline_div32_div16_45_inline_div16_shiftright1_44_a[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\", \"Index(\\\"a\\\", Number(U8, 0))\", \"Index(\\\"a\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0xac), Register(0xbd)], resolved: None }
0b ac bd 
# inline_div32_div16_45_inline_div16_shiftright1_44_t14 <- 0n127/0x7fu8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))", "Number(U8, 127)", "Number(U8, 127)"] }
# 01917 Instruction { source: "inline_div32_div16_45_inline_div16_shiftright1_44_t14 <- 0n127/0x7fu8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\", \"Number(U8, 127)\", \"Number(U8, 127)\"] }", opcode: LoadImm8, args: [Register(0xbc), Constant8(0x7f=127)], resolved: None }
04 bc 7f 
# inline_div32_div16_45_inline_div16_shiftright1_44_t12 <- inline_div32_div16_45_inline_div16_shiftright1_44_t13 BitwiseAnd inline_div32_div16_45_inline_div16_shiftright1_44_t14
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))"] }
# 0191a Instruction { source: "inline_div32_div16_45_inline_div16_shiftright1_44_t12 <- inline_div32_div16_45_inline_div16_shiftright1_44_t13 BitwiseAnd inline_div32_div16_45_inline_div16_shiftright1_44_t14\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\"] }", opcode: And8, args: [Register(0xbd), Register(0xbc), Register(0xbc)], resolved: None }
1b bd bc bc 
# inline_div32_div16_45_inline_div16_shiftright1_44_a[0x00..0x01] <- inline_div32_div16_45_inline_div16_shiftright1_44_t12 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127)) }"] }
# 0191e Instruction { source: "inline_div32_div16_45_inline_div16_shiftright1_44_a[0x00..0x01] <- inline_div32_div16_45_inline_div16_shiftright1_44_t12 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127)) }\"] }", opcode: Copy8, args: [Register(0xbc), Register(0xac)], resolved: None }
0b bc ac 
# inline_div32_div16_45_inline_div16_shiftright1_44_t16 <- inline_div32_div16_45_inline_div16_shiftright1_44_a[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Index(\"a\", Number(U8, 0))", "Index(\"a\", Number(U8, 0))"] }
# 01921 Instruction { source: "inline_div32_div16_45_inline_div16_shiftright1_44_t16 <- inline_div32_div16_45_inline_div16_shiftright1_44_a[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Index(\\\"a\\\", Number(U8, 0))\", \"Index(\\\"a\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0xac), Register(0xbd)], resolved: None }
0b ac bd 
# inline_div32_div16_45_inline_div16_shiftright1_44_t18 <- inline_div32_div16_45_inline_div16_shiftright1_44_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 01924 Instruction { source: "inline_div32_div16_45_inline_div16_shiftright1_44_t18 <- inline_div32_div16_45_inline_div16_shiftright1_44_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xad), Register(0xbc)], resolved: None }
0b ad bc 
# inline_div32_div16_45_inline_div16_shiftright1_44_t19 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))", "Number(U8, 128)", "Number(U8, 128)"] }
# 01927 Instruction { source: "inline_div32_div16_45_inline_div16_shiftright1_44_t19 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0xc6), Constant8(0x80=128)], resolved: None }
04 c6 80 
# inline_div32_div16_45_inline_div16_shiftright1_44_t17 <- inline_div32_div16_45_inline_div16_shiftright1_44_t18 BitwiseAnd inline_div32_div16_45_inline_div16_shiftright1_44_t19
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))"] }
# 0192a Instruction { source: "inline_div32_div16_45_inline_div16_shiftright1_44_t17 <- inline_div32_div16_45_inline_div16_shiftright1_44_t18 BitwiseAnd inline_div32_div16_45_inline_div16_shiftright1_44_t19\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\"] }", opcode: And8, args: [Register(0xbc), Register(0xc6), Register(0xbc)], resolved: None }
1b bc c6 bc 
# inline_div32_div16_45_inline_div16_shiftright1_44_t15 <- inline_div32_div16_45_inline_div16_shiftright1_44_t16 BitwiseOr inline_div32_div16_45_inline_div16_shiftright1_44_t17
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))"] }
# 0192e Instruction { source: "inline_div32_div16_45_inline_div16_shiftright1_44_t15 <- inline_div32_div16_45_inline_div16_shiftright1_44_t16 BitwiseOr inline_div32_div16_45_inline_div16_shiftright1_44_t17\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\"] }", opcode: Or8, args: [Register(0xbd), Register(0xbc), Register(0xbc)], resolved: None }
1c bd bc bc 
# inline_div32_div16_45_inline_div16_shiftright1_44_a[0x00..0x01] <- inline_div32_div16_45_inline_div16_shiftright1_44_t15 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }"] }
# 01932 Instruction { source: "inline_div32_div16_45_inline_div16_shiftright1_44_a[0x00..0x01] <- inline_div32_div16_45_inline_div16_shiftright1_44_t15 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\"] }", opcode: Copy8, args: [Register(0xbc), Register(0xac)], resolved: None }
0b bc ac 
# inline_div32_div16_45_inline_div16_shiftright1_44_t21 <- inline_div32_div16_45_inline_div16_shiftright1_44_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 01935 Instruction { source: "inline_div32_div16_45_inline_div16_shiftright1_44_t21 <- inline_div32_div16_45_inline_div16_shiftright1_44_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xad), Register(0xbd)], resolved: None }
0b ad bd 
# inline_div32_div16_45_inline_div16_shiftright1_44_t22 <- 0n127/0x7fu8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))", "Number(U8, 127)", "Number(U8, 127)"] }
# 01938 Instruction { source: "inline_div32_div16_45_inline_div16_shiftright1_44_t22 <- 0n127/0x7fu8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\", \"Number(U8, 127)\", \"Number(U8, 127)\"] }", opcode: LoadImm8, args: [Register(0xbc), Constant8(0x7f=127)], resolved: None }
04 bc 7f 
# inline_div32_div16_45_inline_div16_shiftright1_44_t20 <- inline_div32_div16_45_inline_div16_shiftright1_44_t21 BitwiseAnd inline_div32_div16_45_inline_div16_shiftright1_44_t22
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))"] }
# 0193b Instruction { source: "inline_div32_div16_45_inline_div16_shiftright1_44_t20 <- inline_div32_div16_45_inline_div16_shiftright1_44_t21 BitwiseAnd inline_div32_div16_45_inline_div16_shiftright1_44_t22\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\"] }", opcode: And8, args: [Register(0xbd), Register(0xbc), Register(0xbc)], resolved: None }
1b bd bc bc 
# inline_div32_div16_45_inline_div16_shiftright1_44_a[0x01..0x02] <- inline_div32_div16_45_inline_div16_shiftright1_44_t20 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127)) }"] }
# 0193f Instruction { source: "inline_div32_div16_45_inline_div16_shiftright1_44_a[0x01..0x02] <- inline_div32_div16_45_inline_div16_shiftright1_44_t20 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127)) }\"] }", opcode: Copy8, args: [Register(0xbc), Register(0xad)], resolved: None }
0b bc ad 
# inline_div32_div16_45_inline_div16_shiftright1_44_t24 <- inline_div32_div16_45_inline_div16_shiftright1_44_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 01942 Instruction { source: "inline_div32_div16_45_inline_div16_shiftright1_44_t24 <- inline_div32_div16_45_inline_div16_shiftright1_44_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xad), Register(0xbd)], resolved: None }
0b ad bd 
# inline_div32_div16_45_inline_div16_shiftright1_44_t26 <- inline_div32_div16_45_inline_div16_shiftright1_44_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 01945 Instruction { source: "inline_div32_div16_45_inline_div16_shiftright1_44_t26 <- inline_div32_div16_45_inline_div16_shiftright1_44_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0xae), Register(0xbc)], resolved: None }
0b ae bc 
# inline_div32_div16_45_inline_div16_shiftright1_44_t27 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))", "Number(U8, 128)", "Number(U8, 128)"] }
# 01948 Instruction { source: "inline_div32_div16_45_inline_div16_shiftright1_44_t27 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0xc6), Constant8(0x80=128)], resolved: None }
04 c6 80 
# inline_div32_div16_45_inline_div16_shiftright1_44_t25 <- inline_div32_div16_45_inline_div16_shiftright1_44_t26 BitwiseAnd inline_div32_div16_45_inline_div16_shiftright1_44_t27
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))"] }
# 0194b Instruction { source: "inline_div32_div16_45_inline_div16_shiftright1_44_t25 <- inline_div32_div16_45_inline_div16_shiftright1_44_t26 BitwiseAnd inline_div32_div16_45_inline_div16_shiftright1_44_t27\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\"] }", opcode: And8, args: [Register(0xbc), Register(0xc6), Register(0xbc)], resolved: None }
1b bc c6 bc 
# inline_div32_div16_45_inline_div16_shiftright1_44_t23 <- inline_div32_div16_45_inline_div16_shiftright1_44_t24 BitwiseOr inline_div32_div16_45_inline_div16_shiftright1_44_t25
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))"] }
# 0194f Instruction { source: "inline_div32_div16_45_inline_div16_shiftright1_44_t23 <- inline_div32_div16_45_inline_div16_shiftright1_44_t24 BitwiseOr inline_div32_div16_45_inline_div16_shiftright1_44_t25\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\"] }", opcode: Or8, args: [Register(0xbd), Register(0xbc), Register(0xbc)], resolved: None }
1c bd bc bc 
# inline_div32_div16_45_inline_div16_shiftright1_44_a[0x01..0x02] <- inline_div32_div16_45_inline_div16_shiftright1_44_t23 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }"] }
# 01953 Instruction { source: "inline_div32_div16_45_inline_div16_shiftright1_44_a[0x01..0x02] <- inline_div32_div16_45_inline_div16_shiftright1_44_t23 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\"] }", opcode: Copy8, args: [Register(0xbc), Register(0xad)], resolved: None }
0b bc ad 
# inline_div32_div16_45_inline_div16_shiftright1_44_t29 <- inline_div32_div16_45_inline_div16_shiftright1_44_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 01956 Instruction { source: "inline_div32_div16_45_inline_div16_shiftright1_44_t29 <- inline_div32_div16_45_inline_div16_shiftright1_44_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0xae), Register(0xbd)], resolved: None }
0b ae bd 
# inline_div32_div16_45_inline_div16_shiftright1_44_t30 <- 0n127/0x7fu8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))", "Number(U8, 127)", "Number(U8, 127)"] }
# 01959 Instruction { source: "inline_div32_div16_45_inline_div16_shiftright1_44_t30 <- 0n127/0x7fu8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\", \"Number(U8, 127)\", \"Number(U8, 127)\"] }", opcode: LoadImm8, args: [Register(0xbc), Constant8(0x7f=127)], resolved: None }
04 bc 7f 
# inline_div32_div16_45_inline_div16_shiftright1_44_t28 <- inline_div32_div16_45_inline_div16_shiftright1_44_t29 BitwiseAnd inline_div32_div16_45_inline_div16_shiftright1_44_t30
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))"] }
# 0195c Instruction { source: "inline_div32_div16_45_inline_div16_shiftright1_44_t28 <- inline_div32_div16_45_inline_div16_shiftright1_44_t29 BitwiseAnd inline_div32_div16_45_inline_div16_shiftright1_44_t30\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\"] }", opcode: And8, args: [Register(0xbd), Register(0xbc), Register(0xbc)], resolved: None }
1b bd bc bc 
# inline_div32_div16_45_inline_div16_shiftright1_44_a[0x02..0x03] <- inline_div32_div16_45_inline_div16_shiftright1_44_t28 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127)) }"] }
# 01960 Instruction { source: "inline_div32_div16_45_inline_div16_shiftright1_44_a[0x02..0x03] <- inline_div32_div16_45_inline_div16_shiftright1_44_t28 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127)) }\"] }", opcode: Copy8, args: [Register(0xbc), Register(0xae)], resolved: None }
0b bc ae 
# inline_div32_div16_45_inline_div16_shiftright1_44_t32 <- inline_div32_div16_45_inline_div16_shiftright1_44_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 01963 Instruction { source: "inline_div32_div16_45_inline_div16_shiftright1_44_t32 <- inline_div32_div16_45_inline_div16_shiftright1_44_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0xae), Register(0xbd)], resolved: None }
0b ae bd 
# inline_div32_div16_45_inline_div16_shiftright1_44_t34 <- inline_div32_div16_45_inline_div16_shiftright1_44_a[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))", "Index(\"a\", Number(U8, 3))", "Index(\"a\", Number(U8, 3))"] }
# 01966 Instruction { source: "inline_div32_div16_45_inline_div16_shiftright1_44_t34 <- inline_div32_div16_45_inline_div16_shiftright1_44_a[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\", \"Index(\\\"a\\\", Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0xaf), Register(0xbc)], resolved: None }
0b af bc 
# inline_div32_div16_45_inline_div16_shiftright1_44_t35 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))", "Number(U8, 128)", "Number(U8, 128)"] }
# 01969 Instruction { source: "inline_div32_div16_45_inline_div16_shiftright1_44_t35 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0xc6), Constant8(0x80=128)], resolved: None }
04 c6 80 
# inline_div32_div16_45_inline_div16_shiftright1_44_t33 <- inline_div32_div16_45_inline_div16_shiftright1_44_t34 BitwiseAnd inline_div32_div16_45_inline_div16_shiftright1_44_t35
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))"] }
# 0196c Instruction { source: "inline_div32_div16_45_inline_div16_shiftright1_44_t33 <- inline_div32_div16_45_inline_div16_shiftright1_44_t34 BitwiseAnd inline_div32_div16_45_inline_div16_shiftright1_44_t35\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\"] }", opcode: And8, args: [Register(0xbc), Register(0xc6), Register(0xbc)], resolved: None }
1b bc c6 bc 
# inline_div32_div16_45_inline_div16_shiftright1_44_t31 <- inline_div32_div16_45_inline_div16_shiftright1_44_t32 BitwiseOr inline_div32_div16_45_inline_div16_shiftright1_44_t33
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))"] }
# 01970 Instruction { source: "inline_div32_div16_45_inline_div16_shiftright1_44_t31 <- inline_div32_div16_45_inline_div16_shiftright1_44_t32 BitwiseOr inline_div32_div16_45_inline_div16_shiftright1_44_t33\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\"] }", opcode: Or8, args: [Register(0xbd), Register(0xbc), Register(0xbc)], resolved: None }
1c bd bc bc 
# inline_div32_div16_45_inline_div16_shiftright1_44_a[0x02..0x03] <- inline_div32_div16_45_inline_div16_shiftright1_44_t31 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }"] }
# 01974 Instruction { source: "inline_div32_div16_45_inline_div16_shiftright1_44_a[0x02..0x03] <- inline_div32_div16_45_inline_div16_shiftright1_44_t31 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\"] }", opcode: Copy8, args: [Register(0xbc), Register(0xae)], resolved: None }
0b bc ae 
# inline_div32_div16_45_inline_div16_shiftright1_44_t37 <- inline_div32_div16_45_inline_div16_shiftright1_44_a[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))", "Index(\"a\", Number(U8, 3))", "Index(\"a\", Number(U8, 3))"] }
# 01977 Instruction { source: "inline_div32_div16_45_inline_div16_shiftright1_44_t37 <- inline_div32_div16_45_inline_div16_shiftright1_44_a[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\", \"Index(\\\"a\\\", Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0xaf), Register(0xbd)], resolved: None }
0b af bd 
# inline_div32_div16_45_inline_div16_shiftright1_44_t38 <- 0n127/0x7fu8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))", "Number(U8, 127)", "Number(U8, 127)"] }
# 0197a Instruction { source: "inline_div32_div16_45_inline_div16_shiftright1_44_t38 <- 0n127/0x7fu8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\", \"Number(U8, 127)\", \"Number(U8, 127)\"] }", opcode: LoadImm8, args: [Register(0xbc), Constant8(0x7f=127)], resolved: None }
04 bc 7f 
# inline_div32_div16_45_inline_div16_shiftright1_44_t36 <- inline_div32_div16_45_inline_div16_shiftright1_44_t37 BitwiseAnd inline_div32_div16_45_inline_div16_shiftright1_44_t38
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))"] }
# 0197d Instruction { source: "inline_div32_div16_45_inline_div16_shiftright1_44_t36 <- inline_div32_div16_45_inline_div16_shiftright1_44_t37 BitwiseAnd inline_div32_div16_45_inline_div16_shiftright1_44_t38\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\"] }", opcode: And8, args: [Register(0xbd), Register(0xbc), Register(0xbc)], resolved: None }
1b bd bc bc 
# inline_div32_div16_45_inline_div16_shiftright1_44_a[0x03..0x04] <- inline_div32_div16_45_inline_div16_shiftright1_44_t36 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127)) }"] }
# 01981 Instruction { source: "inline_div32_div16_45_inline_div16_shiftright1_44_a[0x03..0x04] <- inline_div32_div16_45_inline_div16_shiftright1_44_t36 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127)) }\"] }", opcode: Copy8, args: [Register(0xbc), Register(0xaf)], resolved: None }
0b bc af 
# inline_div32_div16_45_inline_div16_shiftright1_44_t39 <- inline_div32_div16_45_inline_div16_shiftright1_44_a U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"a\")) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_45_inline_div16_shiftright1_44_t39 <- inline_div32_div16_45_inline_div16_shiftright1_44_a U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"a\\\")) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# inline_div32_div16_45_mid <- inline_div32_div16_45_inline_div16_shiftright1_44_t39 U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"a\")) }"] }
# 01984 Instruction { source: "inline_div32_div16_45_mid <- inline_div32_div16_45_inline_div16_shiftright1_44_t39 U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"a\\\")) }\"] }", opcode: Copy32, args: [Register(0xac), Register(0xcc)], resolved: None }
21 ac cc 
# goto inline_div32_div16_45_inline_div16_shiftright1_44_function_end_shiftright1
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"a\")) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_div32_div16_45_inline_div16_shiftright1_44_function_end_shiftright1\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"a\\\")) }\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_45_inline_div16_shiftright1_44_function_end_shiftright1)], resolved: None }
# :inline_div32_div16_45_inline_div16_shiftright1_44_function_end_shiftright1
# 	SourceContext { contexts: [] }
# inline_div32_div16_45_inline_div16_shiftright1_44_function_end_shiftright1
# inline_div32_div16_45_t14 <- inline_div32_div16_45_mid U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] })", "Ident(\"mid\")", "Ident(\"mid\")"] }
# 01987 Instruction { source: "inline_div32_div16_45_t14 <- inline_div32_div16_45_mid U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] })\", \"Ident(\\\"mid\\\")\", \"Ident(\\\"mid\\\")\"] }", opcode: Copy32, args: [Register(0xcc), Register(0xac)], resolved: None }
21 cc ac 
# inline_div32_div16_45_t15 <- inline_div32_div16_45_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_45_t15 <- inline_div32_div16_45_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# inline_div32_div16_45_inline_div16_mul16_32_6_a <- inline_div32_div16_45_t14 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] })"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_45_inline_div16_mul16_32_6_a <- inline_div32_div16_45_t14 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# inline_div32_div16_45_inline_div16_mul16_32_6_b <- inline_div32_div16_45_t15 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] })"] }
# 0198a Instruction { source: "inline_div32_div16_45_inline_div16_mul16_32_6_b <- inline_div32_div16_45_t15 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0xa4), Register(0xb0)], resolved: None }
21 a4 b0 
# inline_div32_div16_45_inline_div16_mul16_32_6_t0 <- inline_div32_div16_45_inline_div16_mul16_32_6_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_45_inline_div16_mul16_32_6_t0 <- inline_div32_div16_45_inline_div16_mul16_32_6_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# inline_div32_div16_45_inline_div16_mul16_32_6_t1 <- inline_div32_div16_45_inline_div16_mul16_32_6_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_45_inline_div16_mul16_32_6_t1 <- inline_div32_div16_45_inline_div16_mul16_32_6_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0xb0), Register(0xb0)], resolved: None }
# inline_div32_div16_45_inline_div16_mul16_32_6_c <- inline_div32_div16_45_inline_div16_mul16_32_6_t0 Multiply inline_div32_div16_45_inline_div16_mul16_32_6_t1
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))"] }
# 0198d Instruction { source: "inline_div32_div16_45_inline_div16_mul16_32_6_c <- inline_div32_div16_45_inline_div16_mul16_32_6_t0 Multiply inline_div32_div16_45_inline_div16_mul16_32_6_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0xac), Register(0xb0), Register(0xb4)], resolved: None }
11 ac b0 b4 
# 01991 Instruction { source: "inline_div32_div16_45_inline_div16_mul16_32_6_c <- inline_div32_div16_45_inline_div16_mul16_32_6_t0 Multiply inline_div32_div16_45_inline_div16_mul16_32_6_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0xb6), Constant8(0x00=0)], resolved: None }
04 b6 00 
# 01994 Instruction { source: "inline_div32_div16_45_inline_div16_mul16_32_6_c <- inline_div32_div16_45_inline_div16_mul16_32_6_t0 Multiply inline_div32_div16_45_inline_div16_mul16_32_6_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0xb7), Constant8(0x00=0)], resolved: None }
04 b7 00 
# inline_div32_div16_45_inline_div16_mul16_32_6_t3 <- inline_div32_div16_45_inline_div16_mul16_32_6_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 01997 Instruction { source: "inline_div32_div16_45_inline_div16_mul16_32_6_t3 <- inline_div32_div16_45_inline_div16_mul16_32_6_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xad), Register(0xbd)], resolved: None }
0b ad bd 
# inline_div32_div16_45_inline_div16_mul16_32_6_t2 U32 <- inline_div32_div16_45_inline_div16_mul16_32_6_t3 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 0199a Instruction { source: "Zero-pad for inline_div32_div16_45_inline_div16_mul16_32_6_t2 U32 <- inline_div32_div16_45_inline_div16_mul16_32_6_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0xb8), Constant32(0x00000000=0)], resolved: None }
20 b8 00 00 00 00 
# 019a0 Instruction { source: "inline_div32_div16_45_inline_div16_mul16_32_6_t2 U32 <- inline_div32_div16_45_inline_div16_mul16_32_6_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xbd), Register(0xb8)], resolved: None }
0b bd b8 
# inline_div32_div16_45_inline_div16_mul16_32_6_t5 <- inline_div32_div16_45_inline_div16_mul16_32_6_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 019a3 Instruction { source: "inline_div32_div16_45_inline_div16_mul16_32_6_t5 <- inline_div32_div16_45_inline_div16_mul16_32_6_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xb1), Register(0xbc)], resolved: None }
0b b1 bc 
# inline_div32_div16_45_inline_div16_mul16_32_6_t4 U32 <- inline_div32_div16_45_inline_div16_mul16_32_6_t5 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 019a6 Instruction { source: "Zero-pad for inline_div32_div16_45_inline_div16_mul16_32_6_t4 U32 <- inline_div32_div16_45_inline_div16_mul16_32_6_t5 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0xc0), Constant32(0x00000000=0)], resolved: None }
20 c0 00 00 00 00 
# 019ac Instruction { source: "inline_div32_div16_45_inline_div16_mul16_32_6_t4 U32 <- inline_div32_div16_45_inline_div16_mul16_32_6_t5 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xbc), Register(0xc0)], resolved: None }
0b bc c0 
# inline_div32_div16_45_inline_div16_mul16_32_6_f <- inline_div32_div16_45_inline_div16_mul16_32_6_t2 Multiply inline_div32_div16_45_inline_div16_mul16_32_6_t4
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 019af Instruction { source: "inline_div32_div16_45_inline_div16_mul16_32_6_f <- inline_div32_div16_45_inline_div16_mul16_32_6_t2 Multiply inline_div32_div16_45_inline_div16_mul16_32_6_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0xb8), Register(0xc0), Register(0xb8)], resolved: None }
11 b8 c0 b8 
# 019b3 Instruction { source: "inline_div32_div16_45_inline_div16_mul16_32_6_f <- inline_div32_div16_45_inline_div16_mul16_32_6_t2 Multiply inline_div32_div16_45_inline_div16_mul16_32_6_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0xba), Constant8(0x00=0)], resolved: None }
04 ba 00 
# 019b6 Instruction { source: "inline_div32_div16_45_inline_div16_mul16_32_6_f <- inline_div32_div16_45_inline_div16_mul16_32_6_t2 Multiply inline_div32_div16_45_inline_div16_mul16_32_6_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0xbb), Constant8(0x00=0)], resolved: None }
04 bb 00 
# inline_div32_div16_45_inline_div16_mul16_32_6_t6 <- inline_div32_div16_45_inline_div16_mul16_32_6_f[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }", "Index(\"f\", Number(U8, 1))", "Index(\"f\", Number(U8, 1))"] }
# 019b9 Instruction { source: "inline_div32_div16_45_inline_div16_mul16_32_6_t6 <- inline_div32_div16_45_inline_div16_mul16_32_6_f[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\", \"Index(\\\"f\\\", Number(U8, 1))\", \"Index(\\\"f\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xb9), Register(0xc4)], resolved: None }
0b b9 c4 
# inline_div32_div16_45_inline_div16_mul16_32_6_f[0x03..0x04] <- inline_div32_div16_45_inline_div16_mul16_32_6_t6 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }"] }
# 019bc Instruction { source: "inline_div32_div16_45_inline_div16_mul16_32_6_f[0x03..0x04] <- inline_div32_div16_45_inline_div16_mul16_32_6_t6 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xc4), Register(0xbb)], resolved: None }
0b c4 bb 
# inline_div32_div16_45_inline_div16_mul16_32_6_t7 <- inline_div32_div16_45_inline_div16_mul16_32_6_f[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }", "Index(\"f\", Number(U8, 0))", "Index(\"f\", Number(U8, 0))"] }
# 019bf Instruction { source: "inline_div32_div16_45_inline_div16_mul16_32_6_t7 <- inline_div32_div16_45_inline_div16_mul16_32_6_f[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\", \"Index(\\\"f\\\", Number(U8, 0))\", \"Index(\\\"f\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0xb8), Register(0xc4)], resolved: None }
0b b8 c4 
# inline_div32_div16_45_inline_div16_mul16_32_6_f[0x02..0x03] <- inline_div32_div16_45_inline_div16_mul16_32_6_t7 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }"] }
# 019c2 Instruction { source: "inline_div32_div16_45_inline_div16_mul16_32_6_f[0x02..0x03] <- inline_div32_div16_45_inline_div16_mul16_32_6_t7 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0xc4), Register(0xba)], resolved: None }
0b c4 ba 
# inline_div32_div16_45_inline_div16_mul16_32_6_t8 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 019c5 Instruction { source: "inline_div32_div16_45_inline_div16_mul16_32_6_t8 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0xc5), Constant8(0x00=0)], resolved: None }
04 c5 00 
# inline_div32_div16_45_inline_div16_mul16_32_6_f[0x01..0x02] <- inline_div32_div16_45_inline_div16_mul16_32_6_t8 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }"] }
# 019c8 Instruction { source: "inline_div32_div16_45_inline_div16_mul16_32_6_f[0x01..0x02] <- inline_div32_div16_45_inline_div16_mul16_32_6_t8 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0xc5), Register(0xb9)], resolved: None }
0b c5 b9 
# inline_div32_div16_45_inline_div16_mul16_32_6_t9 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 019cb Instruction { source: "inline_div32_div16_45_inline_div16_mul16_32_6_t9 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0xc5), Constant8(0x00=0)], resolved: None }
04 c5 00 
# inline_div32_div16_45_inline_div16_mul16_32_6_f[0x00..0x01] <- inline_div32_div16_45_inline_div16_mul16_32_6_t9 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 019ce Instruction { source: "inline_div32_div16_45_inline_div16_mul16_32_6_f[0x00..0x01] <- inline_div32_div16_45_inline_div16_mul16_32_6_t9 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0xc5), Register(0xb8)], resolved: None }
0b c5 b8 
# inline_div32_div16_45_inline_div16_mul16_32_6_t10 <- inline_div32_div16_45_inline_div16_mul16_32_6_c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_45_inline_div16_mul16_32_6_t10 <- inline_div32_div16_45_inline_div16_mul16_32_6_c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0xb4), Register(0xb4)], resolved: None }
# inline_div32_div16_45_inline_div16_mul16_32_6_t11 <- inline_div32_div16_45_inline_div16_mul16_32_6_f U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"f\")", "Ident(\"f\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_45_inline_div16_mul16_32_6_t11 <- inline_div32_div16_45_inline_div16_mul16_32_6_f U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"f\\\")\", \"Ident(\\\"f\\\")\"] }", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# inline_div32_div16_45_inline_div16_mul16_32_6_c <- inline_div32_div16_45_inline_div16_mul16_32_6_t10 Add inline_div32_div16_45_inline_div16_mul16_32_6_t11
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))"] }
# 019d1 Instruction { source: "inline_div32_div16_45_inline_div16_mul16_32_6_c <- inline_div32_div16_45_inline_div16_mul16_32_6_t10 Add inline_div32_div16_45_inline_div16_mul16_32_6_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 019d2 Instruction { source: "inline_div32_div16_45_inline_div16_mul16_32_6_c <- inline_div32_div16_45_inline_div16_mul16_32_6_t10 Add inline_div32_div16_45_inline_div16_mul16_32_6_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0xb4), Register(0xb8), Register(0xb4)], resolved: None }
30 b4 b8 b4 
# 019d6 Instruction { source: "inline_div32_div16_45_inline_div16_mul16_32_6_c <- inline_div32_div16_45_inline_div16_mul16_32_6_t10 Add inline_div32_div16_45_inline_div16_mul16_32_6_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_div32_div16_45_inline_div16_mul16_32_6_t12 <- inline_div32_div16_45_inline_div16_mul16_32_6_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_45_inline_div16_mul16_32_6_t12 <- inline_div32_div16_45_inline_div16_mul16_32_6_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# inline_div32_div16_45_inline_div16_mul16_32_6_t14 <- inline_div32_div16_45_inline_div16_mul16_32_6_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 019d7 Instruction { source: "inline_div32_div16_45_inline_div16_mul16_32_6_t14 <- inline_div32_div16_45_inline_div16_mul16_32_6_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xb1), Register(0xbc)], resolved: None }
0b b1 bc 
# inline_div32_div16_45_inline_div16_mul16_32_6_t13 U32 <- inline_div32_div16_45_inline_div16_mul16_32_6_t14 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 019da Instruction { source: "Zero-pad for inline_div32_div16_45_inline_div16_mul16_32_6_t13 U32 <- inline_div32_div16_45_inline_div16_mul16_32_6_t14 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0xb8), Constant32(0x00000000=0)], resolved: None }
20 b8 00 00 00 00 
# 019e0 Instruction { source: "inline_div32_div16_45_inline_div16_mul16_32_6_t13 U32 <- inline_div32_div16_45_inline_div16_mul16_32_6_t14 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xbc), Register(0xb8)], resolved: None }
0b bc b8 
# inline_div32_div16_45_inline_div16_mul16_32_6_d <- inline_div32_div16_45_inline_div16_mul16_32_6_t12 Multiply inline_div32_div16_45_inline_div16_mul16_32_6_t13
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 019e3 Instruction { source: "inline_div32_div16_45_inline_div16_mul16_32_6_d <- inline_div32_div16_45_inline_div16_mul16_32_6_t12 Multiply inline_div32_div16_45_inline_div16_mul16_32_6_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0xac), Register(0xb8), Register(0xb8)], resolved: None }
11 ac b8 b8 
# 019e7 Instruction { source: "inline_div32_div16_45_inline_div16_mul16_32_6_d <- inline_div32_div16_45_inline_div16_mul16_32_6_t12 Multiply inline_div32_div16_45_inline_div16_mul16_32_6_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0xba), Constant8(0x00=0)], resolved: None }
04 ba 00 
# 019ea Instruction { source: "inline_div32_div16_45_inline_div16_mul16_32_6_d <- inline_div32_div16_45_inline_div16_mul16_32_6_t12 Multiply inline_div32_div16_45_inline_div16_mul16_32_6_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0xbb), Constant8(0x00=0)], resolved: None }
04 bb 00 
# inline_div32_div16_45_inline_div16_mul16_32_6_t16 <- inline_div32_div16_45_inline_div16_mul16_32_6_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 019ed Instruction { source: "inline_div32_div16_45_inline_div16_mul16_32_6_t16 <- inline_div32_div16_45_inline_div16_mul16_32_6_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xad), Register(0xbd)], resolved: None }
0b ad bd 
# inline_div32_div16_45_inline_div16_mul16_32_6_t15 U32 <- inline_div32_div16_45_inline_div16_mul16_32_6_t16 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 019f0 Instruction { source: "Zero-pad for inline_div32_div16_45_inline_div16_mul16_32_6_t15 U32 <- inline_div32_div16_45_inline_div16_mul16_32_6_t16 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0xac), Constant32(0x00000000=0)], resolved: None }
20 ac 00 00 00 00 
# 019f6 Instruction { source: "inline_div32_div16_45_inline_div16_mul16_32_6_t15 U32 <- inline_div32_div16_45_inline_div16_mul16_32_6_t16 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xbd), Register(0xac)], resolved: None }
0b bd ac 
# inline_div32_div16_45_inline_div16_mul16_32_6_t17 <- inline_div32_div16_45_inline_div16_mul16_32_6_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_45_inline_div16_mul16_32_6_t17 <- inline_div32_div16_45_inline_div16_mul16_32_6_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0xb0), Register(0xb0)], resolved: None }
# inline_div32_div16_45_inline_div16_mul16_32_6_e <- inline_div32_div16_45_inline_div16_mul16_32_6_t15 Multiply inline_div32_div16_45_inline_div16_mul16_32_6_t17
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))"] }
# 019f9 Instruction { source: "inline_div32_div16_45_inline_div16_mul16_32_6_e <- inline_div32_div16_45_inline_div16_mul16_32_6_t15 Multiply inline_div32_div16_45_inline_div16_mul16_32_6_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0xac), Register(0xb0), Register(0xac)], resolved: None }
11 ac b0 ac 
# 019fd Instruction { source: "inline_div32_div16_45_inline_div16_mul16_32_6_e <- inline_div32_div16_45_inline_div16_mul16_32_6_t15 Multiply inline_div32_div16_45_inline_div16_mul16_32_6_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0xae), Constant8(0x00=0)], resolved: None }
04 ae 00 
# 01a00 Instruction { source: "inline_div32_div16_45_inline_div16_mul16_32_6_e <- inline_div32_div16_45_inline_div16_mul16_32_6_t15 Multiply inline_div32_div16_45_inline_div16_mul16_32_6_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0xaf), Constant8(0x00=0)], resolved: None }
04 af 00 
# inline_div32_div16_45_inline_div16_mul16_32_6_t18 <- inline_div32_div16_45_inline_div16_mul16_32_6_d U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 01a03 Instruction { source: "inline_div32_div16_45_inline_div16_mul16_32_6_t18 <- inline_div32_div16_45_inline_div16_mul16_32_6_d U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0xb8), Register(0xb0)], resolved: None }
21 b8 b0 
# inline_div32_div16_45_inline_div16_mul16_32_6_t19 <- inline_div32_div16_45_inline_div16_mul16_32_6_e U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"e\")", "Ident(\"e\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_45_inline_div16_mul16_32_6_t19 <- inline_div32_div16_45_inline_div16_mul16_32_6_e U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"e\\\")\", \"Ident(\\\"e\\\")\"] }", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# inline_div32_div16_45_inline_div16_mul16_32_6_d <- inline_div32_div16_45_inline_div16_mul16_32_6_t18 Add inline_div32_div16_45_inline_div16_mul16_32_6_t19
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))"] }
# 01a06 Instruction { source: "inline_div32_div16_45_inline_div16_mul16_32_6_d <- inline_div32_div16_45_inline_div16_mul16_32_6_t18 Add inline_div32_div16_45_inline_div16_mul16_32_6_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01a07 Instruction { source: "inline_div32_div16_45_inline_div16_mul16_32_6_d <- inline_div32_div16_45_inline_div16_mul16_32_6_t18 Add inline_div32_div16_45_inline_div16_mul16_32_6_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0xb0), Register(0xac), Register(0xb8)], resolved: None }
30 b0 ac b8 
# 01a0b Instruction { source: "inline_div32_div16_45_inline_div16_mul16_32_6_d <- inline_div32_div16_45_inline_div16_mul16_32_6_t18 Add inline_div32_div16_45_inline_div16_mul16_32_6_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_div32_div16_45_inline_div16_mul16_32_6_t20 <- inline_div32_div16_45_inline_div16_mul16_32_6_d[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }", "Index(\"d\", Number(U8, 2))", "Index(\"d\", Number(U8, 2))"] }
# 01a0c Instruction { source: "inline_div32_div16_45_inline_div16_mul16_32_6_t20 <- inline_div32_div16_45_inline_div16_mul16_32_6_d[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\", \"Index(\\\"d\\\", Number(U8, 2))\", \"Index(\\\"d\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0xba), Register(0xbd)], resolved: None }
0b ba bd 
# inline_div32_div16_45_inline_div16_mul16_32_6_d[0x03..0x04] <- inline_div32_div16_45_inline_div16_mul16_32_6_t20 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }"] }
# 01a0f Instruction { source: "inline_div32_div16_45_inline_div16_mul16_32_6_d[0x03..0x04] <- inline_div32_div16_45_inline_div16_mul16_32_6_t20 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\"] }", opcode: Copy8, args: [Register(0xbd), Register(0xbb)], resolved: None }
0b bd bb 
# inline_div32_div16_45_inline_div16_mul16_32_6_t21 <- inline_div32_div16_45_inline_div16_mul16_32_6_d[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }", "Index(\"d\", Number(U8, 1))", "Index(\"d\", Number(U8, 1))"] }
# 01a12 Instruction { source: "inline_div32_div16_45_inline_div16_mul16_32_6_t21 <- inline_div32_div16_45_inline_div16_mul16_32_6_d[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\", \"Index(\\\"d\\\", Number(U8, 1))\", \"Index(\\\"d\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xb9), Register(0xbd)], resolved: None }
0b b9 bd 
# inline_div32_div16_45_inline_div16_mul16_32_6_d[0x02..0x03] <- inline_div32_div16_45_inline_div16_mul16_32_6_t21 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }"] }
# 01a15 Instruction { source: "inline_div32_div16_45_inline_div16_mul16_32_6_d[0x02..0x03] <- inline_div32_div16_45_inline_div16_mul16_32_6_t21 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xbd), Register(0xba)], resolved: None }
0b bd ba 
# inline_div32_div16_45_inline_div16_mul16_32_6_t22 <- inline_div32_div16_45_inline_div16_mul16_32_6_d[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }", "Index(\"d\", Number(U8, 0))", "Index(\"d\", Number(U8, 0))"] }
# 01a18 Instruction { source: "inline_div32_div16_45_inline_div16_mul16_32_6_t22 <- inline_div32_div16_45_inline_div16_mul16_32_6_d[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\", \"Index(\\\"d\\\", Number(U8, 0))\", \"Index(\\\"d\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0xb8), Register(0xbd)], resolved: None }
0b b8 bd 
# inline_div32_div16_45_inline_div16_mul16_32_6_d[0x01..0x02] <- inline_div32_div16_45_inline_div16_mul16_32_6_t22 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }"] }
# 01a1b Instruction { source: "inline_div32_div16_45_inline_div16_mul16_32_6_d[0x01..0x02] <- inline_div32_div16_45_inline_div16_mul16_32_6_t22 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0xbd), Register(0xb9)], resolved: None }
0b bd b9 
# inline_div32_div16_45_inline_div16_mul16_32_6_t23 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 01a1e Instruction { source: "inline_div32_div16_45_inline_div16_mul16_32_6_t23 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0xbd), Constant8(0x00=0)], resolved: None }
04 bd 00 
# inline_div32_div16_45_inline_div16_mul16_32_6_d[0x00..0x01] <- inline_div32_div16_45_inline_div16_mul16_32_6_t23 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 01a21 Instruction { source: "inline_div32_div16_45_inline_div16_mul16_32_6_d[0x00..0x01] <- inline_div32_div16_45_inline_div16_mul16_32_6_t23 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0xbd), Register(0xb8)], resolved: None }
0b bd b8 
# inline_div32_div16_45_inline_div16_mul16_32_6_t25 <- inline_div32_div16_45_inline_div16_mul16_32_6_c U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# 01a24 Instruction { source: "inline_div32_div16_45_inline_div16_mul16_32_6_t25 <- inline_div32_div16_45_inline_div16_mul16_32_6_c U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0xb4), Register(0xac)], resolved: None }
21 b4 ac 
# inline_div32_div16_45_inline_div16_mul16_32_6_t26 <- inline_div32_div16_45_inline_div16_mul16_32_6_d U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 01a27 Instruction { source: "inline_div32_div16_45_inline_div16_mul16_32_6_t26 <- inline_div32_div16_45_inline_div16_mul16_32_6_d U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0xb8), Register(0xb0)], resolved: None }
21 b8 b0 
# inline_div32_div16_45_inline_div16_mul16_32_6_t24 <- inline_div32_div16_45_inline_div16_mul16_32_6_t25 Add inline_div32_div16_45_inline_div16_mul16_32_6_t26
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))"] }
# 01a2a Instruction { source: "inline_div32_div16_45_inline_div16_mul16_32_6_t24 <- inline_div32_div16_45_inline_div16_mul16_32_6_t25 Add inline_div32_div16_45_inline_div16_mul16_32_6_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01a2b Instruction { source: "inline_div32_div16_45_inline_div16_mul16_32_6_t24 <- inline_div32_div16_45_inline_div16_mul16_32_6_t25 Add inline_div32_div16_45_inline_div16_mul16_32_6_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0xac), Register(0xb0), Register(0xac)], resolved: None }
30 ac b0 ac 
# 01a2f Instruction { source: "inline_div32_div16_45_inline_div16_mul16_32_6_t24 <- inline_div32_div16_45_inline_div16_mul16_32_6_t25 Add inline_div32_div16_45_inline_div16_mul16_32_6_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_div32_div16_45_x <- inline_div32_div16_45_inline_div16_mul16_32_6_t24 U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_45_x <- inline_div32_div16_45_inline_div16_mul16_32_6_t24 U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# goto inline_div32_div16_45_inline_div16_mul16_32_6_function_end_mul16_32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_div32_div16_45_inline_div16_mul16_32_6_function_end_mul16_32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_45_inline_div16_mul16_32_6_function_end_mul16_32)], resolved: None }
# :inline_div32_div16_45_inline_div16_mul16_32_6_function_end_mul16_32
# 	SourceContext { contexts: [] }
# inline_div32_div16_45_inline_div16_mul16_32_6_function_end_mul16_32
# inline_div32_div16_45_t16 <- inline_div32_div16_45_x[0x02..0x03] U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }", "Index(\"x\", Number(U8, 2))", "Index(\"x\", Number(U8, 2))"] }
# 01a30 Instruction { source: "inline_div32_div16_45_t16 <- inline_div32_div16_45_x[0x02..0x03] U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }\", \"Index(\\\"x\\\", Number(U8, 2))\", \"Index(\\\"x\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0xae), Register(0xbd)], resolved: None }
0b ae bd 
# inline_div32_div16_45_t17 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 01a33 Instruction { source: "inline_div32_div16_45_t17 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0xbc), Constant8(0x00=0)], resolved: None }
04 bc 00 
# if inline_div32_div16_45_t16 > inline_div32_div16_45_t17 then 'inline_div32_div16_45_div16_if_true_0_10' else 'inline_div32_div16_45_div16_if_else_0_11'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }"] }
# 01a36 Instruction { source: "if inline_div32_div16_45_t16 > inline_div32_div16_45_t17 then 'inline_div32_div16_45_div16_if_true_0_10' else 'inline_div32_div16_45_div16_if_else_0_11'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0xbd), Register(0xbc)], resolved: None }
15 bd bc 
# 01a39 Instruction { source: "if inline_div32_div16_45_t16 > inline_div32_div16_45_t17 then 'inline_div32_div16_45_div16_if_true_0_10' else 'inline_div32_div16_45_div16_if_else_0_11'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }\"] }", opcode: JcImm, args: [Label24(inline_div32_div16_45_div16_if_else_0_11)], resolved: None }
71 65 1a 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_45_t16 > inline_div32_div16_45_t17 then 'inline_div32_div16_45_div16_if_true_0_10' else 'inline_div32_div16_45_div16_if_else_0_11'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 2)), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_45_div16_if_true_0_10)], resolved: None }
# :inline_div32_div16_45_div16_if_true_0_10
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }"] }
# inline_div32_div16_45_div16_if_true_0_10
# inline_div32_div16_45_t18 <- inline_div32_div16_45_mid U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))", "Ident(\"mid\")", "Ident(\"mid\")"] }
# 01a3d Instruction { source: "inline_div32_div16_45_t18 <- inline_div32_div16_45_mid U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\", \"Ident(\\\"mid\\\")\", \"Ident(\\\"mid\\\")\"] }", opcode: Copy32, args: [Register(0xcc), Register(0xa8)], resolved: None }
21 cc a8 
# inline_div32_div16_45_t19 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 01a40 Instruction { source: "inline_div32_div16_45_t19 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0xac), Constant32(0x00000001=1)], resolved: None }
20 ac 01 00 00 00 
# inline_div32_div16_45_hi <- inline_div32_div16_45_t18 Subtract inline_div32_div16_45_t19
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))"] }
# 01a46 Instruction { source: "inline_div32_div16_45_hi <- inline_div32_div16_45_t18 Subtract inline_div32_div16_45_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Copy32, args: [Register(0xac), Register(0x00)], resolved: None }
21 ac 00 
# 01a49 Instruction { source: "inline_div32_div16_45_hi <- inline_div32_div16_45_t18 Subtract inline_div32_div16_45_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x00)], resolved: None }
01 00 
# 01a4b Instruction { source: "inline_div32_div16_45_hi <- inline_div32_div16_45_t18 Subtract inline_div32_div16_45_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x01)], resolved: None }
01 01 
# 01a4d Instruction { source: "inline_div32_div16_45_hi <- inline_div32_div16_45_t18 Subtract inline_div32_div16_45_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x02)], resolved: None }
01 02 
# 01a4f Instruction { source: "inline_div32_div16_45_hi <- inline_div32_div16_45_t18 Subtract inline_div32_div16_45_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x03)], resolved: None }
01 03 
# 01a51 Instruction { source: "inline_div32_div16_45_hi <- inline_div32_div16_45_t18 Subtract inline_div32_div16_45_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x00), Constant32(0x00000001=1)], resolved: None }
32 00 01 00 00 00 
# 01a57 Instruction { source: "inline_div32_div16_45_hi <- inline_div32_div16_45_t18 Subtract inline_div32_div16_45_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01a58 Instruction { source: "inline_div32_div16_45_hi <- inline_div32_div16_45_t18 Subtract inline_div32_div16_45_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_1, args: [Register(0xa8), Register(0x00), Register(0xa8)], resolved: None }
30 a8 00 a8 
# 01a5c Instruction { source: "inline_div32_div16_45_hi <- inline_div32_div16_45_t18 Subtract inline_div32_div16_45_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# goto inline_div32_div16_45_div16_while_predicate_6
# 	SourceContext { contexts: ["Continue"] }
# 01a5d Instruction { source: "goto inline_div32_div16_45_div16_while_predicate_6\n\tSourceContext { contexts: [\"Continue\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_45_div16_while_predicate_6)], resolved: None }
70 c0 18 00 
# goto inline_div32_div16_45_div16_if_end_9
# 	SourceContext { contexts: [] }
# 01a61 Instruction { source: "goto inline_div32_div16_45_div16_if_end_9\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_div32_div16_45_div16_if_end_9)], resolved: None }
70 65 1a 00 
# :inline_div32_div16_45_div16_if_else_0_11
# 	SourceContext { contexts: [] }
# inline_div32_div16_45_div16_if_else_0_11
# :inline_div32_div16_45_div16_if_end_9
# 	SourceContext { contexts: [] }
# inline_div32_div16_45_div16_if_end_9
# inline_div32_div16_45_t20 <- inline_div32_div16_45_x[0x03..0x04] U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }", "Index(\"x\", Number(U8, 3))", "Index(\"x\", Number(U8, 3))"] }
# 01a65 Instruction { source: "inline_div32_div16_45_t20 <- inline_div32_div16_45_x[0x03..0x04] U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }\", \"Index(\\\"x\\\", Number(U8, 3))\", \"Index(\\\"x\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0xaf), Register(0xbd)], resolved: None }
0b af bd 
# inline_div32_div16_45_t21 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 01a68 Instruction { source: "inline_div32_div16_45_t21 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0xbc), Constant8(0x00=0)], resolved: None }
04 bc 00 
# if inline_div32_div16_45_t20 > inline_div32_div16_45_t21 then 'inline_div32_div16_45_div16_if_true_0_13' else 'inline_div32_div16_45_div16_if_else_0_14'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }"] }
# 01a6b Instruction { source: "if inline_div32_div16_45_t20 > inline_div32_div16_45_t21 then 'inline_div32_div16_45_div16_if_true_0_13' else 'inline_div32_div16_45_div16_if_else_0_14'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0xbd), Register(0xbc)], resolved: None }
15 bd bc 
# 01a6e Instruction { source: "if inline_div32_div16_45_t20 > inline_div32_div16_45_t21 then 'inline_div32_div16_45_div16_if_true_0_13' else 'inline_div32_div16_45_div16_if_else_0_14'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }\"] }", opcode: JcImm, args: [Label24(inline_div32_div16_45_div16_if_else_0_14)], resolved: None }
71 9a 1a 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_45_t20 > inline_div32_div16_45_t21 then 'inline_div32_div16_45_div16_if_true_0_13' else 'inline_div32_div16_45_div16_if_else_0_14'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Index(\\\"x\\\", Number(U8, 3)), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_45_div16_if_true_0_13)], resolved: None }
# :inline_div32_div16_45_div16_if_true_0_13
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }"] }
# inline_div32_div16_45_div16_if_true_0_13
# inline_div32_div16_45_t22 <- inline_div32_div16_45_mid U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))", "Ident(\"mid\")", "Ident(\"mid\")"] }
# 01a72 Instruction { source: "inline_div32_div16_45_t22 <- inline_div32_div16_45_mid U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\", \"Ident(\\\"mid\\\")\", \"Ident(\\\"mid\\\")\"] }", opcode: Copy32, args: [Register(0xcc), Register(0xa8)], resolved: None }
21 cc a8 
# inline_div32_div16_45_t23 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 01a75 Instruction { source: "inline_div32_div16_45_t23 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0xac), Constant32(0x00000001=1)], resolved: None }
20 ac 01 00 00 00 
# inline_div32_div16_45_hi <- inline_div32_div16_45_t22 Subtract inline_div32_div16_45_t23
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))"] }
# 01a7b Instruction { source: "inline_div32_div16_45_hi <- inline_div32_div16_45_t22 Subtract inline_div32_div16_45_t23\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Copy32, args: [Register(0xac), Register(0x00)], resolved: None }
21 ac 00 
# 01a7e Instruction { source: "inline_div32_div16_45_hi <- inline_div32_div16_45_t22 Subtract inline_div32_div16_45_t23\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x00)], resolved: None }
01 00 
# 01a80 Instruction { source: "inline_div32_div16_45_hi <- inline_div32_div16_45_t22 Subtract inline_div32_div16_45_t23\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x01)], resolved: None }
01 01 
# 01a82 Instruction { source: "inline_div32_div16_45_hi <- inline_div32_div16_45_t22 Subtract inline_div32_div16_45_t23\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x02)], resolved: None }
01 02 
# 01a84 Instruction { source: "inline_div32_div16_45_hi <- inline_div32_div16_45_t22 Subtract inline_div32_div16_45_t23\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x03)], resolved: None }
01 03 
# 01a86 Instruction { source: "inline_div32_div16_45_hi <- inline_div32_div16_45_t22 Subtract inline_div32_div16_45_t23\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x00), Constant32(0x00000001=1)], resolved: None }
32 00 01 00 00 00 
# 01a8c Instruction { source: "inline_div32_div16_45_hi <- inline_div32_div16_45_t22 Subtract inline_div32_div16_45_t23\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01a8d Instruction { source: "inline_div32_div16_45_hi <- inline_div32_div16_45_t22 Subtract inline_div32_div16_45_t23\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_1, args: [Register(0xa8), Register(0x00), Register(0xa8)], resolved: None }
30 a8 00 a8 
# 01a91 Instruction { source: "inline_div32_div16_45_hi <- inline_div32_div16_45_t22 Subtract inline_div32_div16_45_t23\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# goto inline_div32_div16_45_div16_while_predicate_6
# 	SourceContext { contexts: ["Continue"] }
# 01a92 Instruction { source: "goto inline_div32_div16_45_div16_while_predicate_6\n\tSourceContext { contexts: [\"Continue\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_45_div16_while_predicate_6)], resolved: None }
70 c0 18 00 
# goto inline_div32_div16_45_div16_if_end_12
# 	SourceContext { contexts: [] }
# 01a96 Instruction { source: "goto inline_div32_div16_45_div16_if_end_12\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_div32_div16_45_div16_if_end_12)], resolved: None }
70 9a 1a 00 
# :inline_div32_div16_45_div16_if_else_0_14
# 	SourceContext { contexts: [] }
# inline_div32_div16_45_div16_if_else_0_14
# :inline_div32_div16_45_div16_if_end_12
# 	SourceContext { contexts: [] }
# inline_div32_div16_45_div16_if_end_12
# inline_div32_div16_45_t24 <- inline_div32_div16_45_x U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }", "Ident(\"x\")", "Ident(\"x\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_45_t24 <- inline_div32_div16_45_x U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\", \"Ident(\\\"x\\\")\", \"Ident(\\\"x\\\")\"] }", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# inline_div32_div16_45_t25 <- inline_div32_div16_45_a U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_45_t25 <- inline_div32_div16_45_a U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# if inline_div32_div16_45_t24 > inline_div32_div16_45_t25 then 'inline_div32_div16_45_div16_if_true_0_16' else 'inline_div32_div16_45_div16_if_else_0_17'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }"] }
# 01a9a Instruction { source: "if inline_div32_div16_45_t24 > inline_div32_div16_45_t25 then 'inline_div32_div16_45_div16_if_true_0_16' else 'inline_div32_div16_45_div16_if_else_0_17'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8, args: [Register(0xaf), Register(0xa3)], resolved: None }
15 af a3 
# 01a9d Instruction { source: "if inline_div32_div16_45_t24 > inline_div32_div16_45_t25 then 'inline_div32_div16_45_div16_if_true_0_16' else 'inline_div32_div16_45_div16_if_else_0_17'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xae), Register(0xa2)], resolved: None }
16 ae a2 
# 01aa0 Instruction { source: "if inline_div32_div16_45_t24 > inline_div32_div16_45_t25 then 'inline_div32_div16_45_div16_if_true_0_16' else 'inline_div32_div16_45_div16_if_else_0_17'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xad), Register(0xa1)], resolved: None }
16 ad a1 
# 01aa3 Instruction { source: "if inline_div32_div16_45_t24 > inline_div32_div16_45_t25 then 'inline_div32_div16_45_div16_if_true_0_16' else 'inline_div32_div16_45_div16_if_else_0_17'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xac), Register(0xa0)], resolved: None }
16 ac a0 
# 01aa6 Instruction { source: "if inline_div32_div16_45_t24 > inline_div32_div16_45_t25 then 'inline_div32_div16_45_div16_if_true_0_16' else 'inline_div32_div16_45_div16_if_else_0_17'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: JcImm, args: [Label24(inline_div32_div16_45_div16_if_else_0_17)], resolved: None }
71 d2 1a 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_45_t24 > inline_div32_div16_45_t25 then 'inline_div32_div16_45_div16_if_true_0_16' else 'inline_div32_div16_45_div16_if_else_0_17'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_45_div16_if_true_0_16)], resolved: None }
# :inline_div32_div16_45_div16_if_true_0_16
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }"] }
# inline_div32_div16_45_div16_if_true_0_16
# inline_div32_div16_45_t26 <- inline_div32_div16_45_mid U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))", "Ident(\"mid\")", "Ident(\"mid\")"] }
# 01aaa Instruction { source: "inline_div32_div16_45_t26 <- inline_div32_div16_45_mid U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\", \"Ident(\\\"mid\\\")\", \"Ident(\\\"mid\\\")\"] }", opcode: Copy32, args: [Register(0xcc), Register(0xa8)], resolved: None }
21 cc a8 
# inline_div32_div16_45_t27 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 01aad Instruction { source: "inline_div32_div16_45_t27 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0xac), Constant32(0x00000001=1)], resolved: None }
20 ac 01 00 00 00 
# inline_div32_div16_45_hi <- inline_div32_div16_45_t26 Subtract inline_div32_div16_45_t27
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))"] }
# 01ab3 Instruction { source: "inline_div32_div16_45_hi <- inline_div32_div16_45_t26 Subtract inline_div32_div16_45_t27\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Copy32, args: [Register(0xac), Register(0x00)], resolved: None }
21 ac 00 
# 01ab6 Instruction { source: "inline_div32_div16_45_hi <- inline_div32_div16_45_t26 Subtract inline_div32_div16_45_t27\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x00)], resolved: None }
01 00 
# 01ab8 Instruction { source: "inline_div32_div16_45_hi <- inline_div32_div16_45_t26 Subtract inline_div32_div16_45_t27\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x01)], resolved: None }
01 01 
# 01aba Instruction { source: "inline_div32_div16_45_hi <- inline_div32_div16_45_t26 Subtract inline_div32_div16_45_t27\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x02)], resolved: None }
01 02 
# 01abc Instruction { source: "inline_div32_div16_45_hi <- inline_div32_div16_45_t26 Subtract inline_div32_div16_45_t27\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x03)], resolved: None }
01 03 
# 01abe Instruction { source: "inline_div32_div16_45_hi <- inline_div32_div16_45_t26 Subtract inline_div32_div16_45_t27\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x00), Constant32(0x00000001=1)], resolved: None }
32 00 01 00 00 00 
# 01ac4 Instruction { source: "inline_div32_div16_45_hi <- inline_div32_div16_45_t26 Subtract inline_div32_div16_45_t27\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01ac5 Instruction { source: "inline_div32_div16_45_hi <- inline_div32_div16_45_t26 Subtract inline_div32_div16_45_t27\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_1, args: [Register(0xa8), Register(0x00), Register(0xa8)], resolved: None }
30 a8 00 a8 
# 01ac9 Instruction { source: "inline_div32_div16_45_hi <- inline_div32_div16_45_t26 Subtract inline_div32_div16_45_t27\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# goto inline_div32_div16_45_div16_while_predicate_6
# 	SourceContext { contexts: ["Continue"] }
# 01aca Instruction { source: "goto inline_div32_div16_45_div16_while_predicate_6\n\tSourceContext { contexts: [\"Continue\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_45_div16_while_predicate_6)], resolved: None }
70 c0 18 00 
# goto inline_div32_div16_45_div16_if_end_15
# 	SourceContext { contexts: [] }
# 01ace Instruction { source: "goto inline_div32_div16_45_div16_if_end_15\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_div32_div16_45_div16_if_end_15)], resolved: None }
70 d2 1a 00 
# :inline_div32_div16_45_div16_if_else_0_17
# 	SourceContext { contexts: [] }
# inline_div32_div16_45_div16_if_else_0_17
# :inline_div32_div16_45_div16_if_end_15
# 	SourceContext { contexts: [] }
# inline_div32_div16_45_div16_if_end_15
# inline_div32_div16_45_t28 <- inline_div32_div16_45_x U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }", "Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }", "Ident(\"x\")", "Ident(\"x\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_45_t28 <- inline_div32_div16_45_x U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\", \"Ident(\\\"x\\\")\", \"Ident(\\\"x\\\")\"] }", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# inline_div32_div16_45_t29 <- inline_div32_div16_45_a U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }", "Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_45_t29 <- inline_div32_div16_45_a U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# if inline_div32_div16_45_t28 == inline_div32_div16_45_t29 then 'inline_div32_div16_45_div16_if_true_0_19' else 'inline_div32_div16_45_div16_if_else_0_20'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }", "Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }"] }
# 01ad2 Instruction { source: "if inline_div32_div16_45_t28 == inline_div32_div16_45_t29 then 'inline_div32_div16_45_div16_if_true_0_19' else 'inline_div32_div16_45_div16_if_else_0_20'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8, args: [Register(0xaf), Register(0xa3)], resolved: None }
15 af a3 
# 01ad5 Instruction { source: "if inline_div32_div16_45_t28 == inline_div32_div16_45_t29 then 'inline_div32_div16_45_div16_if_true_0_19' else 'inline_div32_div16_45_div16_if_else_0_20'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xae), Register(0xa2)], resolved: None }
16 ae a2 
# 01ad8 Instruction { source: "if inline_div32_div16_45_t28 == inline_div32_div16_45_t29 then 'inline_div32_div16_45_div16_if_true_0_19' else 'inline_div32_div16_45_div16_if_else_0_20'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xad), Register(0xa1)], resolved: None }
16 ad a1 
# 01adb Instruction { source: "if inline_div32_div16_45_t28 == inline_div32_div16_45_t29 then 'inline_div32_div16_45_div16_if_true_0_19' else 'inline_div32_div16_45_div16_if_else_0_20'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xac), Register(0xa0)], resolved: None }
16 ac a0 
# 01ade Instruction { source: "if inline_div32_div16_45_t28 == inline_div32_div16_45_t29 then 'inline_div32_div16_45_div16_if_true_0_19' else 'inline_div32_div16_45_div16_if_else_0_20'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: JzImm, args: [Label24(inline_div32_div16_45_div16_if_true_0_19)], resolved: None }
72 e6 1a 00 
# 01ae2 Instruction { source: "if inline_div32_div16_45_t28 == inline_div32_div16_45_t29 then 'inline_div32_div16_45_div16_if_true_0_19' else 'inline_div32_div16_45_div16_if_else_0_20'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_45_div16_if_else_0_20)], resolved: None }
70 f4 1a 00 
# :inline_div32_div16_45_div16_if_true_0_19
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }"] }
# inline_div32_div16_45_div16_if_true_0_19
# inline_div32_div16_45_t30 <- inline_div32_div16_45_mid U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"mid\")) }", "Ident(\"mid\")", "Ident(\"mid\")"] }
# 01ae6 Instruction { source: "inline_div32_div16_45_t30 <- inline_div32_div16_45_mid U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\", \"Ident(\\\"mid\\\")\", \"Ident(\\\"mid\\\")\"] }", opcode: Copy32, args: [Register(0xcc), Register(0xa0)], resolved: None }
21 cc a0 
# t7 <- inline_div32_div16_45_t30 U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"mid\")) }"] }
# 01ae9 Instruction { source: "t7 <- inline_div32_div16_45_t30 U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\"] }", opcode: Copy32, args: [Register(0xa0), Register(0xa4)], resolved: None }
21 a0 a4 
# goto inline_div32_div16_45_function_end_div16
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"mid\")) }"] }
# 01aec Instruction { source: "goto inline_div32_div16_45_function_end_div16\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_45_function_end_div16)], resolved: None }
70 46 1b 00 
# goto inline_div32_div16_45_div16_if_end_18
# 	SourceContext { contexts: [] }
# 01af0 Instruction { source: "goto inline_div32_div16_45_div16_if_end_18\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_div32_div16_45_div16_if_end_18)], resolved: None }
70 f4 1a 00 
# :inline_div32_div16_45_div16_if_else_0_20
# 	SourceContext { contexts: [] }
# inline_div32_div16_45_div16_if_else_0_20
# :inline_div32_div16_45_div16_if_end_18
# 	SourceContext { contexts: [] }
# inline_div32_div16_45_div16_if_end_18
# inline_div32_div16_45_t31 <- inline_div32_div16_45_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }", "Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_45_t31 <- inline_div32_div16_45_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_div32_div16_45_t32 <- inline_div32_div16_45_x U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }", "Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\"))", "Ident(\"x\")", "Ident(\"x\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_45_t32 <- inline_div32_div16_45_x U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\", \"Ident(\\\"x\\\")\", \"Ident(\\\"x\\\")\"] }", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# inline_div32_div16_45_r <- inline_div32_div16_45_t31 Subtract inline_div32_div16_45_t32
# 	SourceContext { contexts: ["Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }", "Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\"))"] }
# 01af4 Instruction { source: "inline_div32_div16_45_r <- inline_div32_div16_45_t31 Subtract inline_div32_div16_45_t32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: Copy32, args: [Register(0xac), Register(0x00)], resolved: None }
21 ac 00 
# 01af7 Instruction { source: "inline_div32_div16_45_r <- inline_div32_div16_45_t31 Subtract inline_div32_div16_45_t32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: Invert8, args: [Register(0x00)], resolved: None }
01 00 
# 01af9 Instruction { source: "inline_div32_div16_45_r <- inline_div32_div16_45_t31 Subtract inline_div32_div16_45_t32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: Invert8, args: [Register(0x01)], resolved: None }
01 01 
# 01afb Instruction { source: "inline_div32_div16_45_r <- inline_div32_div16_45_t31 Subtract inline_div32_div16_45_t32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: Invert8, args: [Register(0x02)], resolved: None }
01 02 
# 01afd Instruction { source: "inline_div32_div16_45_r <- inline_div32_div16_45_t31 Subtract inline_div32_div16_45_t32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: Invert8, args: [Register(0x03)], resolved: None }
01 03 
# 01aff Instruction { source: "inline_div32_div16_45_r <- inline_div32_div16_45_t31 Subtract inline_div32_div16_45_t32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x00), Constant32(0x00000001=1)], resolved: None }
32 00 01 00 00 00 
# 01b05 Instruction { source: "inline_div32_div16_45_r <- inline_div32_div16_45_t31 Subtract inline_div32_div16_45_t32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01b06 Instruction { source: "inline_div32_div16_45_r <- inline_div32_div16_45_t31 Subtract inline_div32_div16_45_t32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0xa0), Register(0x00), Register(0xac)], resolved: None }
30 a0 00 ac 
# 01b0a Instruction { source: "inline_div32_div16_45_r <- inline_div32_div16_45_t31 Subtract inline_div32_div16_45_t32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_div32_div16_45_t33 <- inline_div32_div16_45_r U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }", "Ident(\"r\")", "Ident(\"r\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_45_t33 <- inline_div32_div16_45_r U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\", \"Ident(\\\"r\\\")\", \"Ident(\\\"r\\\")\"] }", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# inline_div32_div16_45_t34 <- inline_div32_div16_45_b U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_div32_div16_45_t34 <- inline_div32_div16_45_b U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# if inline_div32_div16_45_t33 < inline_div32_div16_45_t34 then 'inline_div32_div16_45_div16_if_true_0_22' else 'inline_div32_div16_45_div16_if_else_0_23'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }"] }
# 01b0b Instruction { source: "if inline_div32_div16_45_t33 < inline_div32_div16_45_t34 then 'inline_div32_div16_45_div16_if_true_0_22' else 'inline_div32_div16_45_div16_if_else_0_23'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8, args: [Register(0xa7), Register(0xaf)], resolved: None }
15 a7 af 
# 01b0e Instruction { source: "if inline_div32_div16_45_t33 < inline_div32_div16_45_t34 then 'inline_div32_div16_45_div16_if_true_0_22' else 'inline_div32_div16_45_div16_if_else_0_23'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xa6), Register(0xae)], resolved: None }
16 a6 ae 
# 01b11 Instruction { source: "if inline_div32_div16_45_t33 < inline_div32_div16_45_t34 then 'inline_div32_div16_45_div16_if_true_0_22' else 'inline_div32_div16_45_div16_if_else_0_23'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xa5), Register(0xad)], resolved: None }
16 a5 ad 
# 01b14 Instruction { source: "if inline_div32_div16_45_t33 < inline_div32_div16_45_t34 then 'inline_div32_div16_45_div16_if_true_0_22' else 'inline_div32_div16_45_div16_if_else_0_23'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xa4), Register(0xac)], resolved: None }
16 a4 ac 
# 01b17 Instruction { source: "if inline_div32_div16_45_t33 < inline_div32_div16_45_t34 then 'inline_div32_div16_45_div16_if_true_0_22' else 'inline_div32_div16_45_div16_if_else_0_23'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: JcImm, args: [Label24(inline_div32_div16_45_div16_if_else_0_23)], resolved: None }
71 29 1b 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_45_t33 < inline_div32_div16_45_t34 then 'inline_div32_div16_45_div16_if_true_0_22' else 'inline_div32_div16_45_div16_if_else_0_23'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_45_div16_if_true_0_22)], resolved: None }
# :inline_div32_div16_45_div16_if_true_0_22
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }"] }
# inline_div32_div16_45_div16_if_true_0_22
# inline_div32_div16_45_t35 <- inline_div32_div16_45_mid U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"mid\")) }", "Ident(\"mid\")", "Ident(\"mid\")"] }
# 01b1b Instruction { source: "inline_div32_div16_45_t35 <- inline_div32_div16_45_mid U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\", \"Ident(\\\"mid\\\")\", \"Ident(\\\"mid\\\")\"] }", opcode: Copy32, args: [Register(0xcc), Register(0xa0)], resolved: None }
21 cc a0 
# t7 <- inline_div32_div16_45_t35 U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"mid\")) }"] }
# 01b1e Instruction { source: "t7 <- inline_div32_div16_45_t35 U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\"] }", opcode: Copy32, args: [Register(0xa0), Register(0xa4)], resolved: None }
21 a0 a4 
# goto inline_div32_div16_45_function_end_div16
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"mid\")) }"] }
# 01b21 Instruction { source: "goto inline_div32_div16_45_function_end_div16\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_45_function_end_div16)], resolved: None }
70 46 1b 00 
# goto inline_div32_div16_45_div16_if_end_21
# 	SourceContext { contexts: [] }
# 01b25 Instruction { source: "goto inline_div32_div16_45_div16_if_end_21\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_div32_div16_45_div16_if_end_21)], resolved: None }
70 29 1b 00 
# :inline_div32_div16_45_div16_if_else_0_23
# 	SourceContext { contexts: [] }
# inline_div32_div16_45_div16_if_else_0_23
# :inline_div32_div16_45_div16_if_end_21
# 	SourceContext { contexts: [] }
# inline_div32_div16_45_div16_if_end_21
# inline_div32_div16_45_t36 <- inline_div32_div16_45_mid U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"mid\"), Number(U8, 1))", "Ident(\"mid\")", "Ident(\"mid\")"] }
# 01b29 Instruction { source: "inline_div32_div16_45_t36 <- inline_div32_div16_45_mid U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1))\", \"Ident(\\\"mid\\\")\", \"Ident(\\\"mid\\\")\"] }", opcode: Copy32, args: [Register(0xcc), Register(0xac)], resolved: None }
21 cc ac 
# inline_div32_div16_45_t37 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"mid\"), Number(U8, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 01b2c Instruction { source: "inline_div32_div16_45_t37 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0xb0), Constant32(0x00000001=1)], resolved: None }
20 b0 01 00 00 00 
# inline_div32_div16_45_lo <- inline_div32_div16_45_t36 Add inline_div32_div16_45_t37
# 	SourceContext { contexts: ["Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"mid\"), Number(U8, 1))"] }
# 01b32 Instruction { source: "inline_div32_div16_45_lo <- inline_div32_div16_45_t36 Add inline_div32_div16_45_t37\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01b33 Instruction { source: "inline_div32_div16_45_lo <- inline_div32_div16_45_t36 Add inline_div32_div16_45_t37\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_1, args: [Register(0xac), Register(0xb0), Register(0xc8)], resolved: None }
30 ac b0 c8 
# 01b37 Instruction { source: "inline_div32_div16_45_lo <- inline_div32_div16_45_t36 Add inline_div32_div16_45_t37\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# goto inline_div32_div16_45_div16_while_predicate_6
# 	SourceContext { contexts: [] }
# 01b38 Instruction { source: "goto inline_div32_div16_45_div16_while_predicate_6\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_div32_div16_45_div16_while_predicate_6)], resolved: None }
70 c0 18 00 
# :inline_div32_div16_45_div16_while_end_8
# 	SourceContext { contexts: [] }
# inline_div32_div16_45_div16_while_end_8
# inline_div32_div16_45_t38 <- inline_div32_div16_45_lo U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"lo\")) }", "Ident(\"lo\")", "Ident(\"lo\")"] }
# 01b3c Instruction { source: "inline_div32_div16_45_t38 <- inline_div32_div16_45_lo U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"lo\\\")) }\", \"Ident(\\\"lo\\\")\", \"Ident(\\\"lo\\\")\"] }", opcode: Copy32, args: [Register(0xc8), Register(0xa0)], resolved: None }
21 c8 a0 
# t7 <- inline_div32_div16_45_t38 U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"lo\")) }"] }
# 01b3f Instruction { source: "t7 <- inline_div32_div16_45_t38 U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"lo\\\")) }\"] }", opcode: Copy32, args: [Register(0xa0), Register(0xa4)], resolved: None }
21 a0 a4 
# goto inline_div32_div16_45_function_end_div16
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"lo\")) }"] }
# 01b42 Instruction { source: "goto inline_div32_div16_45_function_end_div16\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"lo\\\")) }\"] }", opcode: JmpImm, args: [Label24(inline_div32_div16_45_function_end_div16)], resolved: None }
70 46 1b 00 
# :inline_div32_div16_45_function_end_div16
# 	SourceContext { contexts: [] }
# inline_div32_div16_45_function_end_div16
# t10 <- 0n8/0x00000008u32 
# 	SourceContext { contexts: ["Return { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }"] }
# 01b46 Instruction { source: "t10 <- 0n8/0x00000008u32 \n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }\"] }", opcode: LoadImm32, args: [Register(0xa0), Constant32(0x00000008=8)], resolved: None }
20 a0 08 00 00 00 
# __frame_pointer <- __frame_pointer Add t10
# 	SourceContext { contexts: ["Return { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }"] }
# 01b4c Instruction { source: "__frame_pointer <- __frame_pointer Add t10\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01b4d Instruction { source: "__frame_pointer <- __frame_pointer Add t10\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }\"] }", opcode: AddCarry32_1, args: [Register(0x0c), Register(0xa0), Register(0x0c)], resolved: None }
30 0c a0 0c 
# 01b51 Instruction { source: "__frame_pointer <- __frame_pointer Add t10\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# return Some(t7)
# 	SourceContext { contexts: ["Return { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }"] }
# 01b52 Instruction { source: "return Some(t7)\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"div16\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })) }\"] }", opcode: Copy32, args: [Register(0xa4), Register(0x00)], resolved: None }
21 a4 00 
# 01b55 Instruction { source: "Dealloc 8 bytes from stack", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000008=8)], resolved: None }
32 0c 08 00 00 00 
# 01b5b Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# goto div32_if_end_3
# 	SourceContext { contexts: [] }
# 01b5d Instruction { source: "goto div32_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(div32_if_end_3)], resolved: None }
70 61 1b 00 
# :div32_if_else_0_5
# 	SourceContext { contexts: [] }
# div32_if_else_0_5
# :div32_if_end_3
# 	SourceContext { contexts: [] }
# div32_if_end_3
# lo <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"lo\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }", "Number(USIZE, 0)"] }
# 01b61 Instruction { source: "lo <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lo\\\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0xb8), Constant32(0x00000000=0)], resolved: None }
20 b8 00 00 00 00 
# hi <- 0xffffffffu32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 4294967295) }", "Number(USIZE, 4294967295)"] }
# 01b67 Instruction { source: "hi <- 0xffffffffu32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 4294967295) }\", \"Number(USIZE, 4294967295)\"] }", opcode: LoadImm32, args: [Register(0xa8), Constant32(0xffffffff=4294967295)], resolved: None }
20 a8 ff ff ff ff 
# :div32_while_predicate_6
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }, Declare { scope: Local, name: \"x64\", var_type: Struct(\"U64\") }, VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\"x64\", \"lo\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }] }"] }
# div32_while_predicate_6
# t11 <- lo U32
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }, Declare { scope: Local, name: \"x64\", var_type: Struct(\"U64\") }, VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\"x64\", \"lo\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }", "Ident(\"lo\")", "Ident(\"lo\")"] }
# 01b6d Instruction { source: "t11 <- lo U32\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })) }, Declare { scope: Local, name: \\\"x64\\\", var_type: Struct(\\\"U64\\\") }, VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\\\"x64\\\", \\\"lo\\\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\", \"Ident(\\\"lo\\\")\", \"Ident(\\\"lo\\\")\"] }", opcode: Copy32, args: [Register(0xb8), Register(0xac)], resolved: None }
21 b8 ac 
# t12 <- hi U32
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }, Declare { scope: Local, name: \"x64\", var_type: Struct(\"U64\") }, VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\"x64\", \"lo\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }", "Ident(\"hi\")", "Ident(\"hi\")"] }
# optimized away noop copy Instruction { source: "t12 <- hi U32\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })) }, Declare { scope: Local, name: \\\"x64\\\", var_type: Struct(\\\"U64\\\") }, VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\\\"x64\\\", \\\"lo\\\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\", \"Ident(\\\"hi\\\")\", \"Ident(\\\"hi\\\")\"] }", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# if t11 < t12 then 'div32_while_body_7' else 'div32_while_end_8'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }, Declare { scope: Local, name: \"x64\", var_type: Struct(\"U64\") }, VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\"x64\", \"lo\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }"] }
# 01b70 Instruction { source: "if t11 < t12 then 'div32_while_body_7' else 'div32_while_end_8'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })) }, Declare { scope: Local, name: \\\"x64\\\", var_type: Struct(\\\"U64\\\") }, VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\\\"x64\\\", \\\"lo\\\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\"] }", opcode: Cmp8, args: [Register(0xab), Register(0xaf)], resolved: None }
15 ab af 
# 01b73 Instruction { source: "if t11 < t12 then 'div32_while_body_7' else 'div32_while_end_8'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })) }, Declare { scope: Local, name: \\\"x64\\\", var_type: Struct(\\\"U64\\\") }, VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\\\"x64\\\", \\\"lo\\\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xaa), Register(0xae)], resolved: None }
16 aa ae 
# 01b76 Instruction { source: "if t11 < t12 then 'div32_while_body_7' else 'div32_while_end_8'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })) }, Declare { scope: Local, name: \\\"x64\\\", var_type: Struct(\\\"U64\\\") }, VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\\\"x64\\\", \\\"lo\\\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xa9), Register(0xad)], resolved: None }
16 a9 ad 
# 01b79 Instruction { source: "if t11 < t12 then 'div32_while_body_7' else 'div32_while_end_8'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })) }, Declare { scope: Local, name: \\\"x64\\\", var_type: Struct(\\\"U64\\\") }, VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\\\"x64\\\", \\\"lo\\\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xa8), Register(0xac)], resolved: None }
16 a8 ac 
# 01b7c Instruction { source: "if t11 < t12 then 'div32_while_body_7' else 'div32_while_end_8'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })) }, Declare { scope: Local, name: \\\"x64\\\", var_type: Struct(\\\"U64\\\") }, VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\\\"x64\\\", \\\"lo\\\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\"] }", opcode: JcImm, args: [Label24(div32_while_end_8)], resolved: None }
71 22 1e 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t11 < t12 then 'div32_while_body_7' else 'div32_while_end_8'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }, while_true: [Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })) }, Declare { scope: Local, name: \\\"x64\\\", var_type: Struct(\\\"U64\\\") }, VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\\\"x64\\\", \\\"lo\\\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }, Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lo\\\"), right: Ident(\\\"hi\\\") }\"] }", opcode: JmpImm, args: [Label24(div32_while_body_7)], resolved: None }
# :div32_while_body_7
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }, Declare { scope: Local, name: \"x64\", var_type: Struct(\"U64\") }, VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\"x64\", \"lo\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }] }"] }
# div32_while_body_7
# t14 <- lo U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }", "Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] }))", "Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] })", "Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] })", "Ident(\"lo\")", "Ident(\"lo\")"] }
# 01b80 Instruction { source: "t14 <- lo U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] }))\", \"Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] })\", \"Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] })\", \"Ident(\\\"lo\\\")\", \"Ident(\\\"lo\\\")\"] }", opcode: Copy32, args: [Register(0xb8), Register(0xac)], resolved: None }
21 b8 ac 
# inline_div32_shiftright1_46_a <- t14 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }", "Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] }))", "Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] })", "Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] })"] }
# optimized away noop copy Instruction { source: "inline_div32_shiftright1_46_a <- t14 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] }))\", \"Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] })\", \"Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] })\"] }", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# inline_div32_shiftright1_46_t1 <- inline_div32_shiftright1_46_a[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))", "Index(\"a\", Number(U8, 0))", "Index(\"a\", Number(U8, 0))"] }
# 01b83 Instruction { source: "inline_div32_shiftright1_46_t1 <- inline_div32_shiftright1_46_a[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 0))\", \"Index(\\\"a\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0xac), Register(0xbd)], resolved: None }
0b ac bd 
# inline_div32_shiftright1_46_t2 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 01b86 Instruction { source: "inline_div32_shiftright1_46_t2 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0xbc), Constant8(0x01=1)], resolved: None }
04 bc 01 
# inline_div32_shiftright1_46_t0 <- inline_div32_shiftright1_46_t1 RotateRight inline_div32_shiftright1_46_t2
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))"] }
# 01b89 Instruction { source: "inline_div32_shiftright1_46_t0 <- inline_div32_shiftright1_46_t1 RotateRight inline_div32_shiftright1_46_t2\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0xbc), Register(0xbd), Register(0xbc)], resolved: None }
1e 04 bc bd bc 
# inline_div32_shiftright1_46_a[0x00..0x01] <- inline_div32_shiftright1_46_t0 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1)) }"] }
# 01b8e Instruction { source: "inline_div32_shiftright1_46_a[0x00..0x01] <- inline_div32_shiftright1_46_t0 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xbc), Register(0xac)], resolved: None }
0b bc ac 
# inline_div32_shiftright1_46_t4 <- inline_div32_shiftright1_46_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 01b91 Instruction { source: "inline_div32_shiftright1_46_t4 <- inline_div32_shiftright1_46_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xad), Register(0xbd)], resolved: None }
0b ad bd 
# inline_div32_shiftright1_46_t5 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 01b94 Instruction { source: "inline_div32_shiftright1_46_t5 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0xbc), Constant8(0x01=1)], resolved: None }
04 bc 01 
# inline_div32_shiftright1_46_t3 <- inline_div32_shiftright1_46_t4 RotateRight inline_div32_shiftright1_46_t5
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))"] }
# 01b97 Instruction { source: "inline_div32_shiftright1_46_t3 <- inline_div32_shiftright1_46_t4 RotateRight inline_div32_shiftright1_46_t5\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0xbc), Register(0xbd), Register(0xbc)], resolved: None }
1e 04 bc bd bc 
# inline_div32_shiftright1_46_a[0x01..0x02] <- inline_div32_shiftright1_46_t3 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1)) }"] }
# 01b9c Instruction { source: "inline_div32_shiftright1_46_a[0x01..0x02] <- inline_div32_shiftright1_46_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xbc), Register(0xad)], resolved: None }
0b bc ad 
# inline_div32_shiftright1_46_t7 <- inline_div32_shiftright1_46_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 01b9f Instruction { source: "inline_div32_shiftright1_46_t7 <- inline_div32_shiftright1_46_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0xae), Register(0xbd)], resolved: None }
0b ae bd 
# inline_div32_shiftright1_46_t8 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 01ba2 Instruction { source: "inline_div32_shiftright1_46_t8 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0xbc), Constant8(0x01=1)], resolved: None }
04 bc 01 
# inline_div32_shiftright1_46_t6 <- inline_div32_shiftright1_46_t7 RotateRight inline_div32_shiftright1_46_t8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))"] }
# 01ba5 Instruction { source: "inline_div32_shiftright1_46_t6 <- inline_div32_shiftright1_46_t7 RotateRight inline_div32_shiftright1_46_t8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0xbc), Register(0xbd), Register(0xbc)], resolved: None }
1e 04 bc bd bc 
# inline_div32_shiftright1_46_a[0x02..0x03] <- inline_div32_shiftright1_46_t6 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1)) }"] }
# 01baa Instruction { source: "inline_div32_shiftright1_46_a[0x02..0x03] <- inline_div32_shiftright1_46_t6 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xbc), Register(0xae)], resolved: None }
0b bc ae 
# inline_div32_shiftright1_46_t10 <- inline_div32_shiftright1_46_a[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))", "Index(\"a\", Number(U8, 3))", "Index(\"a\", Number(U8, 3))"] }
# 01bad Instruction { source: "inline_div32_shiftright1_46_t10 <- inline_div32_shiftright1_46_a[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0xaf), Register(0xbd)], resolved: None }
0b af bd 
# inline_div32_shiftright1_46_t11 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 01bb0 Instruction { source: "inline_div32_shiftright1_46_t11 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0xbc), Constant8(0x01=1)], resolved: None }
04 bc 01 
# inline_div32_shiftright1_46_t9 <- inline_div32_shiftright1_46_t10 RotateRight inline_div32_shiftright1_46_t11
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))"] }
# 01bb3 Instruction { source: "inline_div32_shiftright1_46_t9 <- inline_div32_shiftright1_46_t10 RotateRight inline_div32_shiftright1_46_t11\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0xbc), Register(0xbd), Register(0xbc)], resolved: None }
1e 04 bc bd bc 
# inline_div32_shiftright1_46_a[0x03..0x04] <- inline_div32_shiftright1_46_t9 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1)) }"] }
# 01bb8 Instruction { source: "inline_div32_shiftright1_46_a[0x03..0x04] <- inline_div32_shiftright1_46_t9 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xbc), Register(0xaf)], resolved: None }
0b bc af 
# inline_div32_shiftright1_46_t13 <- inline_div32_shiftright1_46_a[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))", "Index(\"a\", Number(U8, 0))", "Index(\"a\", Number(U8, 0))"] }
# 01bbb Instruction { source: "inline_div32_shiftright1_46_t13 <- inline_div32_shiftright1_46_a[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\", \"Index(\\\"a\\\", Number(U8, 0))\", \"Index(\\\"a\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0xac), Register(0xbd)], resolved: None }
0b ac bd 
# inline_div32_shiftright1_46_t14 <- 0n127/0x7fu8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))", "Number(U8, 127)", "Number(U8, 127)"] }
# 01bbe Instruction { source: "inline_div32_shiftright1_46_t14 <- 0n127/0x7fu8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\", \"Number(U8, 127)\", \"Number(U8, 127)\"] }", opcode: LoadImm8, args: [Register(0xbc), Constant8(0x7f=127)], resolved: None }
04 bc 7f 
# inline_div32_shiftright1_46_t12 <- inline_div32_shiftright1_46_t13 BitwiseAnd inline_div32_shiftright1_46_t14
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))"] }
# 01bc1 Instruction { source: "inline_div32_shiftright1_46_t12 <- inline_div32_shiftright1_46_t13 BitwiseAnd inline_div32_shiftright1_46_t14\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\"] }", opcode: And8, args: [Register(0xbd), Register(0xbc), Register(0xbc)], resolved: None }
1b bd bc bc 
# inline_div32_shiftright1_46_a[0x00..0x01] <- inline_div32_shiftright1_46_t12 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127)) }"] }
# 01bc5 Instruction { source: "inline_div32_shiftright1_46_a[0x00..0x01] <- inline_div32_shiftright1_46_t12 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127)) }\"] }", opcode: Copy8, args: [Register(0xbc), Register(0xac)], resolved: None }
0b bc ac 
# inline_div32_shiftright1_46_t16 <- inline_div32_shiftright1_46_a[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Index(\"a\", Number(U8, 0))", "Index(\"a\", Number(U8, 0))"] }
# 01bc8 Instruction { source: "inline_div32_shiftright1_46_t16 <- inline_div32_shiftright1_46_a[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Index(\\\"a\\\", Number(U8, 0))\", \"Index(\\\"a\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0xac), Register(0xbd)], resolved: None }
0b ac bd 
# inline_div32_shiftright1_46_t18 <- inline_div32_shiftright1_46_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 01bcb Instruction { source: "inline_div32_shiftright1_46_t18 <- inline_div32_shiftright1_46_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xad), Register(0xbc)], resolved: None }
0b ad bc 
# inline_div32_shiftright1_46_t19 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))", "Number(U8, 128)", "Number(U8, 128)"] }
# 01bce Instruction { source: "inline_div32_shiftright1_46_t19 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0xc6), Constant8(0x80=128)], resolved: None }
04 c6 80 
# inline_div32_shiftright1_46_t17 <- inline_div32_shiftright1_46_t18 BitwiseAnd inline_div32_shiftright1_46_t19
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))"] }
# 01bd1 Instruction { source: "inline_div32_shiftright1_46_t17 <- inline_div32_shiftright1_46_t18 BitwiseAnd inline_div32_shiftright1_46_t19\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\"] }", opcode: And8, args: [Register(0xbc), Register(0xc6), Register(0xbc)], resolved: None }
1b bc c6 bc 
# inline_div32_shiftright1_46_t15 <- inline_div32_shiftright1_46_t16 BitwiseOr inline_div32_shiftright1_46_t17
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))"] }
# 01bd5 Instruction { source: "inline_div32_shiftright1_46_t15 <- inline_div32_shiftright1_46_t16 BitwiseOr inline_div32_shiftright1_46_t17\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\"] }", opcode: Or8, args: [Register(0xbd), Register(0xbc), Register(0xbc)], resolved: None }
1c bd bc bc 
# inline_div32_shiftright1_46_a[0x00..0x01] <- inline_div32_shiftright1_46_t15 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }"] }
# 01bd9 Instruction { source: "inline_div32_shiftright1_46_a[0x00..0x01] <- inline_div32_shiftright1_46_t15 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\"] }", opcode: Copy8, args: [Register(0xbc), Register(0xac)], resolved: None }
0b bc ac 
# inline_div32_shiftright1_46_t21 <- inline_div32_shiftright1_46_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 01bdc Instruction { source: "inline_div32_shiftright1_46_t21 <- inline_div32_shiftright1_46_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xad), Register(0xbd)], resolved: None }
0b ad bd 
# inline_div32_shiftright1_46_t22 <- 0n127/0x7fu8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))", "Number(U8, 127)", "Number(U8, 127)"] }
# 01bdf Instruction { source: "inline_div32_shiftright1_46_t22 <- 0n127/0x7fu8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\", \"Number(U8, 127)\", \"Number(U8, 127)\"] }", opcode: LoadImm8, args: [Register(0xbc), Constant8(0x7f=127)], resolved: None }
04 bc 7f 
# inline_div32_shiftright1_46_t20 <- inline_div32_shiftright1_46_t21 BitwiseAnd inline_div32_shiftright1_46_t22
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))"] }
# 01be2 Instruction { source: "inline_div32_shiftright1_46_t20 <- inline_div32_shiftright1_46_t21 BitwiseAnd inline_div32_shiftright1_46_t22\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\"] }", opcode: And8, args: [Register(0xbd), Register(0xbc), Register(0xbc)], resolved: None }
1b bd bc bc 
# inline_div32_shiftright1_46_a[0x01..0x02] <- inline_div32_shiftright1_46_t20 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127)) }"] }
# 01be6 Instruction { source: "inline_div32_shiftright1_46_a[0x01..0x02] <- inline_div32_shiftright1_46_t20 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127)) }\"] }", opcode: Copy8, args: [Register(0xbc), Register(0xad)], resolved: None }
0b bc ad 
# inline_div32_shiftright1_46_t24 <- inline_div32_shiftright1_46_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 01be9 Instruction { source: "inline_div32_shiftright1_46_t24 <- inline_div32_shiftright1_46_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xad), Register(0xbd)], resolved: None }
0b ad bd 
# inline_div32_shiftright1_46_t26 <- inline_div32_shiftright1_46_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 01bec Instruction { source: "inline_div32_shiftright1_46_t26 <- inline_div32_shiftright1_46_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0xae), Register(0xbc)], resolved: None }
0b ae bc 
# inline_div32_shiftright1_46_t27 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))", "Number(U8, 128)", "Number(U8, 128)"] }
# 01bef Instruction { source: "inline_div32_shiftright1_46_t27 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0xc6), Constant8(0x80=128)], resolved: None }
04 c6 80 
# inline_div32_shiftright1_46_t25 <- inline_div32_shiftright1_46_t26 BitwiseAnd inline_div32_shiftright1_46_t27
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))"] }
# 01bf2 Instruction { source: "inline_div32_shiftright1_46_t25 <- inline_div32_shiftright1_46_t26 BitwiseAnd inline_div32_shiftright1_46_t27\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\"] }", opcode: And8, args: [Register(0xbc), Register(0xc6), Register(0xbc)], resolved: None }
1b bc c6 bc 
# inline_div32_shiftright1_46_t23 <- inline_div32_shiftright1_46_t24 BitwiseOr inline_div32_shiftright1_46_t25
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))"] }
# 01bf6 Instruction { source: "inline_div32_shiftright1_46_t23 <- inline_div32_shiftright1_46_t24 BitwiseOr inline_div32_shiftright1_46_t25\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\"] }", opcode: Or8, args: [Register(0xbd), Register(0xbc), Register(0xbc)], resolved: None }
1c bd bc bc 
# inline_div32_shiftright1_46_a[0x01..0x02] <- inline_div32_shiftright1_46_t23 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }"] }
# 01bfa Instruction { source: "inline_div32_shiftright1_46_a[0x01..0x02] <- inline_div32_shiftright1_46_t23 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\"] }", opcode: Copy8, args: [Register(0xbc), Register(0xad)], resolved: None }
0b bc ad 
# inline_div32_shiftright1_46_t29 <- inline_div32_shiftright1_46_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 01bfd Instruction { source: "inline_div32_shiftright1_46_t29 <- inline_div32_shiftright1_46_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0xae), Register(0xbd)], resolved: None }
0b ae bd 
# inline_div32_shiftright1_46_t30 <- 0n127/0x7fu8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))", "Number(U8, 127)", "Number(U8, 127)"] }
# 01c00 Instruction { source: "inline_div32_shiftright1_46_t30 <- 0n127/0x7fu8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\", \"Number(U8, 127)\", \"Number(U8, 127)\"] }", opcode: LoadImm8, args: [Register(0xbc), Constant8(0x7f=127)], resolved: None }
04 bc 7f 
# inline_div32_shiftright1_46_t28 <- inline_div32_shiftright1_46_t29 BitwiseAnd inline_div32_shiftright1_46_t30
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))"] }
# 01c03 Instruction { source: "inline_div32_shiftright1_46_t28 <- inline_div32_shiftright1_46_t29 BitwiseAnd inline_div32_shiftright1_46_t30\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\"] }", opcode: And8, args: [Register(0xbd), Register(0xbc), Register(0xbc)], resolved: None }
1b bd bc bc 
# inline_div32_shiftright1_46_a[0x02..0x03] <- inline_div32_shiftright1_46_t28 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127)) }"] }
# 01c07 Instruction { source: "inline_div32_shiftright1_46_a[0x02..0x03] <- inline_div32_shiftright1_46_t28 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127)) }\"] }", opcode: Copy8, args: [Register(0xbc), Register(0xae)], resolved: None }
0b bc ae 
# inline_div32_shiftright1_46_t32 <- inline_div32_shiftright1_46_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 01c0a Instruction { source: "inline_div32_shiftright1_46_t32 <- inline_div32_shiftright1_46_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0xae), Register(0xbd)], resolved: None }
0b ae bd 
# inline_div32_shiftright1_46_t34 <- inline_div32_shiftright1_46_a[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))", "Index(\"a\", Number(U8, 3))", "Index(\"a\", Number(U8, 3))"] }
# 01c0d Instruction { source: "inline_div32_shiftright1_46_t34 <- inline_div32_shiftright1_46_a[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\", \"Index(\\\"a\\\", Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0xaf), Register(0xbc)], resolved: None }
0b af bc 
# inline_div32_shiftright1_46_t35 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))", "Number(U8, 128)", "Number(U8, 128)"] }
# 01c10 Instruction { source: "inline_div32_shiftright1_46_t35 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0xc6), Constant8(0x80=128)], resolved: None }
04 c6 80 
# inline_div32_shiftright1_46_t33 <- inline_div32_shiftright1_46_t34 BitwiseAnd inline_div32_shiftright1_46_t35
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))"] }
# 01c13 Instruction { source: "inline_div32_shiftright1_46_t33 <- inline_div32_shiftright1_46_t34 BitwiseAnd inline_div32_shiftright1_46_t35\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\"] }", opcode: And8, args: [Register(0xbc), Register(0xc6), Register(0xbc)], resolved: None }
1b bc c6 bc 
# inline_div32_shiftright1_46_t31 <- inline_div32_shiftright1_46_t32 BitwiseOr inline_div32_shiftright1_46_t33
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))"] }
# 01c17 Instruction { source: "inline_div32_shiftright1_46_t31 <- inline_div32_shiftright1_46_t32 BitwiseOr inline_div32_shiftright1_46_t33\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\"] }", opcode: Or8, args: [Register(0xbd), Register(0xbc), Register(0xbc)], resolved: None }
1c bd bc bc 
# inline_div32_shiftright1_46_a[0x02..0x03] <- inline_div32_shiftright1_46_t31 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }"] }
# 01c1b Instruction { source: "inline_div32_shiftright1_46_a[0x02..0x03] <- inline_div32_shiftright1_46_t31 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\"] }", opcode: Copy8, args: [Register(0xbc), Register(0xae)], resolved: None }
0b bc ae 
# inline_div32_shiftright1_46_t37 <- inline_div32_shiftright1_46_a[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))", "Index(\"a\", Number(U8, 3))", "Index(\"a\", Number(U8, 3))"] }
# 01c1e Instruction { source: "inline_div32_shiftright1_46_t37 <- inline_div32_shiftright1_46_a[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\", \"Index(\\\"a\\\", Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0xaf), Register(0xbd)], resolved: None }
0b af bd 
# inline_div32_shiftright1_46_t38 <- 0n127/0x7fu8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))", "Number(U8, 127)", "Number(U8, 127)"] }
# 01c21 Instruction { source: "inline_div32_shiftright1_46_t38 <- 0n127/0x7fu8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\", \"Number(U8, 127)\", \"Number(U8, 127)\"] }", opcode: LoadImm8, args: [Register(0xbc), Constant8(0x7f=127)], resolved: None }
04 bc 7f 
# inline_div32_shiftright1_46_t36 <- inline_div32_shiftright1_46_t37 BitwiseAnd inline_div32_shiftright1_46_t38
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))"] }
# 01c24 Instruction { source: "inline_div32_shiftright1_46_t36 <- inline_div32_shiftright1_46_t37 BitwiseAnd inline_div32_shiftright1_46_t38\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\"] }", opcode: And8, args: [Register(0xbd), Register(0xbc), Register(0xbc)], resolved: None }
1b bd bc bc 
# inline_div32_shiftright1_46_a[0x03..0x04] <- inline_div32_shiftright1_46_t36 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127)) }"] }
# 01c28 Instruction { source: "inline_div32_shiftright1_46_a[0x03..0x04] <- inline_div32_shiftright1_46_t36 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127)) }\"] }", opcode: Copy8, args: [Register(0xbc), Register(0xaf)], resolved: None }
0b bc af 
# inline_div32_shiftright1_46_t39 <- inline_div32_shiftright1_46_a U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"a\")) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_div32_shiftright1_46_t39 <- inline_div32_shiftright1_46_a U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"a\\\")) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# t13 <- inline_div32_shiftright1_46_t39 U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"a\")) }"] }
# 01c2b Instruction { source: "t13 <- inline_div32_shiftright1_46_t39 U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"a\\\")) }\"] }", opcode: Copy32, args: [Register(0xac), Register(0xc0)], resolved: None }
21 ac c0 
# goto inline_div32_shiftright1_46_function_end_shiftright1
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"a\")) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_div32_shiftright1_46_function_end_shiftright1\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"a\\\")) }\"] }", opcode: JmpImm, args: [Label24(inline_div32_shiftright1_46_function_end_shiftright1)], resolved: None }
# :inline_div32_shiftright1_46_function_end_shiftright1
# 	SourceContext { contexts: [] }
# inline_div32_shiftright1_46_function_end_shiftright1
# t16 <- hi U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }", "Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] }))", "Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })", "Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })", "Ident(\"hi\")", "Ident(\"hi\")"] }
# optimized away noop copy Instruction { source: "t16 <- hi U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] }))\", \"Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })\", \"Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })\", \"Ident(\\\"hi\\\")\", \"Ident(\\\"hi\\\")\"] }", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# inline_div32_shiftright1_47_a <- t16 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }", "Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] }))", "Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })", "Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })"] }
# 01c2e Instruction { source: "inline_div32_shiftright1_47_a <- t16 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] }))\", \"Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })\", \"Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })\"] }", opcode: Copy32, args: [Register(0xa8), Register(0xac)], resolved: None }
21 a8 ac 
# inline_div32_shiftright1_47_t1 <- inline_div32_shiftright1_47_a[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))", "Index(\"a\", Number(U8, 0))", "Index(\"a\", Number(U8, 0))"] }
# 01c31 Instruction { source: "inline_div32_shiftright1_47_t1 <- inline_div32_shiftright1_47_a[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 0))\", \"Index(\\\"a\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0xac), Register(0xbd)], resolved: None }
0b ac bd 
# inline_div32_shiftright1_47_t2 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 01c34 Instruction { source: "inline_div32_shiftright1_47_t2 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0xbc), Constant8(0x01=1)], resolved: None }
04 bc 01 
# inline_div32_shiftright1_47_t0 <- inline_div32_shiftright1_47_t1 RotateRight inline_div32_shiftright1_47_t2
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1))"] }
# 01c37 Instruction { source: "inline_div32_shiftright1_47_t0 <- inline_div32_shiftright1_47_t1 RotateRight inline_div32_shiftright1_47_t2\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0xbc), Register(0xbd), Register(0xbc)], resolved: None }
1e 04 bc bd bc 
# inline_div32_shiftright1_47_a[0x00..0x01] <- inline_div32_shiftright1_47_t0 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 1)) }"] }
# 01c3c Instruction { source: "inline_div32_shiftright1_47_a[0x00..0x01] <- inline_div32_shiftright1_47_t0 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xbc), Register(0xac)], resolved: None }
0b bc ac 
# inline_div32_shiftright1_47_t4 <- inline_div32_shiftright1_47_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 01c3f Instruction { source: "inline_div32_shiftright1_47_t4 <- inline_div32_shiftright1_47_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xad), Register(0xbd)], resolved: None }
0b ad bd 
# inline_div32_shiftright1_47_t5 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 01c42 Instruction { source: "inline_div32_shiftright1_47_t5 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0xbc), Constant8(0x01=1)], resolved: None }
04 bc 01 
# inline_div32_shiftright1_47_t3 <- inline_div32_shiftright1_47_t4 RotateRight inline_div32_shiftright1_47_t5
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1))"] }
# 01c45 Instruction { source: "inline_div32_shiftright1_47_t3 <- inline_div32_shiftright1_47_t4 RotateRight inline_div32_shiftright1_47_t5\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0xbc), Register(0xbd), Register(0xbc)], resolved: None }
1e 04 bc bd bc 
# inline_div32_shiftright1_47_a[0x01..0x02] <- inline_div32_shiftright1_47_t3 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 1)) }"] }
# 01c4a Instruction { source: "inline_div32_shiftright1_47_a[0x01..0x02] <- inline_div32_shiftright1_47_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xbc), Register(0xad)], resolved: None }
0b bc ad 
# inline_div32_shiftright1_47_t7 <- inline_div32_shiftright1_47_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 01c4d Instruction { source: "inline_div32_shiftright1_47_t7 <- inline_div32_shiftright1_47_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0xae), Register(0xbd)], resolved: None }
0b ae bd 
# inline_div32_shiftright1_47_t8 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 01c50 Instruction { source: "inline_div32_shiftright1_47_t8 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0xbc), Constant8(0x01=1)], resolved: None }
04 bc 01 
# inline_div32_shiftright1_47_t6 <- inline_div32_shiftright1_47_t7 RotateRight inline_div32_shiftright1_47_t8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1))"] }
# 01c53 Instruction { source: "inline_div32_shiftright1_47_t6 <- inline_div32_shiftright1_47_t7 RotateRight inline_div32_shiftright1_47_t8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0xbc), Register(0xbd), Register(0xbc)], resolved: None }
1e 04 bc bd bc 
# inline_div32_shiftright1_47_a[0x02..0x03] <- inline_div32_shiftright1_47_t6 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 1)) }"] }
# 01c58 Instruction { source: "inline_div32_shiftright1_47_a[0x02..0x03] <- inline_div32_shiftright1_47_t6 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xbc), Register(0xae)], resolved: None }
0b bc ae 
# inline_div32_shiftright1_47_t10 <- inline_div32_shiftright1_47_a[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))", "Index(\"a\", Number(U8, 3))", "Index(\"a\", Number(U8, 3))"] }
# 01c5b Instruction { source: "inline_div32_shiftright1_47_t10 <- inline_div32_shiftright1_47_a[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0xaf), Register(0xbd)], resolved: None }
0b af bd 
# inline_div32_shiftright1_47_t11 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 01c5e Instruction { source: "inline_div32_shiftright1_47_t11 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0xbc), Constant8(0x01=1)], resolved: None }
04 bc 01 
# inline_div32_shiftright1_47_t9 <- inline_div32_shiftright1_47_t10 RotateRight inline_div32_shiftright1_47_t11
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1))"] }
# 01c61 Instruction { source: "inline_div32_shiftright1_47_t9 <- inline_div32_shiftright1_47_t10 RotateRight inline_div32_shiftright1_47_t11\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0xbc), Register(0xbd), Register(0xbc)], resolved: None }
1e 04 bc bd bc 
# inline_div32_shiftright1_47_a[0x03..0x04] <- inline_div32_shiftright1_47_t9 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 1)) }"] }
# 01c66 Instruction { source: "inline_div32_shiftright1_47_a[0x03..0x04] <- inline_div32_shiftright1_47_t9 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0xbc), Register(0xaf)], resolved: None }
0b bc af 
# inline_div32_shiftright1_47_t13 <- inline_div32_shiftright1_47_a[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))", "Index(\"a\", Number(U8, 0))", "Index(\"a\", Number(U8, 0))"] }
# 01c69 Instruction { source: "inline_div32_shiftright1_47_t13 <- inline_div32_shiftright1_47_a[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\", \"Index(\\\"a\\\", Number(U8, 0))\", \"Index(\\\"a\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0xac), Register(0xbd)], resolved: None }
0b ac bd 
# inline_div32_shiftright1_47_t14 <- 0n127/0x7fu8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))", "Number(U8, 127)", "Number(U8, 127)"] }
# 01c6c Instruction { source: "inline_div32_shiftright1_47_t14 <- 0n127/0x7fu8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\", \"Number(U8, 127)\", \"Number(U8, 127)\"] }", opcode: LoadImm8, args: [Register(0xbc), Constant8(0x7f=127)], resolved: None }
04 bc 7f 
# inline_div32_shiftright1_47_t12 <- inline_div32_shiftright1_47_t13 BitwiseAnd inline_div32_shiftright1_47_t14
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127))"] }
# 01c6f Instruction { source: "inline_div32_shiftright1_47_t12 <- inline_div32_shiftright1_47_t13 BitwiseAnd inline_div32_shiftright1_47_t14\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127))\"] }", opcode: And8, args: [Register(0xbd), Register(0xbc), Register(0xbc)], resolved: None }
1b bd bc bc 
# inline_div32_shiftright1_47_a[0x00..0x01] <- inline_div32_shiftright1_47_t12 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 127)) }"] }
# 01c73 Instruction { source: "inline_div32_shiftright1_47_a[0x00..0x01] <- inline_div32_shiftright1_47_t12 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 127)) }\"] }", opcode: Copy8, args: [Register(0xbc), Register(0xac)], resolved: None }
0b bc ac 
# inline_div32_shiftright1_47_t16 <- inline_div32_shiftright1_47_a[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Index(\"a\", Number(U8, 0))", "Index(\"a\", Number(U8, 0))"] }
# 01c76 Instruction { source: "inline_div32_shiftright1_47_t16 <- inline_div32_shiftright1_47_a[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Index(\\\"a\\\", Number(U8, 0))\", \"Index(\\\"a\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0xac), Register(0xbd)], resolved: None }
0b ac bd 
# inline_div32_shiftright1_47_t18 <- inline_div32_shiftright1_47_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 01c79 Instruction { source: "inline_div32_shiftright1_47_t18 <- inline_div32_shiftright1_47_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xad), Register(0xbc)], resolved: None }
0b ad bc 
# inline_div32_shiftright1_47_t19 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))", "Number(U8, 128)", "Number(U8, 128)"] }
# 01c7c Instruction { source: "inline_div32_shiftright1_47_t19 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0xc6), Constant8(0x80=128)], resolved: None }
04 c6 80 
# inline_div32_shiftright1_47_t17 <- inline_div32_shiftright1_47_t18 BitwiseAnd inline_div32_shiftright1_47_t19
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))"] }
# 01c7f Instruction { source: "inline_div32_shiftright1_47_t17 <- inline_div32_shiftright1_47_t18 BitwiseAnd inline_div32_shiftright1_47_t19\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))\"] }", opcode: And8, args: [Register(0xbc), Register(0xc6), Register(0xbc)], resolved: None }
1b bc c6 bc 
# inline_div32_shiftright1_47_t15 <- inline_div32_shiftright1_47_t16 BitwiseOr inline_div32_shiftright1_47_t17
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128)))"] }
# 01c83 Instruction { source: "inline_div32_shiftright1_47_t15 <- inline_div32_shiftright1_47_t16 BitwiseOr inline_div32_shiftright1_47_t17\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128)))\"] }", opcode: Or8, args: [Register(0xbd), Register(0xbc), Register(0xbc)], resolved: None }
1c bd bc bc 
# inline_div32_shiftright1_47_a[0x00..0x01] <- inline_div32_shiftright1_47_t15 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 128))) }"] }
# 01c87 Instruction { source: "inline_div32_shiftright1_47_a[0x00..0x01] <- inline_div32_shiftright1_47_t15 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 128))) }\"] }", opcode: Copy8, args: [Register(0xbc), Register(0xac)], resolved: None }
0b bc ac 
# inline_div32_shiftright1_47_t21 <- inline_div32_shiftright1_47_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 01c8a Instruction { source: "inline_div32_shiftright1_47_t21 <- inline_div32_shiftright1_47_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xad), Register(0xbd)], resolved: None }
0b ad bd 
# inline_div32_shiftright1_47_t22 <- 0n127/0x7fu8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))", "Number(U8, 127)", "Number(U8, 127)"] }
# 01c8d Instruction { source: "inline_div32_shiftright1_47_t22 <- 0n127/0x7fu8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\", \"Number(U8, 127)\", \"Number(U8, 127)\"] }", opcode: LoadImm8, args: [Register(0xbc), Constant8(0x7f=127)], resolved: None }
04 bc 7f 
# inline_div32_shiftright1_47_t20 <- inline_div32_shiftright1_47_t21 BitwiseAnd inline_div32_shiftright1_47_t22
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127))"] }
# 01c90 Instruction { source: "inline_div32_shiftright1_47_t20 <- inline_div32_shiftright1_47_t21 BitwiseAnd inline_div32_shiftright1_47_t22\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127))\"] }", opcode: And8, args: [Register(0xbd), Register(0xbc), Register(0xbc)], resolved: None }
1b bd bc bc 
# inline_div32_shiftright1_47_a[0x01..0x02] <- inline_div32_shiftright1_47_t20 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 127)) }"] }
# 01c94 Instruction { source: "inline_div32_shiftright1_47_a[0x01..0x02] <- inline_div32_shiftright1_47_t20 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 127)) }\"] }", opcode: Copy8, args: [Register(0xbc), Register(0xad)], resolved: None }
0b bc ad 
# inline_div32_shiftright1_47_t24 <- inline_div32_shiftright1_47_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 01c97 Instruction { source: "inline_div32_shiftright1_47_t24 <- inline_div32_shiftright1_47_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0xad), Register(0xbd)], resolved: None }
0b ad bd 
# inline_div32_shiftright1_47_t26 <- inline_div32_shiftright1_47_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 01c9a Instruction { source: "inline_div32_shiftright1_47_t26 <- inline_div32_shiftright1_47_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0xae), Register(0xbc)], resolved: None }
0b ae bc 
# inline_div32_shiftright1_47_t27 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))", "Number(U8, 128)", "Number(U8, 128)"] }
# 01c9d Instruction { source: "inline_div32_shiftright1_47_t27 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0xc6), Constant8(0x80=128)], resolved: None }
04 c6 80 
# inline_div32_shiftright1_47_t25 <- inline_div32_shiftright1_47_t26 BitwiseAnd inline_div32_shiftright1_47_t27
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))"] }
# 01ca0 Instruction { source: "inline_div32_shiftright1_47_t25 <- inline_div32_shiftright1_47_t26 BitwiseAnd inline_div32_shiftright1_47_t27\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))\"] }", opcode: And8, args: [Register(0xbc), Register(0xc6), Register(0xbc)], resolved: None }
1b bc c6 bc 
# inline_div32_shiftright1_47_t23 <- inline_div32_shiftright1_47_t24 BitwiseOr inline_div32_shiftright1_47_t25
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128)))"] }
# 01ca4 Instruction { source: "inline_div32_shiftright1_47_t23 <- inline_div32_shiftright1_47_t24 BitwiseOr inline_div32_shiftright1_47_t25\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128)))\"] }", opcode: Or8, args: [Register(0xbd), Register(0xbc), Register(0xbc)], resolved: None }
1c bd bc bc 
# inline_div32_shiftright1_47_a[0x01..0x02] <- inline_div32_shiftright1_47_t23 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 128))) }"] }
# 01ca8 Instruction { source: "inline_div32_shiftright1_47_a[0x01..0x02] <- inline_div32_shiftright1_47_t23 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 128))) }\"] }", opcode: Copy8, args: [Register(0xbc), Register(0xad)], resolved: None }
0b bc ad 
# inline_div32_shiftright1_47_t29 <- inline_div32_shiftright1_47_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 01cab Instruction { source: "inline_div32_shiftright1_47_t29 <- inline_div32_shiftright1_47_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0xae), Register(0xbd)], resolved: None }
0b ae bd 
# inline_div32_shiftright1_47_t30 <- 0n127/0x7fu8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))", "Number(U8, 127)", "Number(U8, 127)"] }
# 01cae Instruction { source: "inline_div32_shiftright1_47_t30 <- 0n127/0x7fu8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\", \"Number(U8, 127)\", \"Number(U8, 127)\"] }", opcode: LoadImm8, args: [Register(0xbc), Constant8(0x7f=127)], resolved: None }
04 bc 7f 
# inline_div32_shiftright1_47_t28 <- inline_div32_shiftright1_47_t29 BitwiseAnd inline_div32_shiftright1_47_t30
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127))"] }
# 01cb1 Instruction { source: "inline_div32_shiftright1_47_t28 <- inline_div32_shiftright1_47_t29 BitwiseAnd inline_div32_shiftright1_47_t30\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127))\"] }", opcode: And8, args: [Register(0xbd), Register(0xbc), Register(0xbc)], resolved: None }
1b bd bc bc 
# inline_div32_shiftright1_47_a[0x02..0x03] <- inline_div32_shiftright1_47_t28 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 127)) }"] }
# 01cb5 Instruction { source: "inline_div32_shiftright1_47_a[0x02..0x03] <- inline_div32_shiftright1_47_t28 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 127)) }\"] }", opcode: Copy8, args: [Register(0xbc), Register(0xae)], resolved: None }
0b bc ae 
# inline_div32_shiftright1_47_t32 <- inline_div32_shiftright1_47_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 01cb8 Instruction { source: "inline_div32_shiftright1_47_t32 <- inline_div32_shiftright1_47_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0xae), Register(0xbd)], resolved: None }
0b ae bd 
# inline_div32_shiftright1_47_t34 <- inline_div32_shiftright1_47_a[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))", "Index(\"a\", Number(U8, 3))", "Index(\"a\", Number(U8, 3))"] }
# 01cbb Instruction { source: "inline_div32_shiftright1_47_t34 <- inline_div32_shiftright1_47_a[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\", \"Index(\\\"a\\\", Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0xaf), Register(0xbc)], resolved: None }
0b af bc 
# inline_div32_shiftright1_47_t35 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))", "Number(U8, 128)", "Number(U8, 128)"] }
# 01cbe Instruction { source: "inline_div32_shiftright1_47_t35 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0xc6), Constant8(0x80=128)], resolved: None }
04 c6 80 
# inline_div32_shiftright1_47_t33 <- inline_div32_shiftright1_47_t34 BitwiseAnd inline_div32_shiftright1_47_t35
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))"] }
# 01cc1 Instruction { source: "inline_div32_shiftright1_47_t33 <- inline_div32_shiftright1_47_t34 BitwiseAnd inline_div32_shiftright1_47_t35\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))\"] }", opcode: And8, args: [Register(0xbc), Register(0xc6), Register(0xbc)], resolved: None }
1b bc c6 bc 
# inline_div32_shiftright1_47_t31 <- inline_div32_shiftright1_47_t32 BitwiseOr inline_div32_shiftright1_47_t33
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128)))"] }
# 01cc5 Instruction { source: "inline_div32_shiftright1_47_t31 <- inline_div32_shiftright1_47_t32 BitwiseOr inline_div32_shiftright1_47_t33\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128)))\"] }", opcode: Or8, args: [Register(0xbd), Register(0xbc), Register(0xbc)], resolved: None }
1c bd bc bc 
# inline_div32_shiftright1_47_a[0x02..0x03] <- inline_div32_shiftright1_47_t31 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 128))) }"] }
# 01cc9 Instruction { source: "inline_div32_shiftright1_47_a[0x02..0x03] <- inline_div32_shiftright1_47_t31 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 128))) }\"] }", opcode: Copy8, args: [Register(0xbc), Register(0xae)], resolved: None }
0b bc ae 
# inline_div32_shiftright1_47_t37 <- inline_div32_shiftright1_47_a[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))", "Index(\"a\", Number(U8, 3))", "Index(\"a\", Number(U8, 3))"] }
# 01ccc Instruction { source: "inline_div32_shiftright1_47_t37 <- inline_div32_shiftright1_47_a[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\", \"Index(\\\"a\\\", Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0xaf), Register(0xbd)], resolved: None }
0b af bd 
# inline_div32_shiftright1_47_t38 <- 0n127/0x7fu8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))", "Number(U8, 127)", "Number(U8, 127)"] }
# 01ccf Instruction { source: "inline_div32_shiftright1_47_t38 <- 0n127/0x7fu8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\", \"Number(U8, 127)\", \"Number(U8, 127)\"] }", opcode: LoadImm8, args: [Register(0xbc), Constant8(0x7f=127)], resolved: None }
04 bc 7f 
# inline_div32_shiftright1_47_t36 <- inline_div32_shiftright1_47_t37 BitwiseAnd inline_div32_shiftright1_47_t38
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127)) }", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127))"] }
# 01cd2 Instruction { source: "inline_div32_shiftright1_47_t36 <- inline_div32_shiftright1_47_t37 BitwiseAnd inline_div32_shiftright1_47_t38\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127))\"] }", opcode: And8, args: [Register(0xbd), Register(0xbc), Register(0xbc)], resolved: None }
1b bd bc bc 
# inline_div32_shiftright1_47_a[0x03..0x04] <- inline_div32_shiftright1_47_t36 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 127)) }"] }
# 01cd6 Instruction { source: "inline_div32_shiftright1_47_a[0x03..0x04] <- inline_div32_shiftright1_47_t36 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 127)) }\"] }", opcode: Copy8, args: [Register(0xbc), Register(0xaf)], resolved: None }
0b bc af 
# inline_div32_shiftright1_47_t39 <- inline_div32_shiftright1_47_a U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"a\")) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_div32_shiftright1_47_t39 <- inline_div32_shiftright1_47_a U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"a\\\")) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# t15 <- inline_div32_shiftright1_47_t39 U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"a\")) }"] }
# optimized away noop copy Instruction { source: "t15 <- inline_div32_shiftright1_47_t39 U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"a\\\")) }\"] }", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# goto inline_div32_shiftright1_47_function_end_shiftright1
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"a\")) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_div32_shiftright1_47_function_end_shiftright1\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"a\\\")) }\"] }", opcode: JmpImm, args: [Label24(inline_div32_shiftright1_47_function_end_shiftright1)], resolved: None }
# :inline_div32_shiftright1_47_function_end_shiftright1
# 	SourceContext { contexts: [] }
# inline_div32_shiftright1_47_function_end_shiftright1
# mid <- t13 Add t15
# 	SourceContext { contexts: ["Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }", "Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] }))"] }
# 01cd9 Instruction { source: "mid <- t13 Add t15\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] }))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01cda Instruction { source: "mid <- t13 Add t15\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] }))\"] }", opcode: AddCarry32_1, args: [Register(0xc0), Register(0xac), Register(0xac)], resolved: None }
30 c0 ac ac 
# 01cde Instruction { source: "mid <- t13 Add t15\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"mid\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] })) }\", \"Arithmetic(Add, Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"lo\\\")] }), Call(Call { function: \\\"shiftright1\\\", parameters: [Ident(\\\"hi\\\")] }))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t18 <- mid U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })", "Ident(\"mid\")", "Ident(\"mid\")"] }
# optimized away noop copy Instruction { source: "t18 <- mid U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"Ident(\\\"mid\\\")\", \"Ident(\\\"mid\\\")\"] }", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# t19 <- b U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "t19 <- b U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# t22 <- __frame_pointer U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })", "AddressOf(Ident(\"x64\"))", "AddressOf(Ident(\"x64\"))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))", "Ident(\"__frame_pointer\")", "Ident(\"__frame_pointer\")"] }
# 01cdf Instruction { source: "t22 <- __frame_pointer U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"AddressOf(Ident(\\\"x64\\\"))\", \"AddressOf(Ident(\\\"x64\\\"))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Ident(\\\"__frame_pointer\\\")\", \"Ident(\\\"__frame_pointer\\\")\"] }", opcode: Copy32, args: [Register(0x0c), Register(0xd4)], resolved: None }
21 0c d4 
# t23 <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })", "AddressOf(Ident(\"x64\"))", "AddressOf(Ident(\"x64\"))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 01ce2 Instruction { source: "t23 <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"AddressOf(Ident(\\\"x64\\\"))\", \"AddressOf(Ident(\\\"x64\\\"))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0xb0), Constant32(0x00000000=0)], resolved: None }
20 b0 00 00 00 00 
# t21 <- t22 Add t23
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })", "AddressOf(Ident(\"x64\"))", "AddressOf(Ident(\"x64\"))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))"] }
# 01ce8 Instruction { source: "t21 <- t22 Add t23\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"AddressOf(Ident(\\\"x64\\\"))\", \"AddressOf(Ident(\\\"x64\\\"))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01ce9 Instruction { source: "t21 <- t22 Add t23\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"AddressOf(Ident(\\\"x64\\\"))\", \"AddressOf(Ident(\\\"x64\\\"))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\"] }", opcode: AddCarry32_1, args: [Register(0xd4), Register(0xb0), Register(0xb0)], resolved: None }
30 d4 b0 b0 
# 01ced Instruction { source: "t21 <- t22 Add t23\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"AddressOf(Ident(\\\"x64\\\"))\", \"AddressOf(Ident(\\\"x64\\\"))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t20 <- t21 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })", "AddressOf(Ident(\"x64\"))", "AddressOf(Ident(\"x64\"))"] }
# optimized away noop copy Instruction { source: "t20 <- t21 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"AddressOf(Ident(\\\"x64\\\"))\", \"AddressOf(Ident(\\\"x64\\\"))\"] }", opcode: Copy32, args: [Register(0xb0), Register(0xb0)], resolved: None }
# None <= call mul32_64(t18,t19,t20,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })"] }
# 01cee Instruction { source: "Arg0[a]=t18 None <= call mul32_64(t18,t19,t20,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\"] }", opcode: Copy32, args: [Register(0xac), Register(0x00)], resolved: None }
21 ac 00 
# 01cf1 Instruction { source: "Arg1[b]=t19 None <= call mul32_64(t18,t19,t20,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\"] }", opcode: Copy32, args: [Register(0xa4), Register(0x04)], resolved: None }
21 a4 04 
# 01cf4 Instruction { source: "Arg2[c]=t20 None <= call mul32_64(t18,t19,t20,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"mid\\\"), Ident(\\\"b\\\"), AddressOf(Ident(\\\"x64\\\"))] })\"] }", opcode: Copy32, args: [Register(0xb0), Register(0x08)], resolved: None }
21 b0 08 
# Registers used by this function: {160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215}
# Registers used by callee tree: {72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 124, 125, 126, 127, 128, 132, 133, 134, 135, 136, 137, 138, 139}
# Registers to save: []
# 01cf7 Instruction { source: "PseudoCall(Label24(:mul32_64))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 01cfd Instruction { source: "PseudoCall(Label24(:mul32_64))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 07 1d 00 00 
# 01d03 Instruction { source: "PseudoCall(Label24(:mul32_64))", opcode: JmpImm, args: [Label24(:mul32_64)], resolved: None }
70 fb 24 00 
# 01d07 Instruction { source: "PseudoCall(Label24(:mul32_64))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# t26 <- __frame_pointer U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }", "LocalFieldDeref(\"x64\", \"hi\")", "LocalFieldDeref(\"x64\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4))", "Ident(\"__frame_pointer\")", "Ident(\"__frame_pointer\")"] }
# 01d0d Instruction { source: "t26 <- __frame_pointer U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }\", \"LocalFieldDeref(\\\"x64\\\", \\\"hi\\\")\", \"LocalFieldDeref(\\\"x64\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4))\", \"Ident(\\\"__frame_pointer\\\")\", \"Ident(\\\"__frame_pointer\\\")\"] }", opcode: Copy32, args: [Register(0x0c), Register(0xd4)], resolved: None }
21 0c d4 
# t27 <- 0n4/0x00000004u32 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }", "LocalFieldDeref(\"x64\", \"hi\")", "LocalFieldDeref(\"x64\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 01d10 Instruction { source: "t27 <- 0n4/0x00000004u32 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }\", \"LocalFieldDeref(\\\"x64\\\", \\\"hi\\\")\", \"LocalFieldDeref(\\\"x64\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: LoadImm32, args: [Register(0xb0), Constant32(0x00000004=4)], resolved: None }
20 b0 04 00 00 00 
# t25 <- t26 Add t27
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }", "LocalFieldDeref(\"x64\", \"hi\")", "LocalFieldDeref(\"x64\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4))"] }
# 01d16 Instruction { source: "t25 <- t26 Add t27\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }\", \"LocalFieldDeref(\\\"x64\\\", \\\"hi\\\")\", \"LocalFieldDeref(\\\"x64\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01d17 Instruction { source: "t25 <- t26 Add t27\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }\", \"LocalFieldDeref(\\\"x64\\\", \\\"hi\\\")\", \"LocalFieldDeref(\\\"x64\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0xd4), Register(0xb0), Register(0xb0)], resolved: None }
30 d4 b0 b0 
# 01d1b Instruction { source: "t25 <- t26 Add t27\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }\", \"LocalFieldDeref(\\\"x64\\\", \\\"hi\\\")\", \"LocalFieldDeref(\\\"x64\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t24 <- mem[t25] U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }", "LocalFieldDeref(\"x64\", \"hi\")", "LocalFieldDeref(\"x64\", \"hi\")"] }
# 01d1c Instruction { source: "t24 <- mem[t25] U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }\", \"LocalFieldDeref(\\\"x64\\\", \\\"hi\\\")\", \"LocalFieldDeref(\\\"x64\\\", \\\"hi\\\")\"] }", opcode: Load32, args: [Register(0xb0), Register(0xb0)], resolved: None }
22 b0 b0 
# t28 <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 01d1f Instruction { source: "t28 <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0xb4), Constant32(0x00000000=0)], resolved: None }
20 b4 00 00 00 00 
# if t24 > t28 then 'div32_if_true_0_10' else 'div32_if_else_0_11'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }"] }
# 01d25 Instruction { source: "if t24 > t28 then 'div32_if_true_0_10' else 'div32_if_else_0_11'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }\"] }", opcode: Cmp8, args: [Register(0xb3), Register(0xb7)], resolved: None }
15 b3 b7 
# 01d28 Instruction { source: "if t24 > t28 then 'div32_if_true_0_10' else 'div32_if_else_0_11'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }\"] }", opcode: Cmp8IfZero, args: [Register(0xb2), Register(0xb6)], resolved: None }
16 b2 b6 
# 01d2b Instruction { source: "if t24 > t28 then 'div32_if_true_0_10' else 'div32_if_else_0_11'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }\"] }", opcode: Cmp8IfZero, args: [Register(0xb1), Register(0xb5)], resolved: None }
16 b1 b5 
# 01d2e Instruction { source: "if t24 > t28 then 'div32_if_true_0_10' else 'div32_if_else_0_11'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }\"] }", opcode: Cmp8IfZero, args: [Register(0xb0), Register(0xb4)], resolved: None }
16 b0 b4 
# 01d31 Instruction { source: "if t24 > t28 then 'div32_if_true_0_10' else 'div32_if_else_0_11'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }\"] }", opcode: JcImm, args: [Label24(div32_if_else_0_11)], resolved: None }
71 5d 1d 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t24 > t28 then 'div32_if_true_0_10' else 'div32_if_else_0_11'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: LocalFieldDeref(\\\"x64\\\", \\\"hi\\\"), right: Number(USIZE, 0) }\"] }", opcode: JmpImm, args: [Label24(div32_if_true_0_10)], resolved: None }
# :div32_if_true_0_10
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }"] }
# div32_if_true_0_10
# t29 <- mid U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))", "Ident(\"mid\")", "Ident(\"mid\")"] }
# 01d35 Instruction { source: "t29 <- mid U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\", \"Ident(\\\"mid\\\")\", \"Ident(\\\"mid\\\")\"] }", opcode: Copy32, args: [Register(0xac), Register(0xa8)], resolved: None }
21 ac a8 
# t30 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 01d38 Instruction { source: "t30 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0xac), Constant32(0x00000001=1)], resolved: None }
20 ac 01 00 00 00 
# hi <- t29 Subtract t30
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))"] }
# 01d3e Instruction { source: "hi <- t29 Subtract t30\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Copy32, args: [Register(0xac), Register(0x00)], resolved: None }
21 ac 00 
# 01d41 Instruction { source: "hi <- t29 Subtract t30\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x00)], resolved: None }
01 00 
# 01d43 Instruction { source: "hi <- t29 Subtract t30\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x01)], resolved: None }
01 01 
# 01d45 Instruction { source: "hi <- t29 Subtract t30\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x02)], resolved: None }
01 02 
# 01d47 Instruction { source: "hi <- t29 Subtract t30\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x03)], resolved: None }
01 03 
# 01d49 Instruction { source: "hi <- t29 Subtract t30\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x00), Constant32(0x00000001=1)], resolved: None }
32 00 01 00 00 00 
# 01d4f Instruction { source: "hi <- t29 Subtract t30\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01d50 Instruction { source: "hi <- t29 Subtract t30\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_1, args: [Register(0xa8), Register(0x00), Register(0xa8)], resolved: None }
30 a8 00 a8 
# 01d54 Instruction { source: "hi <- t29 Subtract t30\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# goto div32_while_predicate_6
# 	SourceContext { contexts: ["Continue"] }
# 01d55 Instruction { source: "goto div32_while_predicate_6\n\tSourceContext { contexts: [\"Continue\"] }", opcode: JmpImm, args: [Label24(div32_while_predicate_6)], resolved: None }
70 6d 1b 00 
# goto div32_if_end_9
# 	SourceContext { contexts: [] }
# 01d59 Instruction { source: "goto div32_if_end_9\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(div32_if_end_9)], resolved: None }
70 5d 1d 00 
# :div32_if_else_0_11
# 	SourceContext { contexts: [] }
# div32_if_else_0_11
# :div32_if_end_9
# 	SourceContext { contexts: [] }
# div32_if_end_9
# t31 <- __frame_pointer U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\"x64\", \"lo\") }", "LocalFieldDeref(\"x64\", \"lo\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident(\"__frame_pointer\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident(\"__frame_pointer\") }", "Ident(\"__frame_pointer\")"] }
# 01d5d Instruction { source: "t31 <- __frame_pointer U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\\\"x64\\\", \\\"lo\\\") }\", \"LocalFieldDeref(\\\"x64\\\", \\\"lo\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident(\\\"__frame_pointer\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident(\\\"__frame_pointer\\\") }\", \"Ident(\\\"__frame_pointer\\\")\"] }", opcode: Copy32, args: [Register(0x0c), Register(0xd4)], resolved: None }
21 0c d4 
# x <- mem[t31] U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\"x64\", \"lo\") }", "LocalFieldDeref(\"x64\", \"lo\")"] }
# 01d60 Instruction { source: "x <- mem[t31] U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"x\\\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\\\"x64\\\", \\\"lo\\\") }\", \"LocalFieldDeref(\\\"x64\\\", \\\"lo\\\")\"] }", opcode: Load32, args: [Register(0xd4), Register(0xb0)], resolved: None }
22 d4 b0 
# t32 <- x U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }", "Ident(\"x\")", "Ident(\"x\")"] }
# optimized away noop copy Instruction { source: "t32 <- x U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\", \"Ident(\\\"x\\\")\", \"Ident(\\\"x\\\")\"] }", opcode: Copy32, args: [Register(0xb0), Register(0xb0)], resolved: None }
# t33 <- a U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t33 <- a U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# if t32 > t33 then 'div32_if_true_0_13' else 'div32_if_else_0_14'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }", "Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }"] }
# 01d63 Instruction { source: "if t32 > t33 then 'div32_if_true_0_13' else 'div32_if_else_0_14'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8, args: [Register(0xb3), Register(0xa3)], resolved: None }
15 b3 a3 
# 01d66 Instruction { source: "if t32 > t33 then 'div32_if_true_0_13' else 'div32_if_else_0_14'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xb2), Register(0xa2)], resolved: None }
16 b2 a2 
# 01d69 Instruction { source: "if t32 > t33 then 'div32_if_true_0_13' else 'div32_if_else_0_14'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xb1), Register(0xa1)], resolved: None }
16 b1 a1 
# 01d6c Instruction { source: "if t32 > t33 then 'div32_if_true_0_13' else 'div32_if_else_0_14'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xb0), Register(0xa0)], resolved: None }
16 b0 a0 
# 01d6f Instruction { source: "if t32 > t33 then 'div32_if_true_0_13' else 'div32_if_else_0_14'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: JcImm, args: [Label24(div32_if_else_0_14)], resolved: None }
71 9b 1d 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t32 > t33 then 'div32_if_true_0_13' else 'div32_if_else_0_14'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }, Continue])], else_block: [] }\", \"Comparison { op: GreaterThan, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: JmpImm, args: [Label24(div32_if_true_0_13)], resolved: None }
# :div32_if_true_0_13
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }"] }
# div32_if_true_0_13
# t34 <- mid U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))", "Ident(\"mid\")", "Ident(\"mid\")"] }
# 01d73 Instruction { source: "t34 <- mid U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\", \"Ident(\\\"mid\\\")\", \"Ident(\\\"mid\\\")\"] }", opcode: Copy32, args: [Register(0xac), Register(0xa8)], resolved: None }
21 ac a8 
# t35 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 01d76 Instruction { source: "t35 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0xac), Constant32(0x00000001=1)], resolved: None }
20 ac 01 00 00 00 
# hi <- t34 Subtract t35
# 	SourceContext { contexts: ["Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))"] }
# 01d7c Instruction { source: "hi <- t34 Subtract t35\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Copy32, args: [Register(0xac), Register(0x00)], resolved: None }
21 ac 00 
# 01d7f Instruction { source: "hi <- t34 Subtract t35\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x00)], resolved: None }
01 00 
# 01d81 Instruction { source: "hi <- t34 Subtract t35\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x01)], resolved: None }
01 01 
# 01d83 Instruction { source: "hi <- t34 Subtract t35\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x02)], resolved: None }
01 02 
# 01d85 Instruction { source: "hi <- t34 Subtract t35\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: Invert8, args: [Register(0x03)], resolved: None }
01 03 
# 01d87 Instruction { source: "hi <- t34 Subtract t35\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x00), Constant32(0x00000001=1)], resolved: None }
32 00 01 00 00 00 
# 01d8d Instruction { source: "hi <- t34 Subtract t35\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01d8e Instruction { source: "hi <- t34 Subtract t35\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_1, args: [Register(0xa8), Register(0x00), Register(0xa8)], resolved: None }
30 a8 00 a8 
# 01d92 Instruction { source: "hi <- t34 Subtract t35\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"hi\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# goto div32_while_predicate_6
# 	SourceContext { contexts: ["Continue"] }
# 01d93 Instruction { source: "goto div32_while_predicate_6\n\tSourceContext { contexts: [\"Continue\"] }", opcode: JmpImm, args: [Label24(div32_while_predicate_6)], resolved: None }
70 6d 1b 00 
# goto div32_if_end_12
# 	SourceContext { contexts: [] }
# 01d97 Instruction { source: "goto div32_if_end_12\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(div32_if_end_12)], resolved: None }
70 9b 1d 00 
# :div32_if_else_0_14
# 	SourceContext { contexts: [] }
# div32_if_else_0_14
# :div32_if_end_12
# 	SourceContext { contexts: [] }
# div32_if_end_12
# t36 <- x U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }", "Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }", "Ident(\"x\")", "Ident(\"x\")"] }
# optimized away noop copy Instruction { source: "t36 <- x U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\", \"Ident(\\\"x\\\")\", \"Ident(\\\"x\\\")\"] }", opcode: Copy32, args: [Register(0xb0), Register(0xb0)], resolved: None }
# t37 <- a U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }", "Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t37 <- a U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# if t36 == t37 then 'div32_if_true_0_16' else 'div32_if_else_0_17'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }", "Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }"] }
# 01d9b Instruction { source: "if t36 == t37 then 'div32_if_true_0_16' else 'div32_if_else_0_17'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8, args: [Register(0xb3), Register(0xa3)], resolved: None }
15 b3 a3 
# 01d9e Instruction { source: "if t36 == t37 then 'div32_if_true_0_16' else 'div32_if_else_0_17'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xb2), Register(0xa2)], resolved: None }
16 b2 a2 
# 01da1 Instruction { source: "if t36 == t37 then 'div32_if_true_0_16' else 'div32_if_else_0_17'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xb1), Register(0xa1)], resolved: None }
16 b1 a1 
# 01da4 Instruction { source: "if t36 == t37 then 'div32_if_true_0_16' else 'div32_if_else_0_17'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xb0), Register(0xa0)], resolved: None }
16 b0 a0 
# 01da7 Instruction { source: "if t36 == t37 then 'div32_if_true_0_16' else 'div32_if_else_0_17'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: JzImm, args: [Label24(div32_if_true_0_16)], resolved: None }
72 af 1d 00 
# 01dab Instruction { source: "if t36 == t37 then 'div32_if_true_0_16' else 'div32_if_else_0_17'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"x\\\"), right: Ident(\\\"a\\\") }\"] }", opcode: JmpImm, args: [Label24(div32_if_else_0_17)], resolved: None }
70 cd 1d 00 
# :div32_if_true_0_16
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }"] }
# div32_if_true_0_16
# t38 <- mid U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"mid\")) }", "Ident(\"mid\")", "Ident(\"mid\")"] }
# 01daf Instruction { source: "t38 <- mid U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\", \"Ident(\\\"mid\\\")\", \"Ident(\\\"mid\\\")\"] }", opcode: Copy32, args: [Register(0xac), Register(0xa0)], resolved: None }
21 ac a0 
# t39 <- 0n8/0x00000008u32 
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"mid\")) }"] }
# 01db2 Instruction { source: "t39 <- 0n8/0x00000008u32 \n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\"] }", opcode: LoadImm32, args: [Register(0xa4), Constant32(0x00000008=8)], resolved: None }
20 a4 08 00 00 00 
# __frame_pointer <- __frame_pointer Add t39
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"mid\")) }"] }
# 01db8 Instruction { source: "__frame_pointer <- __frame_pointer Add t39\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01db9 Instruction { source: "__frame_pointer <- __frame_pointer Add t39\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\"] }", opcode: AddCarry32_1, args: [Register(0x0c), Register(0xa4), Register(0x0c)], resolved: None }
30 0c a4 0c 
# 01dbd Instruction { source: "__frame_pointer <- __frame_pointer Add t39\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# return Some(t38)
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"mid\")) }"] }
# 01dbe Instruction { source: "return Some(t38)\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\"] }", opcode: Copy32, args: [Register(0xa0), Register(0x00)], resolved: None }
21 a0 00 
# 01dc1 Instruction { source: "Dealloc 8 bytes from stack", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000008=8)], resolved: None }
32 0c 08 00 00 00 
# 01dc7 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# goto div32_if_end_15
# 	SourceContext { contexts: [] }
# 01dc9 Instruction { source: "goto div32_if_end_15\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(div32_if_end_15)], resolved: None }
70 cd 1d 00 
# :div32_if_else_0_17
# 	SourceContext { contexts: [] }
# div32_if_else_0_17
# :div32_if_end_15
# 	SourceContext { contexts: [] }
# div32_if_end_15
# t40 <- a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }", "Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t40 <- a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# t41 <- x U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }", "Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\"))", "Ident(\"x\")", "Ident(\"x\")"] }
# optimized away noop copy Instruction { source: "t41 <- x U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\", \"Ident(\\\"x\\\")\", \"Ident(\\\"x\\\")\"] }", opcode: Copy32, args: [Register(0xb0), Register(0xb0)], resolved: None }
# r <- t40 Subtract t41
# 	SourceContext { contexts: ["Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }", "Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\"))"] }
# 01dcd Instruction { source: "r <- t40 Subtract t41\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: Copy32, args: [Register(0xb0), Register(0x00)], resolved: None }
21 b0 00 
# 01dd0 Instruction { source: "r <- t40 Subtract t41\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: Invert8, args: [Register(0x00)], resolved: None }
01 00 
# 01dd2 Instruction { source: "r <- t40 Subtract t41\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: Invert8, args: [Register(0x01)], resolved: None }
01 01 
# 01dd4 Instruction { source: "r <- t40 Subtract t41\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: Invert8, args: [Register(0x02)], resolved: None }
01 02 
# 01dd6 Instruction { source: "r <- t40 Subtract t41\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: Invert8, args: [Register(0x03)], resolved: None }
01 03 
# 01dd8 Instruction { source: "r <- t40 Subtract t41\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x00), Constant32(0x00000001=1)], resolved: None }
32 00 01 00 00 00 
# 01dde Instruction { source: "r <- t40 Subtract t41\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01ddf Instruction { source: "r <- t40 Subtract t41\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0xa0), Register(0x00), Register(0xb0)], resolved: None }
30 a0 00 b0 
# 01de3 Instruction { source: "r <- t40 Subtract t41\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"r\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\")) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Ident(\\\"x\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t42 <- r U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }", "Ident(\"r\")", "Ident(\"r\")"] }
# optimized away noop copy Instruction { source: "t42 <- r U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\", \"Ident(\\\"r\\\")\", \"Ident(\\\"r\\\")\"] }", opcode: Copy32, args: [Register(0xb0), Register(0xb0)], resolved: None }
# t43 <- b U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "t43 <- b U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# if t42 < t43 then 'div32_if_true_0_19' else 'div32_if_else_0_20'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }"] }
# 01de4 Instruction { source: "if t42 < t43 then 'div32_if_true_0_19' else 'div32_if_else_0_20'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8, args: [Register(0xa7), Register(0xb3)], resolved: None }
15 a7 b3 
# 01de7 Instruction { source: "if t42 < t43 then 'div32_if_true_0_19' else 'div32_if_else_0_20'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xa6), Register(0xb2)], resolved: None }
16 a6 b2 
# 01dea Instruction { source: "if t42 < t43 then 'div32_if_true_0_19' else 'div32_if_else_0_20'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xa5), Register(0xb1)], resolved: None }
16 a5 b1 
# 01ded Instruction { source: "if t42 < t43 then 'div32_if_true_0_19' else 'div32_if_else_0_20'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0xa4), Register(0xb0)], resolved: None }
16 a4 b0 
# 01df0 Instruction { source: "if t42 < t43 then 'div32_if_true_0_19' else 'div32_if_else_0_20'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: JcImm, args: [Label24(div32_if_else_0_20)], resolved: None }
71 12 1e 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t42 < t43 then 'div32_if_true_0_19' else 'div32_if_else_0_20'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }, [Return { value: Some(Ident(\\\"mid\\\")) }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"r\\\"), right: Ident(\\\"b\\\") }\"] }", opcode: JmpImm, args: [Label24(div32_if_true_0_19)], resolved: None }
# :div32_if_true_0_19
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }"] }
# div32_if_true_0_19
# t44 <- mid U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"mid\")) }", "Ident(\"mid\")", "Ident(\"mid\")"] }
# 01df4 Instruction { source: "t44 <- mid U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\", \"Ident(\\\"mid\\\")\", \"Ident(\\\"mid\\\")\"] }", opcode: Copy32, args: [Register(0xac), Register(0xa0)], resolved: None }
21 ac a0 
# t45 <- 0n8/0x00000008u32 
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"mid\")) }"] }
# 01df7 Instruction { source: "t45 <- 0n8/0x00000008u32 \n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\"] }", opcode: LoadImm32, args: [Register(0xa4), Constant32(0x00000008=8)], resolved: None }
20 a4 08 00 00 00 
# __frame_pointer <- __frame_pointer Add t45
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"mid\")) }"] }
# 01dfd Instruction { source: "__frame_pointer <- __frame_pointer Add t45\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01dfe Instruction { source: "__frame_pointer <- __frame_pointer Add t45\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\"] }", opcode: AddCarry32_1, args: [Register(0x0c), Register(0xa4), Register(0x0c)], resolved: None }
30 0c a4 0c 
# 01e02 Instruction { source: "__frame_pointer <- __frame_pointer Add t45\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# return Some(t44)
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"mid\")) }"] }
# 01e03 Instruction { source: "return Some(t44)\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"mid\\\")) }\"] }", opcode: Copy32, args: [Register(0xa0), Register(0x00)], resolved: None }
21 a0 00 
# 01e06 Instruction { source: "Dealloc 8 bytes from stack", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000008=8)], resolved: None }
32 0c 08 00 00 00 
# 01e0c Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# goto div32_if_end_18
# 	SourceContext { contexts: [] }
# 01e0e Instruction { source: "goto div32_if_end_18\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(div32_if_end_18)], resolved: None }
70 12 1e 00 
# :div32_if_else_0_20
# 	SourceContext { contexts: [] }
# div32_if_else_0_20
# :div32_if_end_18
# 	SourceContext { contexts: [] }
# div32_if_end_18
# t46 <- mid U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"mid\"), Number(U8, 1))", "Ident(\"mid\")", "Ident(\"mid\")"] }
# optimized away noop copy Instruction { source: "t46 <- mid U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1))\", \"Ident(\\\"mid\\\")\", \"Ident(\\\"mid\\\")\"] }", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# t47 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"mid\"), Number(U8, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 01e12 Instruction { source: "t47 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0xb0), Constant32(0x00000001=1)], resolved: None }
20 b0 01 00 00 00 
# lo <- t46 Add t47
# 	SourceContext { contexts: ["Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"mid\"), Number(U8, 1))"] }
# 01e18 Instruction { source: "lo <- t46 Add t47\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01e19 Instruction { source: "lo <- t46 Add t47\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_1, args: [Register(0xac), Register(0xb0), Register(0xb8)], resolved: None }
30 ac b0 b8 
# 01e1d Instruction { source: "lo <- t46 Add t47\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lo\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"mid\\\"), Number(U8, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# goto div32_while_predicate_6
# 	SourceContext { contexts: [] }
# 01e1e Instruction { source: "goto div32_while_predicate_6\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(div32_while_predicate_6)], resolved: None }
70 6d 1b 00 
# :div32_while_end_8
# 	SourceContext { contexts: [] }
# div32_while_end_8
# t48 <- lo U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"lo\")) }", "Ident(\"lo\")", "Ident(\"lo\")"] }
# 01e22 Instruction { source: "t48 <- lo U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"lo\\\")) }\", \"Ident(\\\"lo\\\")\", \"Ident(\\\"lo\\\")\"] }", opcode: Copy32, args: [Register(0xb8), Register(0xa0)], resolved: None }
21 b8 a0 
# t49 <- 0n8/0x00000008u32 
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"lo\")) }"] }
# 01e25 Instruction { source: "t49 <- 0n8/0x00000008u32 \n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"lo\\\")) }\"] }", opcode: LoadImm32, args: [Register(0xa4), Constant32(0x00000008=8)], resolved: None }
20 a4 08 00 00 00 
# __frame_pointer <- __frame_pointer Add t49
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"lo\")) }"] }
# 01e2b Instruction { source: "__frame_pointer <- __frame_pointer Add t49\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"lo\\\")) }\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01e2c Instruction { source: "__frame_pointer <- __frame_pointer Add t49\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"lo\\\")) }\"] }", opcode: AddCarry32_1, args: [Register(0x0c), Register(0xa4), Register(0x0c)], resolved: None }
30 0c a4 0c 
# 01e30 Instruction { source: "__frame_pointer <- __frame_pointer Add t49\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"lo\\\")) }\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# return Some(t48)
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"lo\")) }"] }
# 01e31 Instruction { source: "return Some(t48)\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"lo\\\")) }\"] }", opcode: Copy32, args: [Register(0xa0), Register(0x00)], resolved: None }
21 a0 00 
# 01e34 Instruction { source: "Dealloc 8 bytes from stack", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000008=8)], resolved: None }
32 0c 08 00 00 00 
# 01e3a Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# :function_end_div32
# 	SourceContext { contexts: [] }
# function_end_div32
# Unreachable
# 	SourceContext { contexts: [] }
# 01e3c Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
# :lcd_init
# Ret None
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var i (Local i Number(U8) Reg(U8)) Reg(U8) Some([218])
# Var lcd_current (Local lcd_current Number(U8) Reg(U8)) Reg(U8) Some([218])
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var t0 (t0 Ident("i")) Reg(U8) Some([218])
# Var t1 (t1 Number(U8, 80)) Reg(U8) Some([219])
# Var t10 (t10 Number(U8, 3)) Reg(U8) Some([218])
# Var t11 (t11 Call(Call { function: "delay", parameters: [Number(USIZE, 1)] })) Reg(U8) Some([218])
# Var t12 (t12 Number(USIZE, 1)) Reg(U32) Some([220, 221, 222, 223])
# Var t13 (t13 Call(Call { function: "io_write1", parameters: [Number(U8, 3)] })) Reg(U8) Some([218])
# Var t14 (t14 Number(U8, 3)) Reg(U8) Some([218])
# Var t15 (t15 Call(Call { function: "delay", parameters: [Number(USIZE, 1)] })) Reg(U8) Some([218])
# Var t16 (t16 Number(USIZE, 1)) Reg(U32) Some([220, 221, 222, 223])
# Var t17 (t17 Call(Call { function: "io_write1", parameters: [Number(U8, 3)] })) Reg(U8) Some([218])
# Var t18 (t18 Number(U8, 3)) Reg(U8) Some([218])
# Var t19 (t19 Call(Call { function: "delay", parameters: [Number(USIZE, 1)] })) Reg(U8) Some([218])
# Var t2 (t2 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }) Reg(U32) Some([224, 225, 226, 227])
# Var t20 (t20 Number(USIZE, 1)) Reg(U32) Some([220, 221, 222, 223])
# Var t21 (t21 Call(Call { function: "io_write1", parameters: [Number(U8, 2)] })) Reg(U8) Some([218])
# Var t22 (t22 Number(U8, 2)) Reg(U8) Some([218])
# Var t23 (t23 Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })) Reg(U8) Some([218])
# Var t24 (t24 Number(USIZE, 2)) Reg(U32) Some([220, 221, 222, 223])
# Var t25 (t25 Call(Call { function: "io_write1", parameters: [Number(U8, 2)] })) Reg(U8) Some([218])
# Var t26 (t26 Number(U8, 2)) Reg(U8) Some([218])
# Var t27 (t27 Call(Call { function: "io_write1", parameters: [Number(U8, 8)] })) Reg(U8) Some([218])
# Var t28 (t28 Number(U8, 8)) Reg(U8) Some([218])
# Var t29 (t29 Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })) Reg(U8) Some([218])
# Var t3 (t3 Number(USIZE, 987148)) Reg(U32) Some([224, 225, 226, 227])
# Var t30 (t30 Number(USIZE, 2)) Reg(U32) Some([220, 221, 222, 223])
# Var t31 (t31 Call(Call { function: "io_write1", parameters: [Number(U8, 0)] })) Reg(U8) Some([218])
# Var t32 (t32 Number(U8, 0)) Reg(U8) Some([218])
# Var t33 (t33 Call(Call { function: "io_write1", parameters: [Number(U8, 12)] })) Reg(U8) Some([218])
# Var t34 (t34 Number(U8, 12)) Reg(U8) Some([218])
# Var t35 (t35 Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })) Reg(U8) Some([218])
# Var t36 (t36 Number(USIZE, 2)) Reg(U32) Some([220, 221, 222, 223])
# Var t37 (t37 Call(Call { function: "io_write1", parameters: [Number(U8, 0)] })) Reg(U8) Some([218])
# Var t38 (t38 Number(U8, 0)) Reg(U8) Some([218])
# Var t39 (t39 Call(Call { function: "io_write1", parameters: [Number(U8, 1)] })) Reg(U8) Some([218])
# Var t4 (t4 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) Reg(U32) Some([228, 229, 230, 231])
# Var t40 (t40 Number(U8, 1)) Reg(U8) Some([218])
# Var t41 (t41 Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })) Reg(U8) Some([218])
# Var t42 (t42 Number(USIZE, 2)) Reg(U32) Some([220, 221, 222, 223])
# Var t5 (t5 Ident("i")) Reg(U8) Some([218])
# Var t6 (t6 Number(U8, 32)) Reg(U8) Some([232])
# Var t7 (t7 Ident("i")) Reg(U8) Some([218])
# Var t8 (t8 Number(U8, 1)) Reg(U8) Some([219])
# Var t9 (t9 Call(Call { function: "io_write1", parameters: [Number(U8, 3)] })) Reg(U8) Some([218])
# lcd_current <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"lcd_current\"), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)"] }
# 01e41 Instruction { source: "lcd_current <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0xda), Constant8(0x00=0)], resolved: None }
04 da 00 
# i <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: Some(Number(U8)), value: Number(U8, 0) }", "Number(U8, 0)"] }
# 01e44 Instruction { source: "i <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: Some(Number(U8)), value: Number(U8, 0) }\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0xda), Constant8(0x00=0)], resolved: None }
04 da 00 
# :lcd_init_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }"] }
# lcd_init_while_predicate_0
# t0 <- i U8
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }", "Ident(\"i\")", "Ident(\"i\")"] }
# optimized away noop copy Instruction { source: "t0 <- i U8\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 80) }\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0xda), Register(0xda)], resolved: None }
# t1 <- 0n80/0x50u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }", "Number(U8, 80)", "Number(U8, 80)"] }
# 01e47 Instruction { source: "t1 <- 0n80/0x50u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 80) }\", \"Number(U8, 80)\", \"Number(U8, 80)\"] }", opcode: LoadImm8, args: [Register(0xdb), Constant8(0x50=80)], resolved: None }
04 db 50 
# if t0 < t1 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }"] }
# 01e4a Instruction { source: "if t0 < t1 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 80) }\"] }", opcode: Cmp8, args: [Register(0xdb), Register(0xda)], resolved: None }
15 db da 
# 01e4d Instruction { source: "if t0 < t1 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 80) }\"] }", opcode: JcImm, args: [Label24(lcd_init_while_end_2)], resolved: None }
71 77 1e 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t0 < t1 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 80) }\"] }", opcode: JmpImm, args: [Label24(lcd_init_while_body_1)], resolved: None }
# :lcd_init_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }"] }
# lcd_init_while_body_1
# t3 <- 0n987148/0x000f100cu32 
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") })", "Number(USIZE, 987148)", "Number(USIZE, 987148)"] }
# 01e51 Instruction { source: "t3 <- 0n987148/0x000f100cu32 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") })\", \"Number(USIZE, 987148)\", \"Number(USIZE, 987148)\"] }", opcode: LoadImm32, args: [Register(0xe0), Constant32(0x000f100c=987148)], resolved: None }
20 e0 0c 10 0f 00 
# t5 <- i U8
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }", "Ident(\"i\")", "Ident(\"i\")"] }
# optimized away noop copy Instruction { source: "t5 <- i U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0xda), Register(0xda)], resolved: None }
# t4 U32 <- t5 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }"] }
# 01e57 Instruction { source: "Zero-pad for t4 U32 <- t5 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }\"] }", opcode: LoadImm32, args: [Register(0xe4), Constant32(0x00000000=0)], resolved: None }
20 e4 00 00 00 00 
# 01e5d Instruction { source: "t4 U32 <- t5 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }\"] }", opcode: Copy8, args: [Register(0xda), Register(0xe4)], resolved: None }
0b da e4 
# t2 <- t3 Add t4
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") })"] }
# 01e60 Instruction { source: "t2 <- t3 Add t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") })\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01e61 Instruction { source: "t2 <- t3 Add t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") })\"] }", opcode: AddCarry32_1, args: [Register(0xe0), Register(0xe4), Register(0xe0)], resolved: None }
30 e0 e4 e0 
# 01e65 Instruction { source: "t2 <- t3 Add t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") })\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t6 <- 0n32/0x20u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }", "Number(U8, 32)", "Number(U8, 32)"] }
# 01e66 Instruction { source: "t6 <- 0n32/0x20u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }\", \"Number(U8, 32)\", \"Number(U8, 32)\"] }", opcode: LoadImm8, args: [Register(0xe8), Constant8(0x20=32)], resolved: None }
04 e8 20 
# mem[t2] <- t6 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }"] }
# 01e69 Instruction { source: "mem[t2] <- t6 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }\"] }", opcode: Store8, args: [Register(0xe8), Register(0xe0)], resolved: None }
06 e8 e0 
# t7 <- i U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"i\"), Number(U8, 1))", "Ident(\"i\")", "Ident(\"i\")"] }
# optimized away noop copy Instruction { source: "t7 <- i U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1))\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0xda), Register(0xda)], resolved: None }
# t8 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"i\"), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 01e6c Instruction { source: "t8 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0xdb), Constant8(0x01=1)], resolved: None }
04 db 01 
# i <- t7 Add t8
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"i\"), Number(U8, 1))"] }
# 01e6f Instruction { source: "i <- t7 Add t8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1))\"] }", opcode: Add8NoCarryIn, args: [Register(0xda), Register(0xdb), Register(0xda)], resolved: None }
14 da db da 
# goto lcd_init_while_predicate_0
# 	SourceContext { contexts: [] }
# 01e73 Instruction { source: "goto lcd_init_while_predicate_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(lcd_init_while_predicate_0)], resolved: None }
70 47 1e 00 
# :lcd_init_while_end_2
# 	SourceContext { contexts: [] }
# lcd_init_while_end_2
# t10 <- 0n3/0x03u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] })", "Number(U8, 3)", "Number(U8, 3)"] }
# 01e77 Instruction { source: "t10 <- 0n3/0x03u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 3)] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 3)] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 3)] })\", \"Number(U8, 3)\", \"Number(U8, 3)\"] }", opcode: LoadImm8, args: [Register(0xda), Constant8(0x03=3)], resolved: None }
04 da 03 
# None <= call io_write1(t10,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] })"] }
# 01e7a Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0xda)], resolved: None }
69 da 
# t12 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] })", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 01e7c Instruction { source: "t12 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] })\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0xdc), Constant32(0x00000001=1)], resolved: None }
20 dc 01 00 00 00 
# None <= call delay(t12,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] })"] }
# 01e82 Instruction { source: "Arg0[x]=t12 None <= call delay(t12,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] })\"] }", opcode: Copy32, args: [Register(0xdc), Register(0x00)], resolved: None }
21 dc 00 
# Registers used by this function: {218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232}
# Registers used by callee tree: {152, 153, 154, 155, 156, 157, 158, 159}
# Registers to save: []
# 01e85 Instruction { source: "PseudoCall(Label24(:delay))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 01e8b Instruction { source: "PseudoCall(Label24(:delay))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 95 1e 00 00 
# 01e91 Instruction { source: "PseudoCall(Label24(:delay))", opcode: JmpImm, args: [Label24(:delay)], resolved: None }
70 bf 17 00 
# 01e95 Instruction { source: "PseudoCall(Label24(:delay))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# t14 <- 0n3/0x03u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] })", "Number(U8, 3)", "Number(U8, 3)"] }
# 01e9b Instruction { source: "t14 <- 0n3/0x03u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 3)] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 3)] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 3)] })\", \"Number(U8, 3)\", \"Number(U8, 3)\"] }", opcode: LoadImm8, args: [Register(0xda), Constant8(0x03=3)], resolved: None }
04 da 03 
# None <= call io_write1(t14,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] })"] }
# 01e9e Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0xda)], resolved: None }
69 da 
# t16 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] })", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 01ea0 Instruction { source: "t16 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] })\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0xdc), Constant32(0x00000001=1)], resolved: None }
20 dc 01 00 00 00 
# None <= call delay(t16,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] })"] }
# 01ea6 Instruction { source: "Arg0[x]=t16 None <= call delay(t16,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] })\"] }", opcode: Copy32, args: [Register(0xdc), Register(0x00)], resolved: None }
21 dc 00 
# Registers used by this function: {218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232}
# Registers used by callee tree: {152, 153, 154, 155, 156, 157, 158, 159}
# Registers to save: []
# 01ea9 Instruction { source: "PseudoCall(Label24(:delay))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 01eaf Instruction { source: "PseudoCall(Label24(:delay))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c b9 1e 00 00 
# 01eb5 Instruction { source: "PseudoCall(Label24(:delay))", opcode: JmpImm, args: [Label24(:delay)], resolved: None }
70 bf 17 00 
# 01eb9 Instruction { source: "PseudoCall(Label24(:delay))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# t18 <- 0n3/0x03u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] })", "Number(U8, 3)", "Number(U8, 3)"] }
# 01ebf Instruction { source: "t18 <- 0n3/0x03u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 3)] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 3)] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 3)] })\", \"Number(U8, 3)\", \"Number(U8, 3)\"] }", opcode: LoadImm8, args: [Register(0xda), Constant8(0x03=3)], resolved: None }
04 da 03 
# None <= call io_write1(t18,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] })"] }
# 01ec2 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0xda)], resolved: None }
69 da 
# t20 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] })", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 01ec4 Instruction { source: "t20 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] })\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0xdc), Constant32(0x00000001=1)], resolved: None }
20 dc 01 00 00 00 
# None <= call delay(t20,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] })"] }
# 01eca Instruction { source: "Arg0[x]=t20 None <= call delay(t20,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] })\"] }", opcode: Copy32, args: [Register(0xdc), Register(0x00)], resolved: None }
21 dc 00 
# Registers used by this function: {218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232}
# Registers used by callee tree: {152, 153, 154, 155, 156, 157, 158, 159}
# Registers to save: []
# 01ecd Instruction { source: "PseudoCall(Label24(:delay))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 01ed3 Instruction { source: "PseudoCall(Label24(:delay))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c dd 1e 00 00 
# 01ed9 Instruction { source: "PseudoCall(Label24(:delay))", opcode: JmpImm, args: [Label24(:delay)], resolved: None }
70 bf 17 00 
# 01edd Instruction { source: "PseudoCall(Label24(:delay))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# t22 <- 0n2/0x02u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] })", "Number(U8, 2)", "Number(U8, 2)"] }
# 01ee3 Instruction { source: "t22 <- 0n2/0x02u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 2)] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 2)] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 2)] })\", \"Number(U8, 2)\", \"Number(U8, 2)\"] }", opcode: LoadImm8, args: [Register(0xda), Constant8(0x02=2)], resolved: None }
04 da 02 
# None <= call io_write1(t22,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] })"] }
# 01ee6 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0xda)], resolved: None }
69 da 
# t24 <- 0n2/0x00000002u32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })", "Number(USIZE, 2)", "Number(USIZE, 2)"] }
# 01ee8 Instruction { source: "t24 <- 0n2/0x00000002u32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\", \"Number(USIZE, 2)\", \"Number(USIZE, 2)\"] }", opcode: LoadImm32, args: [Register(0xdc), Constant32(0x00000002=2)], resolved: None }
20 dc 02 00 00 00 
# None <= call delay(t24,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })"] }
# 01eee Instruction { source: "Arg0[x]=t24 None <= call delay(t24,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\"] }", opcode: Copy32, args: [Register(0xdc), Register(0x00)], resolved: None }
21 dc 00 
# Registers used by this function: {218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232}
# Registers used by callee tree: {152, 153, 154, 155, 156, 157, 158, 159}
# Registers to save: []
# 01ef1 Instruction { source: "PseudoCall(Label24(:delay))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 01ef7 Instruction { source: "PseudoCall(Label24(:delay))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 01 1f 00 00 
# 01efd Instruction { source: "PseudoCall(Label24(:delay))", opcode: JmpImm, args: [Label24(:delay)], resolved: None }
70 bf 17 00 
# 01f01 Instruction { source: "PseudoCall(Label24(:delay))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# t26 <- 0n2/0x02u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] })", "Number(U8, 2)", "Number(U8, 2)"] }
# 01f07 Instruction { source: "t26 <- 0n2/0x02u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 2)] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 2)] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 2)] })\", \"Number(U8, 2)\", \"Number(U8, 2)\"] }", opcode: LoadImm8, args: [Register(0xda), Constant8(0x02=2)], resolved: None }
04 da 02 
# None <= call io_write1(t26,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] })"] }
# 01f0a Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0xda)], resolved: None }
69 da 
# t28 <- 0n8/0x08u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 8)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 8)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 8)] })", "Number(U8, 8)", "Number(U8, 8)"] }
# 01f0c Instruction { source: "t28 <- 0n8/0x08u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 8)] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 8)] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 8)] })\", \"Number(U8, 8)\", \"Number(U8, 8)\"] }", opcode: LoadImm8, args: [Register(0xda), Constant8(0x08=8)], resolved: None }
04 da 08 
# None <= call io_write1(t28,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 8)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 8)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 8)] })"] }
# 01f0f Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0xda)], resolved: None }
69 da 
# t30 <- 0n2/0x00000002u32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })", "Number(USIZE, 2)", "Number(USIZE, 2)"] }
# 01f11 Instruction { source: "t30 <- 0n2/0x00000002u32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\", \"Number(USIZE, 2)\", \"Number(USIZE, 2)\"] }", opcode: LoadImm32, args: [Register(0xdc), Constant32(0x00000002=2)], resolved: None }
20 dc 02 00 00 00 
# None <= call delay(t30,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })"] }
# 01f17 Instruction { source: "Arg0[x]=t30 None <= call delay(t30,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\"] }", opcode: Copy32, args: [Register(0xdc), Register(0x00)], resolved: None }
21 dc 00 
# Registers used by this function: {218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232}
# Registers used by callee tree: {152, 153, 154, 155, 156, 157, 158, 159}
# Registers to save: []
# 01f1a Instruction { source: "PseudoCall(Label24(:delay))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 01f20 Instruction { source: "PseudoCall(Label24(:delay))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 2a 1f 00 00 
# 01f26 Instruction { source: "PseudoCall(Label24(:delay))", opcode: JmpImm, args: [Label24(:delay)], resolved: None }
70 bf 17 00 
# 01f2a Instruction { source: "PseudoCall(Label24(:delay))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# t32 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] })", "Number(U8, 0)", "Number(U8, 0)"] }
# 01f30 Instruction { source: "t32 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 0)] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 0)] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 0)] })\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0xda), Constant8(0x00=0)], resolved: None }
04 da 00 
# None <= call io_write1(t32,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] })"] }
# 01f33 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0xda)], resolved: None }
69 da 
# t34 <- 0n12/0x0cu8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 12)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 12)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 12)] })", "Number(U8, 12)", "Number(U8, 12)"] }
# 01f35 Instruction { source: "t34 <- 0n12/0x0cu8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 12)] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 12)] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 12)] })\", \"Number(U8, 12)\", \"Number(U8, 12)\"] }", opcode: LoadImm8, args: [Register(0xda), Constant8(0x0c=12)], resolved: None }
04 da 0c 
# None <= call io_write1(t34,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 12)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 12)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 12)] })"] }
# 01f38 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0xda)], resolved: None }
69 da 
# t36 <- 0n2/0x00000002u32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })", "Number(USIZE, 2)", "Number(USIZE, 2)"] }
# 01f3a Instruction { source: "t36 <- 0n2/0x00000002u32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\", \"Number(USIZE, 2)\", \"Number(USIZE, 2)\"] }", opcode: LoadImm32, args: [Register(0xdc), Constant32(0x00000002=2)], resolved: None }
20 dc 02 00 00 00 
# None <= call delay(t36,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })"] }
# 01f40 Instruction { source: "Arg0[x]=t36 None <= call delay(t36,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\"] }", opcode: Copy32, args: [Register(0xdc), Register(0x00)], resolved: None }
21 dc 00 
# Registers used by this function: {218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232}
# Registers used by callee tree: {152, 153, 154, 155, 156, 157, 158, 159}
# Registers to save: []
# 01f43 Instruction { source: "PseudoCall(Label24(:delay))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 01f49 Instruction { source: "PseudoCall(Label24(:delay))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 53 1f 00 00 
# 01f4f Instruction { source: "PseudoCall(Label24(:delay))", opcode: JmpImm, args: [Label24(:delay)], resolved: None }
70 bf 17 00 
# 01f53 Instruction { source: "PseudoCall(Label24(:delay))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# t38 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] })", "Number(U8, 0)", "Number(U8, 0)"] }
# 01f59 Instruction { source: "t38 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 0)] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 0)] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 0)] })\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0xda), Constant8(0x00=0)], resolved: None }
04 da 00 
# None <= call io_write1(t38,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] })"] }
# 01f5c Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0xda)], resolved: None }
69 da 
# t40 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 1)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 1)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 1)] })", "Number(U8, 1)", "Number(U8, 1)"] }
# 01f5e Instruction { source: "t40 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 1)] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 1)] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 1)] })\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0xda), Constant8(0x01=1)], resolved: None }
04 da 01 
# None <= call io_write1(t40,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 1)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 1)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 1)] })"] }
# 01f61 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0xda)], resolved: None }
69 da 
# t42 <- 0n2/0x00000002u32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })", "Number(USIZE, 2)", "Number(USIZE, 2)"] }
# 01f63 Instruction { source: "t42 <- 0n2/0x00000002u32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\", \"Number(USIZE, 2)\", \"Number(USIZE, 2)\"] }", opcode: LoadImm32, args: [Register(0xdc), Constant32(0x00000002=2)], resolved: None }
20 dc 02 00 00 00 
# None <= call delay(t42,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })"] }
# 01f69 Instruction { source: "Arg0[x]=t42 None <= call delay(t42,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\"] }", opcode: Copy32, args: [Register(0xdc), Register(0x00)], resolved: None }
21 dc 00 
# Registers used by this function: {218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232}
# Registers used by callee tree: {152, 153, 154, 155, 156, 157, 158, 159}
# Registers to save: []
# 01f6c Instruction { source: "PseudoCall(Label24(:delay))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 01f72 Instruction { source: "PseudoCall(Label24(:delay))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 7c 1f 00 00 
# 01f78 Instruction { source: "PseudoCall(Label24(:delay))", opcode: JmpImm, args: [Label24(:delay)], resolved: None }
70 bf 17 00 
# 01f7c Instruction { source: "PseudoCall(Label24(:delay))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# return None
# 	SourceContext { contexts: ["Return { value: None }"] }
# 01f82 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# :function_end_lcd_init
# 	SourceContext { contexts: [] }
# function_end_lcd_init
# Unreachable
# 	SourceContext { contexts: [] }
# 01f84 Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
# :lcd_scroll_up
# Ret None
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([233])
# Var i (Local i Number(U8) Reg(U8)) Reg(U8) Some([234])
# Var inline_lcd_scroll_up_lcd_logical_to_physical_3_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_lcd_scroll_up_lcd_logical_to_physical_3_col (Local col Number(U8) Reg(U8)) Reg(U8) Some([235])
# Var inline_lcd_scroll_up_lcd_logical_to_physical_3_i (Arg0 i Number(U8)) Reg(U8) Some([235])
# Var inline_lcd_scroll_up_lcd_logical_to_physical_3_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_lcd_scroll_up_lcd_logical_to_physical_3_row (Local row Number(U8) Reg(U8)) Reg(U8) Some([236])
# Var inline_lcd_scroll_up_lcd_logical_to_physical_3_t0 (t0 Ident("i")) Reg(U8) Some([235])
# Var inline_lcd_scroll_up_lcd_logical_to_physical_3_t1 (t1 Number(U8, 20)) Reg(U8) Some([236])
# Var inline_lcd_scroll_up_lcd_logical_to_physical_3_t10 (t10 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }) Reg(U32) Some([240, 241, 242, 243])
# Var inline_lcd_scroll_up_lcd_logical_to_physical_3_t11 (t11 Ident("row")) Reg(U8) Some([236])
# Var inline_lcd_scroll_up_lcd_logical_to_physical_3_t12 (t12 Ident("col")) Reg(U8) Some([235])
# Var inline_lcd_scroll_up_lcd_logical_to_physical_3_t2 (t2 Ident("i")) Reg(U8) Some([235])
# Var inline_lcd_scroll_up_lcd_logical_to_physical_3_t3 (t3 Arithmetic(Multiply, Ident("row"), Number(U8, 20))) Reg(U8) Some([244])
# Var inline_lcd_scroll_up_lcd_logical_to_physical_3_t4 (t4 Ident("row")) Reg(U8) Some([236])
# Var inline_lcd_scroll_up_lcd_logical_to_physical_3_t5 (t5 Number(U8, 20)) Reg(U8) Some([244])
# Var inline_lcd_scroll_up_lcd_logical_to_physical_3_t6 (t6 Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) Reg(U8) Some([235])
# Var inline_lcd_scroll_up_lcd_logical_to_physical_3_t7 (t7 Index("lcd_row_start", Ident("row"))) Reg(U8) Some([236])
# Var inline_lcd_scroll_up_lcd_logical_to_physical_3_t8 (t8 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }) }) Reg(U32) Some([240, 241, 242, 243])
# Var inline_lcd_scroll_up_lcd_logical_to_physical_3_t9 (t9 Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }) Reg(U32) Some([248, 249, 250, 251])
# Var inline_lcd_scroll_up_lcd_logical_to_physical_4_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_lcd_scroll_up_lcd_logical_to_physical_4_col (Local col Number(U8) Reg(U8)) Reg(U8) Some([233])
# Var inline_lcd_scroll_up_lcd_logical_to_physical_4_i (Arg0 i Number(U8)) Reg(U8) Some([233])
# Var inline_lcd_scroll_up_lcd_logical_to_physical_4_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_lcd_scroll_up_lcd_logical_to_physical_4_row (Local row Number(U8) Reg(U8)) Reg(U8) Some([235])
# Var inline_lcd_scroll_up_lcd_logical_to_physical_4_t0 (t0 Ident("i")) Reg(U8) Some([233])
# Var inline_lcd_scroll_up_lcd_logical_to_physical_4_t1 (t1 Number(U8, 20)) Reg(U8) Some([235])
# Var inline_lcd_scroll_up_lcd_logical_to_physical_4_t10 (t10 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }) Reg(U32) Some([252, 253, 254, 255])
# Var inline_lcd_scroll_up_lcd_logical_to_physical_4_t11 (t11 Ident("row")) Reg(U8) Some([235])
# Var inline_lcd_scroll_up_lcd_logical_to_physical_4_t12 (t12 Ident("col")) Reg(U8) Some([233])
# Var inline_lcd_scroll_up_lcd_logical_to_physical_4_t2 (t2 Ident("i")) Reg(U8) Some([233])
# Var inline_lcd_scroll_up_lcd_logical_to_physical_4_t3 (t3 Arithmetic(Multiply, Ident("row"), Number(U8, 20))) Reg(U8) Some([236])
# Var inline_lcd_scroll_up_lcd_logical_to_physical_4_t4 (t4 Ident("row")) Reg(U8) Some([235])
# Var inline_lcd_scroll_up_lcd_logical_to_physical_4_t5 (t5 Number(U8, 20)) Reg(U8) Some([236])
# Var inline_lcd_scroll_up_lcd_logical_to_physical_4_t6 (t6 Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) Reg(U8) Some([233])
# Var inline_lcd_scroll_up_lcd_logical_to_physical_4_t7 (t7 Index("lcd_row_start", Ident("row"))) Reg(U8) Some([235])
# Var inline_lcd_scroll_up_lcd_logical_to_physical_4_t8 (t8 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }) }) Reg(U32) Some([252, 253, 254, 255])
# Var inline_lcd_scroll_up_lcd_logical_to_physical_4_t9 (t9 Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }) Reg(U32) Some([240, 241, 242, 243])
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var t0 (static "lcd_current") Reg(U32) Some([16, 17, 18, 19])
# Var t1 (t1 Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20))) Reg(U8) Some([234])
# Var t10 (t10 Arithmetic(Add, Ident("i"), Number(U8, 20))) Reg(U8) Some([233])
# Var t11 (t11 Ident("i")) Reg(U8) Some([233])
# Var t12 (t12 Number(U8, 20)) Reg(U8) Some([235])
# Var t13 (t13 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }) Reg(U32) Some([252, 253, 254, 255])
# Var t14 (t14 Number(USIZE, 987148)) Reg(U32) Some([252, 253, 254, 255])
# Var t15 (t15 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) Reg(U32) Some([240, 241, 242, 243])
# Var t16 (t16 Ident("i")) Reg(U8) Some([234])
# Var t17 (t17 Ident("ch")) Reg(U8) Some([233])
# Var t18 (t18 Call(Call { function: "lcd_set_pos", parameters: [Call(Call { function: "lcd_logical_to_physical", parameters: [Ident("i")] })] })) Reg(U8) Some([233])
# Var t19 (t19 Call(Call { function: "lcd_logical_to_physical", parameters: [Ident("i")] })) Reg(U8) Some([235])
# Var t2 (t2 Ident("lcd_current")) Reg(U8) Some([234])
# Var t20 (t20 Ident("i")) Reg(U8) Some([234])
# Var t21 (t21 Call(Call { function: "lcd_write_char", parameters: [Ident("ch")] })) Reg(U8) Some([233])
# Var t22 (t22 Ident("ch")) Reg(U8) Some([233])
# Var t23 (t23 Ident("i")) Reg(U8) Some([233])
# Var t24 (t24 Number(U8, 1)) Reg(U8) Some([234])
# Var t25 (t25 Ident("i")) Reg(U8) Some([233])
# Var t26 (t26 Number(U8, 80)) Reg(U8) Some([235])
# Var t27 (t27 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }) Reg(U32) Some([16, 17, 18, 19])
# Var t28 (t28 Number(USIZE, 987148)) Reg(U32) Some([16, 17, 18, 19])
# Var t29 (t29 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) Reg(U32) Some([252, 253, 254, 255])
# Var t3 (static "lcd_current") Reg(U32) Some([20, 21, 22, 23])
# Var t30 (t30 Ident("i")) Reg(U8) Some([234])
# Var t31 (t31 Number(U8, 32)) Reg(U8) Some([235])
# Var t32 (t32 Call(Call { function: "lcd_set_pos", parameters: [Call(Call { function: "lcd_logical_to_physical", parameters: [Ident("i")] })] })) Reg(U8) Some([233])
# Var t33 (t33 Call(Call { function: "lcd_logical_to_physical", parameters: [Ident("i")] })) Reg(U8) Some([233])
# Var t34 (t34 Ident("i")) Reg(U8) Some([233])
# Var t35 (t35 Call(Call { function: "lcd_write_char", parameters: [Number(U8, 32)] })) Reg(U8) Some([233])
# Var t36 (t36 Number(U8, 32)) Reg(U8) Some([233])
# Var t37 (t37 Ident("i")) Reg(U8) Some([233])
# Var t38 (t38 Number(U8, 1)) Reg(U8) Some([234])
# Var t4 (t4 Number(U8, 20)) Reg(U8) Some([235])
# Var t5 (t5 Ident("i")) Reg(U8) Some([233])
# Var t6 (t6 Number(U8, 60)) Reg(U8) Some([235])
# Var t7 (t7 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }) }) Reg(U32) Some([16, 17, 18, 19])
# Var t8 (t8 Number(USIZE, 987148)) Reg(U32) Some([240, 241, 242, 243])
# Var t9 (t9 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }) Reg(U32) Some([16, 17, 18, 19])
# t0 <- 0n987144/0x000f1008u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Subtract, Ident(\"lcd_current\"), Number(U8, 20)) }"] }
# 01f89 Instruction { source: "t0 <- 0n987144/0x000f1008u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"lcd_current\\\"), Number(U8, 20)) }\"] }", opcode: LoadImm32, args: [Register(0x10), Constant32(0x000f1008=987144)], resolved: None }
20 10 08 10 0f 00 
# t3 <- 0n987144/0x000f1008u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Subtract, Ident(\"lcd_current\"), Number(U8, 20)) }", "Arithmetic(Subtract, Ident(\"lcd_current\"), Number(U8, 20))", "Arithmetic(Subtract, Ident(\"lcd_current\"), Number(U8, 20))", "Ident(\"lcd_current\")", "Ident(\"lcd_current\")"] }
# 01f8f Instruction { source: "t3 <- 0n987144/0x000f1008u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"lcd_current\\\"), Number(U8, 20)) }\", \"Arithmetic(Subtract, Ident(\\\"lcd_current\\\"), Number(U8, 20))\", \"Arithmetic(Subtract, Ident(\\\"lcd_current\\\"), Number(U8, 20))\", \"Ident(\\\"lcd_current\\\")\", \"Ident(\\\"lcd_current\\\")\"] }", opcode: LoadImm32, args: [Register(0x14), Constant32(0x000f1008=987144)], resolved: None }
20 14 08 10 0f 00 
# t2 <- mem[t3] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Subtract, Ident(\"lcd_current\"), Number(U8, 20)) }", "Arithmetic(Subtract, Ident(\"lcd_current\"), Number(U8, 20))", "Arithmetic(Subtract, Ident(\"lcd_current\"), Number(U8, 20))", "Ident(\"lcd_current\")", "Ident(\"lcd_current\")"] }
# 01f95 Instruction { source: "t2 <- mem[t3] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"lcd_current\\\"), Number(U8, 20)) }\", \"Arithmetic(Subtract, Ident(\\\"lcd_current\\\"), Number(U8, 20))\", \"Arithmetic(Subtract, Ident(\\\"lcd_current\\\"), Number(U8, 20))\", \"Ident(\\\"lcd_current\\\")\", \"Ident(\\\"lcd_current\\\")\"] }", opcode: Load8, args: [Register(0x14), Register(0xea)], resolved: None }
05 14 ea 
# t4 <- 0n20/0x14u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Subtract, Ident(\"lcd_current\"), Number(U8, 20)) }", "Arithmetic(Subtract, Ident(\"lcd_current\"), Number(U8, 20))", "Arithmetic(Subtract, Ident(\"lcd_current\"), Number(U8, 20))", "Number(U8, 20)", "Number(U8, 20)"] }
# 01f98 Instruction { source: "t4 <- 0n20/0x14u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"lcd_current\\\"), Number(U8, 20)) }\", \"Arithmetic(Subtract, Ident(\\\"lcd_current\\\"), Number(U8, 20))\", \"Arithmetic(Subtract, Ident(\\\"lcd_current\\\"), Number(U8, 20))\", \"Number(U8, 20)\", \"Number(U8, 20)\"] }", opcode: LoadImm8, args: [Register(0xeb), Constant8(0x14=20)], resolved: None }
04 eb 14 
# t1 <- t2 Subtract t4
# 	SourceContext { contexts: ["Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Subtract, Ident(\"lcd_current\"), Number(U8, 20)) }", "Arithmetic(Subtract, Ident(\"lcd_current\"), Number(U8, 20))", "Arithmetic(Subtract, Ident(\"lcd_current\"), Number(U8, 20))"] }
# 01f9b Instruction { source: "t1 <- t2 Subtract t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"lcd_current\\\"), Number(U8, 20)) }\", \"Arithmetic(Subtract, Ident(\\\"lcd_current\\\"), Number(U8, 20))\", \"Arithmetic(Subtract, Ident(\\\"lcd_current\\\"), Number(U8, 20))\"] }", opcode: Copy8, args: [Register(0xeb), Register(0x00)], resolved: None }
0b eb 00 
# 01f9e Instruction { source: "t1 <- t2 Subtract t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"lcd_current\\\"), Number(U8, 20)) }\", \"Arithmetic(Subtract, Ident(\\\"lcd_current\\\"), Number(U8, 20))\", \"Arithmetic(Subtract, Ident(\\\"lcd_current\\\"), Number(U8, 20))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 01fa0 Instruction { source: "t1 <- t2 Subtract t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"lcd_current\\\"), Number(U8, 20)) }\", \"Arithmetic(Subtract, Ident(\\\"lcd_current\\\"), Number(U8, 20))\", \"Arithmetic(Subtract, Ident(\\\"lcd_current\\\"), Number(U8, 20))\"] }", opcode: Add8NoCarryIn, args: [Register(0xea), Register(0x00), Register(0xea)], resolved: None }
14 ea 00 ea 
# mem[t0] <- t1 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Subtract, Ident(\"lcd_current\"), Number(U8, 20)) }"] }
# 01fa4 Instruction { source: "mem[t0] <- t1 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"lcd_current\\\"), Number(U8, 20)) }\"] }", opcode: Store8, args: [Register(0xea), Register(0x10)], resolved: None }
06 ea 10 
# i <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: Some(Number(U8)), value: Number(U8, 0) }", "Number(U8, 0)"] }
# 01fa7 Instruction { source: "i <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: Some(Number(U8)), value: Number(U8, 0) }\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0xea), Constant8(0x00=0)], resolved: None }
04 ea 00 
# :lcd_scroll_up_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 60) }, while_true: [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20))) }, Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_set_pos\", parameters: [Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"i\")] })] }) }, VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"ch\")] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }"] }
# lcd_scroll_up_while_predicate_0
# t5 <- i U8
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 60) }, while_true: [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20))) }, Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_set_pos\", parameters: [Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"i\")] })] }) }, VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"ch\")] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 60) }", "Ident(\"i\")", "Ident(\"i\")"] }
# 01faa Instruction { source: "t5 <- i U8\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 60) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20))) }, Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Ident(\\\"ch\\\") }, VoidExpression { expression: Call(Call { function: \\\"lcd_set_pos\\\", parameters: [Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"i\\\")] })] }) }, VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 60) }\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0xea), Register(0xe9)], resolved: None }
0b ea e9 
# t6 <- 0n60/0x3cu8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 60) }, while_true: [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20))) }, Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_set_pos\", parameters: [Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"i\")] })] }) }, VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"ch\")] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 60) }", "Number(U8, 60)", "Number(U8, 60)"] }
# 01fad Instruction { source: "t6 <- 0n60/0x3cu8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 60) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20))) }, Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Ident(\\\"ch\\\") }, VoidExpression { expression: Call(Call { function: \\\"lcd_set_pos\\\", parameters: [Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"i\\\")] })] }) }, VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 60) }\", \"Number(U8, 60)\", \"Number(U8, 60)\"] }", opcode: LoadImm8, args: [Register(0xeb), Constant8(0x3c=60)], resolved: None }
04 eb 3c 
# if t5 < t6 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 60) }, while_true: [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20))) }, Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_set_pos\", parameters: [Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"i\")] })] }) }, VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"ch\")] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 60) }"] }
# 01fb0 Instruction { source: "if t5 < t6 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 60) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20))) }, Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Ident(\\\"ch\\\") }, VoidExpression { expression: Call(Call { function: \\\"lcd_set_pos\\\", parameters: [Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"i\\\")] })] }) }, VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 60) }\"] }", opcode: Cmp8, args: [Register(0xeb), Register(0xe9)], resolved: None }
15 eb e9 
# 01fb3 Instruction { source: "if t5 < t6 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 60) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20))) }, Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Ident(\\\"ch\\\") }, VoidExpression { expression: Call(Call { function: \\\"lcd_set_pos\\\", parameters: [Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"i\\\")] })] }) }, VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 60) }\"] }", opcode: JcImm, args: [Label24(lcd_scroll_up_while_end_2)], resolved: None }
71 cb 20 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t5 < t6 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 60) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20))) }, Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Ident(\\\"ch\\\") }, VoidExpression { expression: Call(Call { function: \\\"lcd_set_pos\\\", parameters: [Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"i\\\")] })] }) }, VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 60) }\"] }", opcode: JmpImm, args: [Label24(lcd_scroll_up_while_body_1)], resolved: None }
# :lcd_scroll_up_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 60) }, while_true: [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20))) }, Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_set_pos\", parameters: [Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"i\")] })] }) }, VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"ch\")] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }"] }
# lcd_scroll_up_while_body_1
# t8 <- 0n987148/0x000f100cu32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20))) }", "Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) })", "Number(USIZE, 987148)", "Number(USIZE, 987148)"] }
# 01fb7 Instruction { source: "t8 <- 0n987148/0x000f100cu32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20))) }\", \"Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) })\", \"Number(USIZE, 987148)\", \"Number(USIZE, 987148)\"] }", opcode: LoadImm32, args: [Register(0xf0), Constant32(0x000f100c=987148)], resolved: None }
20 f0 0c 10 0f 00 
# t11 <- i U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20))) }", "Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }", "Arithmetic(Add, Ident(\"i\"), Number(U8, 20))", "Arithmetic(Add, Ident(\"i\"), Number(U8, 20))", "Ident(\"i\")", "Ident(\"i\")"] }
# 01fbd Instruction { source: "t11 <- i U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20))) }\", \"Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20))\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20))\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0xea), Register(0xe9)], resolved: None }
0b ea e9 
# t12 <- 0n20/0x14u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20))) }", "Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }", "Arithmetic(Add, Ident(\"i\"), Number(U8, 20))", "Arithmetic(Add, Ident(\"i\"), Number(U8, 20))", "Number(U8, 20)", "Number(U8, 20)"] }
# 01fc0 Instruction { source: "t12 <- 0n20/0x14u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20))) }\", \"Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20))\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20))\", \"Number(U8, 20)\", \"Number(U8, 20)\"] }", opcode: LoadImm8, args: [Register(0xeb), Constant8(0x14=20)], resolved: None }
04 eb 14 
# t10 <- t11 Add t12
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20))) }", "Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }", "Arithmetic(Add, Ident(\"i\"), Number(U8, 20))", "Arithmetic(Add, Ident(\"i\"), Number(U8, 20))"] }
# 01fc3 Instruction { source: "t10 <- t11 Add t12\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20))) }\", \"Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20))\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20))\"] }", opcode: Add8NoCarryIn, args: [Register(0xe9), Register(0xeb), Register(0xe9)], resolved: None }
14 e9 eb e9 
# t9 U32 <- t10 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20))) }", "Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }"] }
# 01fc7 Instruction { source: "Zero-pad for t9 U32 <- t10 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20))) }\", \"Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }\"] }", opcode: LoadImm32, args: [Register(0x10), Constant32(0x00000000=0)], resolved: None }
20 10 00 00 00 00 
# 01fcd Instruction { source: "t9 U32 <- t10 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20))) }\", \"Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }\"] }", opcode: Copy8, args: [Register(0xe9), Register(0x10)], resolved: None }
0b e9 10 
# t7 <- t8 Add t9
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20))) }", "Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) })"] }
# 01fd0 Instruction { source: "t7 <- t8 Add t9\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20))) }\", \"Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) })\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01fd1 Instruction { source: "t7 <- t8 Add t9\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20))) }\", \"Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) })\"] }", opcode: AddCarry32_1, args: [Register(0xf0), Register(0x10), Register(0x10)], resolved: None }
30 f0 10 10 
# 01fd5 Instruction { source: "t7 <- t8 Add t9\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20))) }\", \"Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) })\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# ch <- mem[t7] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20))) }", "Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20)))"] }
# 01fd6 Instruction { source: "ch <- mem[t7] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20))) }\", \"Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)))\"] }", opcode: Load8, args: [Register(0x10), Register(0xe9)], resolved: None }
05 10 e9 
# t14 <- 0n987148/0x000f100cu32 
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") })", "Number(USIZE, 987148)", "Number(USIZE, 987148)"] }
# 01fd9 Instruction { source: "t14 <- 0n987148/0x000f100cu32 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Ident(\\\"ch\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") })\", \"Number(USIZE, 987148)\", \"Number(USIZE, 987148)\"] }", opcode: LoadImm32, args: [Register(0xfc), Constant32(0x000f100c=987148)], resolved: None }
20 fc 0c 10 0f 00 
# t16 <- i U8
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }", "Ident(\"i\")", "Ident(\"i\")"] }
# optimized away noop copy Instruction { source: "t16 <- i U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Ident(\\\"ch\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0xea), Register(0xea)], resolved: None }
# t15 U32 <- t16 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }"] }
# 01fdf Instruction { source: "Zero-pad for t15 U32 <- t16 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Ident(\\\"ch\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }\"] }", opcode: LoadImm32, args: [Register(0xf0), Constant32(0x00000000=0)], resolved: None }
20 f0 00 00 00 00 
# 01fe5 Instruction { source: "t15 U32 <- t16 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Ident(\\\"ch\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }\"] }", opcode: Copy8, args: [Register(0xea), Register(0xf0)], resolved: None }
0b ea f0 
# t13 <- t14 Add t15
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") })"] }
# 01fe8 Instruction { source: "t13 <- t14 Add t15\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Ident(\\\"ch\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") })\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 01fe9 Instruction { source: "t13 <- t14 Add t15\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Ident(\\\"ch\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") })\"] }", opcode: AddCarry32_1, args: [Register(0xfc), Register(0xf0), Register(0xfc)], resolved: None }
30 fc f0 fc 
# 01fed Instruction { source: "t13 <- t14 Add t15\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Ident(\\\"ch\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") })\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t17 <- ch U8
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t17 <- ch U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Ident(\\\"ch\\\") }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0xe9), Register(0xe9)], resolved: None }
# mem[t13] <- t17 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }"] }
# 01fee Instruction { source: "mem[t13] <- t17 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Ident(\\\"ch\\\") }\"] }", opcode: Store8, args: [Register(0xe9), Register(0xfc)], resolved: None }
06 e9 fc 
# t20 <- i U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_set_pos\", parameters: [Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"i\")] })] }) }", "Call(Call { function: \"lcd_set_pos\", parameters: [Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"i\")] })] })", "Call(Call { function: \"lcd_set_pos\", parameters: [Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"i\")] })] })", "Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"i\")] })", "Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"i\")] })", "Ident(\"i\")", "Ident(\"i\")"] }
# optimized away noop copy Instruction { source: "t20 <- i U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_set_pos\\\", parameters: [Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"i\\\")] })] }) }\", \"Call(Call { function: \\\"lcd_set_pos\\\", parameters: [Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"i\\\")] })] })\", \"Call(Call { function: \\\"lcd_set_pos\\\", parameters: [Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"i\\\")] })] })\", \"Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"i\\\")] })\", \"Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"i\\\")] })\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0xea), Register(0xea)], resolved: None }
# inline_lcd_scroll_up_lcd_logical_to_physical_3_i <- t20 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_set_pos\", parameters: [Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"i\")] })] }) }", "Call(Call { function: \"lcd_set_pos\", parameters: [Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"i\")] })] })", "Call(Call { function: \"lcd_set_pos\", parameters: [Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"i\")] })] })", "Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"i\")] })", "Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"i\")] })"] }
# 01ff1 Instruction { source: "inline_lcd_scroll_up_lcd_logical_to_physical_3_i <- t20 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_set_pos\\\", parameters: [Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"i\\\")] })] }) }\", \"Call(Call { function: \\\"lcd_set_pos\\\", parameters: [Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"i\\\")] })] })\", \"Call(Call { function: \\\"lcd_set_pos\\\", parameters: [Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"i\\\")] })] })\", \"Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"i\\\")] })\", \"Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"i\\\")] })\"] }", opcode: Copy8, args: [Register(0xea), Register(0xeb)], resolved: None }
0b ea eb 
# inline_lcd_scroll_up_lcd_logical_to_physical_3_t0 <- inline_lcd_scroll_up_lcd_logical_to_physical_3_i U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"row\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"i\"), Number(U8, 20)) }", "Arithmetic(Divide, Ident(\"i\"), Number(U8, 20))", "Ident(\"i\")", "Ident(\"i\")"] }
# optimized away noop copy Instruction { source: "inline_lcd_scroll_up_lcd_logical_to_physical_3_t0 <- inline_lcd_scroll_up_lcd_logical_to_physical_3_i U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"row\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"i\\\"), Number(U8, 20)) }\", \"Arithmetic(Divide, Ident(\\\"i\\\"), Number(U8, 20))\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0xeb), Register(0xeb)], resolved: None }
# inline_lcd_scroll_up_lcd_logical_to_physical_3_t1 <- 0n20/0x14u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"row\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"i\"), Number(U8, 20)) }", "Arithmetic(Divide, Ident(\"i\"), Number(U8, 20))", "Number(U8, 20)", "Number(U8, 20)"] }
# 01ff4 Instruction { source: "inline_lcd_scroll_up_lcd_logical_to_physical_3_t1 <- 0n20/0x14u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"row\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"i\\\"), Number(U8, 20)) }\", \"Arithmetic(Divide, Ident(\\\"i\\\"), Number(U8, 20))\", \"Number(U8, 20)\", \"Number(U8, 20)\"] }", opcode: LoadImm8, args: [Register(0xec), Constant8(0x14=20)], resolved: None }
04 ec 14 
# inline_lcd_scroll_up_lcd_logical_to_physical_3_row <- inline_lcd_scroll_up_lcd_logical_to_physical_3_t0 Divide inline_lcd_scroll_up_lcd_logical_to_physical_3_t1
# 	SourceContext { contexts: ["Assign { target: Ident(\"row\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"i\"), Number(U8, 20)) }", "Arithmetic(Divide, Ident(\"i\"), Number(U8, 20))"] }
# 01ff7 Instruction { source: "inline_lcd_scroll_up_lcd_logical_to_physical_3_row <- inline_lcd_scroll_up_lcd_logical_to_physical_3_t0 Divide inline_lcd_scroll_up_lcd_logical_to_physical_3_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"row\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"i\\\"), Number(U8, 20)) }\", \"Arithmetic(Divide, Ident(\\\"i\\\"), Number(U8, 20))\"] }", opcode: Divide8, args: [Register(0xeb), Register(0xec), Register(0xec)], resolved: None }
17 eb ec ec 
# inline_lcd_scroll_up_lcd_logical_to_physical_3_t2 <- inline_lcd_scroll_up_lcd_logical_to_physical_3_i U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"col\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20))) }", "Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20)))", "Ident(\"i\")", "Ident(\"i\")"] }
# optimized away noop copy Instruction { source: "inline_lcd_scroll_up_lcd_logical_to_physical_3_t2 <- inline_lcd_scroll_up_lcd_logical_to_physical_3_i U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"col\\\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))) }\", \"Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20)))\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0xeb), Register(0xeb)], resolved: None }
# inline_lcd_scroll_up_lcd_logical_to_physical_3_t4 <- inline_lcd_scroll_up_lcd_logical_to_physical_3_row U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"col\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20))) }", "Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20)))", "Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20))", "Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20))", "Ident(\"row\")", "Ident(\"row\")"] }
# optimized away noop copy Instruction { source: "inline_lcd_scroll_up_lcd_logical_to_physical_3_t4 <- inline_lcd_scroll_up_lcd_logical_to_physical_3_row U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"col\\\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))) }\", \"Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20)))\", \"Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))\", \"Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))\", \"Ident(\\\"row\\\")\", \"Ident(\\\"row\\\")\"] }", opcode: Copy8, args: [Register(0xec), Register(0xec)], resolved: None }
# inline_lcd_scroll_up_lcd_logical_to_physical_3_t5 <- 0n20/0x14u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"col\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20))) }", "Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20)))", "Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20))", "Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20))", "Number(U8, 20)", "Number(U8, 20)"] }
# 01ffb Instruction { source: "inline_lcd_scroll_up_lcd_logical_to_physical_3_t5 <- 0n20/0x14u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"col\\\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))) }\", \"Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20)))\", \"Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))\", \"Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))\", \"Number(U8, 20)\", \"Number(U8, 20)\"] }", opcode: LoadImm8, args: [Register(0xf4), Constant8(0x14=20)], resolved: None }
04 f4 14 
# inline_lcd_scroll_up_lcd_logical_to_physical_3_t3 <- inline_lcd_scroll_up_lcd_logical_to_physical_3_t4 Multiply inline_lcd_scroll_up_lcd_logical_to_physical_3_t5
# 	SourceContext { contexts: ["Assign { target: Ident(\"col\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20))) }", "Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20)))", "Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20))", "Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20))"] }
# 01ffe Instruction { source: "inline_lcd_scroll_up_lcd_logical_to_physical_3_t3 <- inline_lcd_scroll_up_lcd_logical_to_physical_3_t4 Multiply inline_lcd_scroll_up_lcd_logical_to_physical_3_t5\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"col\\\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))) }\", \"Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20)))\", \"Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))\", \"Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))\"] }", opcode: Mul8_8, args: [Register(0xec), Register(0xf4), Register(0xf4)], resolved: None }
10 ec f4 f4 
# inline_lcd_scroll_up_lcd_logical_to_physical_3_col <- inline_lcd_scroll_up_lcd_logical_to_physical_3_t2 Subtract inline_lcd_scroll_up_lcd_logical_to_physical_3_t3
# 	SourceContext { contexts: ["Assign { target: Ident(\"col\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20))) }", "Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20)))"] }
# 02002 Instruction { source: "inline_lcd_scroll_up_lcd_logical_to_physical_3_col <- inline_lcd_scroll_up_lcd_logical_to_physical_3_t2 Subtract inline_lcd_scroll_up_lcd_logical_to_physical_3_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"col\\\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))) }\", \"Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20)))\"] }", opcode: Copy8, args: [Register(0xf4), Register(0x00)], resolved: None }
0b f4 00 
# 02005 Instruction { source: "inline_lcd_scroll_up_lcd_logical_to_physical_3_col <- inline_lcd_scroll_up_lcd_logical_to_physical_3_t2 Subtract inline_lcd_scroll_up_lcd_logical_to_physical_3_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"col\\\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))) }\", \"Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20)))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 02007 Instruction { source: "inline_lcd_scroll_up_lcd_logical_to_physical_3_col <- inline_lcd_scroll_up_lcd_logical_to_physical_3_t2 Subtract inline_lcd_scroll_up_lcd_logical_to_physical_3_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"col\\\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))) }\", \"Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20)))\"] }", opcode: Add8NoCarryIn, args: [Register(0xeb), Register(0x00), Register(0xeb)], resolved: None }
14 eb 00 eb 
# inline_lcd_scroll_up_lcd_logical_to_physical_3_t9 <- const &lcd_row_start
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Index(\"lcd_row_start\", Ident(\"row\"))", "Index(\"lcd_row_start\", Ident(\"row\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") })", "Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }", "Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }", "Ident(\"lcd_row_start\")"] }
# 0200b Instruction { source: "inline_lcd_scroll_up_lcd_logical_to_physical_3_t9 <- const &lcd_row_start\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))) }\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") })\", \"Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }\", \"Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }\", \"Ident(\\\"lcd_row_start\\\")\"] }", opcode: LoadImm32, args: [Register(0xf8), Label32(:lcd_row_start)], resolved: None }
20 f8 23 04 00 00 
# inline_lcd_scroll_up_lcd_logical_to_physical_3_t11 <- inline_lcd_scroll_up_lcd_logical_to_physical_3_row U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Index(\"lcd_row_start\", Ident(\"row\"))", "Index(\"lcd_row_start\", Ident(\"row\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }", "Ident(\"row\")", "Ident(\"row\")"] }
# optimized away noop copy Instruction { source: "inline_lcd_scroll_up_lcd_logical_to_physical_3_t11 <- inline_lcd_scroll_up_lcd_logical_to_physical_3_row U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))) }\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }\", \"Ident(\\\"row\\\")\", \"Ident(\\\"row\\\")\"] }", opcode: Copy8, args: [Register(0xec), Register(0xec)], resolved: None }
# inline_lcd_scroll_up_lcd_logical_to_physical_3_t10 U32 <- inline_lcd_scroll_up_lcd_logical_to_physical_3_t11 U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Index(\"lcd_row_start\", Ident(\"row\"))", "Index(\"lcd_row_start\", Ident(\"row\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }"] }
# 02011 Instruction { source: "Zero-pad for inline_lcd_scroll_up_lcd_logical_to_physical_3_t10 U32 <- inline_lcd_scroll_up_lcd_logical_to_physical_3_t11 U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))) }\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }\"] }", opcode: LoadImm32, args: [Register(0xf0), Constant32(0x00000000=0)], resolved: None }
20 f0 00 00 00 00 
# 02017 Instruction { source: "inline_lcd_scroll_up_lcd_logical_to_physical_3_t10 U32 <- inline_lcd_scroll_up_lcd_logical_to_physical_3_t11 U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))) }\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }\"] }", opcode: Copy8, args: [Register(0xec), Register(0xf0)], resolved: None }
0b ec f0 
# inline_lcd_scroll_up_lcd_logical_to_physical_3_t8 <- inline_lcd_scroll_up_lcd_logical_to_physical_3_t9 Add inline_lcd_scroll_up_lcd_logical_to_physical_3_t10
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Index(\"lcd_row_start\", Ident(\"row\"))", "Index(\"lcd_row_start\", Ident(\"row\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") })"] }
# 0201a Instruction { source: "inline_lcd_scroll_up_lcd_logical_to_physical_3_t8 <- inline_lcd_scroll_up_lcd_logical_to_physical_3_t9 Add inline_lcd_scroll_up_lcd_logical_to_physical_3_t10\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))) }\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") })\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0201b Instruction { source: "inline_lcd_scroll_up_lcd_logical_to_physical_3_t8 <- inline_lcd_scroll_up_lcd_logical_to_physical_3_t9 Add inline_lcd_scroll_up_lcd_logical_to_physical_3_t10\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))) }\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") })\"] }", opcode: AddCarry32_1, args: [Register(0xf8), Register(0xf0), Register(0xf0)], resolved: None }
30 f8 f0 f0 
# 0201f Instruction { source: "inline_lcd_scroll_up_lcd_logical_to_physical_3_t8 <- inline_lcd_scroll_up_lcd_logical_to_physical_3_t9 Add inline_lcd_scroll_up_lcd_logical_to_physical_3_t10\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))) }\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") })\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_lcd_scroll_up_lcd_logical_to_physical_3_t7 <- mem[inline_lcd_scroll_up_lcd_logical_to_physical_3_t8] U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Index(\"lcd_row_start\", Ident(\"row\"))", "Index(\"lcd_row_start\", Ident(\"row\"))"] }
# 02020 Instruction { source: "inline_lcd_scroll_up_lcd_logical_to_physical_3_t7 <- mem[inline_lcd_scroll_up_lcd_logical_to_physical_3_t8] U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))) }\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\"] }", opcode: Load8, args: [Register(0xf0), Register(0xec)], resolved: None }
05 f0 ec 
# inline_lcd_scroll_up_lcd_logical_to_physical_3_t12 <- inline_lcd_scroll_up_lcd_logical_to_physical_3_col U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Ident(\"col\")", "Ident(\"col\")"] }
# optimized away noop copy Instruction { source: "inline_lcd_scroll_up_lcd_logical_to_physical_3_t12 <- inline_lcd_scroll_up_lcd_logical_to_physical_3_col U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))) }\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Ident(\\\"col\\\")\", \"Ident(\\\"col\\\")\"] }", opcode: Copy8, args: [Register(0xeb), Register(0xeb)], resolved: None }
# inline_lcd_scroll_up_lcd_logical_to_physical_3_t6 <- inline_lcd_scroll_up_lcd_logical_to_physical_3_t7 Add inline_lcd_scroll_up_lcd_logical_to_physical_3_t12
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))"] }
# 02023 Instruction { source: "inline_lcd_scroll_up_lcd_logical_to_physical_3_t6 <- inline_lcd_scroll_up_lcd_logical_to_physical_3_t7 Add inline_lcd_scroll_up_lcd_logical_to_physical_3_t12\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))) }\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\"] }", opcode: Add8NoCarryIn, args: [Register(0xec), Register(0xeb), Register(0xeb)], resolved: None }
14 ec eb eb 
# t19 <- inline_lcd_scroll_up_lcd_logical_to_physical_3_t6 U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }"] }
# optimized away noop copy Instruction { source: "t19 <- inline_lcd_scroll_up_lcd_logical_to_physical_3_t6 U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))) }\"] }", opcode: Copy8, args: [Register(0xeb), Register(0xeb)], resolved: None }
# goto inline_lcd_scroll_up_lcd_logical_to_physical_3_function_end_lcd_logical_to_physical
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_lcd_scroll_up_lcd_logical_to_physical_3_function_end_lcd_logical_to_physical\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_lcd_scroll_up_lcd_logical_to_physical_3_function_end_lcd_logical_to_physical)], resolved: None }
# :inline_lcd_scroll_up_lcd_logical_to_physical_3_function_end_lcd_logical_to_physical
# 	SourceContext { contexts: [] }
# inline_lcd_scroll_up_lcd_logical_to_physical_3_function_end_lcd_logical_to_physical
# None <= call lcd_set_pos(t19,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_set_pos\", parameters: [Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"i\")] })] }) }", "Call(Call { function: \"lcd_set_pos\", parameters: [Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"i\")] })] })", "Call(Call { function: \"lcd_set_pos\", parameters: [Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"i\")] })] })"] }
# 02027 Instruction { source: "Arg0[pos]=t19 None <= call lcd_set_pos(t19,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_set_pos\\\", parameters: [Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"i\\\")] })] }) }\", \"Call(Call { function: \\\"lcd_set_pos\\\", parameters: [Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"i\\\")] })] })\", \"Call(Call { function: \\\"lcd_set_pos\\\", parameters: [Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"i\\\")] })] })\"] }", opcode: Copy8, args: [Register(0xeb), Register(0x00)], resolved: None }
0b eb 00 
# Registers used by this function: {16, 17, 18, 19, 20, 21, 22, 23, 233, 234, 235, 236, 240, 241, 242, 243, 244, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers used by callee tree: {24, 25, 28, 29, 30, 31, 32, 152, 153, 154, 155, 156, 157, 158, 159, 217}
# Registers to save: []
# 0202a Instruction { source: "PseudoCall(Label24(:lcd_set_pos))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 02030 Instruction { source: "PseudoCall(Label24(:lcd_set_pos))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 3a 20 00 00 
# 02036 Instruction { source: "PseudoCall(Label24(:lcd_set_pos))", opcode: JmpImm, args: [Label24(:lcd_set_pos)], resolved: None }
70 d7 21 00 
# 0203a Instruction { source: "PseudoCall(Label24(:lcd_set_pos))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# t22 <- ch U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"ch\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"ch\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"ch\")] })", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t22 <- ch U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0xe9), Register(0xe9)], resolved: None }
# None <= call lcd_write_char(t22,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"ch\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"ch\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"ch\")] })"] }
# 02040 Instruction { source: "Arg0[ch]=t22 None <= call lcd_write_char(t22,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\"] }", opcode: Copy8, args: [Register(0xe9), Register(0x00)], resolved: None }
0b e9 00 
# Registers used by this function: {16, 17, 18, 19, 20, 21, 22, 23, 233, 234, 235, 236, 240, 241, 242, 243, 244, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 152, 153, 154, 155, 156, 157, 158, 159, 217, 233, 234, 235, 236, 240, 241, 242, 243, 244, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: [16, 17, 18, 19, 20, 21, 22, 23, 233, 234, 235, 236, 240, 241, 242, 243, 244, 248, 249, 250, 251, 252, 253, 254, 255]
# 02043 Instruction { source: "Saving reg0xff before None <= call lcd_write_char(t22,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0xff)], resolved: None }
09 ff 
# 02045 Instruction { source: "Saving reg0xfe before None <= call lcd_write_char(t22,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0xfe)], resolved: None }
09 fe 
# 02047 Instruction { source: "Saving reg0xfd before None <= call lcd_write_char(t22,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0xfd)], resolved: None }
09 fd 
# 02049 Instruction { source: "Saving reg0xfc before None <= call lcd_write_char(t22,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0xfc)], resolved: None }
09 fc 
# 0204b Instruction { source: "Saving reg0xfb before None <= call lcd_write_char(t22,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0xfb)], resolved: None }
09 fb 
# 0204d Instruction { source: "Saving reg0xfa before None <= call lcd_write_char(t22,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0xfa)], resolved: None }
09 fa 
# 0204f Instruction { source: "Saving reg0xf9 before None <= call lcd_write_char(t22,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0xf9)], resolved: None }
09 f9 
# 02051 Instruction { source: "Saving reg0xf8 before None <= call lcd_write_char(t22,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0xf8)], resolved: None }
09 f8 
# 02053 Instruction { source: "Saving reg0xf4 before None <= call lcd_write_char(t22,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0xf4)], resolved: None }
09 f4 
# 02055 Instruction { source: "Saving reg0xf3 before None <= call lcd_write_char(t22,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0xf3)], resolved: None }
09 f3 
# 02057 Instruction { source: "Saving reg0xf2 before None <= call lcd_write_char(t22,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0xf2)], resolved: None }
09 f2 
# 02059 Instruction { source: "Saving reg0xf1 before None <= call lcd_write_char(t22,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0xf1)], resolved: None }
09 f1 
# 0205b Instruction { source: "Saving reg0xf0 before None <= call lcd_write_char(t22,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0xf0)], resolved: None }
09 f0 
# 0205d Instruction { source: "Saving reg0xec before None <= call lcd_write_char(t22,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0xec)], resolved: None }
09 ec 
# 0205f Instruction { source: "Saving reg0xeb before None <= call lcd_write_char(t22,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0xeb)], resolved: None }
09 eb 
# 02061 Instruction { source: "Saving reg0xea before None <= call lcd_write_char(t22,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0xea)], resolved: None }
09 ea 
# 02063 Instruction { source: "Saving reg0xe9 before None <= call lcd_write_char(t22,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0xe9)], resolved: None }
09 e9 
# 02065 Instruction { source: "Saving reg0x17 before None <= call lcd_write_char(t22,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0x17)], resolved: None }
09 17 
# 02067 Instruction { source: "Saving reg0x16 before None <= call lcd_write_char(t22,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0x16)], resolved: None }
09 16 
# 02069 Instruction { source: "Saving reg0x15 before None <= call lcd_write_char(t22,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0x15)], resolved: None }
09 15 
# 0206b Instruction { source: "Saving reg0x14 before None <= call lcd_write_char(t22,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0x14)], resolved: None }
09 14 
# 0206d Instruction { source: "Saving reg0x13 before None <= call lcd_write_char(t22,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0x13)], resolved: None }
09 13 
# 0206f Instruction { source: "Saving reg0x12 before None <= call lcd_write_char(t22,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0x12)], resolved: None }
09 12 
# 02071 Instruction { source: "Saving reg0x11 before None <= call lcd_write_char(t22,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0x11)], resolved: None }
09 11 
# 02073 Instruction { source: "Saving reg0x10 before None <= call lcd_write_char(t22,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\"] }", opcode: Push8, args: [Register(0x10)], resolved: None }
09 10 
# 02075 Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 0207b Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 85 20 00 00 
# 02081 Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: JmpImm, args: [Label24(:lcd_write_char)], resolved: None }
70 1a 22 00 
# 02085 Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 0208b Instruction { source: "Restoring reg0x10 after None <= call lcd_write_char(t22,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0x10)], resolved: None }
0a 10 
# 0208d Instruction { source: "Restoring reg0x11 after None <= call lcd_write_char(t22,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0x11)], resolved: None }
0a 11 
# 0208f Instruction { source: "Restoring reg0x12 after None <= call lcd_write_char(t22,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0x12)], resolved: None }
0a 12 
# 02091 Instruction { source: "Restoring reg0x13 after None <= call lcd_write_char(t22,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0x13)], resolved: None }
0a 13 
# 02093 Instruction { source: "Restoring reg0x14 after None <= call lcd_write_char(t22,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0x14)], resolved: None }
0a 14 
# 02095 Instruction { source: "Restoring reg0x15 after None <= call lcd_write_char(t22,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0x15)], resolved: None }
0a 15 
# 02097 Instruction { source: "Restoring reg0x16 after None <= call lcd_write_char(t22,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0x16)], resolved: None }
0a 16 
# 02099 Instruction { source: "Restoring reg0x17 after None <= call lcd_write_char(t22,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0x17)], resolved: None }
0a 17 
# 0209b Instruction { source: "Restoring reg0xe9 after None <= call lcd_write_char(t22,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0xe9)], resolved: None }
0a e9 
# 0209d Instruction { source: "Restoring reg0xea after None <= call lcd_write_char(t22,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0xea)], resolved: None }
0a ea 
# 0209f Instruction { source: "Restoring reg0xeb after None <= call lcd_write_char(t22,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0xeb)], resolved: None }
0a eb 
# 020a1 Instruction { source: "Restoring reg0xec after None <= call lcd_write_char(t22,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0xec)], resolved: None }
0a ec 
# 020a3 Instruction { source: "Restoring reg0xf0 after None <= call lcd_write_char(t22,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0xf0)], resolved: None }
0a f0 
# 020a5 Instruction { source: "Restoring reg0xf1 after None <= call lcd_write_char(t22,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0xf1)], resolved: None }
0a f1 
# 020a7 Instruction { source: "Restoring reg0xf2 after None <= call lcd_write_char(t22,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0xf2)], resolved: None }
0a f2 
# 020a9 Instruction { source: "Restoring reg0xf3 after None <= call lcd_write_char(t22,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0xf3)], resolved: None }
0a f3 
# 020ab Instruction { source: "Restoring reg0xf4 after None <= call lcd_write_char(t22,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0xf4)], resolved: None }
0a f4 
# 020ad Instruction { source: "Restoring reg0xf8 after None <= call lcd_write_char(t22,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0xf8)], resolved: None }
0a f8 
# 020af Instruction { source: "Restoring reg0xf9 after None <= call lcd_write_char(t22,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0xf9)], resolved: None }
0a f9 
# 020b1 Instruction { source: "Restoring reg0xfa after None <= call lcd_write_char(t22,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0xfa)], resolved: None }
0a fa 
# 020b3 Instruction { source: "Restoring reg0xfb after None <= call lcd_write_char(t22,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0xfb)], resolved: None }
0a fb 
# 020b5 Instruction { source: "Restoring reg0xfc after None <= call lcd_write_char(t22,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0xfc)], resolved: None }
0a fc 
# 020b7 Instruction { source: "Restoring reg0xfd after None <= call lcd_write_char(t22,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0xfd)], resolved: None }
0a fd 
# 020b9 Instruction { source: "Restoring reg0xfe after None <= call lcd_write_char(t22,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0xfe)], resolved: None }
0a fe 
# 020bb Instruction { source: "Restoring reg0xff after None <= call lcd_write_char(t22,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"ch\\\")] })\"] }", opcode: Pop8, args: [Register(0xff)], resolved: None }
0a ff 
# t23 <- i U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"i\"), Number(U8, 1))", "Ident(\"i\")", "Ident(\"i\")"] }
# 020bd Instruction { source: "t23 <- i U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1))\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0xea), Register(0xe9)], resolved: None }
0b ea e9 
# t24 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"i\"), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 020c0 Instruction { source: "t24 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0xea), Constant8(0x01=1)], resolved: None }
04 ea 01 
# i <- t23 Add t24
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"i\"), Number(U8, 1))"] }
# 020c3 Instruction { source: "i <- t23 Add t24\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1))\"] }", opcode: Add8NoCarryIn, args: [Register(0xe9), Register(0xea), Register(0xea)], resolved: None }
14 e9 ea ea 
# goto lcd_scroll_up_while_predicate_0
# 	SourceContext { contexts: [] }
# 020c7 Instruction { source: "goto lcd_scroll_up_while_predicate_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(lcd_scroll_up_while_predicate_0)], resolved: None }
70 aa 1f 00 
# :lcd_scroll_up_while_end_2
# 	SourceContext { contexts: [] }
# lcd_scroll_up_while_end_2
# :lcd_scroll_up_while_predicate_3
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: \"lcd_set_pos\", parameters: [Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"i\")] })] }) }, VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Number(U8, 32)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }"] }
# lcd_scroll_up_while_predicate_3
# t25 <- i U8
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: \"lcd_set_pos\", parameters: [Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"i\")] })] }) }, VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Number(U8, 32)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }", "Ident(\"i\")", "Ident(\"i\")"] }
# 020cb Instruction { source: "t25 <- i U8\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: \\\"lcd_set_pos\\\", parameters: [Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"i\\\")] })] }) }, VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 80) }\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0xea), Register(0xe9)], resolved: None }
0b ea e9 
# t26 <- 0n80/0x50u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: \"lcd_set_pos\", parameters: [Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"i\")] })] }) }, VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Number(U8, 32)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }", "Number(U8, 80)", "Number(U8, 80)"] }
# 020ce Instruction { source: "t26 <- 0n80/0x50u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: \\\"lcd_set_pos\\\", parameters: [Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"i\\\")] })] }) }, VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 80) }\", \"Number(U8, 80)\", \"Number(U8, 80)\"] }", opcode: LoadImm8, args: [Register(0xeb), Constant8(0x50=80)], resolved: None }
04 eb 50 
# if t25 < t26 then 'lcd_scroll_up_while_body_4' else 'lcd_scroll_up_while_end_5'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: \"lcd_set_pos\", parameters: [Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"i\")] })] }) }, VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Number(U8, 32)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }"] }
# 020d1 Instruction { source: "if t25 < t26 then 'lcd_scroll_up_while_body_4' else 'lcd_scroll_up_while_end_5'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: \\\"lcd_set_pos\\\", parameters: [Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"i\\\")] })] }) }, VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 80) }\"] }", opcode: Cmp8, args: [Register(0xeb), Register(0xe9)], resolved: None }
15 eb e9 
# 020d4 Instruction { source: "if t25 < t26 then 'lcd_scroll_up_while_body_4' else 'lcd_scroll_up_while_end_5'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: \\\"lcd_set_pos\\\", parameters: [Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"i\\\")] })] }) }, VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 80) }\"] }", opcode: JcImm, args: [Label24(lcd_scroll_up_while_end_5)], resolved: None }
71 d0 21 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t25 < t26 then 'lcd_scroll_up_while_body_4' else 'lcd_scroll_up_while_end_5'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: \\\"lcd_set_pos\\\", parameters: [Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"i\\\")] })] }) }, VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 80) }\"] }", opcode: JmpImm, args: [Label24(lcd_scroll_up_while_body_4)], resolved: None }
# :lcd_scroll_up_while_body_4
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: \"lcd_set_pos\", parameters: [Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"i\")] })] }) }, VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Number(U8, 32)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }"] }
# lcd_scroll_up_while_body_4
# t28 <- 0n987148/0x000f100cu32 
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") })", "Number(USIZE, 987148)", "Number(USIZE, 987148)"] }
# 020d8 Instruction { source: "t28 <- 0n987148/0x000f100cu32 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") })\", \"Number(USIZE, 987148)\", \"Number(USIZE, 987148)\"] }", opcode: LoadImm32, args: [Register(0x10), Constant32(0x000f100c=987148)], resolved: None }
20 10 0c 10 0f 00 
# t30 <- i U8
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }", "Ident(\"i\")", "Ident(\"i\")"] }
# optimized away noop copy Instruction { source: "t30 <- i U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0xea), Register(0xea)], resolved: None }
# t29 U32 <- t30 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }"] }
# 020de Instruction { source: "Zero-pad for t29 U32 <- t30 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }\"] }", opcode: LoadImm32, args: [Register(0xfc), Constant32(0x00000000=0)], resolved: None }
20 fc 00 00 00 00 
# 020e4 Instruction { source: "t29 U32 <- t30 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }\"] }", opcode: Copy8, args: [Register(0xea), Register(0xfc)], resolved: None }
0b ea fc 
# t27 <- t28 Add t29
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") })"] }
# 020e7 Instruction { source: "t27 <- t28 Add t29\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") })\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 020e8 Instruction { source: "t27 <- t28 Add t29\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") })\"] }", opcode: AddCarry32_1, args: [Register(0x10), Register(0xfc), Register(0x10)], resolved: None }
30 10 fc 10 
# 020ec Instruction { source: "t27 <- t28 Add t29\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") })\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t31 <- 0n32/0x20u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }", "Number(U8, 32)", "Number(U8, 32)"] }
# 020ed Instruction { source: "t31 <- 0n32/0x20u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }\", \"Number(U8, 32)\", \"Number(U8, 32)\"] }", opcode: LoadImm8, args: [Register(0xeb), Constant8(0x20=32)], resolved: None }
04 eb 20 
# mem[t27] <- t31 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }"] }
# 020f0 Instruction { source: "mem[t27] <- t31 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }\"] }", opcode: Store8, args: [Register(0xeb), Register(0x10)], resolved: None }
06 eb 10 
# t34 <- i U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_set_pos\", parameters: [Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"i\")] })] }) }", "Call(Call { function: \"lcd_set_pos\", parameters: [Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"i\")] })] })", "Call(Call { function: \"lcd_set_pos\", parameters: [Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"i\")] })] })", "Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"i\")] })", "Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"i\")] })", "Ident(\"i\")", "Ident(\"i\")"] }
# 020f3 Instruction { source: "t34 <- i U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_set_pos\\\", parameters: [Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"i\\\")] })] }) }\", \"Call(Call { function: \\\"lcd_set_pos\\\", parameters: [Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"i\\\")] })] })\", \"Call(Call { function: \\\"lcd_set_pos\\\", parameters: [Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"i\\\")] })] })\", \"Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"i\\\")] })\", \"Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"i\\\")] })\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0xea), Register(0xe9)], resolved: None }
0b ea e9 
# inline_lcd_scroll_up_lcd_logical_to_physical_4_i <- t34 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_set_pos\", parameters: [Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"i\")] })] }) }", "Call(Call { function: \"lcd_set_pos\", parameters: [Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"i\")] })] })", "Call(Call { function: \"lcd_set_pos\", parameters: [Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"i\")] })] })", "Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"i\")] })", "Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"i\")] })"] }
# optimized away noop copy Instruction { source: "inline_lcd_scroll_up_lcd_logical_to_physical_4_i <- t34 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_set_pos\\\", parameters: [Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"i\\\")] })] }) }\", \"Call(Call { function: \\\"lcd_set_pos\\\", parameters: [Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"i\\\")] })] })\", \"Call(Call { function: \\\"lcd_set_pos\\\", parameters: [Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"i\\\")] })] })\", \"Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"i\\\")] })\", \"Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"i\\\")] })\"] }", opcode: Copy8, args: [Register(0xe9), Register(0xe9)], resolved: None }
# inline_lcd_scroll_up_lcd_logical_to_physical_4_t0 <- inline_lcd_scroll_up_lcd_logical_to_physical_4_i U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"row\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"i\"), Number(U8, 20)) }", "Arithmetic(Divide, Ident(\"i\"), Number(U8, 20))", "Ident(\"i\")", "Ident(\"i\")"] }
# optimized away noop copy Instruction { source: "inline_lcd_scroll_up_lcd_logical_to_physical_4_t0 <- inline_lcd_scroll_up_lcd_logical_to_physical_4_i U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"row\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"i\\\"), Number(U8, 20)) }\", \"Arithmetic(Divide, Ident(\\\"i\\\"), Number(U8, 20))\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0xe9), Register(0xe9)], resolved: None }
# inline_lcd_scroll_up_lcd_logical_to_physical_4_t1 <- 0n20/0x14u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"row\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"i\"), Number(U8, 20)) }", "Arithmetic(Divide, Ident(\"i\"), Number(U8, 20))", "Number(U8, 20)", "Number(U8, 20)"] }
# 020f6 Instruction { source: "inline_lcd_scroll_up_lcd_logical_to_physical_4_t1 <- 0n20/0x14u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"row\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"i\\\"), Number(U8, 20)) }\", \"Arithmetic(Divide, Ident(\\\"i\\\"), Number(U8, 20))\", \"Number(U8, 20)\", \"Number(U8, 20)\"] }", opcode: LoadImm8, args: [Register(0xeb), Constant8(0x14=20)], resolved: None }
04 eb 14 
# inline_lcd_scroll_up_lcd_logical_to_physical_4_row <- inline_lcd_scroll_up_lcd_logical_to_physical_4_t0 Divide inline_lcd_scroll_up_lcd_logical_to_physical_4_t1
# 	SourceContext { contexts: ["Assign { target: Ident(\"row\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"i\"), Number(U8, 20)) }", "Arithmetic(Divide, Ident(\"i\"), Number(U8, 20))"] }
# 020f9 Instruction { source: "inline_lcd_scroll_up_lcd_logical_to_physical_4_row <- inline_lcd_scroll_up_lcd_logical_to_physical_4_t0 Divide inline_lcd_scroll_up_lcd_logical_to_physical_4_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"row\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"i\\\"), Number(U8, 20)) }\", \"Arithmetic(Divide, Ident(\\\"i\\\"), Number(U8, 20))\"] }", opcode: Divide8, args: [Register(0xe9), Register(0xeb), Register(0xeb)], resolved: None }
17 e9 eb eb 
# inline_lcd_scroll_up_lcd_logical_to_physical_4_t2 <- inline_lcd_scroll_up_lcd_logical_to_physical_4_i U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"col\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20))) }", "Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20)))", "Ident(\"i\")", "Ident(\"i\")"] }
# optimized away noop copy Instruction { source: "inline_lcd_scroll_up_lcd_logical_to_physical_4_t2 <- inline_lcd_scroll_up_lcd_logical_to_physical_4_i U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"col\\\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))) }\", \"Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20)))\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0xe9), Register(0xe9)], resolved: None }
# inline_lcd_scroll_up_lcd_logical_to_physical_4_t4 <- inline_lcd_scroll_up_lcd_logical_to_physical_4_row U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"col\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20))) }", "Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20)))", "Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20))", "Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20))", "Ident(\"row\")", "Ident(\"row\")"] }
# optimized away noop copy Instruction { source: "inline_lcd_scroll_up_lcd_logical_to_physical_4_t4 <- inline_lcd_scroll_up_lcd_logical_to_physical_4_row U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"col\\\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))) }\", \"Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20)))\", \"Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))\", \"Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))\", \"Ident(\\\"row\\\")\", \"Ident(\\\"row\\\")\"] }", opcode: Copy8, args: [Register(0xeb), Register(0xeb)], resolved: None }
# inline_lcd_scroll_up_lcd_logical_to_physical_4_t5 <- 0n20/0x14u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"col\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20))) }", "Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20)))", "Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20))", "Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20))", "Number(U8, 20)", "Number(U8, 20)"] }
# 020fd Instruction { source: "inline_lcd_scroll_up_lcd_logical_to_physical_4_t5 <- 0n20/0x14u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"col\\\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))) }\", \"Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20)))\", \"Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))\", \"Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))\", \"Number(U8, 20)\", \"Number(U8, 20)\"] }", opcode: LoadImm8, args: [Register(0xec), Constant8(0x14=20)], resolved: None }
04 ec 14 
# inline_lcd_scroll_up_lcd_logical_to_physical_4_t3 <- inline_lcd_scroll_up_lcd_logical_to_physical_4_t4 Multiply inline_lcd_scroll_up_lcd_logical_to_physical_4_t5
# 	SourceContext { contexts: ["Assign { target: Ident(\"col\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20))) }", "Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20)))", "Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20))", "Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20))"] }
# 02100 Instruction { source: "inline_lcd_scroll_up_lcd_logical_to_physical_4_t3 <- inline_lcd_scroll_up_lcd_logical_to_physical_4_t4 Multiply inline_lcd_scroll_up_lcd_logical_to_physical_4_t5\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"col\\\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))) }\", \"Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20)))\", \"Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))\", \"Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))\"] }", opcode: Mul8_8, args: [Register(0xeb), Register(0xec), Register(0xec)], resolved: None }
10 eb ec ec 
# inline_lcd_scroll_up_lcd_logical_to_physical_4_col <- inline_lcd_scroll_up_lcd_logical_to_physical_4_t2 Subtract inline_lcd_scroll_up_lcd_logical_to_physical_4_t3
# 	SourceContext { contexts: ["Assign { target: Ident(\"col\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20))) }", "Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20)))"] }
# 02104 Instruction { source: "inline_lcd_scroll_up_lcd_logical_to_physical_4_col <- inline_lcd_scroll_up_lcd_logical_to_physical_4_t2 Subtract inline_lcd_scroll_up_lcd_logical_to_physical_4_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"col\\\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))) }\", \"Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20)))\"] }", opcode: Copy8, args: [Register(0xec), Register(0x00)], resolved: None }
0b ec 00 
# 02107 Instruction { source: "inline_lcd_scroll_up_lcd_logical_to_physical_4_col <- inline_lcd_scroll_up_lcd_logical_to_physical_4_t2 Subtract inline_lcd_scroll_up_lcd_logical_to_physical_4_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"col\\\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))) }\", \"Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20)))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 02109 Instruction { source: "inline_lcd_scroll_up_lcd_logical_to_physical_4_col <- inline_lcd_scroll_up_lcd_logical_to_physical_4_t2 Subtract inline_lcd_scroll_up_lcd_logical_to_physical_4_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"col\\\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))) }\", \"Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20)))\"] }", opcode: Add8NoCarryIn, args: [Register(0xe9), Register(0x00), Register(0xe9)], resolved: None }
14 e9 00 e9 
# inline_lcd_scroll_up_lcd_logical_to_physical_4_t9 <- const &lcd_row_start
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Index(\"lcd_row_start\", Ident(\"row\"))", "Index(\"lcd_row_start\", Ident(\"row\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") })", "Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }", "Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }", "Ident(\"lcd_row_start\")"] }
# 0210d Instruction { source: "inline_lcd_scroll_up_lcd_logical_to_physical_4_t9 <- const &lcd_row_start\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))) }\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") })\", \"Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }\", \"Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }\", \"Ident(\\\"lcd_row_start\\\")\"] }", opcode: LoadImm32, args: [Register(0xf0), Label32(:lcd_row_start)], resolved: None }
20 f0 23 04 00 00 
# inline_lcd_scroll_up_lcd_logical_to_physical_4_t11 <- inline_lcd_scroll_up_lcd_logical_to_physical_4_row U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Index(\"lcd_row_start\", Ident(\"row\"))", "Index(\"lcd_row_start\", Ident(\"row\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }", "Ident(\"row\")", "Ident(\"row\")"] }
# optimized away noop copy Instruction { source: "inline_lcd_scroll_up_lcd_logical_to_physical_4_t11 <- inline_lcd_scroll_up_lcd_logical_to_physical_4_row U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))) }\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }\", \"Ident(\\\"row\\\")\", \"Ident(\\\"row\\\")\"] }", opcode: Copy8, args: [Register(0xeb), Register(0xeb)], resolved: None }
# inline_lcd_scroll_up_lcd_logical_to_physical_4_t10 U32 <- inline_lcd_scroll_up_lcd_logical_to_physical_4_t11 U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Index(\"lcd_row_start\", Ident(\"row\"))", "Index(\"lcd_row_start\", Ident(\"row\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }"] }
# 02113 Instruction { source: "Zero-pad for inline_lcd_scroll_up_lcd_logical_to_physical_4_t10 U32 <- inline_lcd_scroll_up_lcd_logical_to_physical_4_t11 U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))) }\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }\"] }", opcode: LoadImm32, args: [Register(0xfc), Constant32(0x00000000=0)], resolved: None }
20 fc 00 00 00 00 
# 02119 Instruction { source: "inline_lcd_scroll_up_lcd_logical_to_physical_4_t10 U32 <- inline_lcd_scroll_up_lcd_logical_to_physical_4_t11 U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))) }\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }\"] }", opcode: Copy8, args: [Register(0xeb), Register(0xfc)], resolved: None }
0b eb fc 
# inline_lcd_scroll_up_lcd_logical_to_physical_4_t8 <- inline_lcd_scroll_up_lcd_logical_to_physical_4_t9 Add inline_lcd_scroll_up_lcd_logical_to_physical_4_t10
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Index(\"lcd_row_start\", Ident(\"row\"))", "Index(\"lcd_row_start\", Ident(\"row\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") })"] }
# 0211c Instruction { source: "inline_lcd_scroll_up_lcd_logical_to_physical_4_t8 <- inline_lcd_scroll_up_lcd_logical_to_physical_4_t9 Add inline_lcd_scroll_up_lcd_logical_to_physical_4_t10\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))) }\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") })\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0211d Instruction { source: "inline_lcd_scroll_up_lcd_logical_to_physical_4_t8 <- inline_lcd_scroll_up_lcd_logical_to_physical_4_t9 Add inline_lcd_scroll_up_lcd_logical_to_physical_4_t10\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))) }\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") })\"] }", opcode: AddCarry32_1, args: [Register(0xf0), Register(0xfc), Register(0xfc)], resolved: None }
30 f0 fc fc 
# 02121 Instruction { source: "inline_lcd_scroll_up_lcd_logical_to_physical_4_t8 <- inline_lcd_scroll_up_lcd_logical_to_physical_4_t9 Add inline_lcd_scroll_up_lcd_logical_to_physical_4_t10\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))) }\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") })\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_lcd_scroll_up_lcd_logical_to_physical_4_t7 <- mem[inline_lcd_scroll_up_lcd_logical_to_physical_4_t8] U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Index(\"lcd_row_start\", Ident(\"row\"))", "Index(\"lcd_row_start\", Ident(\"row\"))"] }
# 02122 Instruction { source: "inline_lcd_scroll_up_lcd_logical_to_physical_4_t7 <- mem[inline_lcd_scroll_up_lcd_logical_to_physical_4_t8] U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))) }\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\"] }", opcode: Load8, args: [Register(0xfc), Register(0xeb)], resolved: None }
05 fc eb 
# inline_lcd_scroll_up_lcd_logical_to_physical_4_t12 <- inline_lcd_scroll_up_lcd_logical_to_physical_4_col U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Ident(\"col\")", "Ident(\"col\")"] }
# optimized away noop copy Instruction { source: "inline_lcd_scroll_up_lcd_logical_to_physical_4_t12 <- inline_lcd_scroll_up_lcd_logical_to_physical_4_col U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))) }\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Ident(\\\"col\\\")\", \"Ident(\\\"col\\\")\"] }", opcode: Copy8, args: [Register(0xe9), Register(0xe9)], resolved: None }
# inline_lcd_scroll_up_lcd_logical_to_physical_4_t6 <- inline_lcd_scroll_up_lcd_logical_to_physical_4_t7 Add inline_lcd_scroll_up_lcd_logical_to_physical_4_t12
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))"] }
# 02125 Instruction { source: "inline_lcd_scroll_up_lcd_logical_to_physical_4_t6 <- inline_lcd_scroll_up_lcd_logical_to_physical_4_t7 Add inline_lcd_scroll_up_lcd_logical_to_physical_4_t12\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))) }\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\"] }", opcode: Add8NoCarryIn, args: [Register(0xeb), Register(0xe9), Register(0xe9)], resolved: None }
14 eb e9 e9 
# t33 <- inline_lcd_scroll_up_lcd_logical_to_physical_4_t6 U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }"] }
# optimized away noop copy Instruction { source: "t33 <- inline_lcd_scroll_up_lcd_logical_to_physical_4_t6 U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))) }\"] }", opcode: Copy8, args: [Register(0xe9), Register(0xe9)], resolved: None }
# goto inline_lcd_scroll_up_lcd_logical_to_physical_4_function_end_lcd_logical_to_physical
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_lcd_scroll_up_lcd_logical_to_physical_4_function_end_lcd_logical_to_physical\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_lcd_scroll_up_lcd_logical_to_physical_4_function_end_lcd_logical_to_physical)], resolved: None }
# :inline_lcd_scroll_up_lcd_logical_to_physical_4_function_end_lcd_logical_to_physical
# 	SourceContext { contexts: [] }
# inline_lcd_scroll_up_lcd_logical_to_physical_4_function_end_lcd_logical_to_physical
# None <= call lcd_set_pos(t33,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_set_pos\", parameters: [Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"i\")] })] }) }", "Call(Call { function: \"lcd_set_pos\", parameters: [Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"i\")] })] })", "Call(Call { function: \"lcd_set_pos\", parameters: [Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"i\")] })] })"] }
# 02129 Instruction { source: "Arg0[pos]=t33 None <= call lcd_set_pos(t33,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_set_pos\\\", parameters: [Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"i\\\")] })] }) }\", \"Call(Call { function: \\\"lcd_set_pos\\\", parameters: [Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"i\\\")] })] })\", \"Call(Call { function: \\\"lcd_set_pos\\\", parameters: [Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"i\\\")] })] })\"] }", opcode: Copy8, args: [Register(0xe9), Register(0x00)], resolved: None }
0b e9 00 
# Registers used by this function: {16, 17, 18, 19, 20, 21, 22, 23, 233, 234, 235, 236, 240, 241, 242, 243, 244, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers used by callee tree: {24, 25, 28, 29, 30, 31, 32, 152, 153, 154, 155, 156, 157, 158, 159, 217}
# Registers to save: []
# 0212c Instruction { source: "PseudoCall(Label24(:lcd_set_pos))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 02132 Instruction { source: "PseudoCall(Label24(:lcd_set_pos))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 3c 21 00 00 
# 02138 Instruction { source: "PseudoCall(Label24(:lcd_set_pos))", opcode: JmpImm, args: [Label24(:lcd_set_pos)], resolved: None }
70 d7 21 00 
# 0213c Instruction { source: "PseudoCall(Label24(:lcd_set_pos))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# t36 <- 0n32/0x20u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Number(U8, 32)] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Number(U8, 32)] })", "Call(Call { function: \"lcd_write_char\", parameters: [Number(U8, 32)] })", "Number(U8, 32)", "Number(U8, 32)"] }
# 02142 Instruction { source: "t36 <- 0n32/0x20u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\", \"Number(U8, 32)\", \"Number(U8, 32)\"] }", opcode: LoadImm8, args: [Register(0xe9), Constant8(0x20=32)], resolved: None }
04 e9 20 
# None <= call lcd_write_char(t36,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Number(U8, 32)] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Number(U8, 32)] })", "Call(Call { function: \"lcd_write_char\", parameters: [Number(U8, 32)] })"] }
# 02145 Instruction { source: "Arg0[ch]=t36 None <= call lcd_write_char(t36,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\"] }", opcode: Copy8, args: [Register(0xe9), Register(0x00)], resolved: None }
0b e9 00 
# Registers used by this function: {16, 17, 18, 19, 20, 21, 22, 23, 233, 234, 235, 236, 240, 241, 242, 243, 244, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 152, 153, 154, 155, 156, 157, 158, 159, 217, 233, 234, 235, 236, 240, 241, 242, 243, 244, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: [16, 17, 18, 19, 20, 21, 22, 23, 233, 234, 235, 236, 240, 241, 242, 243, 244, 248, 249, 250, 251, 252, 253, 254, 255]
# 02148 Instruction { source: "Saving reg0xff before None <= call lcd_write_char(t36,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\"] }", opcode: Push8, args: [Register(0xff)], resolved: None }
09 ff 
# 0214a Instruction { source: "Saving reg0xfe before None <= call lcd_write_char(t36,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\"] }", opcode: Push8, args: [Register(0xfe)], resolved: None }
09 fe 
# 0214c Instruction { source: "Saving reg0xfd before None <= call lcd_write_char(t36,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\"] }", opcode: Push8, args: [Register(0xfd)], resolved: None }
09 fd 
# 0214e Instruction { source: "Saving reg0xfc before None <= call lcd_write_char(t36,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\"] }", opcode: Push8, args: [Register(0xfc)], resolved: None }
09 fc 
# 02150 Instruction { source: "Saving reg0xfb before None <= call lcd_write_char(t36,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\"] }", opcode: Push8, args: [Register(0xfb)], resolved: None }
09 fb 
# 02152 Instruction { source: "Saving reg0xfa before None <= call lcd_write_char(t36,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\"] }", opcode: Push8, args: [Register(0xfa)], resolved: None }
09 fa 
# 02154 Instruction { source: "Saving reg0xf9 before None <= call lcd_write_char(t36,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\"] }", opcode: Push8, args: [Register(0xf9)], resolved: None }
09 f9 
# 02156 Instruction { source: "Saving reg0xf8 before None <= call lcd_write_char(t36,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\"] }", opcode: Push8, args: [Register(0xf8)], resolved: None }
09 f8 
# 02158 Instruction { source: "Saving reg0xf4 before None <= call lcd_write_char(t36,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\"] }", opcode: Push8, args: [Register(0xf4)], resolved: None }
09 f4 
# 0215a Instruction { source: "Saving reg0xf3 before None <= call lcd_write_char(t36,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\"] }", opcode: Push8, args: [Register(0xf3)], resolved: None }
09 f3 
# 0215c Instruction { source: "Saving reg0xf2 before None <= call lcd_write_char(t36,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\"] }", opcode: Push8, args: [Register(0xf2)], resolved: None }
09 f2 
# 0215e Instruction { source: "Saving reg0xf1 before None <= call lcd_write_char(t36,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\"] }", opcode: Push8, args: [Register(0xf1)], resolved: None }
09 f1 
# 02160 Instruction { source: "Saving reg0xf0 before None <= call lcd_write_char(t36,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\"] }", opcode: Push8, args: [Register(0xf0)], resolved: None }
09 f0 
# 02162 Instruction { source: "Saving reg0xec before None <= call lcd_write_char(t36,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\"] }", opcode: Push8, args: [Register(0xec)], resolved: None }
09 ec 
# 02164 Instruction { source: "Saving reg0xeb before None <= call lcd_write_char(t36,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\"] }", opcode: Push8, args: [Register(0xeb)], resolved: None }
09 eb 
# 02166 Instruction { source: "Saving reg0xea before None <= call lcd_write_char(t36,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\"] }", opcode: Push8, args: [Register(0xea)], resolved: None }
09 ea 
# 02168 Instruction { source: "Saving reg0xe9 before None <= call lcd_write_char(t36,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\"] }", opcode: Push8, args: [Register(0xe9)], resolved: None }
09 e9 
# 0216a Instruction { source: "Saving reg0x17 before None <= call lcd_write_char(t36,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\"] }", opcode: Push8, args: [Register(0x17)], resolved: None }
09 17 
# 0216c Instruction { source: "Saving reg0x16 before None <= call lcd_write_char(t36,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\"] }", opcode: Push8, args: [Register(0x16)], resolved: None }
09 16 
# 0216e Instruction { source: "Saving reg0x15 before None <= call lcd_write_char(t36,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\"] }", opcode: Push8, args: [Register(0x15)], resolved: None }
09 15 
# 02170 Instruction { source: "Saving reg0x14 before None <= call lcd_write_char(t36,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\"] }", opcode: Push8, args: [Register(0x14)], resolved: None }
09 14 
# 02172 Instruction { source: "Saving reg0x13 before None <= call lcd_write_char(t36,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\"] }", opcode: Push8, args: [Register(0x13)], resolved: None }
09 13 
# 02174 Instruction { source: "Saving reg0x12 before None <= call lcd_write_char(t36,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\"] }", opcode: Push8, args: [Register(0x12)], resolved: None }
09 12 
# 02176 Instruction { source: "Saving reg0x11 before None <= call lcd_write_char(t36,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\"] }", opcode: Push8, args: [Register(0x11)], resolved: None }
09 11 
# 02178 Instruction { source: "Saving reg0x10 before None <= call lcd_write_char(t36,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\"] }", opcode: Push8, args: [Register(0x10)], resolved: None }
09 10 
# 0217a Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 02180 Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 8a 21 00 00 
# 02186 Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: JmpImm, args: [Label24(:lcd_write_char)], resolved: None }
70 1a 22 00 
# 0218a Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 02190 Instruction { source: "Restoring reg0x10 after None <= call lcd_write_char(t36,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\"] }", opcode: Pop8, args: [Register(0x10)], resolved: None }
0a 10 
# 02192 Instruction { source: "Restoring reg0x11 after None <= call lcd_write_char(t36,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\"] }", opcode: Pop8, args: [Register(0x11)], resolved: None }
0a 11 
# 02194 Instruction { source: "Restoring reg0x12 after None <= call lcd_write_char(t36,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\"] }", opcode: Pop8, args: [Register(0x12)], resolved: None }
0a 12 
# 02196 Instruction { source: "Restoring reg0x13 after None <= call lcd_write_char(t36,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\"] }", opcode: Pop8, args: [Register(0x13)], resolved: None }
0a 13 
# 02198 Instruction { source: "Restoring reg0x14 after None <= call lcd_write_char(t36,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\"] }", opcode: Pop8, args: [Register(0x14)], resolved: None }
0a 14 
# 0219a Instruction { source: "Restoring reg0x15 after None <= call lcd_write_char(t36,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\"] }", opcode: Pop8, args: [Register(0x15)], resolved: None }
0a 15 
# 0219c Instruction { source: "Restoring reg0x16 after None <= call lcd_write_char(t36,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\"] }", opcode: Pop8, args: [Register(0x16)], resolved: None }
0a 16 
# 0219e Instruction { source: "Restoring reg0x17 after None <= call lcd_write_char(t36,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\"] }", opcode: Pop8, args: [Register(0x17)], resolved: None }
0a 17 
# 021a0 Instruction { source: "Restoring reg0xe9 after None <= call lcd_write_char(t36,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\"] }", opcode: Pop8, args: [Register(0xe9)], resolved: None }
0a e9 
# 021a2 Instruction { source: "Restoring reg0xea after None <= call lcd_write_char(t36,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\"] }", opcode: Pop8, args: [Register(0xea)], resolved: None }
0a ea 
# 021a4 Instruction { source: "Restoring reg0xeb after None <= call lcd_write_char(t36,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\"] }", opcode: Pop8, args: [Register(0xeb)], resolved: None }
0a eb 
# 021a6 Instruction { source: "Restoring reg0xec after None <= call lcd_write_char(t36,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\"] }", opcode: Pop8, args: [Register(0xec)], resolved: None }
0a ec 
# 021a8 Instruction { source: "Restoring reg0xf0 after None <= call lcd_write_char(t36,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\"] }", opcode: Pop8, args: [Register(0xf0)], resolved: None }
0a f0 
# 021aa Instruction { source: "Restoring reg0xf1 after None <= call lcd_write_char(t36,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\"] }", opcode: Pop8, args: [Register(0xf1)], resolved: None }
0a f1 
# 021ac Instruction { source: "Restoring reg0xf2 after None <= call lcd_write_char(t36,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\"] }", opcode: Pop8, args: [Register(0xf2)], resolved: None }
0a f2 
# 021ae Instruction { source: "Restoring reg0xf3 after None <= call lcd_write_char(t36,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\"] }", opcode: Pop8, args: [Register(0xf3)], resolved: None }
0a f3 
# 021b0 Instruction { source: "Restoring reg0xf4 after None <= call lcd_write_char(t36,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\"] }", opcode: Pop8, args: [Register(0xf4)], resolved: None }
0a f4 
# 021b2 Instruction { source: "Restoring reg0xf8 after None <= call lcd_write_char(t36,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\"] }", opcode: Pop8, args: [Register(0xf8)], resolved: None }
0a f8 
# 021b4 Instruction { source: "Restoring reg0xf9 after None <= call lcd_write_char(t36,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\"] }", opcode: Pop8, args: [Register(0xf9)], resolved: None }
0a f9 
# 021b6 Instruction { source: "Restoring reg0xfa after None <= call lcd_write_char(t36,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\"] }", opcode: Pop8, args: [Register(0xfa)], resolved: None }
0a fa 
# 021b8 Instruction { source: "Restoring reg0xfb after None <= call lcd_write_char(t36,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\"] }", opcode: Pop8, args: [Register(0xfb)], resolved: None }
0a fb 
# 021ba Instruction { source: "Restoring reg0xfc after None <= call lcd_write_char(t36,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\"] }", opcode: Pop8, args: [Register(0xfc)], resolved: None }
0a fc 
# 021bc Instruction { source: "Restoring reg0xfd after None <= call lcd_write_char(t36,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\"] }", opcode: Pop8, args: [Register(0xfd)], resolved: None }
0a fd 
# 021be Instruction { source: "Restoring reg0xfe after None <= call lcd_write_char(t36,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\"] }", opcode: Pop8, args: [Register(0xfe)], resolved: None }
0a fe 
# 021c0 Instruction { source: "Restoring reg0xff after None <= call lcd_write_char(t36,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Number(U8, 32)] })\"] }", opcode: Pop8, args: [Register(0xff)], resolved: None }
0a ff 
# t37 <- i U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"i\"), Number(U8, 1))", "Ident(\"i\")", "Ident(\"i\")"] }
# 021c2 Instruction { source: "t37 <- i U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1))\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0xea), Register(0xe9)], resolved: None }
0b ea e9 
# t38 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"i\"), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 021c5 Instruction { source: "t38 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0xea), Constant8(0x01=1)], resolved: None }
04 ea 01 
# i <- t37 Add t38
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"i\"), Number(U8, 1))"] }
# 021c8 Instruction { source: "i <- t37 Add t38\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1))\"] }", opcode: Add8NoCarryIn, args: [Register(0xe9), Register(0xea), Register(0xea)], resolved: None }
14 e9 ea ea 
# goto lcd_scroll_up_while_predicate_3
# 	SourceContext { contexts: [] }
# 021cc Instruction { source: "goto lcd_scroll_up_while_predicate_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(lcd_scroll_up_while_predicate_3)], resolved: None }
70 cb 20 00 
# :lcd_scroll_up_while_end_5
# 	SourceContext { contexts: [] }
# lcd_scroll_up_while_end_5
# return None
# 	SourceContext { contexts: ["Return { value: None }"] }
# 021d0 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# :function_end_lcd_scroll_up
# 	SourceContext { contexts: [] }
# function_end_lcd_scroll_up
# Unreachable
# 	SourceContext { contexts: [] }
# 021d2 Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
# :lcd_set_pos
# Ret None
# Arg0=pos
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var pos (Arg0 pos Number(U8)) Reg(U8) Some([24])
# Var t0 (t0 Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] })) Reg(U8) Some([24])
# Var t1 (t1 Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))) Reg(U8) Some([25])
# Var t10 (t10 Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })) Reg(U8) Some([24])
# Var t11 (t11 Number(USIZE, 2)) Reg(U32) Some([28, 29, 30, 31])
# Var t2 (t2 Number(U8, 8)) Reg(U8) Some([25])
# Var t3 (t3 Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4))) Reg(U8) Some([32])
# Var t4 (t4 Ident("pos")) Reg(U8) Some([24])
# Var t5 (t5 Number(U8, 4)) Reg(U8) Some([32])
# Var t6 (t6 Call(Call { function: "io_write1", parameters: [Arithmetic(And, Ident("pos"), Number(U8, 15))] })) Reg(U8) Some([24])
# Var t7 (t7 Arithmetic(And, Ident("pos"), Number(U8, 15))) Reg(U8) Some([24])
# Var t8 (t8 Ident("pos")) Reg(U8) Some([24])
# Var t9 (t9 Number(U8, 15)) Reg(U8) Some([25])
# 021d7 Instruction { source: "Save function parameter 'pos' registers [0] to locals [24].", opcode: Copy8, args: [Register(0x00), Register(0x18)], resolved: None }
0b 00 18 
# t2 <- 0n8/0x08u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))", "Number(U8, 8)", "Number(U8, 8)"] }
# 021da Instruction { source: "t2 <- 0n8/0x08u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))\", \"Number(U8, 8)\", \"Number(U8, 8)\"] }", opcode: LoadImm8, args: [Register(0x19), Constant8(0x08=8)], resolved: None }
04 19 08 
# t4 <- pos U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4))", "Ident(\"pos\")", "Ident(\"pos\")"] }
# optimized away noop copy Instruction { source: "t4 <- pos U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4))\", \"Ident(\\\"pos\\\")\", \"Ident(\\\"pos\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# t5 <- 0n4/0x04u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4))", "Number(U8, 4)", "Number(U8, 4)"] }
# 021dd Instruction { source: "t5 <- 0n4/0x04u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4))\", \"Number(U8, 4)\", \"Number(U8, 4)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x04=4)], resolved: None }
04 20 04 
# t3 <- t4 ShiftRight t5
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4))"] }
# 021e0 Instruction { source: "t3 <- t4 ShiftRight t5\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4))\"] }", opcode: Shift8, args: [Constant8(0x05=5), Register(0x20), Register(0x18), Register(0x20)], resolved: None }
1e 05 20 18 20 
# t1 <- t2 BitwiseOr t3
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))"] }
# 021e5 Instruction { source: "t1 <- t2 BitwiseOr t3\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))\"] }", opcode: Or8, args: [Register(0x19), Register(0x20), Register(0x19)], resolved: None }
1c 19 20 19 
# None <= call io_write1(t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))] })"] }
# 021e9 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x19)], resolved: None }
69 19 
# t8 <- pos U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(And, Ident(\"pos\"), Number(U8, 15))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(And, Ident(\"pos\"), Number(U8, 15))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(And, Ident(\"pos\"), Number(U8, 15))] })", "Arithmetic(And, Ident(\"pos\"), Number(U8, 15))", "Arithmetic(And, Ident(\"pos\"), Number(U8, 15))", "Ident(\"pos\")", "Ident(\"pos\")"] }
# optimized away noop copy Instruction { source: "t8 <- pos U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(And, Ident(\\\"pos\\\"), Number(U8, 15))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(And, Ident(\\\"pos\\\"), Number(U8, 15))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(And, Ident(\\\"pos\\\"), Number(U8, 15))] })\", \"Arithmetic(And, Ident(\\\"pos\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"pos\\\"), Number(U8, 15))\", \"Ident(\\\"pos\\\")\", \"Ident(\\\"pos\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# t9 <- 0n15/0x0fu8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(And, Ident(\"pos\"), Number(U8, 15))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(And, Ident(\"pos\"), Number(U8, 15))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(And, Ident(\"pos\"), Number(U8, 15))] })", "Arithmetic(And, Ident(\"pos\"), Number(U8, 15))", "Arithmetic(And, Ident(\"pos\"), Number(U8, 15))", "Number(U8, 15)", "Number(U8, 15)"] }
# 021eb Instruction { source: "t9 <- 0n15/0x0fu8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(And, Ident(\\\"pos\\\"), Number(U8, 15))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(And, Ident(\\\"pos\\\"), Number(U8, 15))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(And, Ident(\\\"pos\\\"), Number(U8, 15))] })\", \"Arithmetic(And, Ident(\\\"pos\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"pos\\\"), Number(U8, 15))\", \"Number(U8, 15)\", \"Number(U8, 15)\"] }", opcode: LoadImm8, args: [Register(0x19), Constant8(0x0f=15)], resolved: None }
04 19 0f 
# t7 <- t8 BitwiseAnd t9
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(And, Ident(\"pos\"), Number(U8, 15))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(And, Ident(\"pos\"), Number(U8, 15))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(And, Ident(\"pos\"), Number(U8, 15))] })", "Arithmetic(And, Ident(\"pos\"), Number(U8, 15))", "Arithmetic(And, Ident(\"pos\"), Number(U8, 15))"] }
# 021ee Instruction { source: "t7 <- t8 BitwiseAnd t9\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(And, Ident(\\\"pos\\\"), Number(U8, 15))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(And, Ident(\\\"pos\\\"), Number(U8, 15))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(And, Ident(\\\"pos\\\"), Number(U8, 15))] })\", \"Arithmetic(And, Ident(\\\"pos\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"pos\\\"), Number(U8, 15))\"] }", opcode: And8, args: [Register(0x18), Register(0x19), Register(0x18)], resolved: None }
1b 18 19 18 
# None <= call io_write1(t7,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(And, Ident(\"pos\"), Number(U8, 15))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(And, Ident(\"pos\"), Number(U8, 15))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(And, Ident(\"pos\"), Number(U8, 15))] })"] }
# 021f2 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x18)], resolved: None }
69 18 
# t11 <- 0n2/0x00000002u32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })", "Number(USIZE, 2)", "Number(USIZE, 2)"] }
# 021f4 Instruction { source: "t11 <- 0n2/0x00000002u32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\", \"Number(USIZE, 2)\", \"Number(USIZE, 2)\"] }", opcode: LoadImm32, args: [Register(0x1c), Constant32(0x00000002=2)], resolved: None }
20 1c 02 00 00 00 
# None <= call delay(t11,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })"] }
# 021fa Instruction { source: "Arg0[x]=t11 None <= call delay(t11,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\"] }", opcode: Copy32, args: [Register(0x1c), Register(0x00)], resolved: None }
21 1c 00 
# Registers used by this function: {24, 25, 28, 29, 30, 31, 32}
# Registers used by callee tree: {152, 153, 154, 155, 156, 157, 158, 159}
# Registers to save: []
# 021fd Instruction { source: "PseudoCall(Label24(:delay))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 02203 Instruction { source: "PseudoCall(Label24(:delay))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 0d 22 00 00 
# 02209 Instruction { source: "PseudoCall(Label24(:delay))", opcode: JmpImm, args: [Label24(:delay)], resolved: None }
70 bf 17 00 
# 0220d Instruction { source: "PseudoCall(Label24(:delay))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# return None
# 	SourceContext { contexts: ["Return { value: None }"] }
# 02213 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# :function_end_lcd_set_pos
# 	SourceContext { contexts: [] }
# function_end_lcd_set_pos
# Unreachable
# 	SourceContext { contexts: [] }
# 02215 Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
# :lcd_write_char
# Ret None
# Arg0=ch
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var ch (Arg0 ch Number(U8)) Reg(U8) Some([33])
# Var inline_lcd_write_char_lcd_logical_to_physical_5_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_lcd_write_char_lcd_logical_to_physical_5_col (Local col Number(U8) Reg(U8)) Reg(U8) Some([34])
# Var inline_lcd_write_char_lcd_logical_to_physical_5_i (Arg0 i Number(U8)) Reg(U8) Some([34])
# Var inline_lcd_write_char_lcd_logical_to_physical_5_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_lcd_write_char_lcd_logical_to_physical_5_row (Local row Number(U8) Reg(U8)) Reg(U8) Some([35])
# Var inline_lcd_write_char_lcd_logical_to_physical_5_t0 (t0 Ident("i")) Reg(U8) Some([34])
# Var inline_lcd_write_char_lcd_logical_to_physical_5_t1 (t1 Number(U8, 20)) Reg(U8) Some([35])
# Var inline_lcd_write_char_lcd_logical_to_physical_5_t10 (t10 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }) Reg(U32) Some([36, 37, 38, 39])
# Var inline_lcd_write_char_lcd_logical_to_physical_5_t11 (t11 Ident("row")) Reg(U8) Some([35])
# Var inline_lcd_write_char_lcd_logical_to_physical_5_t12 (t12 Ident("col")) Reg(U8) Some([34])
# Var inline_lcd_write_char_lcd_logical_to_physical_5_t2 (t2 Ident("i")) Reg(U8) Some([34])
# Var inline_lcd_write_char_lcd_logical_to_physical_5_t3 (t3 Arithmetic(Multiply, Ident("row"), Number(U8, 20))) Reg(U8) Some([40])
# Var inline_lcd_write_char_lcd_logical_to_physical_5_t4 (t4 Ident("row")) Reg(U8) Some([35])
# Var inline_lcd_write_char_lcd_logical_to_physical_5_t5 (t5 Number(U8, 20)) Reg(U8) Some([40])
# Var inline_lcd_write_char_lcd_logical_to_physical_5_t6 (t6 Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) Reg(U8) Some([34])
# Var inline_lcd_write_char_lcd_logical_to_physical_5_t7 (t7 Index("lcd_row_start", Ident("row"))) Reg(U8) Some([35])
# Var inline_lcd_write_char_lcd_logical_to_physical_5_t8 (t8 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }) }) Reg(U32) Some([36, 37, 38, 39])
# Var inline_lcd_write_char_lcd_logical_to_physical_5_t9 (t9 Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }) Reg(U32) Some([44, 45, 46, 47])
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var next (Local next Number(U8) Reg(U8)) Reg(U8) Some([33])
# Var t0 (t0 Ident("ch")) Reg(U8) Some([33])
# Var t1 (t1 Number(U8, 10)) Reg(U8) Some([34])
# Var t10 (static "lcd_current") Reg(U32) Some([48, 49, 50, 51])
# Var t11 (t11 Ident("next")) Reg(U8) Some([33])
# Var t12 (t12 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }) Reg(U32) Some([48, 49, 50, 51])
# Var t13 (t13 Number(USIZE, 987148)) Reg(U32) Some([48, 49, 50, 51])
# Var t14 (t14 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) Reg(U32) Some([36, 37, 38, 39])
# Var t15 (t15 Ident("lcd_current")) Reg(U8) Some([35])
# Var t16 (static "lcd_current") Reg(U32) Some([36, 37, 38, 39])
# Var t17 (t17 Number(U8, 32)) Reg(U8) Some([35])
# Var t18 (static "lcd_current") Reg(U32) Some([48, 49, 50, 51])
# Var t19 (t19 Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))) Reg(U8) Some([35])
# Var t2 (t2 Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1))) Reg(U8) Some([33])
# Var t20 (t20 Ident("lcd_current")) Reg(U8) Some([35])
# Var t21 (static "lcd_current") Reg(U32) Some([36, 37, 38, 39])
# Var t22 (t22 Number(U8, 1)) Reg(U8) Some([40])
# Var t23 (t23 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }) Reg(U32) Some([48, 49, 50, 51])
# Var t24 (t24 Number(USIZE, 987148)) Reg(U32) Some([48, 49, 50, 51])
# Var t25 (t25 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) Reg(U32) Some([36, 37, 38, 39])
# Var t26 (t26 Ident("lcd_current")) Reg(U8) Some([35])
# Var t27 (static "lcd_current") Reg(U32) Some([36, 37, 38, 39])
# Var t28 (t28 Ident("ch")) Reg(U8) Some([33])
# Var t29 (t29 Call(Call { function: "lcd_set_pos", parameters: [Call(Call { function: "lcd_logical_to_physical", parameters: [Ident("lcd_current")] })] })) Reg(U8) Some([33])
# Var t3 (t3 Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20))) Reg(U8) Some([33])
# Var t30 (t30 Call(Call { function: "lcd_logical_to_physical", parameters: [Ident("lcd_current")] })) Reg(U8) Some([34])
# Var t31 (t31 Ident("lcd_current")) Reg(U8) Some([34])
# Var t32 (static "lcd_current") Reg(U32) Some([48, 49, 50, 51])
# Var t33 (t33 Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] })) Reg(U8) Some([33])
# Var t34 (t34 Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))) Reg(U8) Some([34])
# Var t35 (t35 Number(U8, 128)) Reg(U8) Some([34])
# Var t36 (t36 Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4))) Reg(U8) Some([35])
# Var t37 (t37 Ident("ch")) Reg(U8) Some([33])
# Var t38 (t38 Number(U8, 4)) Reg(U8) Some([35])
# Var t39 (t39 Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))] })) Reg(U8) Some([33])
# Var t4 (t4 Ident("lcd_current")) Reg(U8) Some([33])
# Var t40 (t40 Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))) Reg(U8) Some([33])
# Var t41 (t41 Number(U8, 128)) Reg(U8) Some([34])
# Var t42 (t42 Arithmetic(And, Ident("ch"), Number(U8, 15))) Reg(U8) Some([33])
# Var t43 (t43 Ident("ch")) Reg(U8) Some([33])
# Var t44 (t44 Number(U8, 15)) Reg(U8) Some([35])
# Var t45 (t45 Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })) Reg(U8) Some([33])
# Var t46 (t46 Number(USIZE, 2)) Reg(U32) Some([52, 53, 54, 55])
# Var t47 (t47 Ident("lcd_current")) Reg(U8) Some([33])
# Var t48 (static "lcd_current") Reg(U32) Some([52, 53, 54, 55])
# Var t49 (t49 Number(U8, 80)) Reg(U8) Some([34])
# Var t5 (static "lcd_current") Reg(U32) Some([52, 53, 54, 55])
# Var t50 (t50 Call(Call { function: "lcd_scroll_up", parameters: [] })) Reg(U8) Some([33])
# Var t6 (t6 Number(U8, 20)) Reg(U8) Some([34])
# Var t7 (t7 Number(U8, 1)) Reg(U8) Some([34])
# Var t8 (t8 Number(U8, 20)) Reg(U8) Some([34])
# Var t9 (t9 Ident("lcd_current")) Reg(U8) Some([34])
# 0221a Instruction { source: "Save function parameter 'ch' registers [0] to locals [33].", opcode: Copy8, args: [Register(0x00), Register(0x21)], resolved: None }
0b 00 21 
# t0 <- ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Ident(\"next\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_set_pos\", parameters: [Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"lcd_current\")] })] }) }, VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] }) }, VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] }) }, VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] }) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t0 <- ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Ident(\\\"next\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident(\\\"lcd_current\\\"), right: Ident(\\\"next\\\") }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Ident(\\\"ch\\\") }, VoidExpression { expression: Call(Call { function: \\\"lcd_set_pos\\\", parameters: [Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"lcd_current\\\")] })] }) }, VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))] }) }, VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))] }) }, VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] }) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# t1 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Ident(\"next\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_set_pos\", parameters: [Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"lcd_current\")] })] }) }, VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] }) }, VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] }) }, VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] }) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 0221d Instruction { source: "t1 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Ident(\\\"next\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident(\\\"lcd_current\\\"), right: Ident(\\\"next\\\") }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Ident(\\\"ch\\\") }, VoidExpression { expression: Call(Call { function: \\\"lcd_set_pos\\\", parameters: [Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"lcd_current\\\")] })] }) }, VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))] }) }, VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))] }) }, VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] }) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x0a=10)], resolved: None }
04 22 0a 
# if t0 == t1 then 'lcd_write_char_if_true_0_1' else 'lcd_write_char_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Ident(\"next\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_set_pos\", parameters: [Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"lcd_current\")] })] }) }, VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] }) }, VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] }) }, VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] }) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }"] }
# 02220 Instruction { source: "if t0 == t1 then 'lcd_write_char_if_true_0_1' else 'lcd_write_char_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Ident(\\\"next\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident(\\\"lcd_current\\\"), right: Ident(\\\"next\\\") }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Ident(\\\"ch\\\") }, VoidExpression { expression: Call(Call { function: \\\"lcd_set_pos\\\", parameters: [Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"lcd_current\\\")] })] }) }, VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))] }) }, VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))] }) }, VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] }) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\"] }", opcode: Cmp8, args: [Register(0x21), Register(0x22)], resolved: None }
15 21 22 
# 02223 Instruction { source: "if t0 == t1 then 'lcd_write_char_if_true_0_1' else 'lcd_write_char_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Ident(\\\"next\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident(\\\"lcd_current\\\"), right: Ident(\\\"next\\\") }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Ident(\\\"ch\\\") }, VoidExpression { expression: Call(Call { function: \\\"lcd_set_pos\\\", parameters: [Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"lcd_current\\\")] })] }) }, VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))] }) }, VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))] }) }, VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] }) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\"] }", opcode: JzImm, args: [Label24(lcd_write_char_if_true_0_1)], resolved: None }
72 2b 22 00 
# 02227 Instruction { source: "if t0 == t1 then 'lcd_write_char_if_true_0_1' else 'lcd_write_char_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Ident(\\\"next\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident(\\\"lcd_current\\\"), right: Ident(\\\"next\\\") }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Ident(\\\"ch\\\") }, VoidExpression { expression: Call(Call { function: \\\"lcd_set_pos\\\", parameters: [Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"lcd_current\\\")] })] }) }, VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))] }) }, VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))] }) }, VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] }) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\"] }", opcode: JmpImm, args: [Label24(lcd_write_char_if_else_0_2)], resolved: None }
70 9e 22 00 
# :lcd_write_char_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Ident(\"next\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_set_pos\", parameters: [Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"lcd_current\")] })] }) }, VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] }) }, VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] }) }, VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] }) }] }"] }
# lcd_write_char_if_true_0_1
# t5 <- 0n987144/0x000f1008u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"next\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }", "Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))", "Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1))", "Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1))", "Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20))", "Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20))", "Ident(\"lcd_current\")", "Ident(\"lcd_current\")"] }
# 0222b Instruction { source: "t5 <- 0n987144/0x000f1008u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"next\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }\", \"Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))\", \"Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1))\", \"Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1))\", \"Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20))\", \"Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20))\", \"Ident(\\\"lcd_current\\\")\", \"Ident(\\\"lcd_current\\\")\"] }", opcode: LoadImm32, args: [Register(0x34), Constant32(0x000f1008=987144)], resolved: None }
20 34 08 10 0f 00 
# t4 <- mem[t5] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"next\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }", "Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))", "Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1))", "Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1))", "Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20))", "Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20))", "Ident(\"lcd_current\")", "Ident(\"lcd_current\")"] }
# 02231 Instruction { source: "t4 <- mem[t5] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"next\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }\", \"Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))\", \"Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1))\", \"Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1))\", \"Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20))\", \"Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20))\", \"Ident(\\\"lcd_current\\\")\", \"Ident(\\\"lcd_current\\\")\"] }", opcode: Load8, args: [Register(0x34), Register(0x21)], resolved: None }
05 34 21 
# t6 <- 0n20/0x14u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"next\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }", "Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))", "Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1))", "Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1))", "Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20))", "Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20))", "Number(U8, 20)", "Number(U8, 20)"] }
# 02234 Instruction { source: "t6 <- 0n20/0x14u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"next\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }\", \"Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))\", \"Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1))\", \"Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1))\", \"Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20))\", \"Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20))\", \"Number(U8, 20)\", \"Number(U8, 20)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x14=20)], resolved: None }
04 22 14 
# t3 <- t4 Divide t6
# 	SourceContext { contexts: ["Assign { target: Ident(\"next\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }", "Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))", "Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1))", "Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1))", "Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20))", "Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20))"] }
# 02237 Instruction { source: "t3 <- t4 Divide t6\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"next\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }\", \"Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))\", \"Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1))\", \"Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1))\", \"Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20))\", \"Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20))\"] }", opcode: Divide8, args: [Register(0x21), Register(0x22), Register(0x21)], resolved: None }
17 21 22 21 
# t7 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"next\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }", "Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))", "Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1))", "Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 0223b Instruction { source: "t7 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"next\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }\", \"Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))\", \"Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1))\", \"Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x01=1)], resolved: None }
04 22 01 
# t2 <- t3 Add t7
# 	SourceContext { contexts: ["Assign { target: Ident(\"next\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }", "Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))", "Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1))", "Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1))"] }
# 0223e Instruction { source: "t2 <- t3 Add t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"next\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }\", \"Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))\", \"Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1))\", \"Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1))\"] }", opcode: Add8NoCarryIn, args: [Register(0x21), Register(0x22), Register(0x21)], resolved: None }
14 21 22 21 
# t8 <- 0n20/0x14u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"next\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }", "Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))", "Number(U8, 20)", "Number(U8, 20)"] }
# 02242 Instruction { source: "t8 <- 0n20/0x14u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"next\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }\", \"Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))\", \"Number(U8, 20)\", \"Number(U8, 20)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x14=20)], resolved: None }
04 22 14 
# next <- t2 Multiply t8
# 	SourceContext { contexts: ["Assign { target: Ident(\"next\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }", "Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))"] }
# 02245 Instruction { source: "next <- t2 Multiply t8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"next\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }\", \"Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))\"] }", opcode: Mul8_8, args: [Register(0x21), Register(0x22), Register(0x21)], resolved: None }
10 21 22 21 
# :lcd_write_char_while_predicate_3
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }] }"] }
# lcd_write_char_while_predicate_3
# t10 <- 0n987144/0x000f1008u32 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }", "Ident(\"lcd_current\")", "Ident(\"lcd_current\")"] }
# 02249 Instruction { source: "t10 <- 0n987144/0x000f1008u32 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lcd_current\\\"), right: Ident(\\\"next\\\") }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lcd_current\\\"), right: Ident(\\\"next\\\") }\", \"Ident(\\\"lcd_current\\\")\", \"Ident(\\\"lcd_current\\\")\"] }", opcode: LoadImm32, args: [Register(0x30), Constant32(0x000f1008=987144)], resolved: None }
20 30 08 10 0f 00 
# t9 <- mem[t10] U8
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }", "Ident(\"lcd_current\")", "Ident(\"lcd_current\")"] }
# 0224f Instruction { source: "t9 <- mem[t10] U8\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lcd_current\\\"), right: Ident(\\\"next\\\") }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lcd_current\\\"), right: Ident(\\\"next\\\") }\", \"Ident(\\\"lcd_current\\\")\", \"Ident(\\\"lcd_current\\\")\"] }", opcode: Load8, args: [Register(0x30), Register(0x22)], resolved: None }
05 30 22 
# t11 <- next U8
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }", "Ident(\"next\")", "Ident(\"next\")"] }
# optimized away noop copy Instruction { source: "t11 <- next U8\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lcd_current\\\"), right: Ident(\\\"next\\\") }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lcd_current\\\"), right: Ident(\\\"next\\\") }\", \"Ident(\\\"next\\\")\", \"Ident(\\\"next\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# if t9 < t11 then 'lcd_write_char_while_body_4' else 'lcd_write_char_while_end_5'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }"] }
# 02252 Instruction { source: "if t9 < t11 then 'lcd_write_char_while_body_4' else 'lcd_write_char_while_end_5'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lcd_current\\\"), right: Ident(\\\"next\\\") }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lcd_current\\\"), right: Ident(\\\"next\\\") }\"] }", opcode: Cmp8, args: [Register(0x21), Register(0x22)], resolved: None }
15 21 22 
# 02255 Instruction { source: "if t9 < t11 then 'lcd_write_char_while_body_4' else 'lcd_write_char_while_end_5'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lcd_current\\\"), right: Ident(\\\"next\\\") }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lcd_current\\\"), right: Ident(\\\"next\\\") }\"] }", opcode: JcImm, args: [Label24(lcd_write_char_while_end_5)], resolved: None }
71 9a 22 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t9 < t11 then 'lcd_write_char_while_body_4' else 'lcd_write_char_while_end_5'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lcd_current\\\"), right: Ident(\\\"next\\\") }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lcd_current\\\"), right: Ident(\\\"next\\\") }\"] }", opcode: JmpImm, args: [Label24(lcd_write_char_while_body_4)], resolved: None }
# :lcd_write_char_while_body_4
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }] }"] }
# lcd_write_char_while_body_4
# t13 <- 0n987148/0x000f100cu32 
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") })", "Number(USIZE, 987148)", "Number(USIZE, 987148)"] }
# 02259 Instruction { source: "t13 <- 0n987148/0x000f100cu32 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") })\", \"Number(USIZE, 987148)\", \"Number(USIZE, 987148)\"] }", opcode: LoadImm32, args: [Register(0x30), Constant32(0x000f100c=987148)], resolved: None }
20 30 0c 10 0f 00 
# t16 <- 0n987144/0x000f1008u32 
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }", "Ident(\"lcd_current\")", "Ident(\"lcd_current\")"] }
# 0225f Instruction { source: "t16 <- 0n987144/0x000f1008u32 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }\", \"Ident(\\\"lcd_current\\\")\", \"Ident(\\\"lcd_current\\\")\"] }", opcode: LoadImm32, args: [Register(0x24), Constant32(0x000f1008=987144)], resolved: None }
20 24 08 10 0f 00 
# t15 <- mem[t16] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }", "Ident(\"lcd_current\")", "Ident(\"lcd_current\")"] }
# 02265 Instruction { source: "t15 <- mem[t16] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }\", \"Ident(\\\"lcd_current\\\")\", \"Ident(\\\"lcd_current\\\")\"] }", opcode: Load8, args: [Register(0x24), Register(0x23)], resolved: None }
05 24 23 
# t14 U32 <- t15 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }"] }
# 02268 Instruction { source: "Zero-pad for t14 U32 <- t15 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }\"] }", opcode: LoadImm32, args: [Register(0x24), Constant32(0x00000000=0)], resolved: None }
20 24 00 00 00 00 
# 0226e Instruction { source: "t14 U32 <- t15 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }\"] }", opcode: Copy8, args: [Register(0x23), Register(0x24)], resolved: None }
0b 23 24 
# t12 <- t13 Add t14
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") })"] }
# 02271 Instruction { source: "t12 <- t13 Add t14\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") })\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 02272 Instruction { source: "t12 <- t13 Add t14\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") })\"] }", opcode: AddCarry32_1, args: [Register(0x30), Register(0x24), Register(0x30)], resolved: None }
30 30 24 30 
# 02276 Instruction { source: "t12 <- t13 Add t14\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") })\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t17 <- 0n32/0x20u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }", "Number(U8, 32)", "Number(U8, 32)"] }
# 02277 Instruction { source: "t17 <- 0n32/0x20u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Number(U8, 32) }\", \"Number(U8, 32)\", \"Number(U8, 32)\"] }", opcode: LoadImm8, args: [Register(0x23), Constant8(0x20=32)], resolved: None }
04 23 20 
# mem[t12] <- t17 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }"] }
# 0227a Instruction { source: "mem[t12] <- t17 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Number(U8, 32) }\"] }", opcode: Store8, args: [Register(0x23), Register(0x30)], resolved: None }
06 23 30 
# t18 <- 0n987144/0x000f1008u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }"] }
# 0227d Instruction { source: "t18 <- 0n987144/0x000f1008u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x30), Constant32(0x000f1008=987144)], resolved: None }
20 30 08 10 0f 00 
# t21 <- 0n987144/0x000f1008u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1))", "Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1))", "Ident(\"lcd_current\")", "Ident(\"lcd_current\")"] }
# 02283 Instruction { source: "t21 <- 0n987144/0x000f1008u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1))\", \"Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1))\", \"Ident(\\\"lcd_current\\\")\", \"Ident(\\\"lcd_current\\\")\"] }", opcode: LoadImm32, args: [Register(0x24), Constant32(0x000f1008=987144)], resolved: None }
20 24 08 10 0f 00 
# t20 <- mem[t21] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1))", "Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1))", "Ident(\"lcd_current\")", "Ident(\"lcd_current\")"] }
# 02289 Instruction { source: "t20 <- mem[t21] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1))\", \"Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1))\", \"Ident(\\\"lcd_current\\\")\", \"Ident(\\\"lcd_current\\\")\"] }", opcode: Load8, args: [Register(0x24), Register(0x23)], resolved: None }
05 24 23 
# t22 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1))", "Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 0228c Instruction { source: "t22 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1))\", \"Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x28), Constant8(0x01=1)], resolved: None }
04 28 01 
# t19 <- t20 Add t22
# 	SourceContext { contexts: ["Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1))", "Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1))"] }
# 0228f Instruction { source: "t19 <- t20 Add t22\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1))\", \"Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1))\"] }", opcode: Add8NoCarryIn, args: [Register(0x23), Register(0x28), Register(0x23)], resolved: None }
14 23 28 23 
# mem[t18] <- t19 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }"] }
# 02293 Instruction { source: "mem[t18] <- t19 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }\"] }", opcode: Store8, args: [Register(0x23), Register(0x30)], resolved: None }
06 23 30 
# goto lcd_write_char_while_predicate_3
# 	SourceContext { contexts: [] }
# 02296 Instruction { source: "goto lcd_write_char_while_predicate_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(lcd_write_char_while_predicate_3)], resolved: None }
70 49 22 00 
# :lcd_write_char_while_end_5
# 	SourceContext { contexts: [] }
# lcd_write_char_while_end_5
# goto lcd_write_char_if_end_0
# 	SourceContext { contexts: [] }
# 0229a Instruction { source: "goto lcd_write_char_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(lcd_write_char_if_end_0)], resolved: None }
70 54 23 00 
# :lcd_write_char_if_else_0_2
# 	SourceContext { contexts: [] }
# lcd_write_char_if_else_0_2
# t24 <- 0n987148/0x000f100cu32 
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Ident(\"ch\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") })", "Number(USIZE, 987148)", "Number(USIZE, 987148)"] }
# 0229e Instruction { source: "t24 <- 0n987148/0x000f100cu32 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Ident(\\\"ch\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") })\", \"Number(USIZE, 987148)\", \"Number(USIZE, 987148)\"] }", opcode: LoadImm32, args: [Register(0x30), Constant32(0x000f100c=987148)], resolved: None }
20 30 0c 10 0f 00 
# t27 <- 0n987144/0x000f1008u32 
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Ident(\"ch\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }", "Ident(\"lcd_current\")", "Ident(\"lcd_current\")"] }
# 022a4 Instruction { source: "t27 <- 0n987144/0x000f1008u32 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Ident(\\\"ch\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }\", \"Ident(\\\"lcd_current\\\")\", \"Ident(\\\"lcd_current\\\")\"] }", opcode: LoadImm32, args: [Register(0x24), Constant32(0x000f1008=987144)], resolved: None }
20 24 08 10 0f 00 
# t26 <- mem[t27] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Ident(\"ch\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }", "Ident(\"lcd_current\")", "Ident(\"lcd_current\")"] }
# 022aa Instruction { source: "t26 <- mem[t27] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Ident(\\\"ch\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }\", \"Ident(\\\"lcd_current\\\")\", \"Ident(\\\"lcd_current\\\")\"] }", opcode: Load8, args: [Register(0x24), Register(0x23)], resolved: None }
05 24 23 
# t25 U32 <- t26 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Ident(\"ch\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }"] }
# 022ad Instruction { source: "Zero-pad for t25 U32 <- t26 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Ident(\\\"ch\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }\"] }", opcode: LoadImm32, args: [Register(0x24), Constant32(0x00000000=0)], resolved: None }
20 24 00 00 00 00 
# 022b3 Instruction { source: "t25 U32 <- t26 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Ident(\\\"ch\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }\"] }", opcode: Copy8, args: [Register(0x23), Register(0x24)], resolved: None }
0b 23 24 
# t23 <- t24 Add t25
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Ident(\"ch\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") })"] }
# 022b6 Instruction { source: "t23 <- t24 Add t25\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Ident(\\\"ch\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") })\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 022b7 Instruction { source: "t23 <- t24 Add t25\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Ident(\\\"ch\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") })\"] }", opcode: AddCarry32_1, args: [Register(0x30), Register(0x24), Register(0x30)], resolved: None }
30 30 24 30 
# 022bb Instruction { source: "t23 <- t24 Add t25\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Ident(\\\"ch\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") })\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t28 <- ch U8
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Ident(\"ch\") }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t28 <- ch U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Ident(\\\"ch\\\") }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# mem[t23] <- t28 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Ident(\"ch\") }"] }
# 022bc Instruction { source: "mem[t23] <- t28 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Ident(\\\"ch\\\") }\"] }", opcode: Store8, args: [Register(0x21), Register(0x30)], resolved: None }
06 21 30 
# t32 <- 0n987144/0x000f1008u32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_set_pos\", parameters: [Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"lcd_current\")] })] }) }", "Call(Call { function: \"lcd_set_pos\", parameters: [Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"lcd_current\")] })] })", "Call(Call { function: \"lcd_set_pos\", parameters: [Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"lcd_current\")] })] })", "Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"lcd_current\")] })", "Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"lcd_current\")] })", "Ident(\"lcd_current\")", "Ident(\"lcd_current\")"] }
# 022bf Instruction { source: "t32 <- 0n987144/0x000f1008u32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_set_pos\\\", parameters: [Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"lcd_current\\\")] })] }) }\", \"Call(Call { function: \\\"lcd_set_pos\\\", parameters: [Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"lcd_current\\\")] })] })\", \"Call(Call { function: \\\"lcd_set_pos\\\", parameters: [Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"lcd_current\\\")] })] })\", \"Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"lcd_current\\\")] })\", \"Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"lcd_current\\\")] })\", \"Ident(\\\"lcd_current\\\")\", \"Ident(\\\"lcd_current\\\")\"] }", opcode: LoadImm32, args: [Register(0x30), Constant32(0x000f1008=987144)], resolved: None }
20 30 08 10 0f 00 
# t31 <- mem[t32] U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_set_pos\", parameters: [Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"lcd_current\")] })] }) }", "Call(Call { function: \"lcd_set_pos\", parameters: [Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"lcd_current\")] })] })", "Call(Call { function: \"lcd_set_pos\", parameters: [Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"lcd_current\")] })] })", "Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"lcd_current\")] })", "Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"lcd_current\")] })", "Ident(\"lcd_current\")", "Ident(\"lcd_current\")"] }
# 022c5 Instruction { source: "t31 <- mem[t32] U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_set_pos\\\", parameters: [Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"lcd_current\\\")] })] }) }\", \"Call(Call { function: \\\"lcd_set_pos\\\", parameters: [Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"lcd_current\\\")] })] })\", \"Call(Call { function: \\\"lcd_set_pos\\\", parameters: [Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"lcd_current\\\")] })] })\", \"Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"lcd_current\\\")] })\", \"Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"lcd_current\\\")] })\", \"Ident(\\\"lcd_current\\\")\", \"Ident(\\\"lcd_current\\\")\"] }", opcode: Load8, args: [Register(0x30), Register(0x22)], resolved: None }
05 30 22 
# inline_lcd_write_char_lcd_logical_to_physical_5_i <- t31 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_set_pos\", parameters: [Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"lcd_current\")] })] }) }", "Call(Call { function: \"lcd_set_pos\", parameters: [Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"lcd_current\")] })] })", "Call(Call { function: \"lcd_set_pos\", parameters: [Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"lcd_current\")] })] })", "Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"lcd_current\")] })", "Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"lcd_current\")] })"] }
# optimized away noop copy Instruction { source: "inline_lcd_write_char_lcd_logical_to_physical_5_i <- t31 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_set_pos\\\", parameters: [Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"lcd_current\\\")] })] }) }\", \"Call(Call { function: \\\"lcd_set_pos\\\", parameters: [Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"lcd_current\\\")] })] })\", \"Call(Call { function: \\\"lcd_set_pos\\\", parameters: [Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"lcd_current\\\")] })] })\", \"Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"lcd_current\\\")] })\", \"Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"lcd_current\\\")] })\"] }", opcode: Copy8, args: [Register(0x22), Register(0x22)], resolved: None }
# inline_lcd_write_char_lcd_logical_to_physical_5_t0 <- inline_lcd_write_char_lcd_logical_to_physical_5_i U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"row\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"i\"), Number(U8, 20)) }", "Arithmetic(Divide, Ident(\"i\"), Number(U8, 20))", "Ident(\"i\")", "Ident(\"i\")"] }
# optimized away noop copy Instruction { source: "inline_lcd_write_char_lcd_logical_to_physical_5_t0 <- inline_lcd_write_char_lcd_logical_to_physical_5_i U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"row\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"i\\\"), Number(U8, 20)) }\", \"Arithmetic(Divide, Ident(\\\"i\\\"), Number(U8, 20))\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0x22), Register(0x22)], resolved: None }
# inline_lcd_write_char_lcd_logical_to_physical_5_t1 <- 0n20/0x14u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"row\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"i\"), Number(U8, 20)) }", "Arithmetic(Divide, Ident(\"i\"), Number(U8, 20))", "Number(U8, 20)", "Number(U8, 20)"] }
# 022c8 Instruction { source: "inline_lcd_write_char_lcd_logical_to_physical_5_t1 <- 0n20/0x14u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"row\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"i\\\"), Number(U8, 20)) }\", \"Arithmetic(Divide, Ident(\\\"i\\\"), Number(U8, 20))\", \"Number(U8, 20)\", \"Number(U8, 20)\"] }", opcode: LoadImm8, args: [Register(0x23), Constant8(0x14=20)], resolved: None }
04 23 14 
# inline_lcd_write_char_lcd_logical_to_physical_5_row <- inline_lcd_write_char_lcd_logical_to_physical_5_t0 Divide inline_lcd_write_char_lcd_logical_to_physical_5_t1
# 	SourceContext { contexts: ["Assign { target: Ident(\"row\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"i\"), Number(U8, 20)) }", "Arithmetic(Divide, Ident(\"i\"), Number(U8, 20))"] }
# 022cb Instruction { source: "inline_lcd_write_char_lcd_logical_to_physical_5_row <- inline_lcd_write_char_lcd_logical_to_physical_5_t0 Divide inline_lcd_write_char_lcd_logical_to_physical_5_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"row\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"i\\\"), Number(U8, 20)) }\", \"Arithmetic(Divide, Ident(\\\"i\\\"), Number(U8, 20))\"] }", opcode: Divide8, args: [Register(0x22), Register(0x23), Register(0x23)], resolved: None }
17 22 23 23 
# inline_lcd_write_char_lcd_logical_to_physical_5_t2 <- inline_lcd_write_char_lcd_logical_to_physical_5_i U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"col\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20))) }", "Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20)))", "Ident(\"i\")", "Ident(\"i\")"] }
# optimized away noop copy Instruction { source: "inline_lcd_write_char_lcd_logical_to_physical_5_t2 <- inline_lcd_write_char_lcd_logical_to_physical_5_i U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"col\\\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))) }\", \"Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20)))\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0x22), Register(0x22)], resolved: None }
# inline_lcd_write_char_lcd_logical_to_physical_5_t4 <- inline_lcd_write_char_lcd_logical_to_physical_5_row U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"col\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20))) }", "Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20)))", "Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20))", "Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20))", "Ident(\"row\")", "Ident(\"row\")"] }
# optimized away noop copy Instruction { source: "inline_lcd_write_char_lcd_logical_to_physical_5_t4 <- inline_lcd_write_char_lcd_logical_to_physical_5_row U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"col\\\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))) }\", \"Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20)))\", \"Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))\", \"Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))\", \"Ident(\\\"row\\\")\", \"Ident(\\\"row\\\")\"] }", opcode: Copy8, args: [Register(0x23), Register(0x23)], resolved: None }
# inline_lcd_write_char_lcd_logical_to_physical_5_t5 <- 0n20/0x14u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"col\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20))) }", "Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20)))", "Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20))", "Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20))", "Number(U8, 20)", "Number(U8, 20)"] }
# 022cf Instruction { source: "inline_lcd_write_char_lcd_logical_to_physical_5_t5 <- 0n20/0x14u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"col\\\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))) }\", \"Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20)))\", \"Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))\", \"Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))\", \"Number(U8, 20)\", \"Number(U8, 20)\"] }", opcode: LoadImm8, args: [Register(0x28), Constant8(0x14=20)], resolved: None }
04 28 14 
# inline_lcd_write_char_lcd_logical_to_physical_5_t3 <- inline_lcd_write_char_lcd_logical_to_physical_5_t4 Multiply inline_lcd_write_char_lcd_logical_to_physical_5_t5
# 	SourceContext { contexts: ["Assign { target: Ident(\"col\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20))) }", "Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20)))", "Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20))", "Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20))"] }
# 022d2 Instruction { source: "inline_lcd_write_char_lcd_logical_to_physical_5_t3 <- inline_lcd_write_char_lcd_logical_to_physical_5_t4 Multiply inline_lcd_write_char_lcd_logical_to_physical_5_t5\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"col\\\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))) }\", \"Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20)))\", \"Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))\", \"Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))\"] }", opcode: Mul8_8, args: [Register(0x23), Register(0x28), Register(0x28)], resolved: None }
10 23 28 28 
# inline_lcd_write_char_lcd_logical_to_physical_5_col <- inline_lcd_write_char_lcd_logical_to_physical_5_t2 Subtract inline_lcd_write_char_lcd_logical_to_physical_5_t3
# 	SourceContext { contexts: ["Assign { target: Ident(\"col\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20))) }", "Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20)))"] }
# 022d6 Instruction { source: "inline_lcd_write_char_lcd_logical_to_physical_5_col <- inline_lcd_write_char_lcd_logical_to_physical_5_t2 Subtract inline_lcd_write_char_lcd_logical_to_physical_5_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"col\\\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))) }\", \"Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20)))\"] }", opcode: Copy8, args: [Register(0x28), Register(0x00)], resolved: None }
0b 28 00 
# 022d9 Instruction { source: "inline_lcd_write_char_lcd_logical_to_physical_5_col <- inline_lcd_write_char_lcd_logical_to_physical_5_t2 Subtract inline_lcd_write_char_lcd_logical_to_physical_5_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"col\\\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))) }\", \"Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20)))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 022db Instruction { source: "inline_lcd_write_char_lcd_logical_to_physical_5_col <- inline_lcd_write_char_lcd_logical_to_physical_5_t2 Subtract inline_lcd_write_char_lcd_logical_to_physical_5_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"col\\\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))) }\", \"Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20)))\"] }", opcode: Add8NoCarryIn, args: [Register(0x22), Register(0x00), Register(0x22)], resolved: None }
14 22 00 22 
# inline_lcd_write_char_lcd_logical_to_physical_5_t9 <- const &lcd_row_start
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Index(\"lcd_row_start\", Ident(\"row\"))", "Index(\"lcd_row_start\", Ident(\"row\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") })", "Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }", "Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }", "Ident(\"lcd_row_start\")"] }
# 022df Instruction { source: "inline_lcd_write_char_lcd_logical_to_physical_5_t9 <- const &lcd_row_start\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))) }\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") })\", \"Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }\", \"Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }\", \"Ident(\\\"lcd_row_start\\\")\"] }", opcode: LoadImm32, args: [Register(0x2c), Label32(:lcd_row_start)], resolved: None }
20 2c 23 04 00 00 
# inline_lcd_write_char_lcd_logical_to_physical_5_t11 <- inline_lcd_write_char_lcd_logical_to_physical_5_row U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Index(\"lcd_row_start\", Ident(\"row\"))", "Index(\"lcd_row_start\", Ident(\"row\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }", "Ident(\"row\")", "Ident(\"row\")"] }
# optimized away noop copy Instruction { source: "inline_lcd_write_char_lcd_logical_to_physical_5_t11 <- inline_lcd_write_char_lcd_logical_to_physical_5_row U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))) }\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }\", \"Ident(\\\"row\\\")\", \"Ident(\\\"row\\\")\"] }", opcode: Copy8, args: [Register(0x23), Register(0x23)], resolved: None }
# inline_lcd_write_char_lcd_logical_to_physical_5_t10 U32 <- inline_lcd_write_char_lcd_logical_to_physical_5_t11 U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Index(\"lcd_row_start\", Ident(\"row\"))", "Index(\"lcd_row_start\", Ident(\"row\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }"] }
# 022e5 Instruction { source: "Zero-pad for inline_lcd_write_char_lcd_logical_to_physical_5_t10 U32 <- inline_lcd_write_char_lcd_logical_to_physical_5_t11 U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))) }\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }\"] }", opcode: LoadImm32, args: [Register(0x24), Constant32(0x00000000=0)], resolved: None }
20 24 00 00 00 00 
# 022eb Instruction { source: "inline_lcd_write_char_lcd_logical_to_physical_5_t10 U32 <- inline_lcd_write_char_lcd_logical_to_physical_5_t11 U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))) }\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }\"] }", opcode: Copy8, args: [Register(0x23), Register(0x24)], resolved: None }
0b 23 24 
# inline_lcd_write_char_lcd_logical_to_physical_5_t8 <- inline_lcd_write_char_lcd_logical_to_physical_5_t9 Add inline_lcd_write_char_lcd_logical_to_physical_5_t10
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Index(\"lcd_row_start\", Ident(\"row\"))", "Index(\"lcd_row_start\", Ident(\"row\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") })"] }
# 022ee Instruction { source: "inline_lcd_write_char_lcd_logical_to_physical_5_t8 <- inline_lcd_write_char_lcd_logical_to_physical_5_t9 Add inline_lcd_write_char_lcd_logical_to_physical_5_t10\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))) }\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") })\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 022ef Instruction { source: "inline_lcd_write_char_lcd_logical_to_physical_5_t8 <- inline_lcd_write_char_lcd_logical_to_physical_5_t9 Add inline_lcd_write_char_lcd_logical_to_physical_5_t10\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))) }\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") })\"] }", opcode: AddCarry32_1, args: [Register(0x2c), Register(0x24), Register(0x24)], resolved: None }
30 2c 24 24 
# 022f3 Instruction { source: "inline_lcd_write_char_lcd_logical_to_physical_5_t8 <- inline_lcd_write_char_lcd_logical_to_physical_5_t9 Add inline_lcd_write_char_lcd_logical_to_physical_5_t10\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))) }\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") })\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_lcd_write_char_lcd_logical_to_physical_5_t7 <- mem[inline_lcd_write_char_lcd_logical_to_physical_5_t8] U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Index(\"lcd_row_start\", Ident(\"row\"))", "Index(\"lcd_row_start\", Ident(\"row\"))"] }
# 022f4 Instruction { source: "inline_lcd_write_char_lcd_logical_to_physical_5_t7 <- mem[inline_lcd_write_char_lcd_logical_to_physical_5_t8] U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))) }\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\"] }", opcode: Load8, args: [Register(0x24), Register(0x23)], resolved: None }
05 24 23 
# inline_lcd_write_char_lcd_logical_to_physical_5_t12 <- inline_lcd_write_char_lcd_logical_to_physical_5_col U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Ident(\"col\")", "Ident(\"col\")"] }
# optimized away noop copy Instruction { source: "inline_lcd_write_char_lcd_logical_to_physical_5_t12 <- inline_lcd_write_char_lcd_logical_to_physical_5_col U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))) }\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Ident(\\\"col\\\")\", \"Ident(\\\"col\\\")\"] }", opcode: Copy8, args: [Register(0x22), Register(0x22)], resolved: None }
# inline_lcd_write_char_lcd_logical_to_physical_5_t6 <- inline_lcd_write_char_lcd_logical_to_physical_5_t7 Add inline_lcd_write_char_lcd_logical_to_physical_5_t12
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))"] }
# 022f7 Instruction { source: "inline_lcd_write_char_lcd_logical_to_physical_5_t6 <- inline_lcd_write_char_lcd_logical_to_physical_5_t7 Add inline_lcd_write_char_lcd_logical_to_physical_5_t12\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))) }\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\"] }", opcode: Add8NoCarryIn, args: [Register(0x23), Register(0x22), Register(0x22)], resolved: None }
14 23 22 22 
# t30 <- inline_lcd_write_char_lcd_logical_to_physical_5_t6 U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }"] }
# optimized away noop copy Instruction { source: "t30 <- inline_lcd_write_char_lcd_logical_to_physical_5_t6 U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))) }\"] }", opcode: Copy8, args: [Register(0x22), Register(0x22)], resolved: None }
# goto inline_lcd_write_char_lcd_logical_to_physical_5_function_end_lcd_logical_to_physical
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_lcd_write_char_lcd_logical_to_physical_5_function_end_lcd_logical_to_physical\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_lcd_write_char_lcd_logical_to_physical_5_function_end_lcd_logical_to_physical)], resolved: None }
# :inline_lcd_write_char_lcd_logical_to_physical_5_function_end_lcd_logical_to_physical
# 	SourceContext { contexts: [] }
# inline_lcd_write_char_lcd_logical_to_physical_5_function_end_lcd_logical_to_physical
# None <= call lcd_set_pos(t30,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_set_pos\", parameters: [Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"lcd_current\")] })] }) }", "Call(Call { function: \"lcd_set_pos\", parameters: [Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"lcd_current\")] })] })", "Call(Call { function: \"lcd_set_pos\", parameters: [Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"lcd_current\")] })] })"] }
# 022fb Instruction { source: "Arg0[pos]=t30 None <= call lcd_set_pos(t30,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_set_pos\\\", parameters: [Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"lcd_current\\\")] })] }) }\", \"Call(Call { function: \\\"lcd_set_pos\\\", parameters: [Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"lcd_current\\\")] })] })\", \"Call(Call { function: \\\"lcd_set_pos\\\", parameters: [Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"lcd_current\\\")] })] })\"] }", opcode: Copy8, args: [Register(0x22), Register(0x00)], resolved: None }
0b 22 00 
# Registers used by this function: {33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55}
# Registers used by callee tree: {24, 25, 28, 29, 30, 31, 32, 152, 153, 154, 155, 156, 157, 158, 159, 217}
# Registers to save: []
# 022fe Instruction { source: "PseudoCall(Label24(:lcd_set_pos))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 02304 Instruction { source: "PseudoCall(Label24(:lcd_set_pos))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 0e 23 00 00 
# 0230a Instruction { source: "PseudoCall(Label24(:lcd_set_pos))", opcode: JmpImm, args: [Label24(:lcd_set_pos)], resolved: None }
70 d7 21 00 
# 0230e Instruction { source: "PseudoCall(Label24(:lcd_set_pos))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# t35 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))", "Number(U8, 128)", "Number(U8, 128)"] }
# 02314 Instruction { source: "t35 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x80=128)], resolved: None }
04 22 80 
# t37 <- ch U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4))", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t37 <- ch U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4))\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# t38 <- 0n4/0x04u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4))", "Number(U8, 4)", "Number(U8, 4)"] }
# 02317 Instruction { source: "t38 <- 0n4/0x04u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4))\", \"Number(U8, 4)\", \"Number(U8, 4)\"] }", opcode: LoadImm8, args: [Register(0x23), Constant8(0x04=4)], resolved: None }
04 23 04 
# t36 <- t37 ShiftRight t38
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4))"] }
# 0231a Instruction { source: "t36 <- t37 ShiftRight t38\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4))\"] }", opcode: Shift8, args: [Constant8(0x05=5), Register(0x23), Register(0x21), Register(0x23)], resolved: None }
1e 05 23 21 23 
# t34 <- t35 BitwiseOr t36
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))"] }
# 0231f Instruction { source: "t34 <- t35 BitwiseOr t36\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))\"] }", opcode: Or8, args: [Register(0x22), Register(0x23), Register(0x22)], resolved: None }
1c 22 23 22 
# None <= call io_write1(t34,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] })"] }
# 02323 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x22)], resolved: None }
69 22 
# t41 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))", "Number(U8, 128)", "Number(U8, 128)"] }
# 02325 Instruction { source: "t41 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x80=128)], resolved: None }
04 22 80 
# t43 <- ch U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"ch\"), Number(U8, 15))", "Arithmetic(And, Ident(\"ch\"), Number(U8, 15))", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t43 <- ch U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15))\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x21), Register(0x21)], resolved: None }
# t44 <- 0n15/0x0fu8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"ch\"), Number(U8, 15))", "Arithmetic(And, Ident(\"ch\"), Number(U8, 15))", "Number(U8, 15)", "Number(U8, 15)"] }
# 02328 Instruction { source: "t44 <- 0n15/0x0fu8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15))\", \"Number(U8, 15)\", \"Number(U8, 15)\"] }", opcode: LoadImm8, args: [Register(0x23), Constant8(0x0f=15)], resolved: None }
04 23 0f 
# t42 <- t43 BitwiseAnd t44
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"ch\"), Number(U8, 15))", "Arithmetic(And, Ident(\"ch\"), Number(U8, 15))"] }
# 0232b Instruction { source: "t42 <- t43 BitwiseAnd t44\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15))\"] }", opcode: And8, args: [Register(0x21), Register(0x23), Register(0x21)], resolved: None }
1b 21 23 21 
# t40 <- t41 BitwiseOr t42
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))"] }
# 0232f Instruction { source: "t40 <- t41 BitwiseOr t42\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))\"] }", opcode: Or8, args: [Register(0x22), Register(0x21), Register(0x21)], resolved: None }
1c 22 21 21 
# None <= call io_write1(t40,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] })"] }
# 02333 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x21)], resolved: None }
69 21 
# t46 <- 0n2/0x00000002u32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })", "Number(USIZE, 2)", "Number(USIZE, 2)"] }
# 02335 Instruction { source: "t46 <- 0n2/0x00000002u32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\", \"Number(USIZE, 2)\", \"Number(USIZE, 2)\"] }", opcode: LoadImm32, args: [Register(0x34), Constant32(0x00000002=2)], resolved: None }
20 34 02 00 00 00 
# None <= call delay(t46,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })"] }
# 0233b Instruction { source: "Arg0[x]=t46 None <= call delay(t46,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\"] }", opcode: Copy32, args: [Register(0x34), Register(0x00)], resolved: None }
21 34 00 
# Registers used by this function: {33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55}
# Registers used by callee tree: {152, 153, 154, 155, 156, 157, 158, 159}
# Registers to save: []
# 0233e Instruction { source: "PseudoCall(Label24(:delay))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 02344 Instruction { source: "PseudoCall(Label24(:delay))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 4e 23 00 00 
# 0234a Instruction { source: "PseudoCall(Label24(:delay))", opcode: JmpImm, args: [Label24(:delay)], resolved: None }
70 bf 17 00 
# 0234e Instruction { source: "PseudoCall(Label24(:delay))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# :lcd_write_char_if_end_0
# 	SourceContext { contexts: [] }
# lcd_write_char_if_end_0
# t48 <- 0n987144/0x000f1008u32 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"lcd_current\"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: \"lcd_scroll_up\", parameters: [] }) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"lcd_current\"), right: Number(U8, 80) }", "Ident(\"lcd_current\")", "Ident(\"lcd_current\")"] }
# 02354 Instruction { source: "t48 <- 0n987144/0x000f1008u32 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"lcd_current\\\"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] }) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"lcd_current\\\"), right: Number(U8, 80) }\", \"Ident(\\\"lcd_current\\\")\", \"Ident(\\\"lcd_current\\\")\"] }", opcode: LoadImm32, args: [Register(0x34), Constant32(0x000f1008=987144)], resolved: None }
20 34 08 10 0f 00 
# t47 <- mem[t48] U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"lcd_current\"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: \"lcd_scroll_up\", parameters: [] }) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"lcd_current\"), right: Number(U8, 80) }", "Ident(\"lcd_current\")", "Ident(\"lcd_current\")"] }
# 0235a Instruction { source: "t47 <- mem[t48] U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"lcd_current\\\"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] }) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"lcd_current\\\"), right: Number(U8, 80) }\", \"Ident(\\\"lcd_current\\\")\", \"Ident(\\\"lcd_current\\\")\"] }", opcode: Load8, args: [Register(0x34), Register(0x21)], resolved: None }
05 34 21 
# t49 <- 0n80/0x50u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"lcd_current\"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: \"lcd_scroll_up\", parameters: [] }) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"lcd_current\"), right: Number(U8, 80) }", "Number(U8, 80)", "Number(U8, 80)"] }
# 0235d Instruction { source: "t49 <- 0n80/0x50u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"lcd_current\\\"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] }) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"lcd_current\\\"), right: Number(U8, 80) }\", \"Number(U8, 80)\", \"Number(U8, 80)\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x50=80)], resolved: None }
04 22 50 
# if t47 >= t49 then 'lcd_write_char_if_true_0_7' else 'lcd_write_char_if_else_0_8'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"lcd_current\"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: \"lcd_scroll_up\", parameters: [] }) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"lcd_current\"), right: Number(U8, 80) }"] }
# 02360 Instruction { source: "if t47 >= t49 then 'lcd_write_char_if_true_0_7' else 'lcd_write_char_if_else_0_8'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"lcd_current\\\"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] }) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"lcd_current\\\"), right: Number(U8, 80) }\"] }", opcode: Cmp8, args: [Register(0x22), Register(0x21)], resolved: None }
15 22 21 
# 02363 Instruction { source: "if t47 >= t49 then 'lcd_write_char_if_true_0_7' else 'lcd_write_char_if_else_0_8'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"lcd_current\\\"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] }) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"lcd_current\\\"), right: Number(U8, 80) }\"] }", opcode: JcImm, args: [Label24(lcd_write_char_if_true_0_7)], resolved: None }
71 6b 23 00 
# 02367 Instruction { source: "if t47 >= t49 then 'lcd_write_char_if_true_0_7' else 'lcd_write_char_if_else_0_8'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"lcd_current\\\"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] }) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"lcd_current\\\"), right: Number(U8, 80) }\"] }", opcode: JmpImm, args: [Label24(lcd_write_char_if_else_0_8)], resolved: None }
70 d5 23 00 
# :lcd_write_char_if_true_0_7
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"lcd_current\"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: \"lcd_scroll_up\", parameters: [] }) }])], else_block: [] }"] }
# lcd_write_char_if_true_0_7
# None <= call lcd_scroll_up()
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_scroll_up\", parameters: [] }) }", "Call(Call { function: \"lcd_scroll_up\", parameters: [] })", "Call(Call { function: \"lcd_scroll_up\", parameters: [] })"] }
# Registers used by this function: {33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 152, 153, 154, 155, 156, 157, 158, 159, 217, 233, 234, 235, 236, 240, 241, 242, 243, 244, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: [33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55]
# 0236b Instruction { source: "Saving reg0x37 before None <= call lcd_scroll_up()\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] }) }\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\"] }", opcode: Push8, args: [Register(0x37)], resolved: None }
09 37 
# 0236d Instruction { source: "Saving reg0x36 before None <= call lcd_scroll_up()\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] }) }\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\"] }", opcode: Push8, args: [Register(0x36)], resolved: None }
09 36 
# 0236f Instruction { source: "Saving reg0x35 before None <= call lcd_scroll_up()\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] }) }\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\"] }", opcode: Push8, args: [Register(0x35)], resolved: None }
09 35 
# 02371 Instruction { source: "Saving reg0x34 before None <= call lcd_scroll_up()\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] }) }\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\"] }", opcode: Push8, args: [Register(0x34)], resolved: None }
09 34 
# 02373 Instruction { source: "Saving reg0x33 before None <= call lcd_scroll_up()\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] }) }\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\"] }", opcode: Push8, args: [Register(0x33)], resolved: None }
09 33 
# 02375 Instruction { source: "Saving reg0x32 before None <= call lcd_scroll_up()\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] }) }\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\"] }", opcode: Push8, args: [Register(0x32)], resolved: None }
09 32 
# 02377 Instruction { source: "Saving reg0x31 before None <= call lcd_scroll_up()\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] }) }\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\"] }", opcode: Push8, args: [Register(0x31)], resolved: None }
09 31 
# 02379 Instruction { source: "Saving reg0x30 before None <= call lcd_scroll_up()\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] }) }\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\"] }", opcode: Push8, args: [Register(0x30)], resolved: None }
09 30 
# 0237b Instruction { source: "Saving reg0x2f before None <= call lcd_scroll_up()\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] }) }\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\"] }", opcode: Push8, args: [Register(0x2f)], resolved: None }
09 2f 
# 0237d Instruction { source: "Saving reg0x2e before None <= call lcd_scroll_up()\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] }) }\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\"] }", opcode: Push8, args: [Register(0x2e)], resolved: None }
09 2e 
# 0237f Instruction { source: "Saving reg0x2d before None <= call lcd_scroll_up()\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] }) }\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\"] }", opcode: Push8, args: [Register(0x2d)], resolved: None }
09 2d 
# 02381 Instruction { source: "Saving reg0x2c before None <= call lcd_scroll_up()\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] }) }\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\"] }", opcode: Push8, args: [Register(0x2c)], resolved: None }
09 2c 
# 02383 Instruction { source: "Saving reg0x28 before None <= call lcd_scroll_up()\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] }) }\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\"] }", opcode: Push8, args: [Register(0x28)], resolved: None }
09 28 
# 02385 Instruction { source: "Saving reg0x27 before None <= call lcd_scroll_up()\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] }) }\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\"] }", opcode: Push8, args: [Register(0x27)], resolved: None }
09 27 
# 02387 Instruction { source: "Saving reg0x26 before None <= call lcd_scroll_up()\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] }) }\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\"] }", opcode: Push8, args: [Register(0x26)], resolved: None }
09 26 
# 02389 Instruction { source: "Saving reg0x25 before None <= call lcd_scroll_up()\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] }) }\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\"] }", opcode: Push8, args: [Register(0x25)], resolved: None }
09 25 
# 0238b Instruction { source: "Saving reg0x24 before None <= call lcd_scroll_up()\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] }) }\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\"] }", opcode: Push8, args: [Register(0x24)], resolved: None }
09 24 
# 0238d Instruction { source: "Saving reg0x23 before None <= call lcd_scroll_up()\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] }) }\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\"] }", opcode: Push8, args: [Register(0x23)], resolved: None }
09 23 
# 0238f Instruction { source: "Saving reg0x22 before None <= call lcd_scroll_up()\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] }) }\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\"] }", opcode: Push8, args: [Register(0x22)], resolved: None }
09 22 
# 02391 Instruction { source: "Saving reg0x21 before None <= call lcd_scroll_up()\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] }) }\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\"] }", opcode: Push8, args: [Register(0x21)], resolved: None }
09 21 
# 02393 Instruction { source: "PseudoCall(Label24(:lcd_scroll_up))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 02399 Instruction { source: "PseudoCall(Label24(:lcd_scroll_up))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c a3 23 00 00 
# 0239f Instruction { source: "PseudoCall(Label24(:lcd_scroll_up))", opcode: JmpImm, args: [Label24(:lcd_scroll_up)], resolved: None }
70 89 1f 00 
# 023a3 Instruction { source: "PseudoCall(Label24(:lcd_scroll_up))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 023a9 Instruction { source: "Restoring reg0x21 after None <= call lcd_scroll_up()\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] }) }\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\"] }", opcode: Pop8, args: [Register(0x21)], resolved: None }
0a 21 
# 023ab Instruction { source: "Restoring reg0x22 after None <= call lcd_scroll_up()\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] }) }\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\"] }", opcode: Pop8, args: [Register(0x22)], resolved: None }
0a 22 
# 023ad Instruction { source: "Restoring reg0x23 after None <= call lcd_scroll_up()\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] }) }\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\"] }", opcode: Pop8, args: [Register(0x23)], resolved: None }
0a 23 
# 023af Instruction { source: "Restoring reg0x24 after None <= call lcd_scroll_up()\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] }) }\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\"] }", opcode: Pop8, args: [Register(0x24)], resolved: None }
0a 24 
# 023b1 Instruction { source: "Restoring reg0x25 after None <= call lcd_scroll_up()\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] }) }\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\"] }", opcode: Pop8, args: [Register(0x25)], resolved: None }
0a 25 
# 023b3 Instruction { source: "Restoring reg0x26 after None <= call lcd_scroll_up()\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] }) }\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\"] }", opcode: Pop8, args: [Register(0x26)], resolved: None }
0a 26 
# 023b5 Instruction { source: "Restoring reg0x27 after None <= call lcd_scroll_up()\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] }) }\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\"] }", opcode: Pop8, args: [Register(0x27)], resolved: None }
0a 27 
# 023b7 Instruction { source: "Restoring reg0x28 after None <= call lcd_scroll_up()\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] }) }\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\"] }", opcode: Pop8, args: [Register(0x28)], resolved: None }
0a 28 
# 023b9 Instruction { source: "Restoring reg0x2c after None <= call lcd_scroll_up()\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] }) }\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\"] }", opcode: Pop8, args: [Register(0x2c)], resolved: None }
0a 2c 
# 023bb Instruction { source: "Restoring reg0x2d after None <= call lcd_scroll_up()\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] }) }\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\"] }", opcode: Pop8, args: [Register(0x2d)], resolved: None }
0a 2d 
# 023bd Instruction { source: "Restoring reg0x2e after None <= call lcd_scroll_up()\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] }) }\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\"] }", opcode: Pop8, args: [Register(0x2e)], resolved: None }
0a 2e 
# 023bf Instruction { source: "Restoring reg0x2f after None <= call lcd_scroll_up()\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] }) }\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\"] }", opcode: Pop8, args: [Register(0x2f)], resolved: None }
0a 2f 
# 023c1 Instruction { source: "Restoring reg0x30 after None <= call lcd_scroll_up()\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] }) }\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\"] }", opcode: Pop8, args: [Register(0x30)], resolved: None }
0a 30 
# 023c3 Instruction { source: "Restoring reg0x31 after None <= call lcd_scroll_up()\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] }) }\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\"] }", opcode: Pop8, args: [Register(0x31)], resolved: None }
0a 31 
# 023c5 Instruction { source: "Restoring reg0x32 after None <= call lcd_scroll_up()\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] }) }\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\"] }", opcode: Pop8, args: [Register(0x32)], resolved: None }
0a 32 
# 023c7 Instruction { source: "Restoring reg0x33 after None <= call lcd_scroll_up()\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] }) }\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\"] }", opcode: Pop8, args: [Register(0x33)], resolved: None }
0a 33 
# 023c9 Instruction { source: "Restoring reg0x34 after None <= call lcd_scroll_up()\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] }) }\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\"] }", opcode: Pop8, args: [Register(0x34)], resolved: None }
0a 34 
# 023cb Instruction { source: "Restoring reg0x35 after None <= call lcd_scroll_up()\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] }) }\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\"] }", opcode: Pop8, args: [Register(0x35)], resolved: None }
0a 35 
# 023cd Instruction { source: "Restoring reg0x36 after None <= call lcd_scroll_up()\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] }) }\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\"] }", opcode: Pop8, args: [Register(0x36)], resolved: None }
0a 36 
# 023cf Instruction { source: "Restoring reg0x37 after None <= call lcd_scroll_up()\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] }) }\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\", \"Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] })\"] }", opcode: Pop8, args: [Register(0x37)], resolved: None }
0a 37 
# goto lcd_write_char_if_end_6
# 	SourceContext { contexts: [] }
# 023d1 Instruction { source: "goto lcd_write_char_if_end_6\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(lcd_write_char_if_end_6)], resolved: None }
70 d5 23 00 
# :lcd_write_char_if_else_0_8
# 	SourceContext { contexts: [] }
# lcd_write_char_if_else_0_8
# :lcd_write_char_if_end_6
# 	SourceContext { contexts: [] }
# lcd_write_char_if_end_6
# return None
# 	SourceContext { contexts: ["Return { value: None }"] }
# 023d5 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# :function_end_lcd_write_char
# 	SourceContext { contexts: [] }
# function_end_lcd_write_char
# Unreachable
# 	SourceContext { contexts: [] }
# 023d7 Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
# :main
# Ret Some(U8)
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var calc (Local calc Struct("RpnCalc") Static(987500)) Static(987500) None
# Var inline_main_RpnCalc_init_53_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_RpnCalc_init_53_c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_main_RpnCalc_init_53_inline_RpnCalc_init_stack_init_51_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_RpnCalc_init_53_inline_RpnCalc_init_stack_init_51_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_RpnCalc_init_53_inline_RpnCalc_init_stack_init_51_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_main_RpnCalc_init_53_inline_RpnCalc_init_stack_init_51_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_main_RpnCalc_init_53_inline_RpnCalc_init_stack_init_51_t1 (t1 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_main_RpnCalc_init_53_inline_RpnCalc_init_stack_init_51_t2 (t2 Number(USIZE, 64)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_main_RpnCalc_init_53_inline_RpnCalc_init_stack_init_51_t3 (t3 Number(USIZE, 0)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_main_RpnCalc_init_53_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_RpnCalc_init_53_s (Local s Ptr(Struct("Stack")) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_main_RpnCalc_init_53_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_main_RpnCalc_init_53_t1 (t1 Call(Call { function: "stack_init", parameters: [Ident("s")] })) Reg(U8) Some([68])
# Var inline_main_RpnCalc_init_53_t2 (t2 Ident("s")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_main_RpnCalc_init_53_t3 (t3 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_main_RpnCalc_init_53_t4 (t4 Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_main_RpnCalc_init_53_t5 (t5 Number(USIZE, 68)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_main_RpnCalc_init_53_t6 (t6 Number(USIZE, 0)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_main_putc_27_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_putc_27_c (Arg0 c Number(U8)) Reg(U8) Some([68])
# Var inline_main_putc_27_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_putc_27_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([68])
# Var inline_main_putc_27_t1 (t1 Ident("c")) Reg(U8) Some([68])
# Var inline_main_putc_27_t2 (t2 Call(Call { function: "lcd_write_char", parameters: [Ident("c")] })) Reg(U8) Some([68])
# Var inline_main_putc_27_t3 (t3 Ident("c")) Reg(U8) Some([68])
# Var inline_main_putc_28_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_putc_28_c (Arg0 c Number(U8)) Reg(U8) Some([68])
# Var inline_main_putc_28_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_putc_28_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([68])
# Var inline_main_putc_28_t1 (t1 Ident("c")) Reg(U8) Some([68])
# Var inline_main_putc_28_t2 (t2 Call(Call { function: "lcd_write_char", parameters: [Ident("c")] })) Reg(U8) Some([68])
# Var inline_main_putc_28_t3 (t3 Ident("c")) Reg(U8) Some([68])
# Var inline_main_putc_29_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_putc_29_c (Arg0 c Number(U8)) Reg(U8) Some([68])
# Var inline_main_putc_29_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_putc_29_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([68])
# Var inline_main_putc_29_t1 (t1 Ident("c")) Reg(U8) Some([68])
# Var inline_main_putc_29_t2 (t2 Call(Call { function: "lcd_write_char", parameters: [Ident("c")] })) Reg(U8) Some([68])
# Var inline_main_putc_29_t3 (t3 Ident("c")) Reg(U8) Some([68])
# Var inline_main_putc_30_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_putc_30_c (Arg0 c Number(U8)) Reg(U8) Some([68])
# Var inline_main_putc_30_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_putc_30_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([68])
# Var inline_main_putc_30_t1 (t1 Ident("c")) Reg(U8) Some([68])
# Var inline_main_putc_30_t2 (t2 Call(Call { function: "lcd_write_char", parameters: [Ident("c")] })) Reg(U8) Some([68])
# Var inline_main_putc_30_t3 (t3 Ident("c")) Reg(U8) Some([68])
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var t0 (t0 Call(Call { function: "stdio_init", parameters: [] })) Reg(U8) Some([68])
# Var t1 (t1 Call(Call { function: "putc", parameters: [Number(U8, 82)] })) Reg(U8) Some([68])
# Var t10 (t10 Call(Call { function: "putc", parameters: [Number(U8, 10)] })) Reg(U8) Some([68])
# Var t11 (t11 Number(U8, 10)) Reg(U8) Some([68])
# Var t12 (t12 Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) Reg(U8) Some([68])
# Var t13 (t13 AddressOf(Ident("calc"))) Reg(U32) Some([56, 57, 58, 59])
# Var t14 (static "calc") Reg(U32) Some([56, 57, 58, 59])
# Var t2 (t2 Number(U8, 82)) Reg(U8) Some([68])
# Var t3 (t3 Call(Call { function: "putc", parameters: [Number(U8, 80)] })) Reg(U8) Some([68])
# Var t4 (t4 Number(U8, 80)) Reg(U8) Some([68])
# Var t5 (t5 Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] })) Reg(U8) Some([68])
# Var t6 (t6 AddressOf(Ident("calc"))) Reg(U32) Some([56, 57, 58, 59])
# Var t7 (static "calc") Reg(U32) Some([56, 57, 58, 59])
# Var t8 (t8 Call(Call { function: "putc", parameters: [Number(U8, 78)] })) Reg(U8) Some([68])
# Var t9 (t9 Number(U8, 78)) Reg(U8) Some([68])
# None <= call stdio_init()
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stdio_init\", parameters: [] }) }", "Call(Call { function: \"stdio_init\", parameters: [] })", "Call(Call { function: \"stdio_init\", parameters: [] })"] }
# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68}
# Registers used by callee tree: {16, 17, 18, 19, 20, 24, 25, 26, 27, 152, 153, 154, 155, 156, 157, 158, 159, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232}
# Registers to save: []
# 023dc Instruction { source: "PseudoCall(Label24(:stdio_init))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 023e2 Instruction { source: "PseudoCall(Label24(:stdio_init))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c ec 23 00 00 
# 023e8 Instruction { source: "PseudoCall(Label24(:stdio_init))", opcode: JmpImm, args: [Label24(:stdio_init)], resolved: None }
70 88 2c 00 
# 023ec Instruction { source: "PseudoCall(Label24(:stdio_init))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# t2 <- 0n82/0x52u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 82)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 82)] })", "Number(U8, 82)", "Number(U8, 82)"] }
# 023f2 Instruction { source: "t2 <- 0n82/0x52u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] })\", \"Number(U8, 82)\", \"Number(U8, 82)\"] }", opcode: LoadImm8, args: [Register(0x44), Constant8(0x52=82)], resolved: None }
04 44 52 
# inline_main_putc_27_c <- t2 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 82)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 82)] })"] }
# optimized away noop copy Instruction { source: "inline_main_putc_27_c <- t2 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 82)] })\"] }", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_main_putc_27_t1 <- inline_main_putc_27_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_putc_27_t1 <- inline_main_putc_27_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# None <= call io_write0(inline_main_putc_27_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 023f5 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x44)], resolved: None }
68 44 
# inline_main_putc_27_t3 <- inline_main_putc_27_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_putc_27_t3 <- inline_main_putc_27_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# None <= call lcd_write_char(inline_main_putc_27_t3,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })"] }
# 023f7 Instruction { source: "Arg0[ch]=inline_main_putc_27_t3 None <= call lcd_write_char(inline_main_putc_27_t3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy8, args: [Register(0x44), Register(0x00)], resolved: None }
0b 44 00 
# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 152, 153, 154, 155, 156, 157, 158, 159, 217, 233, 234, 235, 236, 240, 241, 242, 243, 244, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 023fa Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 02400 Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 0a 24 00 00 
# 02406 Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: JmpImm, args: [Label24(:lcd_write_char)], resolved: None }
70 1a 22 00 
# 0240a Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# goto inline_main_putc_27_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_putc_27_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_putc_27_function_end_putc)], resolved: None }
# :inline_main_putc_27_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_putc_27_function_end_putc
# t4 <- 0n80/0x50u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 80)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 80)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 80)] })", "Number(U8, 80)", "Number(U8, 80)"] }
# 02410 Instruction { source: "t4 <- 0n80/0x50u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 80)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 80)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 80)] })\", \"Number(U8, 80)\", \"Number(U8, 80)\"] }", opcode: LoadImm8, args: [Register(0x44), Constant8(0x50=80)], resolved: None }
04 44 50 
# inline_main_putc_28_c <- t4 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 80)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 80)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 80)] })"] }
# optimized away noop copy Instruction { source: "inline_main_putc_28_c <- t4 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 80)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 80)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 80)] })\"] }", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_main_putc_28_t1 <- inline_main_putc_28_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_putc_28_t1 <- inline_main_putc_28_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# None <= call io_write0(inline_main_putc_28_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 02413 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x44)], resolved: None }
68 44 
# inline_main_putc_28_t3 <- inline_main_putc_28_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_putc_28_t3 <- inline_main_putc_28_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# None <= call lcd_write_char(inline_main_putc_28_t3,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })"] }
# 02415 Instruction { source: "Arg0[ch]=inline_main_putc_28_t3 None <= call lcd_write_char(inline_main_putc_28_t3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy8, args: [Register(0x44), Register(0x00)], resolved: None }
0b 44 00 
# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 152, 153, 154, 155, 156, 157, 158, 159, 217, 233, 234, 235, 236, 240, 241, 242, 243, 244, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 02418 Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 0241e Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 28 24 00 00 
# 02424 Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: JmpImm, args: [Label24(:lcd_write_char)], resolved: None }
70 1a 22 00 
# 02428 Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# goto inline_main_putc_28_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_putc_28_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_putc_28_function_end_putc)], resolved: None }
# :inline_main_putc_28_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_putc_28_function_end_putc
# t7 <- 0n987500/0x000f116cu32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] }) }", "Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] })", "Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] })", "AddressOf(Ident(\"calc\"))", "AddressOf(Ident(\"calc\"))"] }
# 0242e Instruction { source: "t7 <- 0n987500/0x000f116cu32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"RpnCalc_init\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] }) }\", \"Call(Call { function: \\\"RpnCalc_init\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_init\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"AddressOf(Ident(\\\"calc\\\"))\", \"AddressOf(Ident(\\\"calc\\\"))\"] }", opcode: LoadImm32, args: [Register(0x38), Constant32(0x000f116c=987500)], resolved: None }
20 38 6c 11 0f 00 
# t6 <- t7 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] }) }", "Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] })", "Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] })", "AddressOf(Ident(\"calc\"))", "AddressOf(Ident(\"calc\"))"] }
# optimized away noop copy Instruction { source: "t6 <- t7 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"RpnCalc_init\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] }) }\", \"Call(Call { function: \\\"RpnCalc_init\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_init\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"AddressOf(Ident(\\\"calc\\\"))\", \"AddressOf(Ident(\\\"calc\\\"))\"] }", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_main_RpnCalc_init_53_c <- t6 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] }) }", "Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] })", "Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] })"] }
# optimized away noop copy Instruction { source: "inline_main_RpnCalc_init_53_c <- t6 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"RpnCalc_init\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] }) }\", \"Call(Call { function: \\\"RpnCalc_init\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_init\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\"] }", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_main_RpnCalc_init_53_t0 <- inline_main_RpnCalc_init_53_c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"s\"), var_type: Some(Ptr(Struct(\"Stack\"))), value: AddressOf(PtrFieldDeref(\"c\", \"stack\")) }", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_RpnCalc_init_53_t0 <- inline_main_RpnCalc_init_53_c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"s\\\"), var_type: Some(Ptr(Struct(\\\"Stack\\\"))), value: AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Stack\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\\\"Stack\\\")), value: Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_main_RpnCalc_init_53_s <- inline_main_RpnCalc_init_53_t0 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"s\"), var_type: Some(Ptr(Struct(\"Stack\"))), value: AddressOf(PtrFieldDeref(\"c\", \"stack\")) }", "AddressOf(PtrFieldDeref(\"c\", \"stack\"))"] }
# 02434 Instruction { source: "inline_main_RpnCalc_init_53_s <- inline_main_RpnCalc_init_53_t0 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"s\\\"), var_type: Some(Ptr(Struct(\\\"Stack\\\"))), value: AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"c\\\", \\\"stack\\\"))\"] }", opcode: Copy32, args: [Register(0x38), Register(0x3c)], resolved: None }
21 38 3c 
# inline_main_RpnCalc_init_53_t2 <- inline_main_RpnCalc_init_53_s U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] }) }", "Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] })", "Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] })", "Ident(\"s\")", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_main_RpnCalc_init_53_t2 <- inline_main_RpnCalc_init_53_s U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_init\\\", parameters: [Ident(\\\"s\\\")] }) }\", \"Call(Call { function: \\\"stack_init\\\", parameters: [Ident(\\\"s\\\")] })\", \"Call(Call { function: \\\"stack_init\\\", parameters: [Ident(\\\"s\\\")] })\", \"Ident(\\\"s\\\")\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_main_RpnCalc_init_53_inline_RpnCalc_init_stack_init_51_s <- inline_main_RpnCalc_init_53_t2 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] }) }", "Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] })", "Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] })"] }
# optimized away noop copy Instruction { source: "inline_main_RpnCalc_init_53_inline_RpnCalc_init_stack_init_51_s <- inline_main_RpnCalc_init_53_t2 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"stack_init\\\", parameters: [Ident(\\\"s\\\")] }) }\", \"Call(Call { function: \\\"stack_init\\\", parameters: [Ident(\\\"s\\\")] })\", \"Call(Call { function: \\\"stack_init\\\", parameters: [Ident(\\\"s\\\")] })\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_main_RpnCalc_init_53_inline_RpnCalc_init_stack_init_51_t1 <- inline_main_RpnCalc_init_53_inline_RpnCalc_init_stack_init_51_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_main_RpnCalc_init_53_inline_RpnCalc_init_stack_init_51_t1 <- inline_main_RpnCalc_init_53_inline_RpnCalc_init_stack_init_51_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_main_RpnCalc_init_53_inline_RpnCalc_init_stack_init_51_t2 <- 0n64/0x00000040u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))", "Number(USIZE, 64)", "Number(USIZE, 64)"] }
# 02437 Instruction { source: "inline_main_RpnCalc_init_53_inline_RpnCalc_init_stack_init_51_t2 <- 0n64/0x00000040u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\", \"Number(USIZE, 64)\", \"Number(USIZE, 64)\"] }", opcode: LoadImm32, args: [Register(0x40), Constant32(0x00000040=64)], resolved: None }
20 40 40 00 00 00 
# inline_main_RpnCalc_init_53_inline_RpnCalc_init_stack_init_51_t0 <- inline_main_RpnCalc_init_53_inline_RpnCalc_init_stack_init_51_t1 Add inline_main_RpnCalc_init_53_inline_RpnCalc_init_stack_init_51_t2
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))"] }
# 0243d Instruction { source: "inline_main_RpnCalc_init_53_inline_RpnCalc_init_stack_init_51_t0 <- inline_main_RpnCalc_init_53_inline_RpnCalc_init_stack_init_51_t1 Add inline_main_RpnCalc_init_53_inline_RpnCalc_init_stack_init_51_t2\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0243e Instruction { source: "inline_main_RpnCalc_init_53_inline_RpnCalc_init_stack_init_51_t0 <- inline_main_RpnCalc_init_53_inline_RpnCalc_init_stack_init_51_t1 Add inline_main_RpnCalc_init_53_inline_RpnCalc_init_stack_init_51_t2\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_1, args: [Register(0x3c), Register(0x40), Register(0x3c)], resolved: None }
30 3c 40 3c 
# 02442 Instruction { source: "inline_main_RpnCalc_init_53_inline_RpnCalc_init_stack_init_51_t0 <- inline_main_RpnCalc_init_53_inline_RpnCalc_init_stack_init_51_t1 Add inline_main_RpnCalc_init_53_inline_RpnCalc_init_stack_init_51_t2\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Stack\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 64))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_main_RpnCalc_init_53_inline_RpnCalc_init_stack_init_51_t3 <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Number(USIZE, 0) }", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 02443 Instruction { source: "inline_main_RpnCalc_init_53_inline_RpnCalc_init_stack_init_51_t3 <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x40), Constant32(0x00000000=0)], resolved: None }
20 40 00 00 00 00 
# mem[inline_main_RpnCalc_init_53_inline_RpnCalc_init_stack_init_51_t0] <- inline_main_RpnCalc_init_53_inline_RpnCalc_init_stack_init_51_t3 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Number(USIZE, 0) }"] }
# 02449 Instruction { source: "mem[inline_main_RpnCalc_init_53_inline_RpnCalc_init_stack_init_51_t0] <- inline_main_RpnCalc_init_53_inline_RpnCalc_init_stack_init_51_t3 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Number(USIZE, 0) }\"] }", opcode: Store32_1, args: [Register(0x40), Register(0x3c)], resolved: None }
23 40 3c 
# 0244c Instruction { source: "mem[inline_main_RpnCalc_init_53_inline_RpnCalc_init_stack_init_51_t0] <- inline_main_RpnCalc_init_53_inline_RpnCalc_init_stack_init_51_t3 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first_free\\\"), var_type: None, value: Number(USIZE, 0) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto inline_main_RpnCalc_init_53_inline_RpnCalc_init_stack_init_51_function_end_stack_init
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_RpnCalc_init_53_inline_RpnCalc_init_stack_init_51_function_end_stack_init\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_RpnCalc_init_53_inline_RpnCalc_init_stack_init_51_function_end_stack_init)], resolved: None }
# :inline_main_RpnCalc_init_53_inline_RpnCalc_init_stack_init_51_function_end_stack_init
# 	SourceContext { contexts: [] }
# inline_main_RpnCalc_init_53_inline_RpnCalc_init_stack_init_51_function_end_stack_init
# inline_main_RpnCalc_init_53_t4 <- inline_main_RpnCalc_init_53_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_RpnCalc_init_53_t4 <- inline_main_RpnCalc_init_53_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_main_RpnCalc_init_53_t5 <- 0n68/0x00000044u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))", "Number(USIZE, 68)", "Number(USIZE, 68)"] }
# 0244d Instruction { source: "inline_main_RpnCalc_init_53_t5 <- 0n68/0x00000044u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\", \"Number(USIZE, 68)\", \"Number(USIZE, 68)\"] }", opcode: LoadImm32, args: [Register(0x3c), Constant32(0x00000044=68)], resolved: None }
20 3c 44 00 00 00 
# inline_main_RpnCalc_init_53_t3 <- inline_main_RpnCalc_init_53_t4 Add inline_main_RpnCalc_init_53_t5
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))"] }
# 02453 Instruction { source: "inline_main_RpnCalc_init_53_t3 <- inline_main_RpnCalc_init_53_t4 Add inline_main_RpnCalc_init_53_t5\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 02454 Instruction { source: "inline_main_RpnCalc_init_53_t3 <- inline_main_RpnCalc_init_53_t4 Add inline_main_RpnCalc_init_53_t5\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_1, args: [Register(0x38), Register(0x3c), Register(0x38)], resolved: None }
30 38 3c 38 
# 02458 Instruction { source: "inline_main_RpnCalc_init_53_t3 <- inline_main_RpnCalc_init_53_t4 Add inline_main_RpnCalc_init_53_t5\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"RpnCalc\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 68))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_main_RpnCalc_init_53_t6 <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 02459 Instruction { source: "inline_main_RpnCalc_init_53_t6 <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x3c), Constant32(0x00000000=0)], resolved: None }
20 3c 00 00 00 00 
# mem[inline_main_RpnCalc_init_53_t3] <- inline_main_RpnCalc_init_53_t6 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }"] }
# 0245f Instruction { source: "mem[inline_main_RpnCalc_init_53_t3] <- inline_main_RpnCalc_init_53_t6 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\"] }", opcode: Store32_1, args: [Register(0x3c), Register(0x38)], resolved: None }
23 3c 38 
# 02462 Instruction { source: "mem[inline_main_RpnCalc_init_53_t3] <- inline_main_RpnCalc_init_53_t6 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"num\\\"), var_type: None, value: Number(USIZE, 0) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto inline_main_RpnCalc_init_53_function_end_RpnCalc_init
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_RpnCalc_init_53_function_end_RpnCalc_init\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_RpnCalc_init_53_function_end_RpnCalc_init)], resolved: None }
# :inline_main_RpnCalc_init_53_function_end_RpnCalc_init
# 	SourceContext { contexts: [] }
# inline_main_RpnCalc_init_53_function_end_RpnCalc_init
# t9 <- 0n78/0x4eu8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 78)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 78)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 78)] })", "Number(U8, 78)", "Number(U8, 78)"] }
# 02463 Instruction { source: "t9 <- 0n78/0x4eu8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 78)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 78)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 78)] })\", \"Number(U8, 78)\", \"Number(U8, 78)\"] }", opcode: LoadImm8, args: [Register(0x44), Constant8(0x4e=78)], resolved: None }
04 44 4e 
# inline_main_putc_29_c <- t9 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 78)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 78)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 78)] })"] }
# optimized away noop copy Instruction { source: "inline_main_putc_29_c <- t9 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 78)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 78)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 78)] })\"] }", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_main_putc_29_t1 <- inline_main_putc_29_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_putc_29_t1 <- inline_main_putc_29_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# None <= call io_write0(inline_main_putc_29_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 02466 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x44)], resolved: None }
68 44 
# inline_main_putc_29_t3 <- inline_main_putc_29_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_putc_29_t3 <- inline_main_putc_29_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# None <= call lcd_write_char(inline_main_putc_29_t3,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })"] }
# 02468 Instruction { source: "Arg0[ch]=inline_main_putc_29_t3 None <= call lcd_write_char(inline_main_putc_29_t3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy8, args: [Register(0x44), Register(0x00)], resolved: None }
0b 44 00 
# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 152, 153, 154, 155, 156, 157, 158, 159, 217, 233, 234, 235, 236, 240, 241, 242, 243, 244, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 0246b Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 02471 Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 7b 24 00 00 
# 02477 Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: JmpImm, args: [Label24(:lcd_write_char)], resolved: None }
70 1a 22 00 
# 0247b Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# goto inline_main_putc_29_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_putc_29_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_putc_29_function_end_putc)], resolved: None }
# :inline_main_putc_29_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_putc_29_function_end_putc
# t11 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Number(U8, 10)", "Number(U8, 10)"] }
# 02481 Instruction { source: "t11 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x44), Constant8(0x0a=10)], resolved: None }
04 44 0a 
# inline_main_putc_30_c <- t11 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })"] }
# optimized away noop copy Instruction { source: "inline_main_putc_30_c <- t11 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Number(U8, 10)] })\"] }", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_main_putc_30_t1 <- inline_main_putc_30_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_putc_30_t1 <- inline_main_putc_30_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# None <= call io_write0(inline_main_putc_30_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 02484 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x44)], resolved: None }
68 44 
# inline_main_putc_30_t3 <- inline_main_putc_30_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_putc_30_t3 <- inline_main_putc_30_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# None <= call lcd_write_char(inline_main_putc_30_t3,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })"] }
# 02486 Instruction { source: "Arg0[ch]=inline_main_putc_30_t3 None <= call lcd_write_char(inline_main_putc_30_t3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy8, args: [Register(0x44), Register(0x00)], resolved: None }
0b 44 00 
# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 152, 153, 154, 155, 156, 157, 158, 159, 217, 233, 234, 235, 236, 240, 241, 242, 243, 244, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 02489 Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 0248f Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 99 24 00 00 
# 02495 Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: JmpImm, args: [Label24(:lcd_write_char)], resolved: None }
70 1a 22 00 
# 02499 Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# goto inline_main_putc_30_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_putc_30_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_putc_30_function_end_putc)], resolved: None }
# :inline_main_putc_30_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_putc_30_function_end_putc
# t14 <- 0n987500/0x000f116cu32 
# 	SourceContext { contexts: ["Return { value: Some(Call(Call { function: \"RpnCalc_run\", parameters: [AddressOf(Ident(\"calc\"))] })) }", "Call(Call { function: \"RpnCalc_run\", parameters: [AddressOf(Ident(\"calc\"))] })", "Call(Call { function: \"RpnCalc_run\", parameters: [AddressOf(Ident(\"calc\"))] })", "AddressOf(Ident(\"calc\"))", "AddressOf(Ident(\"calc\"))"] }
# 0249f Instruction { source: "t14 <- 0n987500/0x000f116cu32 \n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })) }\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"AddressOf(Ident(\\\"calc\\\"))\", \"AddressOf(Ident(\\\"calc\\\"))\"] }", opcode: LoadImm32, args: [Register(0x38), Constant32(0x000f116c=987500)], resolved: None }
20 38 6c 11 0f 00 
# t13 <- t14 U32
# 	SourceContext { contexts: ["Return { value: Some(Call(Call { function: \"RpnCalc_run\", parameters: [AddressOf(Ident(\"calc\"))] })) }", "Call(Call { function: \"RpnCalc_run\", parameters: [AddressOf(Ident(\"calc\"))] })", "Call(Call { function: \"RpnCalc_run\", parameters: [AddressOf(Ident(\"calc\"))] })", "AddressOf(Ident(\"calc\"))", "AddressOf(Ident(\"calc\"))"] }
# optimized away noop copy Instruction { source: "t13 <- t14 U32\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })) }\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"AddressOf(Ident(\\\"calc\\\"))\", \"AddressOf(Ident(\\\"calc\\\"))\"] }", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# Some(t12) <= call RpnCalc_run(t13,)
# 	SourceContext { contexts: ["Return { value: Some(Call(Call { function: \"RpnCalc_run\", parameters: [AddressOf(Ident(\"calc\"))] })) }", "Call(Call { function: \"RpnCalc_run\", parameters: [AddressOf(Ident(\"calc\"))] })", "Call(Call { function: \"RpnCalc_run\", parameters: [AddressOf(Ident(\"calc\"))] })"] }
# 024a5 Instruction { source: "Arg0[calc]=t13 Some(t12) <= call RpnCalc_run(t13,)\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })) }\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\"] }", opcode: Copy32, args: [Register(0x38), Register(0x00)], resolved: None }
21 38 00 
# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 124, 125, 126, 127, 128, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 233, 234, 235, 236, 240, 241, 242, 243, 244, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: [56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68]
# 024a8 Instruction { source: "Saving reg0x44 before Some(t12) <= call RpnCalc_run(t13,)\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })) }\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\"] }", opcode: Push8, args: [Register(0x44)], resolved: None }
09 44 
# 024aa Instruction { source: "Saving reg0x43 before Some(t12) <= call RpnCalc_run(t13,)\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })) }\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\"] }", opcode: Push8, args: [Register(0x43)], resolved: None }
09 43 
# 024ac Instruction { source: "Saving reg0x42 before Some(t12) <= call RpnCalc_run(t13,)\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })) }\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\"] }", opcode: Push8, args: [Register(0x42)], resolved: None }
09 42 
# 024ae Instruction { source: "Saving reg0x41 before Some(t12) <= call RpnCalc_run(t13,)\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })) }\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\"] }", opcode: Push8, args: [Register(0x41)], resolved: None }
09 41 
# 024b0 Instruction { source: "Saving reg0x40 before Some(t12) <= call RpnCalc_run(t13,)\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })) }\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\"] }", opcode: Push8, args: [Register(0x40)], resolved: None }
09 40 
# 024b2 Instruction { source: "Saving reg0x3f before Some(t12) <= call RpnCalc_run(t13,)\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })) }\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\"] }", opcode: Push8, args: [Register(0x3f)], resolved: None }
09 3f 
# 024b4 Instruction { source: "Saving reg0x3e before Some(t12) <= call RpnCalc_run(t13,)\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })) }\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\"] }", opcode: Push8, args: [Register(0x3e)], resolved: None }
09 3e 
# 024b6 Instruction { source: "Saving reg0x3d before Some(t12) <= call RpnCalc_run(t13,)\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })) }\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\"] }", opcode: Push8, args: [Register(0x3d)], resolved: None }
09 3d 
# 024b8 Instruction { source: "Saving reg0x3c before Some(t12) <= call RpnCalc_run(t13,)\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })) }\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\"] }", opcode: Push8, args: [Register(0x3c)], resolved: None }
09 3c 
# 024ba Instruction { source: "Saving reg0x3a before Some(t12) <= call RpnCalc_run(t13,)\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })) }\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\"] }", opcode: Push8, args: [Register(0x3a)], resolved: None }
09 3a 
# 024bc Instruction { source: "Saving reg0x39 before Some(t12) <= call RpnCalc_run(t13,)\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })) }\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\"] }", opcode: Push8, args: [Register(0x39)], resolved: None }
09 39 
# 024be Instruction { source: "Saving reg0x38 before Some(t12) <= call RpnCalc_run(t13,)\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })) }\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\"] }", opcode: Push8, args: [Register(0x38)], resolved: None }
09 38 
# 024c0 Instruction { source: "PseudoCall(Label24(:RpnCalc_run))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 024c6 Instruction { source: "PseudoCall(Label24(:RpnCalc_run))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c d0 24 00 00 
# 024cc Instruction { source: "PseudoCall(Label24(:RpnCalc_run))", opcode: JmpImm, args: [Label24(:RpnCalc_run)], resolved: None }
70 dc 15 00 
# 024d0 Instruction { source: "PseudoCall(Label24(:RpnCalc_run))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 024d6 Instruction { source: "Restoring reg0x38 after Some(t12) <= call RpnCalc_run(t13,)\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })) }\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\"] }", opcode: Pop8, args: [Register(0x38)], resolved: None }
0a 38 
# 024d8 Instruction { source: "Restoring reg0x39 after Some(t12) <= call RpnCalc_run(t13,)\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })) }\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\"] }", opcode: Pop8, args: [Register(0x39)], resolved: None }
0a 39 
# 024da Instruction { source: "Restoring reg0x3a after Some(t12) <= call RpnCalc_run(t13,)\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })) }\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\"] }", opcode: Pop8, args: [Register(0x3a)], resolved: None }
0a 3a 
# 024dc Instruction { source: "Restoring reg0x3c after Some(t12) <= call RpnCalc_run(t13,)\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })) }\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\"] }", opcode: Pop8, args: [Register(0x3c)], resolved: None }
0a 3c 
# 024de Instruction { source: "Restoring reg0x3d after Some(t12) <= call RpnCalc_run(t13,)\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })) }\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\"] }", opcode: Pop8, args: [Register(0x3d)], resolved: None }
0a 3d 
# 024e0 Instruction { source: "Restoring reg0x3e after Some(t12) <= call RpnCalc_run(t13,)\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })) }\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\"] }", opcode: Pop8, args: [Register(0x3e)], resolved: None }
0a 3e 
# 024e2 Instruction { source: "Restoring reg0x3f after Some(t12) <= call RpnCalc_run(t13,)\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })) }\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\"] }", opcode: Pop8, args: [Register(0x3f)], resolved: None }
0a 3f 
# 024e4 Instruction { source: "Restoring reg0x40 after Some(t12) <= call RpnCalc_run(t13,)\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })) }\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\"] }", opcode: Pop8, args: [Register(0x40)], resolved: None }
0a 40 
# 024e6 Instruction { source: "Restoring reg0x41 after Some(t12) <= call RpnCalc_run(t13,)\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })) }\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\"] }", opcode: Pop8, args: [Register(0x41)], resolved: None }
0a 41 
# 024e8 Instruction { source: "Restoring reg0x42 after Some(t12) <= call RpnCalc_run(t13,)\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })) }\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\"] }", opcode: Pop8, args: [Register(0x42)], resolved: None }
0a 42 
# 024ea Instruction { source: "Restoring reg0x43 after Some(t12) <= call RpnCalc_run(t13,)\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })) }\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\"] }", opcode: Pop8, args: [Register(0x43)], resolved: None }
0a 43 
# 024ec Instruction { source: "Restoring reg0x44 after Some(t12) <= call RpnCalc_run(t13,)\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })) }\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\"] }", opcode: Pop8, args: [Register(0x44)], resolved: None }
0a 44 
# 024ee Instruction { source: "Some(t12) <= call RpnCalc_run(t13,)\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })) }\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\", \"Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })\"] }", opcode: Copy8, args: [Register(0x00), Register(0x44)], resolved: None }
0b 00 44 
# return Some(t12)
# 	SourceContext { contexts: ["Return { value: Some(Call(Call { function: \"RpnCalc_run\", parameters: [AddressOf(Ident(\"calc\"))] })) }"] }
# 024f1 Instruction { source: "return Some(t12)\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"RpnCalc_run\\\", parameters: [AddressOf(Ident(\\\"calc\\\"))] })) }\"] }", opcode: Copy8, args: [Register(0x44), Register(0x00)], resolved: None }
0b 44 00 
# 024f4 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# :function_end_main
# 	SourceContext { contexts: [] }
# function_end_main
# Unreachable
# 	SourceContext { contexts: [] }
# 024f6 Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
# :mul32_64
# Ret None
# Arg0=a
# Arg1=b
# Arg2=c
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var __frame_pointer (__frame_pointer) Reg(U32) Some([12, 13, 14, 15])
# Var a (Arg0 a Number(USIZE)) Reg(U32) Some([72, 73, 74, 75])
# Var a_hi (Local a_hi Number(USIZE) Reg(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var b (Arg1 b Number(USIZE)) Reg(U32) Some([80, 81, 82, 83])
# Var b_hi (Local b_hi Number(USIZE) Reg(U32)) Reg(U32) Some([84, 85, 86, 87])
# Var c (Arg2 c Ptr(Struct("U64"))) Reg(U32) Some([88, 89, 90, 91])
# Var inline_mul32_64_add_U64_0_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_mul32_64_add_U64_0_a (Arg0 a Ptr(Struct("U64"))) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_add_U64_0_b (Arg1 b Ptr(Struct("U64"))) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_add_U64_0_c (Arg2 c Ptr(Struct("U64"))) Reg(U32) Some([92, 93, 94, 95])
# Var inline_mul32_64_add_U64_0_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_mul32_64_add_U64_0_lo (Local lo Number(USIZE) Reg(U32)) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_add_U64_0_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") } }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_add_U64_0_t1 (t1 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }) Reg(U32) Some([100, 101, 102, 103])
# Var inline_mul32_64_add_U64_0_t10 (t10 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4)) }) Reg(U32) Some([104, 105, 106, 107])
# Var inline_mul32_64_add_U64_0_t11 (t11 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_add_U64_0_t12 (t12 Number(USIZE, 4)) Reg(U32) Some([104, 105, 106, 107])
# Var inline_mul32_64_add_U64_0_t13 (t13 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_mul32_64_add_U64_0_t14 (t14 Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_add_U64_0_t15 (t15 PtrFieldDeref("a", "lo")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_add_U64_0_t16 (t16 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") } }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_add_U64_0_t17 (t17 PtrFieldDeref("b", "lo")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_add_U64_0_t18 (t18 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") } }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_add_U64_0_t19 (t19 PtrFieldDeref("c", "lo")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_add_U64_0_t2 (t2 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_mul32_64_add_U64_0_t20 (t20 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_add_U64_0_t21 (t21 Ident("lo")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_add_U64_0_t22 (t22 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_add_U64_0_t23 (t23 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_add_U64_0_t24 (t24 Number(USIZE, 4)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_add_U64_0_t25 (t25 Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_add_U64_0_t26 (t26 PtrFieldDeref("c", "hi")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_add_U64_0_t27 (t27 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_add_U64_0_t28 (t28 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_add_U64_0_t29 (t29 Number(USIZE, 4)) Reg(U32) Some([92, 93, 94, 95])
# Var inline_mul32_64_add_U64_0_t3 (t3 Number(USIZE, 4)) Reg(U32) Some([100, 101, 102, 103])
# Var inline_mul32_64_add_U64_0_t30 (t30 Number(USIZE, 1)) Reg(U32) Some([92, 93, 94, 95])
# Var inline_mul32_64_add_U64_0_t4 (t4 Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))) Reg(U32) Some([104, 105, 106, 107])
# Var inline_mul32_64_add_U64_0_t5 (t5 PtrFieldDeref("a", "hi")) Reg(U32) Some([108, 109, 110, 111])
# Var inline_mul32_64_add_U64_0_t6 (t6 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4)) }) Reg(U32) Some([104, 105, 106, 107])
# Var inline_mul32_64_add_U64_0_t7 (t7 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_add_U64_0_t8 (t8 Number(USIZE, 4)) Reg(U32) Some([104, 105, 106, 107])
# Var inline_mul32_64_add_U64_0_t9 (t9 PtrFieldDeref("b", "hi")) Reg(U32) Some([104, 105, 106, 107])
# Var inline_mul32_64_add_U64_1_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_mul32_64_add_U64_1_a (Arg0 a Ptr(Struct("U64"))) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_add_U64_1_b (Arg1 b Ptr(Struct("U64"))) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_add_U64_1_c (Arg2 c Ptr(Struct("U64"))) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_add_U64_1_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_mul32_64_add_U64_1_lo (Local lo Number(USIZE) Reg(U32)) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_add_U64_1_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") } }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_add_U64_1_t1 (t1 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }) Reg(U32) Some([88, 89, 90, 91])
# Var inline_mul32_64_add_U64_1_t10 (t10 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4)) }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_mul32_64_add_U64_1_t11 (t11 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_add_U64_1_t12 (t12 Number(USIZE, 4)) Reg(U32) Some([92, 93, 94, 95])
# Var inline_mul32_64_add_U64_1_t13 (t13 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_add_U64_1_t14 (t14 Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_add_U64_1_t15 (t15 PtrFieldDeref("a", "lo")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_add_U64_1_t16 (t16 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") } }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_add_U64_1_t17 (t17 PtrFieldDeref("b", "lo")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_add_U64_1_t18 (t18 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") } }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_add_U64_1_t19 (t19 PtrFieldDeref("c", "lo")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_add_U64_1_t2 (t2 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_add_U64_1_t20 (t20 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_add_U64_1_t21 (t21 Ident("lo")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_add_U64_1_t22 (t22 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_add_U64_1_t23 (t23 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_add_U64_1_t24 (t24 Number(USIZE, 4)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_add_U64_1_t25 (t25 Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_add_U64_1_t26 (t26 PtrFieldDeref("c", "hi")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_add_U64_1_t27 (t27 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_add_U64_1_t28 (t28 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_add_U64_1_t29 (t29 Number(USIZE, 4)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_add_U64_1_t3 (t3 Number(USIZE, 4)) Reg(U32) Some([88, 89, 90, 91])
# Var inline_mul32_64_add_U64_1_t30 (t30 Number(USIZE, 1)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_add_U64_1_t4 (t4 Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))) Reg(U32) Some([92, 93, 94, 95])
# Var inline_mul32_64_add_U64_1_t5 (t5 PtrFieldDeref("a", "hi")) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_add_U64_1_t6 (t6 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4)) }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_mul32_64_add_U64_1_t7 (t7 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_add_U64_1_t8 (t8 Number(USIZE, 4)) Reg(U32) Some([92, 93, 94, 95])
# Var inline_mul32_64_add_U64_1_t9 (t9 PtrFieldDeref("b", "hi")) Reg(U32) Some([92, 93, 94, 95])
# Var inline_mul32_64_mul16_32_10_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_mul32_64_mul16_32_10_a (Arg0 a Number(USIZE)) Reg(U32) Some([92, 93, 94, 95])
# Var inline_mul32_64_mul16_32_10_b (Arg1 b Number(USIZE)) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_mul16_32_10_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([100, 101, 102, 103])
# Var inline_mul32_64_mul16_32_10_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([104, 105, 106, 107])
# Var inline_mul32_64_mul16_32_10_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([92, 93, 94, 95])
# Var inline_mul32_64_mul16_32_10_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([104, 105, 106, 107])
# Var inline_mul32_64_mul16_32_10_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_mul32_64_mul16_32_10_t0 (t0 Ident("a")) Reg(U32) Some([92, 93, 94, 95])
# Var inline_mul32_64_mul16_32_10_t1 (t1 Ident("b")) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_mul16_32_10_t10 (t10 Ident("c")) Reg(U32) Some([100, 101, 102, 103])
# Var inline_mul32_64_mul16_32_10_t11 (t11 Ident("f")) Reg(U32) Some([104, 105, 106, 107])
# Var inline_mul32_64_mul16_32_10_t12 (t12 Ident("a")) Reg(U32) Some([92, 93, 94, 95])
# Var inline_mul32_64_mul16_32_10_t13 (t13 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([104, 105, 106, 107])
# Var inline_mul32_64_mul16_32_10_t14 (t14 Index("b", Number(U8, 1))) Reg(U8) Some([112])
# Var inline_mul32_64_mul16_32_10_t15 (t15 Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_mul32_64_mul16_32_10_t16 (t16 Index("a", Number(U8, 1))) Reg(U8) Some([113])
# Var inline_mul32_64_mul16_32_10_t17 (t17 Ident("b")) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_mul16_32_10_t18 (t18 Ident("d")) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_mul16_32_10_t19 (t19 Ident("e")) Reg(U32) Some([92, 93, 94, 95])
# Var inline_mul32_64_mul16_32_10_t2 (t2 Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([104, 105, 106, 107])
# Var inline_mul32_64_mul16_32_10_t20 (t20 Index("d", Number(U8, 2))) Reg(U8) Some([113])
# Var inline_mul32_64_mul16_32_10_t21 (t21 Index("d", Number(U8, 1))) Reg(U8) Some([113])
# Var inline_mul32_64_mul16_32_10_t22 (t22 Index("d", Number(U8, 0))) Reg(U8) Some([113])
# Var inline_mul32_64_mul16_32_10_t23 (t23 Number(U8, 0)) Reg(U8) Some([113])
# Var inline_mul32_64_mul16_32_10_t24 (t24 Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([92, 93, 94, 95])
# Var inline_mul32_64_mul16_32_10_t25 (t25 Ident("c")) Reg(U32) Some([92, 93, 94, 95])
# Var inline_mul32_64_mul16_32_10_t26 (t26 Ident("d")) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_mul16_32_10_t3 (t3 Index("a", Number(U8, 1))) Reg(U8) Some([113])
# Var inline_mul32_64_mul16_32_10_t4 (t4 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([108, 109, 110, 111])
# Var inline_mul32_64_mul16_32_10_t5 (t5 Index("b", Number(U8, 1))) Reg(U8) Some([112])
# Var inline_mul32_64_mul16_32_10_t6 (t6 Index("f", Number(U8, 1))) Reg(U8) Some([114])
# Var inline_mul32_64_mul16_32_10_t7 (t7 Index("f", Number(U8, 0))) Reg(U8) Some([114])
# Var inline_mul32_64_mul16_32_10_t8 (t8 Number(U8, 0)) Reg(U8) Some([115])
# Var inline_mul32_64_mul16_32_10_t9 (t9 Number(U8, 0)) Reg(U8) Some([115])
# Var inline_mul32_64_mul16_32_11_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_mul32_64_mul16_32_11_a (Arg0 a Number(USIZE)) Reg(U32) Some([92, 93, 94, 95])
# Var inline_mul32_64_mul16_32_11_b (Arg1 b Number(USIZE)) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_mul16_32_11_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([100, 101, 102, 103])
# Var inline_mul32_64_mul16_32_11_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([104, 105, 106, 107])
# Var inline_mul32_64_mul16_32_11_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([92, 93, 94, 95])
# Var inline_mul32_64_mul16_32_11_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([104, 105, 106, 107])
# Var inline_mul32_64_mul16_32_11_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_mul32_64_mul16_32_11_t0 (t0 Ident("a")) Reg(U32) Some([92, 93, 94, 95])
# Var inline_mul32_64_mul16_32_11_t1 (t1 Ident("b")) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_mul16_32_11_t10 (t10 Ident("c")) Reg(U32) Some([100, 101, 102, 103])
# Var inline_mul32_64_mul16_32_11_t11 (t11 Ident("f")) Reg(U32) Some([104, 105, 106, 107])
# Var inline_mul32_64_mul16_32_11_t12 (t12 Ident("a")) Reg(U32) Some([92, 93, 94, 95])
# Var inline_mul32_64_mul16_32_11_t13 (t13 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([104, 105, 106, 107])
# Var inline_mul32_64_mul16_32_11_t14 (t14 Index("b", Number(U8, 1))) Reg(U8) Some([112])
# Var inline_mul32_64_mul16_32_11_t15 (t15 Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_mul32_64_mul16_32_11_t16 (t16 Index("a", Number(U8, 1))) Reg(U8) Some([113])
# Var inline_mul32_64_mul16_32_11_t17 (t17 Ident("b")) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_mul16_32_11_t18 (t18 Ident("d")) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_mul16_32_11_t19 (t19 Ident("e")) Reg(U32) Some([92, 93, 94, 95])
# Var inline_mul32_64_mul16_32_11_t2 (t2 Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([104, 105, 106, 107])
# Var inline_mul32_64_mul16_32_11_t20 (t20 Index("d", Number(U8, 2))) Reg(U8) Some([113])
# Var inline_mul32_64_mul16_32_11_t21 (t21 Index("d", Number(U8, 1))) Reg(U8) Some([113])
# Var inline_mul32_64_mul16_32_11_t22 (t22 Index("d", Number(U8, 0))) Reg(U8) Some([113])
# Var inline_mul32_64_mul16_32_11_t23 (t23 Number(U8, 0)) Reg(U8) Some([113])
# Var inline_mul32_64_mul16_32_11_t24 (t24 Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([92, 93, 94, 95])
# Var inline_mul32_64_mul16_32_11_t25 (t25 Ident("c")) Reg(U32) Some([92, 93, 94, 95])
# Var inline_mul32_64_mul16_32_11_t26 (t26 Ident("d")) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_mul16_32_11_t3 (t3 Index("a", Number(U8, 1))) Reg(U8) Some([113])
# Var inline_mul32_64_mul16_32_11_t4 (t4 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([108, 109, 110, 111])
# Var inline_mul32_64_mul16_32_11_t5 (t5 Index("b", Number(U8, 1))) Reg(U8) Some([112])
# Var inline_mul32_64_mul16_32_11_t6 (t6 Index("f", Number(U8, 1))) Reg(U8) Some([114])
# Var inline_mul32_64_mul16_32_11_t7 (t7 Index("f", Number(U8, 0))) Reg(U8) Some([114])
# Var inline_mul32_64_mul16_32_11_t8 (t8 Number(U8, 0)) Reg(U8) Some([115])
# Var inline_mul32_64_mul16_32_11_t9 (t9 Number(U8, 0)) Reg(U8) Some([115])
# Var inline_mul32_64_mul16_32_12_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_mul32_64_mul16_32_12_a (Arg0 a Number(USIZE)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_12_b (Arg1 b Number(USIZE)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_mul16_32_12_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([92, 93, 94, 95])
# Var inline_mul32_64_mul16_32_12_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_mul16_32_12_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_12_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_mul16_32_12_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_mul32_64_mul16_32_12_t0 (t0 Ident("a")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_12_t1 (t1 Ident("b")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_mul16_32_12_t10 (t10 Ident("c")) Reg(U32) Some([92, 93, 94, 95])
# Var inline_mul32_64_mul16_32_12_t11 (t11 Ident("f")) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_mul16_32_12_t12 (t12 Ident("a")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_12_t13 (t13 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_mul16_32_12_t14 (t14 Index("b", Number(U8, 1))) Reg(U8) Some([116])
# Var inline_mul32_64_mul16_32_12_t15 (t15 Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_12_t16 (t16 Index("a", Number(U8, 1))) Reg(U8) Some([117])
# Var inline_mul32_64_mul16_32_12_t17 (t17 Ident("b")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_mul16_32_12_t18 (t18 Ident("d")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_mul16_32_12_t19 (t19 Ident("e")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_12_t2 (t2 Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_mul16_32_12_t20 (t20 Index("d", Number(U8, 2))) Reg(U8) Some([117])
# Var inline_mul32_64_mul16_32_12_t21 (t21 Index("d", Number(U8, 1))) Reg(U8) Some([117])
# Var inline_mul32_64_mul16_32_12_t22 (t22 Index("d", Number(U8, 0))) Reg(U8) Some([117])
# Var inline_mul32_64_mul16_32_12_t23 (t23 Number(U8, 0)) Reg(U8) Some([117])
# Var inline_mul32_64_mul16_32_12_t24 (t24 Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_12_t25 (t25 Ident("c")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_12_t26 (t26 Ident("d")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_mul16_32_12_t3 (t3 Index("a", Number(U8, 1))) Reg(U8) Some([117])
# Var inline_mul32_64_mul16_32_12_t4 (t4 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([100, 101, 102, 103])
# Var inline_mul32_64_mul16_32_12_t5 (t5 Index("b", Number(U8, 1))) Reg(U8) Some([116])
# Var inline_mul32_64_mul16_32_12_t6 (t6 Index("f", Number(U8, 1))) Reg(U8) Some([112])
# Var inline_mul32_64_mul16_32_12_t7 (t7 Index("f", Number(U8, 0))) Reg(U8) Some([112])
# Var inline_mul32_64_mul16_32_12_t8 (t8 Number(U8, 0)) Reg(U8) Some([118])
# Var inline_mul32_64_mul16_32_12_t9 (t9 Number(U8, 0)) Reg(U8) Some([118])
# Var inline_mul32_64_mul16_32_13_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_mul32_64_mul16_32_13_a (Arg0 a Number(USIZE)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_13_b (Arg1 b Number(USIZE)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_13_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_mul16_32_13_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_mul16_32_13_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_13_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_mul16_32_13_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_mul32_64_mul16_32_13_t0 (t0 Ident("a")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_13_t1 (t1 Ident("b")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_13_t10 (t10 Ident("c")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_mul16_32_13_t11 (t11 Ident("f")) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_mul16_32_13_t12 (t12 Ident("a")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_13_t13 (t13 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_mul16_32_13_t14 (t14 Index("b", Number(U8, 1))) Reg(U8) Some([117])
# Var inline_mul32_64_mul16_32_13_t15 (t15 Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_13_t16 (t16 Index("a", Number(U8, 1))) Reg(U8) Some([119])
# Var inline_mul32_64_mul16_32_13_t17 (t17 Ident("b")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_13_t18 (t18 Ident("d")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_13_t19 (t19 Ident("e")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_13_t2 (t2 Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_mul16_32_13_t20 (t20 Index("d", Number(U8, 2))) Reg(U8) Some([119])
# Var inline_mul32_64_mul16_32_13_t21 (t21 Index("d", Number(U8, 1))) Reg(U8) Some([119])
# Var inline_mul32_64_mul16_32_13_t22 (t22 Index("d", Number(U8, 0))) Reg(U8) Some([119])
# Var inline_mul32_64_mul16_32_13_t23 (t23 Number(U8, 0)) Reg(U8) Some([119])
# Var inline_mul32_64_mul16_32_13_t24 (t24 Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_13_t25 (t25 Ident("c")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_13_t26 (t26 Ident("d")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_13_t3 (t3 Index("a", Number(U8, 1))) Reg(U8) Some([119])
# Var inline_mul32_64_mul16_32_13_t4 (t4 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_mul32_64_mul16_32_13_t5 (t5 Index("b", Number(U8, 1))) Reg(U8) Some([117])
# Var inline_mul32_64_mul16_32_13_t6 (t6 Index("f", Number(U8, 1))) Reg(U8) Some([120])
# Var inline_mul32_64_mul16_32_13_t7 (t7 Index("f", Number(U8, 0))) Reg(U8) Some([120])
# Var inline_mul32_64_mul16_32_13_t8 (t8 Number(U8, 0)) Reg(U8) Some([113])
# Var inline_mul32_64_mul16_32_13_t9 (t9 Number(U8, 0)) Reg(U8) Some([113])
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var t0 (Stack size negated) Reg(U32) Some([76, 77, 78, 79])
# Var t1 (t1 Index("a", Number(U8, 3))) Reg(U8) Some([119])
# Var t10 (t10 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([88, 89, 90, 91])
# Var t11 (t11 Number(USIZE, 4)) Reg(U32) Some([92, 93, 94, 95])
# Var t12 (t12 Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })) Reg(U32) Some([92, 93, 94, 95])
# Var t13 (t13 Ident("a_hi")) Reg(U32) Some([76, 77, 78, 79])
# Var t14 (t14 Ident("b_hi")) Reg(U32) Some([84, 85, 86, 87])
# Var t15 (t15 Ident("a_hi")) Reg(U32) Some([76, 77, 78, 79])
# Var t16 (t16 Ident("b")) Reg(U32) Some([80, 81, 82, 83])
# Var t17 (t17 Index("temp", Number(U8, 0))) Reg(U8) Some([117])
# Var t18 (t18 Index("temp", Number(U8, 1))) Reg(U8) Some([117])
# Var t19 (t19 Index("temp", Number(U8, 2))) Reg(U8) Some([117])
# Var t2 (t2 Index("a", Number(U8, 2))) Reg(U8) Some([119])
# Var t20 (t20 Index("temp", Number(U8, 3))) Reg(U8) Some([117])
# Var t21 (t21 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident("__frame_pointer") }) Reg(U32) Some([124, 125, 126, 127])
# Var t22 (t22 Ident("temp_lo")) Reg(U32) Some([76, 77, 78, 79])
# Var t23 (t23 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }) Reg(U32) Some([76, 77, 78, 79])
# Var t24 (t24 Ident("__frame_pointer")) Reg(U32) Some([124, 125, 126, 127])
# Var t25 (t25 Number(USIZE, 4)) Reg(U32) Some([76, 77, 78, 79])
# Var t26 (t26 Ident("temp_hi")) Reg(U32) Some([80, 81, 82, 83])
# Var t27 (t27 Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })) Reg(U8) Some([128])
# Var t28 (t28 Ident("c")) Reg(U32) Some([76, 77, 78, 79])
# Var t29 (t29 AddressOf(Ident("temp64"))) Reg(U32) Some([80, 81, 82, 83])
# Var t3 (t3 Index("b", Number(U8, 3))) Reg(U8) Some([116])
# Var t30 (t30 Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))) Reg(U32) Some([80, 81, 82, 83])
# Var t31 (t31 Ident("__frame_pointer")) Reg(U32) Some([124, 125, 126, 127])
# Var t32 (t32 Number(USIZE, 0)) Reg(U32) Some([80, 81, 82, 83])
# Var t33 (t33 Ident("c")) Reg(U32) Some([88, 89, 90, 91])
# Var t34 (t34 Ident("a")) Reg(U32) Some([72, 73, 74, 75])
# Var t35 (t35 Ident("b_hi")) Reg(U32) Some([76, 77, 78, 79])
# Var t36 (t36 Index("temp", Number(U8, 0))) Reg(U8) Some([119])
# Var t37 (t37 Index("temp", Number(U8, 1))) Reg(U8) Some([119])
# Var t38 (t38 Index("temp", Number(U8, 2))) Reg(U8) Some([119])
# Var t39 (t39 Index("temp", Number(U8, 3))) Reg(U8) Some([119])
# Var t4 (t4 Index("b", Number(U8, 2))) Reg(U8) Some([116])
# Var t40 (t40 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident("__frame_pointer") }) Reg(U32) Some([124, 125, 126, 127])
# Var t41 (t41 Ident("temp_lo")) Reg(U32) Some([72, 73, 74, 75])
# Var t42 (t42 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }) Reg(U32) Some([72, 73, 74, 75])
# Var t43 (t43 Ident("__frame_pointer")) Reg(U32) Some([124, 125, 126, 127])
# Var t44 (t44 Number(USIZE, 4)) Reg(U32) Some([72, 73, 74, 75])
# Var t45 (t45 Ident("temp_hi")) Reg(U32) Some([76, 77, 78, 79])
# Var t46 (t46 Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })) Reg(U8) Some([128])
# Var t47 (t47 Ident("c")) Reg(U32) Some([72, 73, 74, 75])
# Var t48 (t48 AddressOf(Ident("temp64"))) Reg(U32) Some([76, 77, 78, 79])
# Var t49 (t49 Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))) Reg(U32) Some([76, 77, 78, 79])
# Var t5 (t5 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([88, 89, 90, 91])
# Var t50 (t50 Ident("__frame_pointer")) Reg(U32) Some([124, 125, 126, 127])
# Var t51 (t51 Number(USIZE, 0)) Reg(U32) Some([76, 77, 78, 79])
# Var t52 (t52 Ident("c")) Reg(U32) Some([80, 81, 82, 83])
# Var t53 (Stack size) Reg(U32) Some([72, 73, 74, 75])
# Var t6 (t6 Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })) Reg(U32) Some([92, 93, 94, 95])
# Var t7 (t7 Ident("a")) Reg(U32) Some([72, 73, 74, 75])
# Var t8 (t8 Ident("b")) Reg(U32) Some([80, 81, 82, 83])
# Var t9 (t9 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }) Reg(U32) Some([132, 133, 134, 135])
# Var temp (Local temp Number(USIZE) Reg(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var temp64 (Local temp64 Struct("U64") FrameOffset(0)) FrameOffset(0) None
# Var temp_hi (Local temp_hi Number(USIZE) Reg(U32)) Reg(U32) Some([132, 133, 134, 135])
# Var temp_lo (Local temp_lo Number(USIZE) Reg(U32)) Reg(U32) Some([136, 137, 138, 139])
# 024fb Instruction { source: "reserve 8 bytes of stack space for locals", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffff8=4294967288)], resolved: None }
32 0c f8 ff ff ff 
# 02501 Instruction { source: "Save function parameter 'a' registers [0, 1, 2, 3] to locals [72, 73, 74, 75].", opcode: Copy32, args: [Register(0x00), Register(0x48)], resolved: None }
21 00 48 
# 02504 Instruction { source: "Save function parameter 'b' registers [4, 5, 6, 7] to locals [80, 81, 82, 83].", opcode: Copy32, args: [Register(0x04), Register(0x50)], resolved: None }
21 04 50 
# 02507 Instruction { source: "Save function parameter 'c' registers [8, 9, 10, 11] to locals [88, 89, 90, 91].", opcode: Copy32, args: [Register(0x08), Register(0x58)], resolved: None }
21 08 58 
# t0 <- 0xfffffff8u32 
# 	SourceContext { contexts: [] }
# 0250a Instruction { source: "t0 <- 0xfffffff8u32 \n\tSourceContext { contexts: [] }", opcode: LoadImm32, args: [Register(0x4c), Constant32(0xfffffff8=4294967288)], resolved: None }
20 4c f8 ff ff ff 
# __frame_pointer <- __frame_pointer Add t0
# 	SourceContext { contexts: [] }
# 02510 Instruction { source: "__frame_pointer <- __frame_pointer Add t0\n\tSourceContext { contexts: [] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 02511 Instruction { source: "__frame_pointer <- __frame_pointer Add t0\n\tSourceContext { contexts: [] }", opcode: AddCarry32_1, args: [Register(0x0c), Register(0x4c), Register(0x0c)], resolved: None }
30 0c 4c 0c 
# 02515 Instruction { source: "__frame_pointer <- __frame_pointer Add t0\n\tSourceContext { contexts: [] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# a_hi <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a_hi\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }", "Number(USIZE, 0)"] }
# 02516 Instruction { source: "a_hi <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a_hi\\\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x4c), Constant32(0x00000000=0)], resolved: None }
20 4c 00 00 00 00 
# t1 <- a[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a_hi\", Number(U8, 1)), var_type: None, value: Index(\"a\", Number(U8, 3)) }", "Index(\"a\", Number(U8, 3))", "Index(\"a\", Number(U8, 3))"] }
# 0251c Instruction { source: "t1 <- a[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a_hi\\\", Number(U8, 1)), var_type: None, value: Index(\\\"a\\\", Number(U8, 3)) }\", \"Index(\\\"a\\\", Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0x4b), Register(0x77)], resolved: None }
0b 4b 77 
# a_hi[0x01..0x02] <- t1 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a_hi\", Number(U8, 1)), var_type: None, value: Index(\"a\", Number(U8, 3)) }"] }
# 0251f Instruction { source: "a_hi[0x01..0x02] <- t1 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a_hi\\\", Number(U8, 1)), var_type: None, value: Index(\\\"a\\\", Number(U8, 3)) }\"] }", opcode: Copy8, args: [Register(0x77), Register(0x4d)], resolved: None }
0b 77 4d 
# t2 <- a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a_hi\", Number(U8, 0)), var_type: None, value: Index(\"a\", Number(U8, 2)) }", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 02522 Instruction { source: "t2 <- a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a_hi\\\", Number(U8, 0)), var_type: None, value: Index(\\\"a\\\", Number(U8, 2)) }\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x4a), Register(0x77)], resolved: None }
0b 4a 77 
# a_hi[0x00..0x01] <- t2 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a_hi\", Number(U8, 0)), var_type: None, value: Index(\"a\", Number(U8, 2)) }"] }
# 02525 Instruction { source: "a_hi[0x00..0x01] <- t2 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a_hi\\\", Number(U8, 0)), var_type: None, value: Index(\\\"a\\\", Number(U8, 2)) }\"] }", opcode: Copy8, args: [Register(0x77), Register(0x4c)], resolved: None }
0b 77 4c 
# b_hi <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"b_hi\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }", "Number(USIZE, 0)"] }
# 02528 Instruction { source: "b_hi <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b_hi\\\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x54), Constant32(0x00000000=0)], resolved: None }
20 54 00 00 00 00 
# t3 <- b[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"b_hi\", Number(U8, 1)), var_type: None, value: Index(\"b\", Number(U8, 3)) }", "Index(\"b\", Number(U8, 3))", "Index(\"b\", Number(U8, 3))"] }
# 0252e Instruction { source: "t3 <- b[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"b_hi\\\", Number(U8, 1)), var_type: None, value: Index(\\\"b\\\", Number(U8, 3)) }\", \"Index(\\\"b\\\", Number(U8, 3))\", \"Index(\\\"b\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0x53), Register(0x74)], resolved: None }
0b 53 74 
# b_hi[0x01..0x02] <- t3 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"b_hi\", Number(U8, 1)), var_type: None, value: Index(\"b\", Number(U8, 3)) }"] }
# 02531 Instruction { source: "b_hi[0x01..0x02] <- t3 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"b_hi\\\", Number(U8, 1)), var_type: None, value: Index(\\\"b\\\", Number(U8, 3)) }\"] }", opcode: Copy8, args: [Register(0x74), Register(0x55)], resolved: None }
0b 74 55 
# t4 <- b[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"b_hi\", Number(U8, 0)), var_type: None, value: Index(\"b\", Number(U8, 2)) }", "Index(\"b\", Number(U8, 2))", "Index(\"b\", Number(U8, 2))"] }
# 02534 Instruction { source: "t4 <- b[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"b_hi\\\", Number(U8, 0)), var_type: None, value: Index(\\\"b\\\", Number(U8, 2)) }\", \"Index(\\\"b\\\", Number(U8, 2))\", \"Index(\\\"b\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x52), Register(0x74)], resolved: None }
0b 52 74 
# b_hi[0x00..0x01] <- t4 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"b_hi\", Number(U8, 0)), var_type: None, value: Index(\"b\", Number(U8, 2)) }"] }
# 02537 Instruction { source: "b_hi[0x00..0x01] <- t4 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"b_hi\\\", Number(U8, 0)), var_type: None, value: Index(\\\"b\\\", Number(U8, 2)) }\"] }", opcode: Copy8, args: [Register(0x74), Register(0x54)], resolved: None }
0b 74 54 
# t5 <- c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "t5 <- c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x58), Register(0x58)], resolved: None }
# t7 <- a U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t7 <- a U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# t8 <- b U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "t8 <- b U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_mul32_64_mul16_32_10_a <- t7 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })"] }
# 0253a Instruction { source: "inline_mul32_64_mul16_32_10_a <- t7 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0x48), Register(0x5c)], resolved: None }
21 48 5c 
# inline_mul32_64_mul16_32_10_b <- t8 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })"] }
# 0253d Instruction { source: "inline_mul32_64_mul16_32_10_b <- t8 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0x50), Register(0x60)], resolved: None }
21 50 60 
# inline_mul32_64_mul16_32_10_t0 <- inline_mul32_64_mul16_32_10_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_t0 <- inline_mul32_64_mul16_32_10_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_mul32_64_mul16_32_10_t1 <- inline_mul32_64_mul16_32_10_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_t1 <- inline_mul32_64_mul16_32_10_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x60), Register(0x60)], resolved: None }
# inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t0 Multiply inline_mul32_64_mul16_32_10_t1
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))"] }
# 02540 Instruction { source: "inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t0 Multiply inline_mul32_64_mul16_32_10_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0x5c), Register(0x60), Register(0x64)], resolved: None }
11 5c 60 64 
# 02544 Instruction { source: "inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t0 Multiply inline_mul32_64_mul16_32_10_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x66), Constant8(0x00=0)], resolved: None }
04 66 00 
# 02547 Instruction { source: "inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t0 Multiply inline_mul32_64_mul16_32_10_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x67), Constant8(0x00=0)], resolved: None }
04 67 00 
# inline_mul32_64_mul16_32_10_t3 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 0254a Instruction { source: "inline_mul32_64_mul16_32_10_t3 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x5d), Register(0x71)], resolved: None }
0b 5d 71 
# inline_mul32_64_mul16_32_10_t2 U32 <- inline_mul32_64_mul16_32_10_t3 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 0254d Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_10_t2 U32 <- inline_mul32_64_mul16_32_10_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x68), Constant32(0x00000000=0)], resolved: None }
20 68 00 00 00 00 
# 02553 Instruction { source: "inline_mul32_64_mul16_32_10_t2 U32 <- inline_mul32_64_mul16_32_10_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x71), Register(0x68)], resolved: None }
0b 71 68 
# inline_mul32_64_mul16_32_10_t5 <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 02556 Instruction { source: "inline_mul32_64_mul16_32_10_t5 <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x61), Register(0x70)], resolved: None }
0b 61 70 
# inline_mul32_64_mul16_32_10_t4 U32 <- inline_mul32_64_mul16_32_10_t5 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 02559 Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_10_t4 U32 <- inline_mul32_64_mul16_32_10_t5 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x6c), Constant32(0x00000000=0)], resolved: None }
20 6c 00 00 00 00 
# 0255f Instruction { source: "inline_mul32_64_mul16_32_10_t4 U32 <- inline_mul32_64_mul16_32_10_t5 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x70), Register(0x6c)], resolved: None }
0b 70 6c 
# inline_mul32_64_mul16_32_10_f <- inline_mul32_64_mul16_32_10_t2 Multiply inline_mul32_64_mul16_32_10_t4
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 02562 Instruction { source: "inline_mul32_64_mul16_32_10_f <- inline_mul32_64_mul16_32_10_t2 Multiply inline_mul32_64_mul16_32_10_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0x68), Register(0x6c), Register(0x68)], resolved: None }
11 68 6c 68 
# 02566 Instruction { source: "inline_mul32_64_mul16_32_10_f <- inline_mul32_64_mul16_32_10_t2 Multiply inline_mul32_64_mul16_32_10_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x6a), Constant8(0x00=0)], resolved: None }
04 6a 00 
# 02569 Instruction { source: "inline_mul32_64_mul16_32_10_f <- inline_mul32_64_mul16_32_10_t2 Multiply inline_mul32_64_mul16_32_10_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x6b), Constant8(0x00=0)], resolved: None }
04 6b 00 
# inline_mul32_64_mul16_32_10_t6 <- inline_mul32_64_mul16_32_10_f[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }", "Index(\"f\", Number(U8, 1))", "Index(\"f\", Number(U8, 1))"] }
# 0256c Instruction { source: "inline_mul32_64_mul16_32_10_t6 <- inline_mul32_64_mul16_32_10_f[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\", \"Index(\\\"f\\\", Number(U8, 1))\", \"Index(\\\"f\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x69), Register(0x72)], resolved: None }
0b 69 72 
# inline_mul32_64_mul16_32_10_f[0x03..0x04] <- inline_mul32_64_mul16_32_10_t6 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }"] }
# 0256f Instruction { source: "inline_mul32_64_mul16_32_10_f[0x03..0x04] <- inline_mul32_64_mul16_32_10_t6 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x72), Register(0x6b)], resolved: None }
0b 72 6b 
# inline_mul32_64_mul16_32_10_t7 <- inline_mul32_64_mul16_32_10_f[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }", "Index(\"f\", Number(U8, 0))", "Index(\"f\", Number(U8, 0))"] }
# 02572 Instruction { source: "inline_mul32_64_mul16_32_10_t7 <- inline_mul32_64_mul16_32_10_f[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\", \"Index(\\\"f\\\", Number(U8, 0))\", \"Index(\\\"f\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x68), Register(0x72)], resolved: None }
0b 68 72 
# inline_mul32_64_mul16_32_10_f[0x02..0x03] <- inline_mul32_64_mul16_32_10_t7 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }"] }
# 02575 Instruction { source: "inline_mul32_64_mul16_32_10_f[0x02..0x03] <- inline_mul32_64_mul16_32_10_t7 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x72), Register(0x6a)], resolved: None }
0b 72 6a 
# inline_mul32_64_mul16_32_10_t8 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 02578 Instruction { source: "inline_mul32_64_mul16_32_10_t8 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x73), Constant8(0x00=0)], resolved: None }
04 73 00 
# inline_mul32_64_mul16_32_10_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_t8 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }"] }
# 0257b Instruction { source: "inline_mul32_64_mul16_32_10_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_t8 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x73), Register(0x69)], resolved: None }
0b 73 69 
# inline_mul32_64_mul16_32_10_t9 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0257e Instruction { source: "inline_mul32_64_mul16_32_10_t9 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x73), Constant8(0x00=0)], resolved: None }
04 73 00 
# inline_mul32_64_mul16_32_10_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_t9 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 02581 Instruction { source: "inline_mul32_64_mul16_32_10_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_t9 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x73), Register(0x68)], resolved: None }
0b 73 68 
# inline_mul32_64_mul16_32_10_t10 <- inline_mul32_64_mul16_32_10_c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_t10 <- inline_mul32_64_mul16_32_10_c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x64), Register(0x64)], resolved: None }
# inline_mul32_64_mul16_32_10_t11 <- inline_mul32_64_mul16_32_10_f U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"f\")", "Ident(\"f\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_t11 <- inline_mul32_64_mul16_32_10_f U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"f\\\")\", \"Ident(\\\"f\\\")\"] }", opcode: Copy32, args: [Register(0x68), Register(0x68)], resolved: None }
# inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t10 Add inline_mul32_64_mul16_32_10_t11
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))"] }
# 02584 Instruction { source: "inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t10 Add inline_mul32_64_mul16_32_10_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 02585 Instruction { source: "inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t10 Add inline_mul32_64_mul16_32_10_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x64), Register(0x68), Register(0x64)], resolved: None }
30 64 68 64 
# 02589 Instruction { source: "inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t10 Add inline_mul32_64_mul16_32_10_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_mul32_64_mul16_32_10_t12 <- inline_mul32_64_mul16_32_10_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_t12 <- inline_mul32_64_mul16_32_10_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_mul32_64_mul16_32_10_t14 <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 0258a Instruction { source: "inline_mul32_64_mul16_32_10_t14 <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x61), Register(0x70)], resolved: None }
0b 61 70 
# inline_mul32_64_mul16_32_10_t13 U32 <- inline_mul32_64_mul16_32_10_t14 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 0258d Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_10_t13 U32 <- inline_mul32_64_mul16_32_10_t14 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x68), Constant32(0x00000000=0)], resolved: None }
20 68 00 00 00 00 
# 02593 Instruction { source: "inline_mul32_64_mul16_32_10_t13 U32 <- inline_mul32_64_mul16_32_10_t14 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x70), Register(0x68)], resolved: None }
0b 70 68 
# inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t12 Multiply inline_mul32_64_mul16_32_10_t13
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 02596 Instruction { source: "inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t12 Multiply inline_mul32_64_mul16_32_10_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0x5c), Register(0x68), Register(0x68)], resolved: None }
11 5c 68 68 
# 0259a Instruction { source: "inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t12 Multiply inline_mul32_64_mul16_32_10_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x6a), Constant8(0x00=0)], resolved: None }
04 6a 00 
# 0259d Instruction { source: "inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t12 Multiply inline_mul32_64_mul16_32_10_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x6b), Constant8(0x00=0)], resolved: None }
04 6b 00 
# inline_mul32_64_mul16_32_10_t16 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 025a0 Instruction { source: "inline_mul32_64_mul16_32_10_t16 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x5d), Register(0x71)], resolved: None }
0b 5d 71 
# inline_mul32_64_mul16_32_10_t15 U32 <- inline_mul32_64_mul16_32_10_t16 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 025a3 Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_10_t15 U32 <- inline_mul32_64_mul16_32_10_t16 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x5c), Constant32(0x00000000=0)], resolved: None }
20 5c 00 00 00 00 
# 025a9 Instruction { source: "inline_mul32_64_mul16_32_10_t15 U32 <- inline_mul32_64_mul16_32_10_t16 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x71), Register(0x5c)], resolved: None }
0b 71 5c 
# inline_mul32_64_mul16_32_10_t17 <- inline_mul32_64_mul16_32_10_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_t17 <- inline_mul32_64_mul16_32_10_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x60), Register(0x60)], resolved: None }
# inline_mul32_64_mul16_32_10_e <- inline_mul32_64_mul16_32_10_t15 Multiply inline_mul32_64_mul16_32_10_t17
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))"] }
# 025ac Instruction { source: "inline_mul32_64_mul16_32_10_e <- inline_mul32_64_mul16_32_10_t15 Multiply inline_mul32_64_mul16_32_10_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0x5c), Register(0x60), Register(0x5c)], resolved: None }
11 5c 60 5c 
# 025b0 Instruction { source: "inline_mul32_64_mul16_32_10_e <- inline_mul32_64_mul16_32_10_t15 Multiply inline_mul32_64_mul16_32_10_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x5e), Constant8(0x00=0)], resolved: None }
04 5e 00 
# 025b3 Instruction { source: "inline_mul32_64_mul16_32_10_e <- inline_mul32_64_mul16_32_10_t15 Multiply inline_mul32_64_mul16_32_10_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x5f), Constant8(0x00=0)], resolved: None }
04 5f 00 
# inline_mul32_64_mul16_32_10_t18 <- inline_mul32_64_mul16_32_10_d U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 025b6 Instruction { source: "inline_mul32_64_mul16_32_10_t18 <- inline_mul32_64_mul16_32_10_d U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0x68), Register(0x60)], resolved: None }
21 68 60 
# inline_mul32_64_mul16_32_10_t19 <- inline_mul32_64_mul16_32_10_e U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"e\")", "Ident(\"e\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_t19 <- inline_mul32_64_mul16_32_10_e U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"e\\\")\", \"Ident(\\\"e\\\")\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t18 Add inline_mul32_64_mul16_32_10_t19
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))"] }
# 025b9 Instruction { source: "inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t18 Add inline_mul32_64_mul16_32_10_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 025ba Instruction { source: "inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t18 Add inline_mul32_64_mul16_32_10_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x60), Register(0x5c), Register(0x68)], resolved: None }
30 60 5c 68 
# 025be Instruction { source: "inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t18 Add inline_mul32_64_mul16_32_10_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_mul32_64_mul16_32_10_t20 <- inline_mul32_64_mul16_32_10_d[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }", "Index(\"d\", Number(U8, 2))", "Index(\"d\", Number(U8, 2))"] }
# 025bf Instruction { source: "inline_mul32_64_mul16_32_10_t20 <- inline_mul32_64_mul16_32_10_d[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\", \"Index(\\\"d\\\", Number(U8, 2))\", \"Index(\\\"d\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x6a), Register(0x71)], resolved: None }
0b 6a 71 
# inline_mul32_64_mul16_32_10_d[0x03..0x04] <- inline_mul32_64_mul16_32_10_t20 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }"] }
# 025c2 Instruction { source: "inline_mul32_64_mul16_32_10_d[0x03..0x04] <- inline_mul32_64_mul16_32_10_t20 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\"] }", opcode: Copy8, args: [Register(0x71), Register(0x6b)], resolved: None }
0b 71 6b 
# inline_mul32_64_mul16_32_10_t21 <- inline_mul32_64_mul16_32_10_d[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }", "Index(\"d\", Number(U8, 1))", "Index(\"d\", Number(U8, 1))"] }
# 025c5 Instruction { source: "inline_mul32_64_mul16_32_10_t21 <- inline_mul32_64_mul16_32_10_d[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\", \"Index(\\\"d\\\", Number(U8, 1))\", \"Index(\\\"d\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x69), Register(0x71)], resolved: None }
0b 69 71 
# inline_mul32_64_mul16_32_10_d[0x02..0x03] <- inline_mul32_64_mul16_32_10_t21 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }"] }
# 025c8 Instruction { source: "inline_mul32_64_mul16_32_10_d[0x02..0x03] <- inline_mul32_64_mul16_32_10_t21 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x71), Register(0x6a)], resolved: None }
0b 71 6a 
# inline_mul32_64_mul16_32_10_t22 <- inline_mul32_64_mul16_32_10_d[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }", "Index(\"d\", Number(U8, 0))", "Index(\"d\", Number(U8, 0))"] }
# 025cb Instruction { source: "inline_mul32_64_mul16_32_10_t22 <- inline_mul32_64_mul16_32_10_d[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\", \"Index(\\\"d\\\", Number(U8, 0))\", \"Index(\\\"d\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x68), Register(0x71)], resolved: None }
0b 68 71 
# inline_mul32_64_mul16_32_10_d[0x01..0x02] <- inline_mul32_64_mul16_32_10_t22 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }"] }
# 025ce Instruction { source: "inline_mul32_64_mul16_32_10_d[0x01..0x02] <- inline_mul32_64_mul16_32_10_t22 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x71), Register(0x69)], resolved: None }
0b 71 69 
# inline_mul32_64_mul16_32_10_t23 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 025d1 Instruction { source: "inline_mul32_64_mul16_32_10_t23 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x71), Constant8(0x00=0)], resolved: None }
04 71 00 
# inline_mul32_64_mul16_32_10_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_t23 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 025d4 Instruction { source: "inline_mul32_64_mul16_32_10_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_t23 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x71), Register(0x68)], resolved: None }
0b 71 68 
# inline_mul32_64_mul16_32_10_t25 <- inline_mul32_64_mul16_32_10_c U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# 025d7 Instruction { source: "inline_mul32_64_mul16_32_10_t25 <- inline_mul32_64_mul16_32_10_c U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x64), Register(0x5c)], resolved: None }
21 64 5c 
# inline_mul32_64_mul16_32_10_t26 <- inline_mul32_64_mul16_32_10_d U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 025da Instruction { source: "inline_mul32_64_mul16_32_10_t26 <- inline_mul32_64_mul16_32_10_d U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0x68), Register(0x60)], resolved: None }
21 68 60 
# inline_mul32_64_mul16_32_10_t24 <- inline_mul32_64_mul16_32_10_t25 Add inline_mul32_64_mul16_32_10_t26
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))"] }
# 025dd Instruction { source: "inline_mul32_64_mul16_32_10_t24 <- inline_mul32_64_mul16_32_10_t25 Add inline_mul32_64_mul16_32_10_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 025de Instruction { source: "inline_mul32_64_mul16_32_10_t24 <- inline_mul32_64_mul16_32_10_t25 Add inline_mul32_64_mul16_32_10_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x5c), Register(0x60), Register(0x5c)], resolved: None }
30 5c 60 5c 
# 025e2 Instruction { source: "inline_mul32_64_mul16_32_10_t24 <- inline_mul32_64_mul16_32_10_t25 Add inline_mul32_64_mul16_32_10_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t6 <- inline_mul32_64_mul16_32_10_t24 U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# optimized away noop copy Instruction { source: "t6 <- inline_mul32_64_mul16_32_10_t24 U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# goto inline_mul32_64_mul16_32_10_function_end_mul16_32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_mul32_64_mul16_32_10_function_end_mul16_32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_mul32_64_mul16_32_10_function_end_mul16_32)], resolved: None }
# :inline_mul32_64_mul16_32_10_function_end_mul16_32
# 	SourceContext { contexts: [] }
# inline_mul32_64_mul16_32_10_function_end_mul16_32
# mem[t5] <- t6 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }"] }
# 025e3 Instruction { source: "mem[t5] <- t6 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] }) }\"] }", opcode: Store32_1, args: [Register(0x5c), Register(0x58)], resolved: None }
23 5c 58 
# 025e6 Instruction { source: "mem[t5] <- t6 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b\\\")] }) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# t10 <- c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "t10 <- c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x58), Register(0x58)], resolved: None }
# t11 <- 0n4/0x00000004u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 025e7 Instruction { source: "t11 <- 0n4/0x00000004u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: LoadImm32, args: [Register(0x5c), Constant32(0x00000004=4)], resolved: None }
20 5c 04 00 00 00 
# t9 <- t10 Add t11
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))"] }
# 025ed Instruction { source: "t9 <- t10 Add t11\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 025ee Instruction { source: "t9 <- t10 Add t11\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x58), Register(0x5c), Register(0x84)], resolved: None }
30 58 5c 84 
# 025f2 Instruction { source: "t9 <- t10 Add t11\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t13 <- a_hi U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] })", "Ident(\"a_hi\")", "Ident(\"a_hi\")"] }
# optimized away noop copy Instruction { source: "t13 <- a_hi U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] })\", \"Ident(\\\"a_hi\\\")\", \"Ident(\\\"a_hi\\\")\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# t14 <- b_hi U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] })", "Ident(\"b_hi\")", "Ident(\"b_hi\")"] }
# optimized away noop copy Instruction { source: "t14 <- b_hi U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] })\", \"Ident(\\\"b_hi\\\")\", \"Ident(\\\"b_hi\\\")\"] }", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_mul32_64_mul16_32_11_a <- t13 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] })"] }
# 025f3 Instruction { source: "inline_mul32_64_mul16_32_11_a <- t13 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] })\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x5c)], resolved: None }
21 4c 5c 
# inline_mul32_64_mul16_32_11_b <- t14 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] })", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] })"] }
# 025f6 Instruction { source: "inline_mul32_64_mul16_32_11_b <- t14 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] })\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] })\"] }", opcode: Copy32, args: [Register(0x54), Register(0x60)], resolved: None }
21 54 60 
# inline_mul32_64_mul16_32_11_t0 <- inline_mul32_64_mul16_32_11_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_t0 <- inline_mul32_64_mul16_32_11_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_mul32_64_mul16_32_11_t1 <- inline_mul32_64_mul16_32_11_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_t1 <- inline_mul32_64_mul16_32_11_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x60), Register(0x60)], resolved: None }
# inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t0 Multiply inline_mul32_64_mul16_32_11_t1
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))"] }
# 025f9 Instruction { source: "inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t0 Multiply inline_mul32_64_mul16_32_11_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0x5c), Register(0x60), Register(0x64)], resolved: None }
11 5c 60 64 
# 025fd Instruction { source: "inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t0 Multiply inline_mul32_64_mul16_32_11_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x66), Constant8(0x00=0)], resolved: None }
04 66 00 
# 02600 Instruction { source: "inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t0 Multiply inline_mul32_64_mul16_32_11_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x67), Constant8(0x00=0)], resolved: None }
04 67 00 
# inline_mul32_64_mul16_32_11_t3 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 02603 Instruction { source: "inline_mul32_64_mul16_32_11_t3 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x5d), Register(0x71)], resolved: None }
0b 5d 71 
# inline_mul32_64_mul16_32_11_t2 U32 <- inline_mul32_64_mul16_32_11_t3 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 02606 Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_11_t2 U32 <- inline_mul32_64_mul16_32_11_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x68), Constant32(0x00000000=0)], resolved: None }
20 68 00 00 00 00 
# 0260c Instruction { source: "inline_mul32_64_mul16_32_11_t2 U32 <- inline_mul32_64_mul16_32_11_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x71), Register(0x68)], resolved: None }
0b 71 68 
# inline_mul32_64_mul16_32_11_t5 <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 0260f Instruction { source: "inline_mul32_64_mul16_32_11_t5 <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x61), Register(0x70)], resolved: None }
0b 61 70 
# inline_mul32_64_mul16_32_11_t4 U32 <- inline_mul32_64_mul16_32_11_t5 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 02612 Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_11_t4 U32 <- inline_mul32_64_mul16_32_11_t5 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x6c), Constant32(0x00000000=0)], resolved: None }
20 6c 00 00 00 00 
# 02618 Instruction { source: "inline_mul32_64_mul16_32_11_t4 U32 <- inline_mul32_64_mul16_32_11_t5 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x70), Register(0x6c)], resolved: None }
0b 70 6c 
# inline_mul32_64_mul16_32_11_f <- inline_mul32_64_mul16_32_11_t2 Multiply inline_mul32_64_mul16_32_11_t4
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 0261b Instruction { source: "inline_mul32_64_mul16_32_11_f <- inline_mul32_64_mul16_32_11_t2 Multiply inline_mul32_64_mul16_32_11_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0x68), Register(0x6c), Register(0x68)], resolved: None }
11 68 6c 68 
# 0261f Instruction { source: "inline_mul32_64_mul16_32_11_f <- inline_mul32_64_mul16_32_11_t2 Multiply inline_mul32_64_mul16_32_11_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x6a), Constant8(0x00=0)], resolved: None }
04 6a 00 
# 02622 Instruction { source: "inline_mul32_64_mul16_32_11_f <- inline_mul32_64_mul16_32_11_t2 Multiply inline_mul32_64_mul16_32_11_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x6b), Constant8(0x00=0)], resolved: None }
04 6b 00 
# inline_mul32_64_mul16_32_11_t6 <- inline_mul32_64_mul16_32_11_f[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }", "Index(\"f\", Number(U8, 1))", "Index(\"f\", Number(U8, 1))"] }
# 02625 Instruction { source: "inline_mul32_64_mul16_32_11_t6 <- inline_mul32_64_mul16_32_11_f[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\", \"Index(\\\"f\\\", Number(U8, 1))\", \"Index(\\\"f\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x69), Register(0x72)], resolved: None }
0b 69 72 
# inline_mul32_64_mul16_32_11_f[0x03..0x04] <- inline_mul32_64_mul16_32_11_t6 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }"] }
# 02628 Instruction { source: "inline_mul32_64_mul16_32_11_f[0x03..0x04] <- inline_mul32_64_mul16_32_11_t6 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x72), Register(0x6b)], resolved: None }
0b 72 6b 
# inline_mul32_64_mul16_32_11_t7 <- inline_mul32_64_mul16_32_11_f[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }", "Index(\"f\", Number(U8, 0))", "Index(\"f\", Number(U8, 0))"] }
# 0262b Instruction { source: "inline_mul32_64_mul16_32_11_t7 <- inline_mul32_64_mul16_32_11_f[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\", \"Index(\\\"f\\\", Number(U8, 0))\", \"Index(\\\"f\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x68), Register(0x72)], resolved: None }
0b 68 72 
# inline_mul32_64_mul16_32_11_f[0x02..0x03] <- inline_mul32_64_mul16_32_11_t7 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }"] }
# 0262e Instruction { source: "inline_mul32_64_mul16_32_11_f[0x02..0x03] <- inline_mul32_64_mul16_32_11_t7 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x72), Register(0x6a)], resolved: None }
0b 72 6a 
# inline_mul32_64_mul16_32_11_t8 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 02631 Instruction { source: "inline_mul32_64_mul16_32_11_t8 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x73), Constant8(0x00=0)], resolved: None }
04 73 00 
# inline_mul32_64_mul16_32_11_f[0x01..0x02] <- inline_mul32_64_mul16_32_11_t8 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }"] }
# 02634 Instruction { source: "inline_mul32_64_mul16_32_11_f[0x01..0x02] <- inline_mul32_64_mul16_32_11_t8 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x73), Register(0x69)], resolved: None }
0b 73 69 
# inline_mul32_64_mul16_32_11_t9 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 02637 Instruction { source: "inline_mul32_64_mul16_32_11_t9 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x73), Constant8(0x00=0)], resolved: None }
04 73 00 
# inline_mul32_64_mul16_32_11_f[0x00..0x01] <- inline_mul32_64_mul16_32_11_t9 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 0263a Instruction { source: "inline_mul32_64_mul16_32_11_f[0x00..0x01] <- inline_mul32_64_mul16_32_11_t9 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x73), Register(0x68)], resolved: None }
0b 73 68 
# inline_mul32_64_mul16_32_11_t10 <- inline_mul32_64_mul16_32_11_c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_t10 <- inline_mul32_64_mul16_32_11_c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x64), Register(0x64)], resolved: None }
# inline_mul32_64_mul16_32_11_t11 <- inline_mul32_64_mul16_32_11_f U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"f\")", "Ident(\"f\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_t11 <- inline_mul32_64_mul16_32_11_f U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"f\\\")\", \"Ident(\\\"f\\\")\"] }", opcode: Copy32, args: [Register(0x68), Register(0x68)], resolved: None }
# inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t10 Add inline_mul32_64_mul16_32_11_t11
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))"] }
# 0263d Instruction { source: "inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t10 Add inline_mul32_64_mul16_32_11_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0263e Instruction { source: "inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t10 Add inline_mul32_64_mul16_32_11_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x64), Register(0x68), Register(0x64)], resolved: None }
30 64 68 64 
# 02642 Instruction { source: "inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t10 Add inline_mul32_64_mul16_32_11_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_mul32_64_mul16_32_11_t12 <- inline_mul32_64_mul16_32_11_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_t12 <- inline_mul32_64_mul16_32_11_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_mul32_64_mul16_32_11_t14 <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 02643 Instruction { source: "inline_mul32_64_mul16_32_11_t14 <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x61), Register(0x70)], resolved: None }
0b 61 70 
# inline_mul32_64_mul16_32_11_t13 U32 <- inline_mul32_64_mul16_32_11_t14 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 02646 Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_11_t13 U32 <- inline_mul32_64_mul16_32_11_t14 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x68), Constant32(0x00000000=0)], resolved: None }
20 68 00 00 00 00 
# 0264c Instruction { source: "inline_mul32_64_mul16_32_11_t13 U32 <- inline_mul32_64_mul16_32_11_t14 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x70), Register(0x68)], resolved: None }
0b 70 68 
# inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t12 Multiply inline_mul32_64_mul16_32_11_t13
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 0264f Instruction { source: "inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t12 Multiply inline_mul32_64_mul16_32_11_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0x5c), Register(0x68), Register(0x68)], resolved: None }
11 5c 68 68 
# 02653 Instruction { source: "inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t12 Multiply inline_mul32_64_mul16_32_11_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x6a), Constant8(0x00=0)], resolved: None }
04 6a 00 
# 02656 Instruction { source: "inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t12 Multiply inline_mul32_64_mul16_32_11_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x6b), Constant8(0x00=0)], resolved: None }
04 6b 00 
# inline_mul32_64_mul16_32_11_t16 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 02659 Instruction { source: "inline_mul32_64_mul16_32_11_t16 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x5d), Register(0x71)], resolved: None }
0b 5d 71 
# inline_mul32_64_mul16_32_11_t15 U32 <- inline_mul32_64_mul16_32_11_t16 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 0265c Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_11_t15 U32 <- inline_mul32_64_mul16_32_11_t16 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x5c), Constant32(0x00000000=0)], resolved: None }
20 5c 00 00 00 00 
# 02662 Instruction { source: "inline_mul32_64_mul16_32_11_t15 U32 <- inline_mul32_64_mul16_32_11_t16 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x71), Register(0x5c)], resolved: None }
0b 71 5c 
# inline_mul32_64_mul16_32_11_t17 <- inline_mul32_64_mul16_32_11_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_t17 <- inline_mul32_64_mul16_32_11_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x60), Register(0x60)], resolved: None }
# inline_mul32_64_mul16_32_11_e <- inline_mul32_64_mul16_32_11_t15 Multiply inline_mul32_64_mul16_32_11_t17
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))"] }
# 02665 Instruction { source: "inline_mul32_64_mul16_32_11_e <- inline_mul32_64_mul16_32_11_t15 Multiply inline_mul32_64_mul16_32_11_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0x5c), Register(0x60), Register(0x5c)], resolved: None }
11 5c 60 5c 
# 02669 Instruction { source: "inline_mul32_64_mul16_32_11_e <- inline_mul32_64_mul16_32_11_t15 Multiply inline_mul32_64_mul16_32_11_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x5e), Constant8(0x00=0)], resolved: None }
04 5e 00 
# 0266c Instruction { source: "inline_mul32_64_mul16_32_11_e <- inline_mul32_64_mul16_32_11_t15 Multiply inline_mul32_64_mul16_32_11_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x5f), Constant8(0x00=0)], resolved: None }
04 5f 00 
# inline_mul32_64_mul16_32_11_t18 <- inline_mul32_64_mul16_32_11_d U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 0266f Instruction { source: "inline_mul32_64_mul16_32_11_t18 <- inline_mul32_64_mul16_32_11_d U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0x68), Register(0x60)], resolved: None }
21 68 60 
# inline_mul32_64_mul16_32_11_t19 <- inline_mul32_64_mul16_32_11_e U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"e\")", "Ident(\"e\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_t19 <- inline_mul32_64_mul16_32_11_e U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"e\\\")\", \"Ident(\\\"e\\\")\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t18 Add inline_mul32_64_mul16_32_11_t19
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))"] }
# 02672 Instruction { source: "inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t18 Add inline_mul32_64_mul16_32_11_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 02673 Instruction { source: "inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t18 Add inline_mul32_64_mul16_32_11_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x60), Register(0x5c), Register(0x68)], resolved: None }
30 60 5c 68 
# 02677 Instruction { source: "inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t18 Add inline_mul32_64_mul16_32_11_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_mul32_64_mul16_32_11_t20 <- inline_mul32_64_mul16_32_11_d[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }", "Index(\"d\", Number(U8, 2))", "Index(\"d\", Number(U8, 2))"] }
# 02678 Instruction { source: "inline_mul32_64_mul16_32_11_t20 <- inline_mul32_64_mul16_32_11_d[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\", \"Index(\\\"d\\\", Number(U8, 2))\", \"Index(\\\"d\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x6a), Register(0x71)], resolved: None }
0b 6a 71 
# inline_mul32_64_mul16_32_11_d[0x03..0x04] <- inline_mul32_64_mul16_32_11_t20 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }"] }
# 0267b Instruction { source: "inline_mul32_64_mul16_32_11_d[0x03..0x04] <- inline_mul32_64_mul16_32_11_t20 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\"] }", opcode: Copy8, args: [Register(0x71), Register(0x6b)], resolved: None }
0b 71 6b 
# inline_mul32_64_mul16_32_11_t21 <- inline_mul32_64_mul16_32_11_d[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }", "Index(\"d\", Number(U8, 1))", "Index(\"d\", Number(U8, 1))"] }
# 0267e Instruction { source: "inline_mul32_64_mul16_32_11_t21 <- inline_mul32_64_mul16_32_11_d[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\", \"Index(\\\"d\\\", Number(U8, 1))\", \"Index(\\\"d\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x69), Register(0x71)], resolved: None }
0b 69 71 
# inline_mul32_64_mul16_32_11_d[0x02..0x03] <- inline_mul32_64_mul16_32_11_t21 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }"] }
# 02681 Instruction { source: "inline_mul32_64_mul16_32_11_d[0x02..0x03] <- inline_mul32_64_mul16_32_11_t21 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x71), Register(0x6a)], resolved: None }
0b 71 6a 
# inline_mul32_64_mul16_32_11_t22 <- inline_mul32_64_mul16_32_11_d[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }", "Index(\"d\", Number(U8, 0))", "Index(\"d\", Number(U8, 0))"] }
# 02684 Instruction { source: "inline_mul32_64_mul16_32_11_t22 <- inline_mul32_64_mul16_32_11_d[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\", \"Index(\\\"d\\\", Number(U8, 0))\", \"Index(\\\"d\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x68), Register(0x71)], resolved: None }
0b 68 71 
# inline_mul32_64_mul16_32_11_d[0x01..0x02] <- inline_mul32_64_mul16_32_11_t22 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }"] }
# 02687 Instruction { source: "inline_mul32_64_mul16_32_11_d[0x01..0x02] <- inline_mul32_64_mul16_32_11_t22 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x71), Register(0x69)], resolved: None }
0b 71 69 
# inline_mul32_64_mul16_32_11_t23 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0268a Instruction { source: "inline_mul32_64_mul16_32_11_t23 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x71), Constant8(0x00=0)], resolved: None }
04 71 00 
# inline_mul32_64_mul16_32_11_d[0x00..0x01] <- inline_mul32_64_mul16_32_11_t23 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 0268d Instruction { source: "inline_mul32_64_mul16_32_11_d[0x00..0x01] <- inline_mul32_64_mul16_32_11_t23 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x71), Register(0x68)], resolved: None }
0b 71 68 
# inline_mul32_64_mul16_32_11_t25 <- inline_mul32_64_mul16_32_11_c U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# 02690 Instruction { source: "inline_mul32_64_mul16_32_11_t25 <- inline_mul32_64_mul16_32_11_c U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x64), Register(0x5c)], resolved: None }
21 64 5c 
# inline_mul32_64_mul16_32_11_t26 <- inline_mul32_64_mul16_32_11_d U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 02693 Instruction { source: "inline_mul32_64_mul16_32_11_t26 <- inline_mul32_64_mul16_32_11_d U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0x68), Register(0x60)], resolved: None }
21 68 60 
# inline_mul32_64_mul16_32_11_t24 <- inline_mul32_64_mul16_32_11_t25 Add inline_mul32_64_mul16_32_11_t26
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))"] }
# 02696 Instruction { source: "inline_mul32_64_mul16_32_11_t24 <- inline_mul32_64_mul16_32_11_t25 Add inline_mul32_64_mul16_32_11_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 02697 Instruction { source: "inline_mul32_64_mul16_32_11_t24 <- inline_mul32_64_mul16_32_11_t25 Add inline_mul32_64_mul16_32_11_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x5c), Register(0x60), Register(0x5c)], resolved: None }
30 5c 60 5c 
# 0269b Instruction { source: "inline_mul32_64_mul16_32_11_t24 <- inline_mul32_64_mul16_32_11_t25 Add inline_mul32_64_mul16_32_11_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t12 <- inline_mul32_64_mul16_32_11_t24 U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# optimized away noop copy Instruction { source: "t12 <- inline_mul32_64_mul16_32_11_t24 U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# goto inline_mul32_64_mul16_32_11_function_end_mul16_32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_mul32_64_mul16_32_11_function_end_mul16_32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_mul32_64_mul16_32_11_function_end_mul16_32)], resolved: None }
# :inline_mul32_64_mul16_32_11_function_end_mul16_32
# 	SourceContext { contexts: [] }
# inline_mul32_64_mul16_32_11_function_end_mul16_32
# mem[t9] <- t12 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] }) }"] }
# 0269c Instruction { source: "mem[t9] <- t12 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] }) }\"] }", opcode: Store32_1, args: [Register(0x5c), Register(0x84)], resolved: None }
23 5c 84 
# 0269f Instruction { source: "mem[t9] <- t12 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b_hi\\\")] }) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# temp_lo <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"temp_lo\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }", "Number(USIZE, 0)"] }
# 026a0 Instruction { source: "temp_lo <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"temp_lo\\\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x88), Constant32(0x00000000=0)], resolved: None }
20 88 00 00 00 00 
# temp_hi <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"temp_hi\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }", "Number(USIZE, 0)"] }
# 026a6 Instruction { source: "temp_hi <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"temp_hi\\\"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x84), Constant32(0x00000000=0)], resolved: None }
20 84 00 00 00 00 
# t15 <- a_hi U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })", "Ident(\"a_hi\")", "Ident(\"a_hi\")"] }
# optimized away noop copy Instruction { source: "t15 <- a_hi U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"temp\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] })\", \"Ident(\\\"a_hi\\\")\", \"Ident(\\\"a_hi\\\")\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# t16 <- b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "t16 <- b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"temp\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_mul32_64_mul16_32_12_a <- t15 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_12_a <- t15 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"temp\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_mul32_64_mul16_32_12_b <- t16 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_12_b <- t16 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"temp\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a_hi\\\"), Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_mul32_64_mul16_32_12_t0 <- inline_mul32_64_mul16_32_12_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_12_t0 <- inline_mul32_64_mul16_32_12_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_mul32_64_mul16_32_12_t1 <- inline_mul32_64_mul16_32_12_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_12_t1 <- inline_mul32_64_mul16_32_12_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_mul32_64_mul16_32_12_c <- inline_mul32_64_mul16_32_12_t0 Multiply inline_mul32_64_mul16_32_12_t1
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))"] }
# 026ac Instruction { source: "inline_mul32_64_mul16_32_12_c <- inline_mul32_64_mul16_32_12_t0 Multiply inline_mul32_64_mul16_32_12_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0x4c), Register(0x50), Register(0x5c)], resolved: None }
11 4c 50 5c 
# 026b0 Instruction { source: "inline_mul32_64_mul16_32_12_c <- inline_mul32_64_mul16_32_12_t0 Multiply inline_mul32_64_mul16_32_12_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x5e), Constant8(0x00=0)], resolved: None }
04 5e 00 
# 026b3 Instruction { source: "inline_mul32_64_mul16_32_12_c <- inline_mul32_64_mul16_32_12_t0 Multiply inline_mul32_64_mul16_32_12_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x5f), Constant8(0x00=0)], resolved: None }
04 5f 00 
# inline_mul32_64_mul16_32_12_t3 <- inline_mul32_64_mul16_32_12_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 026b6 Instruction { source: "inline_mul32_64_mul16_32_12_t3 <- inline_mul32_64_mul16_32_12_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x4d), Register(0x75)], resolved: None }
0b 4d 75 
# inline_mul32_64_mul16_32_12_t2 U32 <- inline_mul32_64_mul16_32_12_t3 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 026b9 Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_12_t2 U32 <- inline_mul32_64_mul16_32_12_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x60), Constant32(0x00000000=0)], resolved: None }
20 60 00 00 00 00 
# 026bf Instruction { source: "inline_mul32_64_mul16_32_12_t2 U32 <- inline_mul32_64_mul16_32_12_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x75), Register(0x60)], resolved: None }
0b 75 60 
# inline_mul32_64_mul16_32_12_t5 <- inline_mul32_64_mul16_32_12_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 026c2 Instruction { source: "inline_mul32_64_mul16_32_12_t5 <- inline_mul32_64_mul16_32_12_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x51), Register(0x74)], resolved: None }
0b 51 74 
# inline_mul32_64_mul16_32_12_t4 U32 <- inline_mul32_64_mul16_32_12_t5 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 026c5 Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_12_t4 U32 <- inline_mul32_64_mul16_32_12_t5 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x64), Constant32(0x00000000=0)], resolved: None }
20 64 00 00 00 00 
# 026cb Instruction { source: "inline_mul32_64_mul16_32_12_t4 U32 <- inline_mul32_64_mul16_32_12_t5 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x74), Register(0x64)], resolved: None }
0b 74 64 
# inline_mul32_64_mul16_32_12_f <- inline_mul32_64_mul16_32_12_t2 Multiply inline_mul32_64_mul16_32_12_t4
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 026ce Instruction { source: "inline_mul32_64_mul16_32_12_f <- inline_mul32_64_mul16_32_12_t2 Multiply inline_mul32_64_mul16_32_12_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0x60), Register(0x64), Register(0x60)], resolved: None }
11 60 64 60 
# 026d2 Instruction { source: "inline_mul32_64_mul16_32_12_f <- inline_mul32_64_mul16_32_12_t2 Multiply inline_mul32_64_mul16_32_12_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x62), Constant8(0x00=0)], resolved: None }
04 62 00 
# 026d5 Instruction { source: "inline_mul32_64_mul16_32_12_f <- inline_mul32_64_mul16_32_12_t2 Multiply inline_mul32_64_mul16_32_12_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x63), Constant8(0x00=0)], resolved: None }
04 63 00 
# inline_mul32_64_mul16_32_12_t6 <- inline_mul32_64_mul16_32_12_f[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }", "Index(\"f\", Number(U8, 1))", "Index(\"f\", Number(U8, 1))"] }
# 026d8 Instruction { source: "inline_mul32_64_mul16_32_12_t6 <- inline_mul32_64_mul16_32_12_f[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\", \"Index(\\\"f\\\", Number(U8, 1))\", \"Index(\\\"f\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x61), Register(0x70)], resolved: None }
0b 61 70 
# inline_mul32_64_mul16_32_12_f[0x03..0x04] <- inline_mul32_64_mul16_32_12_t6 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }"] }
# 026db Instruction { source: "inline_mul32_64_mul16_32_12_f[0x03..0x04] <- inline_mul32_64_mul16_32_12_t6 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x70), Register(0x63)], resolved: None }
0b 70 63 
# inline_mul32_64_mul16_32_12_t7 <- inline_mul32_64_mul16_32_12_f[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }", "Index(\"f\", Number(U8, 0))", "Index(\"f\", Number(U8, 0))"] }
# 026de Instruction { source: "inline_mul32_64_mul16_32_12_t7 <- inline_mul32_64_mul16_32_12_f[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\", \"Index(\\\"f\\\", Number(U8, 0))\", \"Index(\\\"f\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x60), Register(0x70)], resolved: None }
0b 60 70 
# inline_mul32_64_mul16_32_12_f[0x02..0x03] <- inline_mul32_64_mul16_32_12_t7 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }"] }
# 026e1 Instruction { source: "inline_mul32_64_mul16_32_12_f[0x02..0x03] <- inline_mul32_64_mul16_32_12_t7 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x70), Register(0x62)], resolved: None }
0b 70 62 
# inline_mul32_64_mul16_32_12_t8 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 026e4 Instruction { source: "inline_mul32_64_mul16_32_12_t8 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x76), Constant8(0x00=0)], resolved: None }
04 76 00 
# inline_mul32_64_mul16_32_12_f[0x01..0x02] <- inline_mul32_64_mul16_32_12_t8 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }"] }
# 026e7 Instruction { source: "inline_mul32_64_mul16_32_12_f[0x01..0x02] <- inline_mul32_64_mul16_32_12_t8 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x76), Register(0x61)], resolved: None }
0b 76 61 
# inline_mul32_64_mul16_32_12_t9 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 026ea Instruction { source: "inline_mul32_64_mul16_32_12_t9 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x76), Constant8(0x00=0)], resolved: None }
04 76 00 
# inline_mul32_64_mul16_32_12_f[0x00..0x01] <- inline_mul32_64_mul16_32_12_t9 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 026ed Instruction { source: "inline_mul32_64_mul16_32_12_f[0x00..0x01] <- inline_mul32_64_mul16_32_12_t9 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x76), Register(0x60)], resolved: None }
0b 76 60 
# inline_mul32_64_mul16_32_12_t10 <- inline_mul32_64_mul16_32_12_c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_12_t10 <- inline_mul32_64_mul16_32_12_c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_mul32_64_mul16_32_12_t11 <- inline_mul32_64_mul16_32_12_f U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"f\")", "Ident(\"f\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_12_t11 <- inline_mul32_64_mul16_32_12_f U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"f\\\")\", \"Ident(\\\"f\\\")\"] }", opcode: Copy32, args: [Register(0x60), Register(0x60)], resolved: None }
# inline_mul32_64_mul16_32_12_c <- inline_mul32_64_mul16_32_12_t10 Add inline_mul32_64_mul16_32_12_t11
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))"] }
# 026f0 Instruction { source: "inline_mul32_64_mul16_32_12_c <- inline_mul32_64_mul16_32_12_t10 Add inline_mul32_64_mul16_32_12_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 026f1 Instruction { source: "inline_mul32_64_mul16_32_12_c <- inline_mul32_64_mul16_32_12_t10 Add inline_mul32_64_mul16_32_12_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x5c), Register(0x60), Register(0x5c)], resolved: None }
30 5c 60 5c 
# 026f5 Instruction { source: "inline_mul32_64_mul16_32_12_c <- inline_mul32_64_mul16_32_12_t10 Add inline_mul32_64_mul16_32_12_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_mul32_64_mul16_32_12_t12 <- inline_mul32_64_mul16_32_12_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_12_t12 <- inline_mul32_64_mul16_32_12_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_mul32_64_mul16_32_12_t14 <- inline_mul32_64_mul16_32_12_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 026f6 Instruction { source: "inline_mul32_64_mul16_32_12_t14 <- inline_mul32_64_mul16_32_12_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x51), Register(0x74)], resolved: None }
0b 51 74 
# inline_mul32_64_mul16_32_12_t13 U32 <- inline_mul32_64_mul16_32_12_t14 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 026f9 Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_12_t13 U32 <- inline_mul32_64_mul16_32_12_t14 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x60), Constant32(0x00000000=0)], resolved: None }
20 60 00 00 00 00 
# 026ff Instruction { source: "inline_mul32_64_mul16_32_12_t13 U32 <- inline_mul32_64_mul16_32_12_t14 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x74), Register(0x60)], resolved: None }
0b 74 60 
# inline_mul32_64_mul16_32_12_d <- inline_mul32_64_mul16_32_12_t12 Multiply inline_mul32_64_mul16_32_12_t13
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 02702 Instruction { source: "inline_mul32_64_mul16_32_12_d <- inline_mul32_64_mul16_32_12_t12 Multiply inline_mul32_64_mul16_32_12_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0x4c), Register(0x60), Register(0x60)], resolved: None }
11 4c 60 60 
# 02706 Instruction { source: "inline_mul32_64_mul16_32_12_d <- inline_mul32_64_mul16_32_12_t12 Multiply inline_mul32_64_mul16_32_12_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x62), Constant8(0x00=0)], resolved: None }
04 62 00 
# 02709 Instruction { source: "inline_mul32_64_mul16_32_12_d <- inline_mul32_64_mul16_32_12_t12 Multiply inline_mul32_64_mul16_32_12_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x63), Constant8(0x00=0)], resolved: None }
04 63 00 
# inline_mul32_64_mul16_32_12_t16 <- inline_mul32_64_mul16_32_12_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 0270c Instruction { source: "inline_mul32_64_mul16_32_12_t16 <- inline_mul32_64_mul16_32_12_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x4d), Register(0x75)], resolved: None }
0b 4d 75 
# inline_mul32_64_mul16_32_12_t15 U32 <- inline_mul32_64_mul16_32_12_t16 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 0270f Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_12_t15 U32 <- inline_mul32_64_mul16_32_12_t16 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x4c), Constant32(0x00000000=0)], resolved: None }
20 4c 00 00 00 00 
# 02715 Instruction { source: "inline_mul32_64_mul16_32_12_t15 U32 <- inline_mul32_64_mul16_32_12_t16 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x75), Register(0x4c)], resolved: None }
0b 75 4c 
# inline_mul32_64_mul16_32_12_t17 <- inline_mul32_64_mul16_32_12_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_12_t17 <- inline_mul32_64_mul16_32_12_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_mul32_64_mul16_32_12_e <- inline_mul32_64_mul16_32_12_t15 Multiply inline_mul32_64_mul16_32_12_t17
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))"] }
# 02718 Instruction { source: "inline_mul32_64_mul16_32_12_e <- inline_mul32_64_mul16_32_12_t15 Multiply inline_mul32_64_mul16_32_12_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0x4c), Register(0x50), Register(0x4c)], resolved: None }
11 4c 50 4c 
# 0271c Instruction { source: "inline_mul32_64_mul16_32_12_e <- inline_mul32_64_mul16_32_12_t15 Multiply inline_mul32_64_mul16_32_12_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x4e), Constant8(0x00=0)], resolved: None }
04 4e 00 
# 0271f Instruction { source: "inline_mul32_64_mul16_32_12_e <- inline_mul32_64_mul16_32_12_t15 Multiply inline_mul32_64_mul16_32_12_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x4f), Constant8(0x00=0)], resolved: None }
04 4f 00 
# inline_mul32_64_mul16_32_12_t18 <- inline_mul32_64_mul16_32_12_d U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 02722 Instruction { source: "inline_mul32_64_mul16_32_12_t18 <- inline_mul32_64_mul16_32_12_d U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0x60), Register(0x50)], resolved: None }
21 60 50 
# inline_mul32_64_mul16_32_12_t19 <- inline_mul32_64_mul16_32_12_e U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"e\")", "Ident(\"e\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_12_t19 <- inline_mul32_64_mul16_32_12_e U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"e\\\")\", \"Ident(\\\"e\\\")\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_mul32_64_mul16_32_12_d <- inline_mul32_64_mul16_32_12_t18 Add inline_mul32_64_mul16_32_12_t19
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))"] }
# 02725 Instruction { source: "inline_mul32_64_mul16_32_12_d <- inline_mul32_64_mul16_32_12_t18 Add inline_mul32_64_mul16_32_12_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 02726 Instruction { source: "inline_mul32_64_mul16_32_12_d <- inline_mul32_64_mul16_32_12_t18 Add inline_mul32_64_mul16_32_12_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x50), Register(0x4c), Register(0x60)], resolved: None }
30 50 4c 60 
# 0272a Instruction { source: "inline_mul32_64_mul16_32_12_d <- inline_mul32_64_mul16_32_12_t18 Add inline_mul32_64_mul16_32_12_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_mul32_64_mul16_32_12_t20 <- inline_mul32_64_mul16_32_12_d[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }", "Index(\"d\", Number(U8, 2))", "Index(\"d\", Number(U8, 2))"] }
# 0272b Instruction { source: "inline_mul32_64_mul16_32_12_t20 <- inline_mul32_64_mul16_32_12_d[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\", \"Index(\\\"d\\\", Number(U8, 2))\", \"Index(\\\"d\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x62), Register(0x75)], resolved: None }
0b 62 75 
# inline_mul32_64_mul16_32_12_d[0x03..0x04] <- inline_mul32_64_mul16_32_12_t20 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }"] }
# 0272e Instruction { source: "inline_mul32_64_mul16_32_12_d[0x03..0x04] <- inline_mul32_64_mul16_32_12_t20 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\"] }", opcode: Copy8, args: [Register(0x75), Register(0x63)], resolved: None }
0b 75 63 
# inline_mul32_64_mul16_32_12_t21 <- inline_mul32_64_mul16_32_12_d[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }", "Index(\"d\", Number(U8, 1))", "Index(\"d\", Number(U8, 1))"] }
# 02731 Instruction { source: "inline_mul32_64_mul16_32_12_t21 <- inline_mul32_64_mul16_32_12_d[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\", \"Index(\\\"d\\\", Number(U8, 1))\", \"Index(\\\"d\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x61), Register(0x75)], resolved: None }
0b 61 75 
# inline_mul32_64_mul16_32_12_d[0x02..0x03] <- inline_mul32_64_mul16_32_12_t21 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }"] }
# 02734 Instruction { source: "inline_mul32_64_mul16_32_12_d[0x02..0x03] <- inline_mul32_64_mul16_32_12_t21 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x75), Register(0x62)], resolved: None }
0b 75 62 
# inline_mul32_64_mul16_32_12_t22 <- inline_mul32_64_mul16_32_12_d[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }", "Index(\"d\", Number(U8, 0))", "Index(\"d\", Number(U8, 0))"] }
# 02737 Instruction { source: "inline_mul32_64_mul16_32_12_t22 <- inline_mul32_64_mul16_32_12_d[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\", \"Index(\\\"d\\\", Number(U8, 0))\", \"Index(\\\"d\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x60), Register(0x75)], resolved: None }
0b 60 75 
# inline_mul32_64_mul16_32_12_d[0x01..0x02] <- inline_mul32_64_mul16_32_12_t22 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }"] }
# 0273a Instruction { source: "inline_mul32_64_mul16_32_12_d[0x01..0x02] <- inline_mul32_64_mul16_32_12_t22 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x75), Register(0x61)], resolved: None }
0b 75 61 
# inline_mul32_64_mul16_32_12_t23 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0273d Instruction { source: "inline_mul32_64_mul16_32_12_t23 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x75), Constant8(0x00=0)], resolved: None }
04 75 00 
# inline_mul32_64_mul16_32_12_d[0x00..0x01] <- inline_mul32_64_mul16_32_12_t23 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 02740 Instruction { source: "inline_mul32_64_mul16_32_12_d[0x00..0x01] <- inline_mul32_64_mul16_32_12_t23 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x75), Register(0x60)], resolved: None }
0b 75 60 
# inline_mul32_64_mul16_32_12_t25 <- inline_mul32_64_mul16_32_12_c U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# 02743 Instruction { source: "inline_mul32_64_mul16_32_12_t25 <- inline_mul32_64_mul16_32_12_c U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x4c)], resolved: None }
21 5c 4c 
# inline_mul32_64_mul16_32_12_t26 <- inline_mul32_64_mul16_32_12_d U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 02746 Instruction { source: "inline_mul32_64_mul16_32_12_t26 <- inline_mul32_64_mul16_32_12_d U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0x60), Register(0x50)], resolved: None }
21 60 50 
# inline_mul32_64_mul16_32_12_t24 <- inline_mul32_64_mul16_32_12_t25 Add inline_mul32_64_mul16_32_12_t26
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))"] }
# 02749 Instruction { source: "inline_mul32_64_mul16_32_12_t24 <- inline_mul32_64_mul16_32_12_t25 Add inline_mul32_64_mul16_32_12_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0274a Instruction { source: "inline_mul32_64_mul16_32_12_t24 <- inline_mul32_64_mul16_32_12_t25 Add inline_mul32_64_mul16_32_12_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x4c), Register(0x50), Register(0x4c)], resolved: None }
30 4c 50 4c 
# 0274e Instruction { source: "inline_mul32_64_mul16_32_12_t24 <- inline_mul32_64_mul16_32_12_t25 Add inline_mul32_64_mul16_32_12_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# temp <- inline_mul32_64_mul16_32_12_t24 U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# optimized away noop copy Instruction { source: "temp <- inline_mul32_64_mul16_32_12_t24 U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# goto inline_mul32_64_mul16_32_12_function_end_mul16_32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_mul32_64_mul16_32_12_function_end_mul16_32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_mul32_64_mul16_32_12_function_end_mul16_32)], resolved: None }
# :inline_mul32_64_mul16_32_12_function_end_mul16_32
# 	SourceContext { contexts: [] }
# inline_mul32_64_mul16_32_12_function_end_mul16_32
# t17 <- temp[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_lo\", Number(U8, 2)), var_type: None, value: Index(\"temp\", Number(U8, 0)) }", "Index(\"temp\", Number(U8, 0))", "Index(\"temp\", Number(U8, 0))"] }
# 0274f Instruction { source: "t17 <- temp[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_lo\\\", Number(U8, 2)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 0)) }\", \"Index(\\\"temp\\\", Number(U8, 0))\", \"Index(\\\"temp\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x4c), Register(0x75)], resolved: None }
0b 4c 75 
# temp_lo[0x02..0x03] <- t17 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_lo\", Number(U8, 2)), var_type: None, value: Index(\"temp\", Number(U8, 0)) }"] }
# 02752 Instruction { source: "temp_lo[0x02..0x03] <- t17 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_lo\\\", Number(U8, 2)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x75), Register(0x8a)], resolved: None }
0b 75 8a 
# t18 <- temp[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_lo\", Number(U8, 3)), var_type: None, value: Index(\"temp\", Number(U8, 1)) }", "Index(\"temp\", Number(U8, 1))", "Index(\"temp\", Number(U8, 1))"] }
# 02755 Instruction { source: "t18 <- temp[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_lo\\\", Number(U8, 3)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 1)) }\", \"Index(\\\"temp\\\", Number(U8, 1))\", \"Index(\\\"temp\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x4d), Register(0x75)], resolved: None }
0b 4d 75 
# temp_lo[0x03..0x04] <- t18 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_lo\", Number(U8, 3)), var_type: None, value: Index(\"temp\", Number(U8, 1)) }"] }
# 02758 Instruction { source: "temp_lo[0x03..0x04] <- t18 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_lo\\\", Number(U8, 3)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x75), Register(0x8b)], resolved: None }
0b 75 8b 
# t19 <- temp[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_hi\", Number(U8, 0)), var_type: None, value: Index(\"temp\", Number(U8, 2)) }", "Index(\"temp\", Number(U8, 2))", "Index(\"temp\", Number(U8, 2))"] }
# 0275b Instruction { source: "t19 <- temp[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_hi\\\", Number(U8, 0)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 2)) }\", \"Index(\\\"temp\\\", Number(U8, 2))\", \"Index(\\\"temp\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x4e), Register(0x75)], resolved: None }
0b 4e 75 
# temp_hi[0x00..0x01] <- t19 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_hi\", Number(U8, 0)), var_type: None, value: Index(\"temp\", Number(U8, 2)) }"] }
# 0275e Instruction { source: "temp_hi[0x00..0x01] <- t19 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_hi\\\", Number(U8, 0)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 2)) }\"] }", opcode: Copy8, args: [Register(0x75), Register(0x84)], resolved: None }
0b 75 84 
# t20 <- temp[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_hi\", Number(U8, 1)), var_type: None, value: Index(\"temp\", Number(U8, 3)) }", "Index(\"temp\", Number(U8, 3))", "Index(\"temp\", Number(U8, 3))"] }
# 02761 Instruction { source: "t20 <- temp[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_hi\\\", Number(U8, 1)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 3)) }\", \"Index(\\\"temp\\\", Number(U8, 3))\", \"Index(\\\"temp\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0x4f), Register(0x75)], resolved: None }
0b 4f 75 
# temp_hi[0x01..0x02] <- t20 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_hi\", Number(U8, 1)), var_type: None, value: Index(\"temp\", Number(U8, 3)) }"] }
# 02764 Instruction { source: "temp_hi[0x01..0x02] <- t20 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_hi\\\", Number(U8, 1)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 3)) }\"] }", opcode: Copy8, args: [Register(0x75), Register(0x85)], resolved: None }
0b 75 85 
# t21 <- __frame_pointer U32
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"temp64\", \"lo\"), var_type: None, value: Ident(\"temp_lo\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident(\"__frame_pointer\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident(\"__frame_pointer\") }", "Ident(\"__frame_pointer\")"] }
# 02767 Instruction { source: "t21 <- __frame_pointer U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"lo\\\"), var_type: None, value: Ident(\\\"temp_lo\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident(\\\"__frame_pointer\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident(\\\"__frame_pointer\\\") }\", \"Ident(\\\"__frame_pointer\\\")\"] }", opcode: Copy32, args: [Register(0x0c), Register(0x7c)], resolved: None }
21 0c 7c 
# t22 <- temp_lo U32
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"temp64\", \"lo\"), var_type: None, value: Ident(\"temp_lo\") }", "Ident(\"temp_lo\")", "Ident(\"temp_lo\")"] }
# 0276a Instruction { source: "t22 <- temp_lo U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"lo\\\"), var_type: None, value: Ident(\\\"temp_lo\\\") }\", \"Ident(\\\"temp_lo\\\")\", \"Ident(\\\"temp_lo\\\")\"] }", opcode: Copy32, args: [Register(0x88), Register(0x4c)], resolved: None }
21 88 4c 
# mem[t21] <- t22 U32
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"temp64\", \"lo\"), var_type: None, value: Ident(\"temp_lo\") }"] }
# 0276d Instruction { source: "mem[t21] <- t22 U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"lo\\\"), var_type: None, value: Ident(\\\"temp_lo\\\") }\"] }", opcode: Store32_1, args: [Register(0x4c), Register(0x7c)], resolved: None }
23 4c 7c 
# 02770 Instruction { source: "mem[t21] <- t22 U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"lo\\\"), var_type: None, value: Ident(\\\"temp_lo\\\") }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# t24 <- __frame_pointer U32
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"temp64\", \"hi\"), var_type: None, value: Ident(\"temp_hi\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4))", "Ident(\"__frame_pointer\")", "Ident(\"__frame_pointer\")"] }
# 02771 Instruction { source: "t24 <- __frame_pointer U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"hi\\\"), var_type: None, value: Ident(\\\"temp_hi\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4))\", \"Ident(\\\"__frame_pointer\\\")\", \"Ident(\\\"__frame_pointer\\\")\"] }", opcode: Copy32, args: [Register(0x0c), Register(0x7c)], resolved: None }
21 0c 7c 
# t25 <- 0n4/0x00000004u32 
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"temp64\", \"hi\"), var_type: None, value: Ident(\"temp_hi\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 02774 Instruction { source: "t25 <- 0n4/0x00000004u32 \n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"hi\\\"), var_type: None, value: Ident(\\\"temp_hi\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: LoadImm32, args: [Register(0x4c), Constant32(0x00000004=4)], resolved: None }
20 4c 04 00 00 00 
# t23 <- t24 Add t25
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"temp64\", \"hi\"), var_type: None, value: Ident(\"temp_hi\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4))"] }
# 0277a Instruction { source: "t23 <- t24 Add t25\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"hi\\\"), var_type: None, value: Ident(\\\"temp_hi\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0277b Instruction { source: "t23 <- t24 Add t25\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"hi\\\"), var_type: None, value: Ident(\\\"temp_hi\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x7c), Register(0x4c), Register(0x4c)], resolved: None }
30 7c 4c 4c 
# 0277f Instruction { source: "t23 <- t24 Add t25\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"hi\\\"), var_type: None, value: Ident(\\\"temp_hi\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t26 <- temp_hi U32
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"temp64\", \"hi\"), var_type: None, value: Ident(\"temp_hi\") }", "Ident(\"temp_hi\")", "Ident(\"temp_hi\")"] }
# 02780 Instruction { source: "t26 <- temp_hi U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"hi\\\"), var_type: None, value: Ident(\\\"temp_hi\\\") }\", \"Ident(\\\"temp_hi\\\")\", \"Ident(\\\"temp_hi\\\")\"] }", opcode: Copy32, args: [Register(0x84), Register(0x50)], resolved: None }
21 84 50 
# mem[t23] <- t26 U32
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"temp64\", \"hi\"), var_type: None, value: Ident(\"temp_hi\") }"] }
# 02783 Instruction { source: "mem[t23] <- t26 U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"hi\\\"), var_type: None, value: Ident(\\\"temp_hi\\\") }\"] }", opcode: Store32_1, args: [Register(0x50), Register(0x4c)], resolved: None }
23 50 4c 
# 02786 Instruction { source: "mem[t23] <- t26 U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"hi\\\"), var_type: None, value: Ident(\\\"temp_hi\\\") }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# t28 <- c U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# 02787 Instruction { source: "t28 <- c U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x58), Register(0x4c)], resolved: None }
21 58 4c 
# t31 <- __frame_pointer U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "AddressOf(Ident(\"temp64\"))", "AddressOf(Ident(\"temp64\"))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))", "Ident(\"__frame_pointer\")", "Ident(\"__frame_pointer\")"] }
# 0278a Instruction { source: "t31 <- __frame_pointer U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Ident(\\\"__frame_pointer\\\")\", \"Ident(\\\"__frame_pointer\\\")\"] }", opcode: Copy32, args: [Register(0x0c), Register(0x7c)], resolved: None }
21 0c 7c 
# t32 <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "AddressOf(Ident(\"temp64\"))", "AddressOf(Ident(\"temp64\"))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 0278d Instruction { source: "t32 <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x50), Constant32(0x00000000=0)], resolved: None }
20 50 00 00 00 00 
# t30 <- t31 Add t32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "AddressOf(Ident(\"temp64\"))", "AddressOf(Ident(\"temp64\"))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))"] }
# 02793 Instruction { source: "t30 <- t31 Add t32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 02794 Instruction { source: "t30 <- t31 Add t32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\"] }", opcode: AddCarry32_1, args: [Register(0x7c), Register(0x50), Register(0x50)], resolved: None }
30 7c 50 50 
# 02798 Instruction { source: "t30 <- t31 Add t32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t29 <- t30 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "AddressOf(Ident(\"temp64\"))", "AddressOf(Ident(\"temp64\"))"] }
# optimized away noop copy Instruction { source: "t29 <- t30 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"AddressOf(Ident(\\\"temp64\\\"))\"] }", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# t33 <- c U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "t33 <- c U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x58), Register(0x58)], resolved: None }
# inline_mul32_64_add_U64_0_a <- t28 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_a <- t28 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_mul32_64_add_U64_0_b <- t29 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_b <- t29 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\"] }", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_mul32_64_add_U64_0_c <- t33 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })"] }
# 02799 Instruction { source: "inline_mul32_64_add_U64_0_c <- t33 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\"] }", opcode: Copy32, args: [Register(0x58), Register(0x5c)], resolved: None }
21 58 5c 
# inline_mul32_64_add_U64_0_t0 <- inline_mul32_64_add_U64_0_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"lo\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\"a\", \"lo\") }", "PtrFieldDeref(\"a\", \"lo\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") } }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t0 <- inline_mul32_64_add_U64_0_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lo\\\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\\\"a\\\", \\\"lo\\\") }\", \"PtrFieldDeref(\\\"a\\\", \\\"lo\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_mul32_64_add_U64_0_lo <- mem[inline_mul32_64_add_U64_0_t0] U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"lo\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\"a\", \"lo\") }", "PtrFieldDeref(\"a\", \"lo\")"] }
# 0279c Instruction { source: "inline_mul32_64_add_U64_0_lo <- mem[inline_mul32_64_add_U64_0_t0] U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lo\\\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\\\"a\\\", \\\"lo\\\") }\", \"PtrFieldDeref(\\\"a\\\", \\\"lo\\\")\"] }", opcode: Load32, args: [Register(0x4c), Register(0x60)], resolved: None }
22 4c 60 
# inline_mul32_64_add_U64_0_t2 <- inline_mul32_64_add_U64_0_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t2 <- inline_mul32_64_add_U64_0_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_mul32_64_add_U64_0_t3 <- 0n4/0x00000004u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 0279f Instruction { source: "inline_mul32_64_add_U64_0_t3 <- 0n4/0x00000004u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: LoadImm32, args: [Register(0x64), Constant32(0x00000004=4)], resolved: None }
20 64 04 00 00 00 
# inline_mul32_64_add_U64_0_t1 <- inline_mul32_64_add_U64_0_t2 Add inline_mul32_64_add_U64_0_t3
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))"] }
# 027a5 Instruction { source: "inline_mul32_64_add_U64_0_t1 <- inline_mul32_64_add_U64_0_t2 Add inline_mul32_64_add_U64_0_t3\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 027a6 Instruction { source: "inline_mul32_64_add_U64_0_t1 <- inline_mul32_64_add_U64_0_t2 Add inline_mul32_64_add_U64_0_t3\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x5c), Register(0x64), Register(0x64)], resolved: None }
30 5c 64 64 
# 027aa Instruction { source: "inline_mul32_64_add_U64_0_t1 <- inline_mul32_64_add_U64_0_t2 Add inline_mul32_64_add_U64_0_t3\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_mul32_64_add_U64_0_t7 <- inline_mul32_64_add_U64_0_a U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "PtrFieldDeref(\"a\", \"hi\")", "PtrFieldDeref(\"a\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4))", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t7 <- inline_mul32_64_add_U64_0_a U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4))\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_mul32_64_add_U64_0_t8 <- 0n4/0x00000004u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "PtrFieldDeref(\"a\", \"hi\")", "PtrFieldDeref(\"a\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 027ab Instruction { source: "inline_mul32_64_add_U64_0_t8 <- 0n4/0x00000004u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: LoadImm32, args: [Register(0x68), Constant32(0x00000004=4)], resolved: None }
20 68 04 00 00 00 
# inline_mul32_64_add_U64_0_t6 <- inline_mul32_64_add_U64_0_t7 Add inline_mul32_64_add_U64_0_t8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "PtrFieldDeref(\"a\", \"hi\")", "PtrFieldDeref(\"a\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4))"] }
# 027b1 Instruction { source: "inline_mul32_64_add_U64_0_t6 <- inline_mul32_64_add_U64_0_t7 Add inline_mul32_64_add_U64_0_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 027b2 Instruction { source: "inline_mul32_64_add_U64_0_t6 <- inline_mul32_64_add_U64_0_t7 Add inline_mul32_64_add_U64_0_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x4c), Register(0x68), Register(0x68)], resolved: None }
30 4c 68 68 
# 027b6 Instruction { source: "inline_mul32_64_add_U64_0_t6 <- inline_mul32_64_add_U64_0_t7 Add inline_mul32_64_add_U64_0_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_mul32_64_add_U64_0_t5 <- mem[inline_mul32_64_add_U64_0_t6] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "PtrFieldDeref(\"a\", \"hi\")", "PtrFieldDeref(\"a\", \"hi\")"] }
# 027b7 Instruction { source: "inline_mul32_64_add_U64_0_t5 <- mem[inline_mul32_64_add_U64_0_t6] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\"] }", opcode: Load32, args: [Register(0x68), Register(0x6c)], resolved: None }
22 68 6c 
# inline_mul32_64_add_U64_0_t11 <- inline_mul32_64_add_U64_0_b U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "PtrFieldDeref(\"b\", \"hi\")", "PtrFieldDeref(\"b\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4))", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t11 <- inline_mul32_64_add_U64_0_b U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4))\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_mul32_64_add_U64_0_t12 <- 0n4/0x00000004u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "PtrFieldDeref(\"b\", \"hi\")", "PtrFieldDeref(\"b\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 027ba Instruction { source: "inline_mul32_64_add_U64_0_t12 <- 0n4/0x00000004u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: LoadImm32, args: [Register(0x68), Constant32(0x00000004=4)], resolved: None }
20 68 04 00 00 00 
# inline_mul32_64_add_U64_0_t10 <- inline_mul32_64_add_U64_0_t11 Add inline_mul32_64_add_U64_0_t12
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "PtrFieldDeref(\"b\", \"hi\")", "PtrFieldDeref(\"b\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4))"] }
# 027c0 Instruction { source: "inline_mul32_64_add_U64_0_t10 <- inline_mul32_64_add_U64_0_t11 Add inline_mul32_64_add_U64_0_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 027c1 Instruction { source: "inline_mul32_64_add_U64_0_t10 <- inline_mul32_64_add_U64_0_t11 Add inline_mul32_64_add_U64_0_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x50), Register(0x68), Register(0x68)], resolved: None }
30 50 68 68 
# 027c5 Instruction { source: "inline_mul32_64_add_U64_0_t10 <- inline_mul32_64_add_U64_0_t11 Add inline_mul32_64_add_U64_0_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_mul32_64_add_U64_0_t9 <- mem[inline_mul32_64_add_U64_0_t10] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "PtrFieldDeref(\"b\", \"hi\")", "PtrFieldDeref(\"b\", \"hi\")"] }
# 027c6 Instruction { source: "inline_mul32_64_add_U64_0_t9 <- mem[inline_mul32_64_add_U64_0_t10] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\"] }", opcode: Load32, args: [Register(0x68), Register(0x68)], resolved: None }
22 68 68 
# inline_mul32_64_add_U64_0_t4 <- inline_mul32_64_add_U64_0_t5 Add inline_mul32_64_add_U64_0_t9
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))"] }
# 027c9 Instruction { source: "inline_mul32_64_add_U64_0_t4 <- inline_mul32_64_add_U64_0_t5 Add inline_mul32_64_add_U64_0_t9\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 027ca Instruction { source: "inline_mul32_64_add_U64_0_t4 <- inline_mul32_64_add_U64_0_t5 Add inline_mul32_64_add_U64_0_t9\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x6c), Register(0x68), Register(0x68)], resolved: None }
30 6c 68 68 
# 027ce Instruction { source: "inline_mul32_64_add_U64_0_t4 <- inline_mul32_64_add_U64_0_t5 Add inline_mul32_64_add_U64_0_t9\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# mem[inline_mul32_64_add_U64_0_t1] <- inline_mul32_64_add_U64_0_t4 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }"] }
# 027cf Instruction { source: "mem[inline_mul32_64_add_U64_0_t1] <- inline_mul32_64_add_U64_0_t4 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\"] }", opcode: Store32_1, args: [Register(0x68), Register(0x64)], resolved: None }
23 68 64 
# 027d2 Instruction { source: "mem[inline_mul32_64_add_U64_0_t1] <- inline_mul32_64_add_U64_0_t4 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_mul32_64_add_U64_0_t13 <- inline_mul32_64_add_U64_0_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t13 <- inline_mul32_64_add_U64_0_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_mul32_64_add_U64_0_t16 <- inline_mul32_64_add_U64_0_a U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "PtrFieldDeref(\"a\", \"lo\")", "PtrFieldDeref(\"a\", \"lo\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") } }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t16 <- inline_mul32_64_add_U64_0_a U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"PtrFieldDeref(\\\"a\\\", \\\"lo\\\")\", \"PtrFieldDeref(\\\"a\\\", \\\"lo\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_mul32_64_add_U64_0_t15 <- mem[inline_mul32_64_add_U64_0_t16] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "PtrFieldDeref(\"a\", \"lo\")", "PtrFieldDeref(\"a\", \"lo\")"] }
# 027d3 Instruction { source: "inline_mul32_64_add_U64_0_t15 <- mem[inline_mul32_64_add_U64_0_t16] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"PtrFieldDeref(\\\"a\\\", \\\"lo\\\")\", \"PtrFieldDeref(\\\"a\\\", \\\"lo\\\")\"] }", opcode: Load32, args: [Register(0x4c), Register(0x4c)], resolved: None }
22 4c 4c 
# inline_mul32_64_add_U64_0_t18 <- inline_mul32_64_add_U64_0_b U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "PtrFieldDeref(\"b\", \"lo\")", "PtrFieldDeref(\"b\", \"lo\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") } }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t18 <- inline_mul32_64_add_U64_0_b U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"PtrFieldDeref(\\\"b\\\", \\\"lo\\\")\", \"PtrFieldDeref(\\\"b\\\", \\\"lo\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_mul32_64_add_U64_0_t17 <- mem[inline_mul32_64_add_U64_0_t18] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "PtrFieldDeref(\"b\", \"lo\")", "PtrFieldDeref(\"b\", \"lo\")"] }
# 027d6 Instruction { source: "inline_mul32_64_add_U64_0_t17 <- mem[inline_mul32_64_add_U64_0_t18] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"PtrFieldDeref(\\\"b\\\", \\\"lo\\\")\", \"PtrFieldDeref(\\\"b\\\", \\\"lo\\\")\"] }", opcode: Load32, args: [Register(0x50), Register(0x50)], resolved: None }
22 50 50 
# inline_mul32_64_add_U64_0_t14 <- inline_mul32_64_add_U64_0_t15 Add inline_mul32_64_add_U64_0_t17
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))"] }
# 027d9 Instruction { source: "inline_mul32_64_add_U64_0_t14 <- inline_mul32_64_add_U64_0_t15 Add inline_mul32_64_add_U64_0_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 027da Instruction { source: "inline_mul32_64_add_U64_0_t14 <- inline_mul32_64_add_U64_0_t15 Add inline_mul32_64_add_U64_0_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x4c), Register(0x50), Register(0x4c)], resolved: None }
30 4c 50 4c 
# 027de Instruction { source: "inline_mul32_64_add_U64_0_t14 <- inline_mul32_64_add_U64_0_t15 Add inline_mul32_64_add_U64_0_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# mem[inline_mul32_64_add_U64_0_t13] <- inline_mul32_64_add_U64_0_t14 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }"] }
# 027df Instruction { source: "mem[inline_mul32_64_add_U64_0_t13] <- inline_mul32_64_add_U64_0_t14 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\"] }", opcode: Store32_1, args: [Register(0x4c), Register(0x5c)], resolved: None }
23 4c 5c 
# 027e2 Instruction { source: "mem[inline_mul32_64_add_U64_0_t13] <- inline_mul32_64_add_U64_0_t14 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_mul32_64_add_U64_0_t20 <- inline_mul32_64_add_U64_0_c U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }])], else_block: [] }", "Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }", "PtrFieldDeref(\"c\", \"lo\")", "PtrFieldDeref(\"c\", \"lo\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# 027e3 Instruction { source: "inline_mul32_64_add_U64_0_t20 <- inline_mul32_64_add_U64_0_c U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\", \"PtrFieldDeref(\\\"c\\\", \\\"lo\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"lo\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x4c)], resolved: None }
21 5c 4c 
# inline_mul32_64_add_U64_0_t19 <- mem[inline_mul32_64_add_U64_0_t20] U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }])], else_block: [] }", "Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }", "PtrFieldDeref(\"c\", \"lo\")", "PtrFieldDeref(\"c\", \"lo\")"] }
# 027e6 Instruction { source: "inline_mul32_64_add_U64_0_t19 <- mem[inline_mul32_64_add_U64_0_t20] U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\", \"PtrFieldDeref(\\\"c\\\", \\\"lo\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"lo\\\")\"] }", opcode: Load32, args: [Register(0x4c), Register(0x4c)], resolved: None }
22 4c 4c 
# inline_mul32_64_add_U64_0_t21 <- inline_mul32_64_add_U64_0_lo U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }])], else_block: [] }", "Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }", "Ident(\"lo\")", "Ident(\"lo\")"] }
# 027e9 Instruction { source: "inline_mul32_64_add_U64_0_t21 <- inline_mul32_64_add_U64_0_lo U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\", \"Ident(\\\"lo\\\")\", \"Ident(\\\"lo\\\")\"] }", opcode: Copy32, args: [Register(0x60), Register(0x50)], resolved: None }
21 60 50 
# if inline_mul32_64_add_U64_0_t19 < inline_mul32_64_add_U64_0_t21 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }])], else_block: [] }", "Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }"] }
# 027ec Instruction { source: "if inline_mul32_64_add_U64_0_t19 < inline_mul32_64_add_U64_0_t21 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\"] }", opcode: Cmp8, args: [Register(0x53), Register(0x4f)], resolved: None }
15 53 4f 
# 027ef Instruction { source: "if inline_mul32_64_add_U64_0_t19 < inline_mul32_64_add_U64_0_t21 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x52), Register(0x4e)], resolved: None }
16 52 4e 
# 027f2 Instruction { source: "if inline_mul32_64_add_U64_0_t19 < inline_mul32_64_add_U64_0_t21 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x51), Register(0x4d)], resolved: None }
16 51 4d 
# 027f5 Instruction { source: "if inline_mul32_64_add_U64_0_t19 < inline_mul32_64_add_U64_0_t21 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x50), Register(0x4c)], resolved: None }
16 50 4c 
# 027f8 Instruction { source: "if inline_mul32_64_add_U64_0_t19 < inline_mul32_64_add_U64_0_t21 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\"] }", opcode: JcImm, args: [Label24(inline_mul32_64_add_U64_0_add_U64_if_else_0_2)], resolved: None }
71 31 28 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_mul32_64_add_U64_0_t19 < inline_mul32_64_add_U64_0_t21 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\"] }", opcode: JmpImm, args: [Label24(inline_mul32_64_add_U64_0_add_U64_if_true_0_1)], resolved: None }
# :inline_mul32_64_add_U64_0_add_U64_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }])], else_block: [] }"] }
# inline_mul32_64_add_U64_0_add_U64_if_true_0_1
# inline_mul32_64_add_U64_0_t23 <- inline_mul32_64_add_U64_0_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# 027fc Instruction { source: "inline_mul32_64_add_U64_0_t23 <- inline_mul32_64_add_U64_0_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x4c)], resolved: None }
21 5c 4c 
# inline_mul32_64_add_U64_0_t24 <- 0n4/0x00000004u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 027ff Instruction { source: "inline_mul32_64_add_U64_0_t24 <- 0n4/0x00000004u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: LoadImm32, args: [Register(0x50), Constant32(0x00000004=4)], resolved: None }
20 50 04 00 00 00 
# inline_mul32_64_add_U64_0_t22 <- inline_mul32_64_add_U64_0_t23 Add inline_mul32_64_add_U64_0_t24
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))"] }
# 02805 Instruction { source: "inline_mul32_64_add_U64_0_t22 <- inline_mul32_64_add_U64_0_t23 Add inline_mul32_64_add_U64_0_t24\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 02806 Instruction { source: "inline_mul32_64_add_U64_0_t22 <- inline_mul32_64_add_U64_0_t23 Add inline_mul32_64_add_U64_0_t24\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x4c), Register(0x50), Register(0x4c)], resolved: None }
30 4c 50 4c 
# 0280a Instruction { source: "inline_mul32_64_add_U64_0_t22 <- inline_mul32_64_add_U64_0_t23 Add inline_mul32_64_add_U64_0_t24\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_mul32_64_add_U64_0_t28 <- inline_mul32_64_add_U64_0_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "PtrFieldDeref(\"c\", \"hi\")", "PtrFieldDeref(\"c\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# 0280b Instruction { source: "inline_mul32_64_add_U64_0_t28 <- inline_mul32_64_add_U64_0_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x50)], resolved: None }
21 5c 50 
# inline_mul32_64_add_U64_0_t29 <- 0n4/0x00000004u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "PtrFieldDeref(\"c\", \"hi\")", "PtrFieldDeref(\"c\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 0280e Instruction { source: "inline_mul32_64_add_U64_0_t29 <- 0n4/0x00000004u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: LoadImm32, args: [Register(0x5c), Constant32(0x00000004=4)], resolved: None }
20 5c 04 00 00 00 
# inline_mul32_64_add_U64_0_t27 <- inline_mul32_64_add_U64_0_t28 Add inline_mul32_64_add_U64_0_t29
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "PtrFieldDeref(\"c\", \"hi\")", "PtrFieldDeref(\"c\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))"] }
# 02814 Instruction { source: "inline_mul32_64_add_U64_0_t27 <- inline_mul32_64_add_U64_0_t28 Add inline_mul32_64_add_U64_0_t29\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 02815 Instruction { source: "inline_mul32_64_add_U64_0_t27 <- inline_mul32_64_add_U64_0_t28 Add inline_mul32_64_add_U64_0_t29\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x50), Register(0x5c), Register(0x50)], resolved: None }
30 50 5c 50 
# 02819 Instruction { source: "inline_mul32_64_add_U64_0_t27 <- inline_mul32_64_add_U64_0_t28 Add inline_mul32_64_add_U64_0_t29\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_mul32_64_add_U64_0_t26 <- mem[inline_mul32_64_add_U64_0_t27] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "PtrFieldDeref(\"c\", \"hi\")", "PtrFieldDeref(\"c\", \"hi\")"] }
# 0281a Instruction { source: "inline_mul32_64_add_U64_0_t26 <- mem[inline_mul32_64_add_U64_0_t27] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\"] }", opcode: Load32, args: [Register(0x50), Register(0x50)], resolved: None }
22 50 50 
# inline_mul32_64_add_U64_0_t30 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 0281d Instruction { source: "inline_mul32_64_add_U64_0_t30 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x5c), Constant32(0x00000001=1)], resolved: None }
20 5c 01 00 00 00 
# inline_mul32_64_add_U64_0_t25 <- inline_mul32_64_add_U64_0_t26 Add inline_mul32_64_add_U64_0_t30
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))"] }
# 02823 Instruction { source: "inline_mul32_64_add_U64_0_t25 <- inline_mul32_64_add_U64_0_t26 Add inline_mul32_64_add_U64_0_t30\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 02824 Instruction { source: "inline_mul32_64_add_U64_0_t25 <- inline_mul32_64_add_U64_0_t26 Add inline_mul32_64_add_U64_0_t30\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x50), Register(0x5c), Register(0x50)], resolved: None }
30 50 5c 50 
# 02828 Instruction { source: "inline_mul32_64_add_U64_0_t25 <- inline_mul32_64_add_U64_0_t26 Add inline_mul32_64_add_U64_0_t30\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# mem[inline_mul32_64_add_U64_0_t22] <- inline_mul32_64_add_U64_0_t25 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }"] }
# 02829 Instruction { source: "mem[inline_mul32_64_add_U64_0_t22] <- inline_mul32_64_add_U64_0_t25 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\"] }", opcode: Store32_1, args: [Register(0x50), Register(0x4c)], resolved: None }
23 50 4c 
# 0282c Instruction { source: "mem[inline_mul32_64_add_U64_0_t22] <- inline_mul32_64_add_U64_0_t25 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto inline_mul32_64_add_U64_0_add_U64_if_end_0
# 	SourceContext { contexts: [] }
# 0282d Instruction { source: "goto inline_mul32_64_add_U64_0_add_U64_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_mul32_64_add_U64_0_add_U64_if_end_0)], resolved: None }
70 31 28 00 
# :inline_mul32_64_add_U64_0_add_U64_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_mul32_64_add_U64_0_add_U64_if_else_0_2
# :inline_mul32_64_add_U64_0_add_U64_if_end_0
# 	SourceContext { contexts: [] }
# inline_mul32_64_add_U64_0_add_U64_if_end_0
# goto inline_mul32_64_add_U64_0_function_end_add_U64
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_mul32_64_add_U64_0_function_end_add_U64\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_mul32_64_add_U64_0_function_end_add_U64)], resolved: None }
# :inline_mul32_64_add_U64_0_function_end_add_U64
# 	SourceContext { contexts: [] }
# inline_mul32_64_add_U64_0_function_end_add_U64
# t34 <- a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t34 <- a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"temp\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# t35 <- b_hi U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })", "Ident(\"b_hi\")", "Ident(\"b_hi\")"] }
# 02831 Instruction { source: "t35 <- b_hi U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"temp\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })\", \"Ident(\\\"b_hi\\\")\", \"Ident(\\\"b_hi\\\")\"] }", opcode: Copy32, args: [Register(0x54), Register(0x4c)], resolved: None }
21 54 4c 
# inline_mul32_64_mul16_32_13_a <- t34 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_13_a <- t34 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"temp\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })\"] }", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_mul32_64_mul16_32_13_b <- t35 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }) }", "Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_13_b <- t35 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"temp\\\"), var_type: None, value: Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] }) }\", \"Call(Call { function: \\\"mul16_32\\\", parameters: [Ident(\\\"a\\\"), Ident(\\\"b_hi\\\")] })\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_mul32_64_mul16_32_13_t0 <- inline_mul32_64_mul16_32_13_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_13_t0 <- inline_mul32_64_mul16_32_13_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_mul32_64_mul16_32_13_t1 <- inline_mul32_64_mul16_32_13_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_13_t1 <- inline_mul32_64_mul16_32_13_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_mul32_64_mul16_32_13_c <- inline_mul32_64_mul16_32_13_t0 Multiply inline_mul32_64_mul16_32_13_t1
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }", "Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))"] }
# 02834 Instruction { source: "inline_mul32_64_mul16_32_13_c <- inline_mul32_64_mul16_32_13_t0 Multiply inline_mul32_64_mul16_32_13_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0x48), Register(0x4c), Register(0x50)], resolved: None }
11 48 4c 50 
# 02838 Instruction { source: "inline_mul32_64_mul16_32_13_c <- inline_mul32_64_mul16_32_13_t0 Multiply inline_mul32_64_mul16_32_13_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x52), Constant8(0x00=0)], resolved: None }
04 52 00 
# 0283b Instruction { source: "inline_mul32_64_mul16_32_13_c <- inline_mul32_64_mul16_32_13_t0 Multiply inline_mul32_64_mul16_32_13_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x53), Constant8(0x00=0)], resolved: None }
04 53 00 
# inline_mul32_64_mul16_32_13_t3 <- inline_mul32_64_mul16_32_13_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 0283e Instruction { source: "inline_mul32_64_mul16_32_13_t3 <- inline_mul32_64_mul16_32_13_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x49), Register(0x77)], resolved: None }
0b 49 77 
# inline_mul32_64_mul16_32_13_t2 U32 <- inline_mul32_64_mul16_32_13_t3 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 02841 Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_13_t2 U32 <- inline_mul32_64_mul16_32_13_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x54), Constant32(0x00000000=0)], resolved: None }
20 54 00 00 00 00 
# 02847 Instruction { source: "inline_mul32_64_mul16_32_13_t2 U32 <- inline_mul32_64_mul16_32_13_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x77), Register(0x54)], resolved: None }
0b 77 54 
# inline_mul32_64_mul16_32_13_t5 <- inline_mul32_64_mul16_32_13_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 0284a Instruction { source: "inline_mul32_64_mul16_32_13_t5 <- inline_mul32_64_mul16_32_13_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x4d), Register(0x75)], resolved: None }
0b 4d 75 
# inline_mul32_64_mul16_32_13_t4 U32 <- inline_mul32_64_mul16_32_13_t5 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 0284d Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_13_t4 U32 <- inline_mul32_64_mul16_32_13_t5 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x5c), Constant32(0x00000000=0)], resolved: None }
20 5c 00 00 00 00 
# 02853 Instruction { source: "inline_mul32_64_mul16_32_13_t4 U32 <- inline_mul32_64_mul16_32_13_t5 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x75), Register(0x5c)], resolved: None }
0b 75 5c 
# inline_mul32_64_mul16_32_13_f <- inline_mul32_64_mul16_32_13_t2 Multiply inline_mul32_64_mul16_32_13_t4
# 	SourceContext { contexts: ["Assign { target: Ident(\"f\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 02856 Instruction { source: "inline_mul32_64_mul16_32_13_f <- inline_mul32_64_mul16_32_13_t2 Multiply inline_mul32_64_mul16_32_13_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0x54), Register(0x5c), Register(0x54)], resolved: None }
11 54 5c 54 
# 0285a Instruction { source: "inline_mul32_64_mul16_32_13_f <- inline_mul32_64_mul16_32_13_t2 Multiply inline_mul32_64_mul16_32_13_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x56), Constant8(0x00=0)], resolved: None }
04 56 00 
# 0285d Instruction { source: "inline_mul32_64_mul16_32_13_f <- inline_mul32_64_mul16_32_13_t2 Multiply inline_mul32_64_mul16_32_13_t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"f\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x57), Constant8(0x00=0)], resolved: None }
04 57 00 
# inline_mul32_64_mul16_32_13_t6 <- inline_mul32_64_mul16_32_13_f[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }", "Index(\"f\", Number(U8, 1))", "Index(\"f\", Number(U8, 1))"] }
# 02860 Instruction { source: "inline_mul32_64_mul16_32_13_t6 <- inline_mul32_64_mul16_32_13_f[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\", \"Index(\\\"f\\\", Number(U8, 1))\", \"Index(\\\"f\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x55), Register(0x78)], resolved: None }
0b 55 78 
# inline_mul32_64_mul16_32_13_f[0x03..0x04] <- inline_mul32_64_mul16_32_13_t6 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 3)), var_type: None, value: Index(\"f\", Number(U8, 1)) }"] }
# 02863 Instruction { source: "inline_mul32_64_mul16_32_13_f[0x03..0x04] <- inline_mul32_64_mul16_32_13_t6 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 3)), var_type: None, value: Index(\\\"f\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x78), Register(0x57)], resolved: None }
0b 78 57 
# inline_mul32_64_mul16_32_13_t7 <- inline_mul32_64_mul16_32_13_f[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }", "Index(\"f\", Number(U8, 0))", "Index(\"f\", Number(U8, 0))"] }
# 02866 Instruction { source: "inline_mul32_64_mul16_32_13_t7 <- inline_mul32_64_mul16_32_13_f[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\", \"Index(\\\"f\\\", Number(U8, 0))\", \"Index(\\\"f\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x54), Register(0x78)], resolved: None }
0b 54 78 
# inline_mul32_64_mul16_32_13_f[0x02..0x03] <- inline_mul32_64_mul16_32_13_t7 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 2)), var_type: None, value: Index(\"f\", Number(U8, 0)) }"] }
# 02869 Instruction { source: "inline_mul32_64_mul16_32_13_f[0x02..0x03] <- inline_mul32_64_mul16_32_13_t7 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 2)), var_type: None, value: Index(\\\"f\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x78), Register(0x56)], resolved: None }
0b 78 56 
# inline_mul32_64_mul16_32_13_t8 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 0286c Instruction { source: "inline_mul32_64_mul16_32_13_t8 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x71), Constant8(0x00=0)], resolved: None }
04 71 00 
# inline_mul32_64_mul16_32_13_f[0x01..0x02] <- inline_mul32_64_mul16_32_13_t8 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }"] }
# 0286f Instruction { source: "inline_mul32_64_mul16_32_13_f[0x01..0x02] <- inline_mul32_64_mul16_32_13_t8 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 1)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x71), Register(0x55)], resolved: None }
0b 71 55 
# inline_mul32_64_mul16_32_13_t9 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 02872 Instruction { source: "inline_mul32_64_mul16_32_13_t9 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x71), Constant8(0x00=0)], resolved: None }
04 71 00 
# inline_mul32_64_mul16_32_13_f[0x00..0x01] <- inline_mul32_64_mul16_32_13_t9 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"f\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 02875 Instruction { source: "inline_mul32_64_mul16_32_13_f[0x00..0x01] <- inline_mul32_64_mul16_32_13_t9 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"f\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x71), Register(0x54)], resolved: None }
0b 71 54 
# inline_mul32_64_mul16_32_13_t10 <- inline_mul32_64_mul16_32_13_c U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_13_t10 <- inline_mul32_64_mul16_32_13_c U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_mul32_64_mul16_32_13_t11 <- inline_mul32_64_mul16_32_13_f U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))", "Ident(\"f\")", "Ident(\"f\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_13_t11 <- inline_mul32_64_mul16_32_13_f U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\", \"Ident(\\\"f\\\")\", \"Ident(\\\"f\\\")\"] }", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_mul32_64_mul16_32_13_c <- inline_mul32_64_mul16_32_13_t10 Add inline_mul32_64_mul16_32_13_t11
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"f\"))"] }
# 02878 Instruction { source: "inline_mul32_64_mul16_32_13_c <- inline_mul32_64_mul16_32_13_t10 Add inline_mul32_64_mul16_32_13_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 02879 Instruction { source: "inline_mul32_64_mul16_32_13_c <- inline_mul32_64_mul16_32_13_t10 Add inline_mul32_64_mul16_32_13_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x50), Register(0x54), Register(0x50)], resolved: None }
30 50 54 50 
# 0287d Instruction { source: "inline_mul32_64_mul16_32_13_c <- inline_mul32_64_mul16_32_13_t10 Add inline_mul32_64_mul16_32_13_t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\")) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"f\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_mul32_64_mul16_32_13_t12 <- inline_mul32_64_mul16_32_13_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_13_t12 <- inline_mul32_64_mul16_32_13_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_mul32_64_mul16_32_13_t14 <- inline_mul32_64_mul16_32_13_b[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Index(\"b\", Number(U8, 1))", "Index(\"b\", Number(U8, 1))"] }
# 0287e Instruction { source: "inline_mul32_64_mul16_32_13_t14 <- inline_mul32_64_mul16_32_13_b[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Index(\\\"b\\\", Number(U8, 1))\", \"Index(\\\"b\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x4d), Register(0x75)], resolved: None }
0b 4d 75 
# inline_mul32_64_mul16_32_13_t13 U32 <- inline_mul32_64_mul16_32_13_t14 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }"] }
# 02881 Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_13_t13 U32 <- inline_mul32_64_mul16_32_13_t14 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x54), Constant32(0x00000000=0)], resolved: None }
20 54 00 00 00 00 
# 02887 Instruction { source: "inline_mul32_64_mul16_32_13_t13 U32 <- inline_mul32_64_mul16_32_13_t14 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x75), Register(0x54)], resolved: None }
0b 75 54 
# inline_mul32_64_mul16_32_13_d <- inline_mul32_64_mul16_32_13_t12 Multiply inline_mul32_64_mul16_32_13_t13
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }", "Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })"] }
# 0288a Instruction { source: "inline_mul32_64_mul16_32_13_d <- inline_mul32_64_mul16_32_13_t12 Multiply inline_mul32_64_mul16_32_13_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: Mul8_16, args: [Register(0x48), Register(0x54), Register(0x54)], resolved: None }
11 48 54 54 
# 0288e Instruction { source: "inline_mul32_64_mul16_32_13_d <- inline_mul32_64_mul16_32_13_t12 Multiply inline_mul32_64_mul16_32_13_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x56), Constant8(0x00=0)], resolved: None }
04 56 00 
# 02891 Instruction { source: "inline_mul32_64_mul16_32_13_d <- inline_mul32_64_mul16_32_13_t12 Multiply inline_mul32_64_mul16_32_13_t13\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) }) }\", \"Arithmetic(Multiply, Ident(\\\"a\\\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"b\\\", Number(U8, 1)) })\"] }", opcode: LoadImm8, args: [Register(0x57), Constant8(0x00=0)], resolved: None }
04 57 00 
# inline_mul32_64_mul16_32_13_t16 <- inline_mul32_64_mul16_32_13_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 02894 Instruction { source: "inline_mul32_64_mul16_32_13_t16 <- inline_mul32_64_mul16_32_13_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x49), Register(0x77)], resolved: None }
0b 49 77 
# inline_mul32_64_mul16_32_13_t15 U32 <- inline_mul32_64_mul16_32_13_t16 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }", "Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }"] }
# 02897 Instruction { source: "Zero-pad for inline_mul32_64_mul16_32_13_t15 U32 <- inline_mul32_64_mul16_32_13_t16 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x48), Constant32(0x00000000=0)], resolved: None }
20 48 00 00 00 00 
# 0289d Instruction { source: "inline_mul32_64_mul16_32_13_t15 U32 <- inline_mul32_64_mul16_32_13_t16 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\", \"Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x77), Register(0x48)], resolved: None }
0b 77 48 
# inline_mul32_64_mul16_32_13_t17 <- inline_mul32_64_mul16_32_13_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_13_t17 <- inline_mul32_64_mul16_32_13_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_mul32_64_mul16_32_13_e <- inline_mul32_64_mul16_32_13_t15 Multiply inline_mul32_64_mul16_32_13_t17
# 	SourceContext { contexts: ["Assign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }", "Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))"] }
# 028a0 Instruction { source: "inline_mul32_64_mul16_32_13_e <- inline_mul32_64_mul16_32_13_t15 Multiply inline_mul32_64_mul16_32_13_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: Mul8_16, args: [Register(0x48), Register(0x4c), Register(0x48)], resolved: None }
11 48 4c 48 
# 028a4 Instruction { source: "inline_mul32_64_mul16_32_13_e <- inline_mul32_64_mul16_32_13_t15 Multiply inline_mul32_64_mul16_32_13_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x4a), Constant8(0x00=0)], resolved: None }
04 4a 00 
# 028a7 Instruction { source: "inline_mul32_64_mul16_32_13_e <- inline_mul32_64_mul16_32_13_t15 Multiply inline_mul32_64_mul16_32_13_t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"e\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\")) }\", \"Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\\\"a\\\", Number(U8, 1)) }, Ident(\\\"b\\\"))\"] }", opcode: LoadImm8, args: [Register(0x4b), Constant8(0x00=0)], resolved: None }
04 4b 00 
# inline_mul32_64_mul16_32_13_t18 <- inline_mul32_64_mul16_32_13_d U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 028aa Instruction { source: "inline_mul32_64_mul16_32_13_t18 <- inline_mul32_64_mul16_32_13_d U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0x54), Register(0x4c)], resolved: None }
21 54 4c 
# inline_mul32_64_mul16_32_13_t19 <- inline_mul32_64_mul16_32_13_e U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))", "Ident(\"e\")", "Ident(\"e\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_13_t19 <- inline_mul32_64_mul16_32_13_e U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\", \"Ident(\\\"e\\\")\", \"Ident(\\\"e\\\")\"] }", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_mul32_64_mul16_32_13_d <- inline_mul32_64_mul16_32_13_t18 Add inline_mul32_64_mul16_32_13_t19
# 	SourceContext { contexts: ["Assign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }", "Arithmetic(Add, Ident(\"d\"), Ident(\"e\"))"] }
# 028ad Instruction { source: "inline_mul32_64_mul16_32_13_d <- inline_mul32_64_mul16_32_13_t18 Add inline_mul32_64_mul16_32_13_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 028ae Instruction { source: "inline_mul32_64_mul16_32_13_d <- inline_mul32_64_mul16_32_13_t18 Add inline_mul32_64_mul16_32_13_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x4c), Register(0x48), Register(0x54)], resolved: None }
30 4c 48 54 
# 028b2 Instruction { source: "inline_mul32_64_mul16_32_13_d <- inline_mul32_64_mul16_32_13_t18 Add inline_mul32_64_mul16_32_13_t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"d\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\")) }\", \"Arithmetic(Add, Ident(\\\"d\\\"), Ident(\\\"e\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_mul32_64_mul16_32_13_t20 <- inline_mul32_64_mul16_32_13_d[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }", "Index(\"d\", Number(U8, 2))", "Index(\"d\", Number(U8, 2))"] }
# 028b3 Instruction { source: "inline_mul32_64_mul16_32_13_t20 <- inline_mul32_64_mul16_32_13_d[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\", \"Index(\\\"d\\\", Number(U8, 2))\", \"Index(\\\"d\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x56), Register(0x77)], resolved: None }
0b 56 77 
# inline_mul32_64_mul16_32_13_d[0x03..0x04] <- inline_mul32_64_mul16_32_13_t20 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 3)), var_type: None, value: Index(\"d\", Number(U8, 2)) }"] }
# 028b6 Instruction { source: "inline_mul32_64_mul16_32_13_d[0x03..0x04] <- inline_mul32_64_mul16_32_13_t20 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 3)), var_type: None, value: Index(\\\"d\\\", Number(U8, 2)) }\"] }", opcode: Copy8, args: [Register(0x77), Register(0x57)], resolved: None }
0b 77 57 
# inline_mul32_64_mul16_32_13_t21 <- inline_mul32_64_mul16_32_13_d[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }", "Index(\"d\", Number(U8, 1))", "Index(\"d\", Number(U8, 1))"] }
# 028b9 Instruction { source: "inline_mul32_64_mul16_32_13_t21 <- inline_mul32_64_mul16_32_13_d[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\", \"Index(\\\"d\\\", Number(U8, 1))\", \"Index(\\\"d\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x55), Register(0x77)], resolved: None }
0b 55 77 
# inline_mul32_64_mul16_32_13_d[0x02..0x03] <- inline_mul32_64_mul16_32_13_t21 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 2)), var_type: None, value: Index(\"d\", Number(U8, 1)) }"] }
# 028bc Instruction { source: "inline_mul32_64_mul16_32_13_d[0x02..0x03] <- inline_mul32_64_mul16_32_13_t21 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 2)), var_type: None, value: Index(\\\"d\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x77), Register(0x56)], resolved: None }
0b 77 56 
# inline_mul32_64_mul16_32_13_t22 <- inline_mul32_64_mul16_32_13_d[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }", "Index(\"d\", Number(U8, 0))", "Index(\"d\", Number(U8, 0))"] }
# 028bf Instruction { source: "inline_mul32_64_mul16_32_13_t22 <- inline_mul32_64_mul16_32_13_d[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\", \"Index(\\\"d\\\", Number(U8, 0))\", \"Index(\\\"d\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x54), Register(0x77)], resolved: None }
0b 54 77 
# inline_mul32_64_mul16_32_13_d[0x01..0x02] <- inline_mul32_64_mul16_32_13_t22 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 1)), var_type: None, value: Index(\"d\", Number(U8, 0)) }"] }
# 028c2 Instruction { source: "inline_mul32_64_mul16_32_13_d[0x01..0x02] <- inline_mul32_64_mul16_32_13_t22 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 1)), var_type: None, value: Index(\\\"d\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x77), Register(0x55)], resolved: None }
0b 77 55 
# inline_mul32_64_mul16_32_13_t23 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 028c5 Instruction { source: "inline_mul32_64_mul16_32_13_t23 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x77), Constant8(0x00=0)], resolved: None }
04 77 00 
# inline_mul32_64_mul16_32_13_d[0x00..0x01] <- inline_mul32_64_mul16_32_13_t23 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"d\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }"] }
# 028c8 Instruction { source: "inline_mul32_64_mul16_32_13_d[0x00..0x01] <- inline_mul32_64_mul16_32_13_t23 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"d\\\", Number(U8, 0)), var_type: None, value: Number(U8, 0) }\"] }", opcode: Copy8, args: [Register(0x77), Register(0x54)], resolved: None }
0b 77 54 
# inline_mul32_64_mul16_32_13_t25 <- inline_mul32_64_mul16_32_13_c U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"c\")", "Ident(\"c\")"] }
# 028cb Instruction { source: "inline_mul32_64_mul16_32_13_t25 <- inline_mul32_64_mul16_32_13_c U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x50), Register(0x48)], resolved: None }
21 50 48 
# inline_mul32_64_mul16_32_13_t26 <- inline_mul32_64_mul16_32_13_d U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Ident(\"d\")", "Ident(\"d\")"] }
# 028ce Instruction { source: "inline_mul32_64_mul16_32_13_t26 <- inline_mul32_64_mul16_32_13_d U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Ident(\\\"d\\\")\", \"Ident(\\\"d\\\")\"] }", opcode: Copy32, args: [Register(0x54), Register(0x4c)], resolved: None }
21 54 4c 
# inline_mul32_64_mul16_32_13_t24 <- inline_mul32_64_mul16_32_13_t25 Add inline_mul32_64_mul16_32_13_t26
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))", "Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))"] }
# 028d1 Instruction { source: "inline_mul32_64_mul16_32_13_t24 <- inline_mul32_64_mul16_32_13_t25 Add inline_mul32_64_mul16_32_13_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 028d2 Instruction { source: "inline_mul32_64_mul16_32_13_t24 <- inline_mul32_64_mul16_32_13_t25 Add inline_mul32_64_mul16_32_13_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x48), Register(0x4c), Register(0x48)], resolved: None }
30 48 4c 48 
# 028d6 Instruction { source: "inline_mul32_64_mul16_32_13_t24 <- inline_mul32_64_mul16_32_13_t25 Add inline_mul32_64_mul16_32_13_t26\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\", \"Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# temp <- inline_mul32_64_mul16_32_13_t24 U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# 028d7 Instruction { source: "temp <- inline_mul32_64_mul16_32_13_t24 U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: Copy32, args: [Register(0x48), Register(0x4c)], resolved: None }
21 48 4c 
# goto inline_mul32_64_mul16_32_13_function_end_mul16_32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_mul32_64_mul16_32_13_function_end_mul16_32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"c\\\"), Ident(\\\"d\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_mul32_64_mul16_32_13_function_end_mul16_32)], resolved: None }
# :inline_mul32_64_mul16_32_13_function_end_mul16_32
# 	SourceContext { contexts: [] }
# inline_mul32_64_mul16_32_13_function_end_mul16_32
# t36 <- temp[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_lo\", Number(U8, 2)), var_type: None, value: Index(\"temp\", Number(U8, 0)) }", "Index(\"temp\", Number(U8, 0))", "Index(\"temp\", Number(U8, 0))"] }
# 028da Instruction { source: "t36 <- temp[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_lo\\\", Number(U8, 2)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 0)) }\", \"Index(\\\"temp\\\", Number(U8, 0))\", \"Index(\\\"temp\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x4c), Register(0x77)], resolved: None }
0b 4c 77 
# temp_lo[0x02..0x03] <- t36 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_lo\", Number(U8, 2)), var_type: None, value: Index(\"temp\", Number(U8, 0)) }"] }
# 028dd Instruction { source: "temp_lo[0x02..0x03] <- t36 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_lo\\\", Number(U8, 2)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x77), Register(0x8a)], resolved: None }
0b 77 8a 
# t37 <- temp[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_lo\", Number(U8, 3)), var_type: None, value: Index(\"temp\", Number(U8, 1)) }", "Index(\"temp\", Number(U8, 1))", "Index(\"temp\", Number(U8, 1))"] }
# 028e0 Instruction { source: "t37 <- temp[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_lo\\\", Number(U8, 3)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 1)) }\", \"Index(\\\"temp\\\", Number(U8, 1))\", \"Index(\\\"temp\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x4d), Register(0x77)], resolved: None }
0b 4d 77 
# temp_lo[0x03..0x04] <- t37 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_lo\", Number(U8, 3)), var_type: None, value: Index(\"temp\", Number(U8, 1)) }"] }
# 028e3 Instruction { source: "temp_lo[0x03..0x04] <- t37 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_lo\\\", Number(U8, 3)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 1)) }\"] }", opcode: Copy8, args: [Register(0x77), Register(0x8b)], resolved: None }
0b 77 8b 
# t38 <- temp[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_hi\", Number(U8, 0)), var_type: None, value: Index(\"temp\", Number(U8, 2)) }", "Index(\"temp\", Number(U8, 2))", "Index(\"temp\", Number(U8, 2))"] }
# 028e6 Instruction { source: "t38 <- temp[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_hi\\\", Number(U8, 0)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 2)) }\", \"Index(\\\"temp\\\", Number(U8, 2))\", \"Index(\\\"temp\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x4e), Register(0x77)], resolved: None }
0b 4e 77 
# temp_hi[0x00..0x01] <- t38 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_hi\", Number(U8, 0)), var_type: None, value: Index(\"temp\", Number(U8, 2)) }"] }
# 028e9 Instruction { source: "temp_hi[0x00..0x01] <- t38 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_hi\\\", Number(U8, 0)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 2)) }\"] }", opcode: Copy8, args: [Register(0x77), Register(0x84)], resolved: None }
0b 77 84 
# t39 <- temp[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_hi\", Number(U8, 1)), var_type: None, value: Index(\"temp\", Number(U8, 3)) }", "Index(\"temp\", Number(U8, 3))", "Index(\"temp\", Number(U8, 3))"] }
# 028ec Instruction { source: "t39 <- temp[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_hi\\\", Number(U8, 1)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 3)) }\", \"Index(\\\"temp\\\", Number(U8, 3))\", \"Index(\\\"temp\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0x4f), Register(0x77)], resolved: None }
0b 4f 77 
# temp_hi[0x01..0x02] <- t39 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"temp_hi\", Number(U8, 1)), var_type: None, value: Index(\"temp\", Number(U8, 3)) }"] }
# 028ef Instruction { source: "temp_hi[0x01..0x02] <- t39 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"temp_hi\\\", Number(U8, 1)), var_type: None, value: Index(\\\"temp\\\", Number(U8, 3)) }\"] }", opcode: Copy8, args: [Register(0x77), Register(0x85)], resolved: None }
0b 77 85 
# t40 <- __frame_pointer U32
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"temp64\", \"lo\"), var_type: None, value: Ident(\"temp_lo\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident(\"__frame_pointer\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident(\"__frame_pointer\") }", "Ident(\"__frame_pointer\")"] }
# 028f2 Instruction { source: "t40 <- __frame_pointer U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"lo\\\"), var_type: None, value: Ident(\\\"temp_lo\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident(\\\"__frame_pointer\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident(\\\"__frame_pointer\\\") }\", \"Ident(\\\"__frame_pointer\\\")\"] }", opcode: Copy32, args: [Register(0x0c), Register(0x7c)], resolved: None }
21 0c 7c 
# t41 <- temp_lo U32
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"temp64\", \"lo\"), var_type: None, value: Ident(\"temp_lo\") }", "Ident(\"temp_lo\")", "Ident(\"temp_lo\")"] }
# 028f5 Instruction { source: "t41 <- temp_lo U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"lo\\\"), var_type: None, value: Ident(\\\"temp_lo\\\") }\", \"Ident(\\\"temp_lo\\\")\", \"Ident(\\\"temp_lo\\\")\"] }", opcode: Copy32, args: [Register(0x88), Register(0x48)], resolved: None }
21 88 48 
# mem[t40] <- t41 U32
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"temp64\", \"lo\"), var_type: None, value: Ident(\"temp_lo\") }"] }
# 028f8 Instruction { source: "mem[t40] <- t41 U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"lo\\\"), var_type: None, value: Ident(\\\"temp_lo\\\") }\"] }", opcode: Store32_1, args: [Register(0x48), Register(0x7c)], resolved: None }
23 48 7c 
# 028fb Instruction { source: "mem[t40] <- t41 U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"lo\\\"), var_type: None, value: Ident(\\\"temp_lo\\\") }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# t43 <- __frame_pointer U32
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"temp64\", \"hi\"), var_type: None, value: Ident(\"temp_hi\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4))", "Ident(\"__frame_pointer\")", "Ident(\"__frame_pointer\")"] }
# 028fc Instruction { source: "t43 <- __frame_pointer U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"hi\\\"), var_type: None, value: Ident(\\\"temp_hi\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4))\", \"Ident(\\\"__frame_pointer\\\")\", \"Ident(\\\"__frame_pointer\\\")\"] }", opcode: Copy32, args: [Register(0x0c), Register(0x7c)], resolved: None }
21 0c 7c 
# t44 <- 0n4/0x00000004u32 
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"temp64\", \"hi\"), var_type: None, value: Ident(\"temp_hi\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 028ff Instruction { source: "t44 <- 0n4/0x00000004u32 \n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"hi\\\"), var_type: None, value: Ident(\\\"temp_hi\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: LoadImm32, args: [Register(0x48), Constant32(0x00000004=4)], resolved: None }
20 48 04 00 00 00 
# t42 <- t43 Add t44
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"temp64\", \"hi\"), var_type: None, value: Ident(\"temp_hi\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4)) }", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 4))"] }
# 02905 Instruction { source: "t42 <- t43 Add t44\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"hi\\\"), var_type: None, value: Ident(\\\"temp_hi\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 02906 Instruction { source: "t42 <- t43 Add t44\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"hi\\\"), var_type: None, value: Ident(\\\"temp_hi\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x7c), Register(0x48), Register(0x48)], resolved: None }
30 7c 48 48 
# 0290a Instruction { source: "t42 <- t43 Add t44\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"hi\\\"), var_type: None, value: Ident(\\\"temp_hi\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4)) }\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t45 <- temp_hi U32
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"temp64\", \"hi\"), var_type: None, value: Ident(\"temp_hi\") }", "Ident(\"temp_hi\")", "Ident(\"temp_hi\")"] }
# 0290b Instruction { source: "t45 <- temp_hi U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"hi\\\"), var_type: None, value: Ident(\\\"temp_hi\\\") }\", \"Ident(\\\"temp_hi\\\")\", \"Ident(\\\"temp_hi\\\")\"] }", opcode: Copy32, args: [Register(0x84), Register(0x4c)], resolved: None }
21 84 4c 
# mem[t42] <- t45 U32
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"temp64\", \"hi\"), var_type: None, value: Ident(\"temp_hi\") }"] }
# 0290e Instruction { source: "mem[t42] <- t45 U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"hi\\\"), var_type: None, value: Ident(\\\"temp_hi\\\") }\"] }", opcode: Store32_1, args: [Register(0x4c), Register(0x48)], resolved: None }
23 4c 48 
# 02911 Instruction { source: "mem[t42] <- t45 U32\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"temp64\\\", \\\"hi\\\"), var_type: None, value: Ident(\\\"temp_hi\\\") }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# t47 <- c U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# 02912 Instruction { source: "t47 <- c U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x58), Register(0x48)], resolved: None }
21 58 48 
# t50 <- __frame_pointer U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "AddressOf(Ident(\"temp64\"))", "AddressOf(Ident(\"temp64\"))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))", "Ident(\"__frame_pointer\")", "Ident(\"__frame_pointer\")"] }
# 02915 Instruction { source: "t50 <- __frame_pointer U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Ident(\\\"__frame_pointer\\\")\", \"Ident(\\\"__frame_pointer\\\")\"] }", opcode: Copy32, args: [Register(0x0c), Register(0x7c)], resolved: None }
21 0c 7c 
# t51 <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "AddressOf(Ident(\"temp64\"))", "AddressOf(Ident(\"temp64\"))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 02918 Instruction { source: "t51 <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x4c), Constant32(0x00000000=0)], resolved: None }
20 4c 00 00 00 00 
# t49 <- t50 Add t51
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "AddressOf(Ident(\"temp64\"))", "AddressOf(Ident(\"temp64\"))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))", "Arithmetic(Add, Ident(\"__frame_pointer\"), Number(USIZE, 0))"] }
# 0291e Instruction { source: "t49 <- t50 Add t51\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0291f Instruction { source: "t49 <- t50 Add t51\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\"] }", opcode: AddCarry32_1, args: [Register(0x7c), Register(0x4c), Register(0x4c)], resolved: None }
30 7c 4c 4c 
# 02923 Instruction { source: "t49 <- t50 Add t51\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\", \"Arithmetic(Add, Ident(\\\"__frame_pointer\\\"), Number(USIZE, 0))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t48 <- t49 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "AddressOf(Ident(\"temp64\"))", "AddressOf(Ident(\"temp64\"))"] }
# optimized away noop copy Instruction { source: "t48 <- t49 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"AddressOf(Ident(\\\"temp64\\\"))\", \"AddressOf(Ident(\\\"temp64\\\"))\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# t52 <- c U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# 02924 Instruction { source: "t52 <- c U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x58), Register(0x50)], resolved: None }
21 58 50 
# inline_mul32_64_add_U64_1_a <- t47 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_a <- t47 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\"] }", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_mul32_64_add_U64_1_b <- t48 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_b <- t48 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_mul32_64_add_U64_1_c <- t52 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })", "Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_c <- t52 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"add_U64\\\", parameters: [Ident(\\\"c\\\"), AddressOf(Ident(\\\"temp64\\\")), Ident(\\\"c\\\")] })\"] }", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_mul32_64_add_U64_1_t0 <- inline_mul32_64_add_U64_1_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"lo\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\"a\", \"lo\") }", "PtrFieldDeref(\"a\", \"lo\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") } }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t0 <- inline_mul32_64_add_U64_1_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lo\\\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\\\"a\\\", \\\"lo\\\") }\", \"PtrFieldDeref(\\\"a\\\", \\\"lo\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_mul32_64_add_U64_1_lo <- mem[inline_mul32_64_add_U64_1_t0] U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"lo\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\"a\", \"lo\") }", "PtrFieldDeref(\"a\", \"lo\")"] }
# 02927 Instruction { source: "inline_mul32_64_add_U64_1_lo <- mem[inline_mul32_64_add_U64_1_t0] U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lo\\\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\\\"a\\\", \\\"lo\\\") }\", \"PtrFieldDeref(\\\"a\\\", \\\"lo\\\")\"] }", opcode: Load32, args: [Register(0x48), Register(0x54)], resolved: None }
22 48 54 
# inline_mul32_64_add_U64_1_t2 <- inline_mul32_64_add_U64_1_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t2 <- inline_mul32_64_add_U64_1_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_mul32_64_add_U64_1_t3 <- 0n4/0x00000004u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 0292a Instruction { source: "inline_mul32_64_add_U64_1_t3 <- 0n4/0x00000004u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: LoadImm32, args: [Register(0x58), Constant32(0x00000004=4)], resolved: None }
20 58 04 00 00 00 
# inline_mul32_64_add_U64_1_t1 <- inline_mul32_64_add_U64_1_t2 Add inline_mul32_64_add_U64_1_t3
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))"] }
# 02930 Instruction { source: "inline_mul32_64_add_U64_1_t1 <- inline_mul32_64_add_U64_1_t2 Add inline_mul32_64_add_U64_1_t3\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 02931 Instruction { source: "inline_mul32_64_add_U64_1_t1 <- inline_mul32_64_add_U64_1_t2 Add inline_mul32_64_add_U64_1_t3\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x50), Register(0x58), Register(0x58)], resolved: None }
30 50 58 58 
# 02935 Instruction { source: "inline_mul32_64_add_U64_1_t1 <- inline_mul32_64_add_U64_1_t2 Add inline_mul32_64_add_U64_1_t3\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_mul32_64_add_U64_1_t7 <- inline_mul32_64_add_U64_1_a U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "PtrFieldDeref(\"a\", \"hi\")", "PtrFieldDeref(\"a\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4))", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t7 <- inline_mul32_64_add_U64_1_a U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4))\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_mul32_64_add_U64_1_t8 <- 0n4/0x00000004u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "PtrFieldDeref(\"a\", \"hi\")", "PtrFieldDeref(\"a\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 02936 Instruction { source: "inline_mul32_64_add_U64_1_t8 <- 0n4/0x00000004u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: LoadImm32, args: [Register(0x5c), Constant32(0x00000004=4)], resolved: None }
20 5c 04 00 00 00 
# inline_mul32_64_add_U64_1_t6 <- inline_mul32_64_add_U64_1_t7 Add inline_mul32_64_add_U64_1_t8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "PtrFieldDeref(\"a\", \"hi\")", "PtrFieldDeref(\"a\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4))"] }
# 0293c Instruction { source: "inline_mul32_64_add_U64_1_t6 <- inline_mul32_64_add_U64_1_t7 Add inline_mul32_64_add_U64_1_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0293d Instruction { source: "inline_mul32_64_add_U64_1_t6 <- inline_mul32_64_add_U64_1_t7 Add inline_mul32_64_add_U64_1_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x48), Register(0x5c), Register(0x5c)], resolved: None }
30 48 5c 5c 
# 02941 Instruction { source: "inline_mul32_64_add_U64_1_t6 <- inline_mul32_64_add_U64_1_t7 Add inline_mul32_64_add_U64_1_t8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_mul32_64_add_U64_1_t5 <- mem[inline_mul32_64_add_U64_1_t6] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "PtrFieldDeref(\"a\", \"hi\")", "PtrFieldDeref(\"a\", \"hi\")"] }
# 02942 Instruction { source: "inline_mul32_64_add_U64_1_t5 <- mem[inline_mul32_64_add_U64_1_t6] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"a\\\", \\\"hi\\\")\"] }", opcode: Load32, args: [Register(0x5c), Register(0x60)], resolved: None }
22 5c 60 
# inline_mul32_64_add_U64_1_t11 <- inline_mul32_64_add_U64_1_b U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "PtrFieldDeref(\"b\", \"hi\")", "PtrFieldDeref(\"b\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4))", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t11 <- inline_mul32_64_add_U64_1_b U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4))\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_mul32_64_add_U64_1_t12 <- 0n4/0x00000004u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "PtrFieldDeref(\"b\", \"hi\")", "PtrFieldDeref(\"b\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 02945 Instruction { source: "inline_mul32_64_add_U64_1_t12 <- 0n4/0x00000004u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: LoadImm32, args: [Register(0x5c), Constant32(0x00000004=4)], resolved: None }
20 5c 04 00 00 00 
# inline_mul32_64_add_U64_1_t10 <- inline_mul32_64_add_U64_1_t11 Add inline_mul32_64_add_U64_1_t12
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "PtrFieldDeref(\"b\", \"hi\")", "PtrFieldDeref(\"b\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4))"] }
# 0294b Instruction { source: "inline_mul32_64_add_U64_1_t10 <- inline_mul32_64_add_U64_1_t11 Add inline_mul32_64_add_U64_1_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 0294c Instruction { source: "inline_mul32_64_add_U64_1_t10 <- inline_mul32_64_add_U64_1_t11 Add inline_mul32_64_add_U64_1_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x4c), Register(0x5c), Register(0x5c)], resolved: None }
30 4c 5c 5c 
# 02950 Instruction { source: "inline_mul32_64_add_U64_1_t10 <- inline_mul32_64_add_U64_1_t11 Add inline_mul32_64_add_U64_1_t12\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_mul32_64_add_U64_1_t9 <- mem[inline_mul32_64_add_U64_1_t10] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "PtrFieldDeref(\"b\", \"hi\")", "PtrFieldDeref(\"b\", \"hi\")"] }
# 02951 Instruction { source: "inline_mul32_64_add_U64_1_t9 <- mem[inline_mul32_64_add_U64_1_t10] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"b\\\", \\\"hi\\\")\"] }", opcode: Load32, args: [Register(0x5c), Register(0x5c)], resolved: None }
22 5c 5c 
# inline_mul32_64_add_U64_1_t4 <- inline_mul32_64_add_U64_1_t5 Add inline_mul32_64_add_U64_1_t9
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))"] }
# 02954 Instruction { source: "inline_mul32_64_add_U64_1_t4 <- inline_mul32_64_add_U64_1_t5 Add inline_mul32_64_add_U64_1_t9\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 02955 Instruction { source: "inline_mul32_64_add_U64_1_t4 <- inline_mul32_64_add_U64_1_t5 Add inline_mul32_64_add_U64_1_t9\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x60), Register(0x5c), Register(0x5c)], resolved: None }
30 60 5c 5c 
# 02959 Instruction { source: "inline_mul32_64_add_U64_1_t4 <- inline_mul32_64_add_U64_1_t5 Add inline_mul32_64_add_U64_1_t9\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# mem[inline_mul32_64_add_U64_1_t1] <- inline_mul32_64_add_U64_1_t4 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }"] }
# 0295a Instruction { source: "mem[inline_mul32_64_add_U64_1_t1] <- inline_mul32_64_add_U64_1_t4 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\"] }", opcode: Store32_1, args: [Register(0x5c), Register(0x58)], resolved: None }
23 5c 58 
# 0295d Instruction { source: "mem[inline_mul32_64_add_U64_1_t1] <- inline_mul32_64_add_U64_1_t4 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"hi\\\"), PtrFieldDeref(\\\"b\\\", \\\"hi\\\")) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_mul32_64_add_U64_1_t13 <- inline_mul32_64_add_U64_1_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t13 <- inline_mul32_64_add_U64_1_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_mul32_64_add_U64_1_t16 <- inline_mul32_64_add_U64_1_a U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "PtrFieldDeref(\"a\", \"lo\")", "PtrFieldDeref(\"a\", \"lo\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") } }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t16 <- inline_mul32_64_add_U64_1_a U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"PtrFieldDeref(\\\"a\\\", \\\"lo\\\")\", \"PtrFieldDeref(\\\"a\\\", \\\"lo\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"a\\\") }\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_mul32_64_add_U64_1_t15 <- mem[inline_mul32_64_add_U64_1_t16] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "PtrFieldDeref(\"a\", \"lo\")", "PtrFieldDeref(\"a\", \"lo\")"] }
# 0295e Instruction { source: "inline_mul32_64_add_U64_1_t15 <- mem[inline_mul32_64_add_U64_1_t16] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"PtrFieldDeref(\\\"a\\\", \\\"lo\\\")\", \"PtrFieldDeref(\\\"a\\\", \\\"lo\\\")\"] }", opcode: Load32, args: [Register(0x48), Register(0x48)], resolved: None }
22 48 48 
# inline_mul32_64_add_U64_1_t18 <- inline_mul32_64_add_U64_1_b U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "PtrFieldDeref(\"b\", \"lo\")", "PtrFieldDeref(\"b\", \"lo\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") } }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t18 <- inline_mul32_64_add_U64_1_b U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"PtrFieldDeref(\\\"b\\\", \\\"lo\\\")\", \"PtrFieldDeref(\\\"b\\\", \\\"lo\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"b\\\") }\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_mul32_64_add_U64_1_t17 <- mem[inline_mul32_64_add_U64_1_t18] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "PtrFieldDeref(\"b\", \"lo\")", "PtrFieldDeref(\"b\", \"lo\")"] }
# 02961 Instruction { source: "inline_mul32_64_add_U64_1_t17 <- mem[inline_mul32_64_add_U64_1_t18] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"PtrFieldDeref(\\\"b\\\", \\\"lo\\\")\", \"PtrFieldDeref(\\\"b\\\", \\\"lo\\\")\"] }", opcode: Load32, args: [Register(0x4c), Register(0x4c)], resolved: None }
22 4c 4c 
# inline_mul32_64_add_U64_1_t14 <- inline_mul32_64_add_U64_1_t15 Add inline_mul32_64_add_U64_1_t17
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))", "Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))"] }
# 02964 Instruction { source: "inline_mul32_64_add_U64_1_t14 <- inline_mul32_64_add_U64_1_t15 Add inline_mul32_64_add_U64_1_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 02965 Instruction { source: "inline_mul32_64_add_U64_1_t14 <- inline_mul32_64_add_U64_1_t15 Add inline_mul32_64_add_U64_1_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x48), Register(0x4c), Register(0x48)], resolved: None }
30 48 4c 48 
# 02969 Instruction { source: "inline_mul32_64_add_U64_1_t14 <- inline_mul32_64_add_U64_1_t15 Add inline_mul32_64_add_U64_1_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\", \"Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# mem[inline_mul32_64_add_U64_1_t13] <- inline_mul32_64_add_U64_1_t14 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }"] }
# 0296a Instruction { source: "mem[inline_mul32_64_add_U64_1_t13] <- inline_mul32_64_add_U64_1_t14 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\"] }", opcode: Store32_1, args: [Register(0x48), Register(0x50)], resolved: None }
23 48 50 
# 0296d Instruction { source: "mem[inline_mul32_64_add_U64_1_t13] <- inline_mul32_64_add_U64_1_t14 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"a\\\", \\\"lo\\\"), PtrFieldDeref(\\\"b\\\", \\\"lo\\\")) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# inline_mul32_64_add_U64_1_t20 <- inline_mul32_64_add_U64_1_c U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }])], else_block: [] }", "Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }", "PtrFieldDeref(\"c\", \"lo\")", "PtrFieldDeref(\"c\", \"lo\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") } }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# 0296e Instruction { source: "inline_mul32_64_add_U64_1_t20 <- inline_mul32_64_add_U64_1_c U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\", \"PtrFieldDeref(\\\"c\\\", \\\"lo\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"lo\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x50), Register(0x48)], resolved: None }
21 50 48 
# inline_mul32_64_add_U64_1_t19 <- mem[inline_mul32_64_add_U64_1_t20] U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }])], else_block: [] }", "Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }", "PtrFieldDeref(\"c\", \"lo\")", "PtrFieldDeref(\"c\", \"lo\")"] }
# 02971 Instruction { source: "inline_mul32_64_add_U64_1_t19 <- mem[inline_mul32_64_add_U64_1_t20] U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\", \"PtrFieldDeref(\\\"c\\\", \\\"lo\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"lo\\\")\"] }", opcode: Load32, args: [Register(0x48), Register(0x48)], resolved: None }
22 48 48 
# inline_mul32_64_add_U64_1_t21 <- inline_mul32_64_add_U64_1_lo U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }])], else_block: [] }", "Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }", "Ident(\"lo\")", "Ident(\"lo\")"] }
# 02974 Instruction { source: "inline_mul32_64_add_U64_1_t21 <- inline_mul32_64_add_U64_1_lo U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\", \"Ident(\\\"lo\\\")\", \"Ident(\\\"lo\\\")\"] }", opcode: Copy32, args: [Register(0x54), Register(0x4c)], resolved: None }
21 54 4c 
# if inline_mul32_64_add_U64_1_t19 < inline_mul32_64_add_U64_1_t21 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }])], else_block: [] }", "Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }"] }
# 02977 Instruction { source: "if inline_mul32_64_add_U64_1_t19 < inline_mul32_64_add_U64_1_t21 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\"] }", opcode: Cmp8, args: [Register(0x4f), Register(0x4b)], resolved: None }
15 4f 4b 
# 0297a Instruction { source: "if inline_mul32_64_add_U64_1_t19 < inline_mul32_64_add_U64_1_t21 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x4e), Register(0x4a)], resolved: None }
16 4e 4a 
# 0297d Instruction { source: "if inline_mul32_64_add_U64_1_t19 < inline_mul32_64_add_U64_1_t21 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x4d), Register(0x49)], resolved: None }
16 4d 49 
# 02980 Instruction { source: "if inline_mul32_64_add_U64_1_t19 < inline_mul32_64_add_U64_1_t21 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\"] }", opcode: Cmp8IfZero, args: [Register(0x4c), Register(0x48)], resolved: None }
16 4c 48 
# 02983 Instruction { source: "if inline_mul32_64_add_U64_1_t19 < inline_mul32_64_add_U64_1_t21 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\"] }", opcode: JcImm, args: [Label24(inline_mul32_64_add_U64_1_add_U64_if_else_0_2)], resolved: None }
71 bc 29 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_mul32_64_add_U64_1_t19 < inline_mul32_64_add_U64_1_t21 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }, [Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }])], else_block: [] }\", \"Comparison { op: LessThan, left: PtrFieldDeref(\\\"c\\\", \\\"lo\\\"), right: Ident(\\\"lo\\\") }\"] }", opcode: JmpImm, args: [Label24(inline_mul32_64_add_U64_1_add_U64_if_true_0_1)], resolved: None }
# :inline_mul32_64_add_U64_1_add_U64_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }])], else_block: [] }"] }
# inline_mul32_64_add_U64_1_add_U64_if_true_0_1
# inline_mul32_64_add_U64_1_t23 <- inline_mul32_64_add_U64_1_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# 02987 Instruction { source: "inline_mul32_64_add_U64_1_t23 <- inline_mul32_64_add_U64_1_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x50), Register(0x48)], resolved: None }
21 50 48 
# inline_mul32_64_add_U64_1_t24 <- 0n4/0x00000004u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 0298a Instruction { source: "inline_mul32_64_add_U64_1_t24 <- 0n4/0x00000004u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: LoadImm32, args: [Register(0x4c), Constant32(0x00000004=4)], resolved: None }
20 4c 04 00 00 00 
# inline_mul32_64_add_U64_1_t22 <- inline_mul32_64_add_U64_1_t23 Add inline_mul32_64_add_U64_1_t24
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))"] }
# 02990 Instruction { source: "inline_mul32_64_add_U64_1_t22 <- inline_mul32_64_add_U64_1_t23 Add inline_mul32_64_add_U64_1_t24\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 02991 Instruction { source: "inline_mul32_64_add_U64_1_t22 <- inline_mul32_64_add_U64_1_t23 Add inline_mul32_64_add_U64_1_t24\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x48), Register(0x4c), Register(0x48)], resolved: None }
30 48 4c 48 
# 02995 Instruction { source: "inline_mul32_64_add_U64_1_t22 <- inline_mul32_64_add_U64_1_t23 Add inline_mul32_64_add_U64_1_t24\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_mul32_64_add_U64_1_t28 <- inline_mul32_64_add_U64_1_c U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "PtrFieldDeref(\"c\", \"hi\")", "PtrFieldDeref(\"c\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }", "Ident(\"c\")"] }
# 02996 Instruction { source: "inline_mul32_64_add_U64_1_t28 <- inline_mul32_64_add_U64_1_c U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy32, args: [Register(0x50), Register(0x4c)], resolved: None }
21 50 4c 
# inline_mul32_64_add_U64_1_t29 <- 0n4/0x00000004u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "PtrFieldDeref(\"c\", \"hi\")", "PtrFieldDeref(\"c\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 02999 Instruction { source: "inline_mul32_64_add_U64_1_t29 <- 0n4/0x00000004u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: LoadImm32, args: [Register(0x50), Constant32(0x00000004=4)], resolved: None }
20 50 04 00 00 00 
# inline_mul32_64_add_U64_1_t27 <- inline_mul32_64_add_U64_1_t28 Add inline_mul32_64_add_U64_1_t29
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "PtrFieldDeref(\"c\", \"hi\")", "PtrFieldDeref(\"c\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))"] }
# 0299f Instruction { source: "inline_mul32_64_add_U64_1_t27 <- inline_mul32_64_add_U64_1_t28 Add inline_mul32_64_add_U64_1_t29\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 029a0 Instruction { source: "inline_mul32_64_add_U64_1_t27 <- inline_mul32_64_add_U64_1_t28 Add inline_mul32_64_add_U64_1_t29\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x4c), Register(0x50), Register(0x4c)], resolved: None }
30 4c 50 4c 
# 029a4 Instruction { source: "inline_mul32_64_add_U64_1_t27 <- inline_mul32_64_add_U64_1_t28 Add inline_mul32_64_add_U64_1_t29\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"U64\\\"))), new_type: Number(USIZE), value: Ident(\\\"c\\\") }, Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_mul32_64_add_U64_1_t26 <- mem[inline_mul32_64_add_U64_1_t27] U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "PtrFieldDeref(\"c\", \"hi\")", "PtrFieldDeref(\"c\", \"hi\")"] }
# 029a5 Instruction { source: "inline_mul32_64_add_U64_1_t26 <- mem[inline_mul32_64_add_U64_1_t27] U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\", \"PtrFieldDeref(\\\"c\\\", \\\"hi\\\")\"] }", opcode: Load32, args: [Register(0x4c), Register(0x4c)], resolved: None }
22 4c 4c 
# inline_mul32_64_add_U64_1_t30 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 029a8 Instruction { source: "inline_mul32_64_add_U64_1_t30 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x50), Constant32(0x00000001=1)], resolved: None }
20 50 01 00 00 00 
# inline_mul32_64_add_U64_1_t25 <- inline_mul32_64_add_U64_1_t26 Add inline_mul32_64_add_U64_1_t30
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))", "Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))"] }
# 029ae Instruction { source: "inline_mul32_64_add_U64_1_t25 <- inline_mul32_64_add_U64_1_t26 Add inline_mul32_64_add_U64_1_t30\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 029af Instruction { source: "inline_mul32_64_add_U64_1_t25 <- inline_mul32_64_add_U64_1_t26 Add inline_mul32_64_add_U64_1_t30\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x4c), Register(0x50), Register(0x4c)], resolved: None }
30 4c 50 4c 
# 029b3 Instruction { source: "inline_mul32_64_add_U64_1_t25 <- inline_mul32_64_add_U64_1_t26 Add inline_mul32_64_add_U64_1_t30\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# mem[inline_mul32_64_add_U64_1_t22] <- inline_mul32_64_add_U64_1_t25 U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }"] }
# 029b4 Instruction { source: "mem[inline_mul32_64_add_U64_1_t22] <- inline_mul32_64_add_U64_1_t25 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\"] }", opcode: Store32_1, args: [Register(0x4c), Register(0x48)], resolved: None }
23 4c 48 
# 029b7 Instruction { source: "mem[inline_mul32_64_add_U64_1_t22] <- inline_mul32_64_add_U64_1_t25 U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"c\\\", \\\"hi\\\"), Number(USIZE, 1)) }\"] }", opcode: Store32_2, args: [], resolved: None }
24 
# goto inline_mul32_64_add_U64_1_add_U64_if_end_0
# 	SourceContext { contexts: [] }
# 029b8 Instruction { source: "goto inline_mul32_64_add_U64_1_add_U64_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_mul32_64_add_U64_1_add_U64_if_end_0)], resolved: None }
70 bc 29 00 
# :inline_mul32_64_add_U64_1_add_U64_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_mul32_64_add_U64_1_add_U64_if_else_0_2
# :inline_mul32_64_add_U64_1_add_U64_if_end_0
# 	SourceContext { contexts: [] }
# inline_mul32_64_add_U64_1_add_U64_if_end_0
# goto inline_mul32_64_add_U64_1_function_end_add_U64
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_mul32_64_add_U64_1_function_end_add_U64\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_mul32_64_add_U64_1_function_end_add_U64)], resolved: None }
# :inline_mul32_64_add_U64_1_function_end_add_U64
# 	SourceContext { contexts: [] }
# inline_mul32_64_add_U64_1_function_end_add_U64
# t53 <- 0n8/0x00000008u32 
# 	SourceContext { contexts: ["Return { value: None }"] }
# 029bc Instruction { source: "t53 <- 0n8/0x00000008u32 \n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: LoadImm32, args: [Register(0x48), Constant32(0x00000008=8)], resolved: None }
20 48 08 00 00 00 
# __frame_pointer <- __frame_pointer Add t53
# 	SourceContext { contexts: ["Return { value: None }"] }
# 029c2 Instruction { source: "__frame_pointer <- __frame_pointer Add t53\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 029c3 Instruction { source: "__frame_pointer <- __frame_pointer Add t53\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: AddCarry32_1, args: [Register(0x0c), Register(0x48), Register(0x0c)], resolved: None }
30 0c 48 0c 
# 029c7 Instruction { source: "__frame_pointer <- __frame_pointer Add t53\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# return None
# 	SourceContext { contexts: ["Return { value: None }"] }
# 029c8 Instruction { source: "Dealloc 8 bytes from stack", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000008=8)], resolved: None }
32 0c 08 00 00 00 
# 029ce Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# :function_end_mul32_64
# 	SourceContext { contexts: [] }
# function_end_mul32_64
# Unreachable
# 	SourceContext { contexts: [] }
# 029d0 Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
# :print_dec32
# Ret None
# Arg0=a
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var a (Arg0 a Number(USIZE)) Reg(U32) Some([140, 141, 142, 143])
# Var b (Local b Number(USIZE) Reg(U32)) Reg(U32) Some([144, 145, 146, 147])
# Var inline_print_dec32_div32_by10_49_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_print_dec32_div32_by10_49_a (Arg0 a Number(USIZE)) Reg(U32) Some([144, 145, 146, 147])
# Var inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_a (Arg0 a Number(USIZE)) Reg(U32) Some([144, 145, 146, 147])
# Var inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t0 (t0 Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 3))) Reg(U8) Some([148])
# Var inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t1 (t1 Index("a", Number(U8, 0))) Reg(U8) Some([149])
# Var inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t10 (t10 Index("a", Number(U8, 3))) Reg(U8) Some([149])
# Var inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t11 (t11 Number(U8, 3)) Reg(U8) Some([148])
# Var inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t12 (t12 Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 31))) Reg(U8) Some([148])
# Var inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t13 (t13 Index("a", Number(U8, 0))) Reg(U8) Some([149])
# Var inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t14 (t14 Number(U8, 31)) Reg(U8) Some([148])
# Var inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t15 (t15 Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224)))) Reg(U8) Some([148])
# Var inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t16 (t16 Index("a", Number(U8, 0))) Reg(U8) Some([149])
# Var inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t17 (t17 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))) Reg(U8) Some([148])
# Var inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t18 (t18 Index("a", Number(U8, 1))) Reg(U8) Some([148])
# Var inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t19 (t19 Number(U8, 224)) Reg(U8) Some([150])
# Var inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t2 (t2 Number(U8, 3)) Reg(U8) Some([148])
# Var inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t20 (t20 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 31))) Reg(U8) Some([148])
# Var inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t21 (t21 Index("a", Number(U8, 1))) Reg(U8) Some([149])
# Var inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t22 (t22 Number(U8, 31)) Reg(U8) Some([148])
# Var inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t23 (t23 Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224)))) Reg(U8) Some([148])
# Var inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t24 (t24 Index("a", Number(U8, 1))) Reg(U8) Some([149])
# Var inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t25 (t25 Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))) Reg(U8) Some([148])
# Var inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t26 (t26 Index("a", Number(U8, 2))) Reg(U8) Some([148])
# Var inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t27 (t27 Number(U8, 224)) Reg(U8) Some([150])
# Var inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t28 (t28 Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 31))) Reg(U8) Some([148])
# Var inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t29 (t29 Index("a", Number(U8, 2))) Reg(U8) Some([149])
# Var inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t3 (t3 Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 3))) Reg(U8) Some([148])
# Var inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t30 (t30 Number(U8, 31)) Reg(U8) Some([148])
# Var inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t31 (t31 Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224)))) Reg(U8) Some([148])
# Var inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t32 (t32 Index("a", Number(U8, 2))) Reg(U8) Some([149])
# Var inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t33 (t33 Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))) Reg(U8) Some([148])
# Var inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t34 (t34 Index("a", Number(U8, 3))) Reg(U8) Some([148])
# Var inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t35 (t35 Number(U8, 224)) Reg(U8) Some([150])
# Var inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t36 (t36 Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 31))) Reg(U8) Some([148])
# Var inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t37 (t37 Index("a", Number(U8, 3))) Reg(U8) Some([149])
# Var inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t38 (t38 Number(U8, 31)) Reg(U8) Some([148])
# Var inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t39 (t39 Ident("a")) Reg(U32) Some([144, 145, 146, 147])
# Var inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t4 (t4 Index("a", Number(U8, 1))) Reg(U8) Some([149])
# Var inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t5 (t5 Number(U8, 3)) Reg(U8) Some([148])
# Var inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t6 (t6 Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 3))) Reg(U8) Some([148])
# Var inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t7 (t7 Index("a", Number(U8, 2))) Reg(U8) Some([149])
# Var inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t8 (t8 Number(U8, 3)) Reg(U8) Some([148])
# Var inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t9 (t9 Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 3))) Reg(U8) Some([148])
# Var inline_print_dec32_div32_by10_49_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_print_dec32_div32_by10_49_prod (Local prod Struct("U64") Static(987492)) Static(987492) None
# Var inline_print_dec32_div32_by10_49_t0 (t0 Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] })) Reg(U8) Some([151])
# Var inline_print_dec32_div32_by10_49_t1 (t1 Ident("a")) Reg(U32) Some([144, 145, 146, 147])
# Var inline_print_dec32_div32_by10_49_t2 (t2 Number(USIZE, 3435973837)) Reg(U32) Some([152, 153, 154, 155])
# Var inline_print_dec32_div32_by10_49_t3 (t3 AddressOf(Ident("prod"))) Reg(U32) Some([156, 157, 158, 159])
# Var inline_print_dec32_div32_by10_49_t4 (static "prod") Reg(U32) Some([156, 157, 158, 159])
# Var inline_print_dec32_div32_by10_49_t5 (t5 Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) Reg(U32) Some([144, 145, 146, 147])
# Var inline_print_dec32_div32_by10_49_t6 (t6 LocalFieldDeref("prod", "hi")) Reg(U32) Some([144, 145, 146, 147])
# Var inline_print_dec32_div32_by10_49_t7 (t7 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987492), Number(USIZE, 4)) }) Reg(U32) Some([144, 145, 146, 147])
# Var inline_print_dec32_div32_by10_49_t8 (t8 Number(USIZE, 987492)) Reg(U32) Some([144, 145, 146, 147])
# Var inline_print_dec32_div32_by10_49_t9 (t9 Number(USIZE, 4)) Reg(U32) Some([152, 153, 154, 155])
# Var inline_print_dec32_mul32_by10_16_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_print_dec32_mul32_by10_16_a (Arg0 a Number(USIZE)) Reg(U32) Some([140, 141, 142, 143])
# Var inline_print_dec32_mul32_by10_16_b (Local b Number(USIZE) Reg(U32)) Reg(U32) Some([144, 145, 146, 147])
# Var inline_print_dec32_mul32_by10_16_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_print_dec32_mul32_by10_16_t0 (t0 Ident("a")) Reg(U32) Some([140, 141, 142, 143])
# Var inline_print_dec32_mul32_by10_16_t1 (t1 Ident("a")) Reg(U32) Some([144, 145, 146, 147])
# Var inline_print_dec32_mul32_by10_16_t2 (t2 Ident("a")) Reg(U32) Some([140, 141, 142, 143])
# Var inline_print_dec32_mul32_by10_16_t3 (t3 Ident("a")) Reg(U32) Some([144, 145, 146, 147])
# Var inline_print_dec32_mul32_by10_16_t4 (t4 Ident("b")) Reg(U32) Some([144, 145, 146, 147])
# Var inline_print_dec32_mul32_by10_16_t5 (t5 Ident("b")) Reg(U32) Some([152, 153, 154, 155])
# Var inline_print_dec32_mul32_by10_16_t6 (t6 Arithmetic(Add, Ident("b"), Ident("a"))) Reg(U32) Some([140, 141, 142, 143])
# Var inline_print_dec32_mul32_by10_16_t7 (t7 Ident("b")) Reg(U32) Some([144, 145, 146, 147])
# Var inline_print_dec32_mul32_by10_16_t8 (t8 Ident("a")) Reg(U32) Some([140, 141, 142, 143])
# Var inline_print_dec32_putc_31_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_print_dec32_putc_31_c (Arg0 c Number(U8)) Reg(U8) Some([151])
# Var inline_print_dec32_putc_31_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_print_dec32_putc_31_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([151])
# Var inline_print_dec32_putc_31_t1 (t1 Ident("c")) Reg(U8) Some([151])
# Var inline_print_dec32_putc_31_t2 (t2 Call(Call { function: "lcd_write_char", parameters: [Ident("c")] })) Reg(U8) Some([151])
# Var inline_print_dec32_putc_31_t3 (t3 Ident("c")) Reg(U8) Some([151])
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var t0 (t0 Ident("a")) Reg(U32) Some([140, 141, 142, 143])
# Var t1 (t1 Number(USIZE, 256)) Reg(U32) Some([144, 145, 146, 147])
# Var t10 (t10 Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))] })) Reg(U8) Some([151])
# Var t11 (t11 Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))) Reg(U8) Some([151])
# Var t12 (t12 Index("a", Number(U8, 0))) Reg(U8) Some([151])
# Var t13 (t13 Number(U8, 48)) Reg(U8) Some([149])
# Var t2 (t2 Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] })) Reg(U8) Some([151])
# Var t3 (t3 Index("a", Number(U8, 0))) Reg(U8) Some([151])
# Var t4 (t4 Ident("a")) Reg(U32) Some([140, 141, 142, 143])
# Var t5 (t5 Call(Call { function: "print_dec32", parameters: [Ident("b")] })) Reg(U8) Some([151])
# Var t6 (t6 Ident("b")) Reg(U32) Some([144, 145, 146, 147])
# Var t7 (t7 Ident("a")) Reg(U32) Some([156, 157, 158, 159])
# Var t8 (t8 Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) Reg(U32) Some([140, 141, 142, 143])
# Var t9 (t9 Ident("b")) Reg(U32) Some([140, 141, 142, 143])
# 029d5 Instruction { source: "Save function parameter 'a' registers [0, 1, 2, 3] to locals [140, 141, 142, 143].", opcode: Copy32, args: [Register(0x00), Register(0x8c)], resolved: None }
21 00 8c 
# t0 <- a U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Index(\"a\", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t0 <- a U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x8c), Register(0x8c)], resolved: None }
# t1 <- 0n256/0x00000100u32 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Index(\"a\", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }", "Number(USIZE, 256)", "Number(USIZE, 256)"] }
# 029d8 Instruction { source: "t1 <- 0n256/0x00000100u32 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\", \"Number(USIZE, 256)\", \"Number(USIZE, 256)\"] }", opcode: LoadImm32, args: [Register(0x90), Constant32(0x00000100=256)], resolved: None }
20 90 00 01 00 00 
# if t0 < t1 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Index(\"a\", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }", "Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }"] }
# 029de Instruction { source: "if t0 < t1 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\"] }", opcode: Cmp8, args: [Register(0x93), Register(0x8f)], resolved: None }
15 93 8f 
# 029e1 Instruction { source: "if t0 < t1 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\"] }", opcode: Cmp8IfZero, args: [Register(0x92), Register(0x8e)], resolved: None }
16 92 8e 
# 029e4 Instruction { source: "if t0 < t1 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\"] }", opcode: Cmp8IfZero, args: [Register(0x91), Register(0x8d)], resolved: None }
16 91 8d 
# 029e7 Instruction { source: "if t0 < t1 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\"] }", opcode: Cmp8IfZero, args: [Register(0x90), Register(0x8c)], resolved: None }
16 90 8c 
# 029ea Instruction { source: "if t0 < t1 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\"] }", opcode: JcImm, args: [Label24(print_dec32_if_else_0_2)], resolved: None }
71 30 2a 00 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t0 < t1 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }\", \"Comparison { op: LessThan, left: Ident(\\\"a\\\"), right: Number(USIZE, 256) }\"] }", opcode: JmpImm, args: [Label24(print_dec32_if_true_0_1)], resolved: None }
# :print_dec32_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Index(\"a\", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }"] }
# print_dec32_if_true_0_1
# t3 <- a[0x00..0x01] U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Index(\"a\", Number(U8, 0))] }) }", "Call(Call { function: \"print_dec8\", parameters: [Index(\"a\", Number(U8, 0))] })", "Call(Call { function: \"print_dec8\", parameters: [Index(\"a\", Number(U8, 0))] })", "Index(\"a\", Number(U8, 0))", "Index(\"a\", Number(U8, 0))"] }
# 029ee Instruction { source: "t3 <- a[0x00..0x01] U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\", \"Index(\\\"a\\\", Number(U8, 0))\", \"Index(\\\"a\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x8c), Register(0x97)], resolved: None }
0b 8c 97 
# None <= call print_dec8(t3,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Index(\"a\", Number(U8, 0))] }) }", "Call(Call { function: \"print_dec8\", parameters: [Index(\"a\", Number(U8, 0))] })", "Call(Call { function: \"print_dec8\", parameters: [Index(\"a\", Number(U8, 0))] })"] }
# 029f1 Instruction { source: "Arg0[a]=t3 None <= call print_dec8(t3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\"] }", opcode: Copy8, args: [Register(0x97), Register(0x00)], resolved: None }
0b 97 00 
# Registers used by this function: {140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 216, 217, 233, 234, 235, 236, 240, 241, 242, 243, 244, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: [152, 153, 154, 155, 156, 157, 158, 159]
# 029f4 Instruction { source: "Saving reg0x9f before None <= call print_dec8(t3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\"] }", opcode: Push8, args: [Register(0x9f)], resolved: None }
09 9f 
# 029f6 Instruction { source: "Saving reg0x9e before None <= call print_dec8(t3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\"] }", opcode: Push8, args: [Register(0x9e)], resolved: None }
09 9e 
# 029f8 Instruction { source: "Saving reg0x9d before None <= call print_dec8(t3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\"] }", opcode: Push8, args: [Register(0x9d)], resolved: None }
09 9d 
# 029fa Instruction { source: "Saving reg0x9c before None <= call print_dec8(t3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\"] }", opcode: Push8, args: [Register(0x9c)], resolved: None }
09 9c 
# 029fc Instruction { source: "Saving reg0x9b before None <= call print_dec8(t3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\"] }", opcode: Push8, args: [Register(0x9b)], resolved: None }
09 9b 
# 029fe Instruction { source: "Saving reg0x9a before None <= call print_dec8(t3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\"] }", opcode: Push8, args: [Register(0x9a)], resolved: None }
09 9a 
# 02a00 Instruction { source: "Saving reg0x99 before None <= call print_dec8(t3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\"] }", opcode: Push8, args: [Register(0x99)], resolved: None }
09 99 
# 02a02 Instruction { source: "Saving reg0x98 before None <= call print_dec8(t3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\"] }", opcode: Push8, args: [Register(0x98)], resolved: None }
09 98 
# 02a04 Instruction { source: "PseudoCall(Label24(:print_dec8))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 02a0a Instruction { source: "PseudoCall(Label24(:print_dec8))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 14 2a 00 00 
# 02a10 Instruction { source: "PseudoCall(Label24(:print_dec8))", opcode: JmpImm, args: [Label24(:print_dec8)], resolved: None }
70 0e 2c 00 
# 02a14 Instruction { source: "PseudoCall(Label24(:print_dec8))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 02a1a Instruction { source: "Restoring reg0x98 after None <= call print_dec8(t3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\"] }", opcode: Pop8, args: [Register(0x98)], resolved: None }
0a 98 
# 02a1c Instruction { source: "Restoring reg0x99 after None <= call print_dec8(t3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\"] }", opcode: Pop8, args: [Register(0x99)], resolved: None }
0a 99 
# 02a1e Instruction { source: "Restoring reg0x9a after None <= call print_dec8(t3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\"] }", opcode: Pop8, args: [Register(0x9a)], resolved: None }
0a 9a 
# 02a20 Instruction { source: "Restoring reg0x9b after None <= call print_dec8(t3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\"] }", opcode: Pop8, args: [Register(0x9b)], resolved: None }
0a 9b 
# 02a22 Instruction { source: "Restoring reg0x9c after None <= call print_dec8(t3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\"] }", opcode: Pop8, args: [Register(0x9c)], resolved: None }
0a 9c 
# 02a24 Instruction { source: "Restoring reg0x9d after None <= call print_dec8(t3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\"] }", opcode: Pop8, args: [Register(0x9d)], resolved: None }
0a 9d 
# 02a26 Instruction { source: "Restoring reg0x9e after None <= call print_dec8(t3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\"] }", opcode: Pop8, args: [Register(0x9e)], resolved: None }
0a 9e 
# 02a28 Instruction { source: "Restoring reg0x9f after None <= call print_dec8(t3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Index(\\\"a\\\", Number(U8, 0))] })\"] }", opcode: Pop8, args: [Register(0x9f)], resolved: None }
0a 9f 
# return None
# 	SourceContext { contexts: ["Return { value: None }"] }
# 02a2a Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# goto print_dec32_if_end_0
# 	SourceContext { contexts: [] }
# 02a2c Instruction { source: "goto print_dec32_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(print_dec32_if_end_0)], resolved: None }
70 30 2a 00 
# :print_dec32_if_else_0_2
# 	SourceContext { contexts: [] }
# print_dec32_if_else_0_2
# :print_dec32_if_end_0
# 	SourceContext { contexts: [] }
# print_dec32_if_end_0
# t4 <- a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"div32_by10\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"div32_by10\", parameters: [Ident(\"a\")] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t4 <- a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32_by10\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32_by10\\\", parameters: [Ident(\\\"a\\\")] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x8c), Register(0x8c)], resolved: None }
# inline_print_dec32_div32_by10_49_a <- t4 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"div32_by10\", parameters: [Ident(\"a\")] }) }", "Call(Call { function: \"div32_by10\", parameters: [Ident(\"a\")] })"] }
# 02a30 Instruction { source: "inline_print_dec32_div32_by10_49_a <- t4 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \\\"div32_by10\\\", parameters: [Ident(\\\"a\\\")] }) }\", \"Call(Call { function: \\\"div32_by10\\\", parameters: [Ident(\\\"a\\\")] })\"] }", opcode: Copy32, args: [Register(0x8c), Register(0x90)], resolved: None }
21 8c 90 
# inline_print_dec32_div32_by10_49_t1 <- inline_print_dec32_div32_by10_49_a U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] }) }", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] })", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] })", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_print_dec32_div32_by10_49_t1 <- inline_print_dec32_div32_by10_49_a U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] })\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_print_dec32_div32_by10_49_t2 <- 0xcccccccdu32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] }) }", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] })", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] })", "Number(USIZE, 3435973837)", "Number(USIZE, 3435973837)"] }
# 02a33 Instruction { source: "inline_print_dec32_div32_by10_49_t2 <- 0xcccccccdu32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] })\", \"Number(USIZE, 3435973837)\", \"Number(USIZE, 3435973837)\"] }", opcode: LoadImm32, args: [Register(0x98), Constant32(0xcccccccd=3435973837)], resolved: None }
20 98 cd cc cc cc 
# inline_print_dec32_div32_by10_49_t4 <- 0n987492/0x000f1164u32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] }) }", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] })", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] })", "AddressOf(Ident(\"prod\"))", "AddressOf(Ident(\"prod\"))"] }
# 02a39 Instruction { source: "inline_print_dec32_div32_by10_49_t4 <- 0n987492/0x000f1164u32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] })\", \"AddressOf(Ident(\\\"prod\\\"))\", \"AddressOf(Ident(\\\"prod\\\"))\"] }", opcode: LoadImm32, args: [Register(0x9c), Constant32(0x000f1164=987492)], resolved: None }
20 9c 64 11 0f 00 
# inline_print_dec32_div32_by10_49_t3 <- inline_print_dec32_div32_by10_49_t4 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] }) }", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] })", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] })", "AddressOf(Ident(\"prod\"))", "AddressOf(Ident(\"prod\"))"] }
# optimized away noop copy Instruction { source: "inline_print_dec32_div32_by10_49_t3 <- inline_print_dec32_div32_by10_49_t4 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] })\", \"AddressOf(Ident(\\\"prod\\\"))\", \"AddressOf(Ident(\\\"prod\\\"))\"] }", opcode: Copy32, args: [Register(0x9c), Register(0x9c)], resolved: None }
# None <= call mul32_64(inline_print_dec32_div32_by10_49_t1,inline_print_dec32_div32_by10_49_t2,inline_print_dec32_div32_by10_49_t3,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] }) }", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] })", "Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] })"] }
# 02a3f Instruction { source: "Arg0[a]=inline_print_dec32_div32_by10_49_t1 None <= call mul32_64(inline_print_dec32_div32_by10_49_t1,inline_print_dec32_div32_by10_49_t2,inline_print_dec32_div32_by10_49_t3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] })\"] }", opcode: Copy32, args: [Register(0x90), Register(0x00)], resolved: None }
21 90 00 
# 02a42 Instruction { source: "Arg1[b]=inline_print_dec32_div32_by10_49_t2 None <= call mul32_64(inline_print_dec32_div32_by10_49_t1,inline_print_dec32_div32_by10_49_t2,inline_print_dec32_div32_by10_49_t3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] })\"] }", opcode: Copy32, args: [Register(0x98), Register(0x04)], resolved: None }
21 98 04 
# 02a45 Instruction { source: "Arg2[c]=inline_print_dec32_div32_by10_49_t3 None <= call mul32_64(inline_print_dec32_div32_by10_49_t1,inline_print_dec32_div32_by10_49_t2,inline_print_dec32_div32_by10_49_t3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] }) }\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] })\", \"Call(Call { function: \\\"mul32_64\\\", parameters: [Ident(\\\"a\\\"), Number(USIZE, 3435973837), AddressOf(Ident(\\\"prod\\\"))] })\"] }", opcode: Copy32, args: [Register(0x9c), Register(0x08)], resolved: None }
21 9c 08 
# Registers used by this function: {140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159}
# Registers used by callee tree: {72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 124, 125, 126, 127, 128, 132, 133, 134, 135, 136, 137, 138, 139}
# Registers to save: []
# 02a48 Instruction { source: "PseudoCall(Label24(:mul32_64))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 02a4e Instruction { source: "PseudoCall(Label24(:mul32_64))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 58 2a 00 00 
# 02a54 Instruction { source: "PseudoCall(Label24(:mul32_64))", opcode: JmpImm, args: [Label24(:mul32_64)], resolved: None }
70 fb 24 00 
# 02a58 Instruction { source: "PseudoCall(Label24(:mul32_64))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# inline_print_dec32_div32_by10_49_t8 <- 0n987492/0x000f1164u32 
# 	SourceContext { contexts: ["Return { value: Some(Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })) }", "Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })", "Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })", "LocalFieldDeref(\"prod\", \"hi\")", "LocalFieldDeref(\"prod\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987492), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987492), Number(USIZE, 4)) }", "Arithmetic(Add, Number(USIZE, 987492), Number(USIZE, 4))", "Number(USIZE, 987492)", "Number(USIZE, 987492)"] }
# 02a5e Instruction { source: "inline_print_dec32_div32_by10_49_t8 <- 0n987492/0x000f1164u32 \n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })) }\", \"Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })\", \"Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })\", \"LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")\", \"LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987492), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987492), Number(USIZE, 4)) }\", \"Arithmetic(Add, Number(USIZE, 987492), Number(USIZE, 4))\", \"Number(USIZE, 987492)\", \"Number(USIZE, 987492)\"] }", opcode: LoadImm32, args: [Register(0x90), Constant32(0x000f1164=987492)], resolved: None }
20 90 64 11 0f 00 
# inline_print_dec32_div32_by10_49_t9 <- 0n4/0x00000004u32 
# 	SourceContext { contexts: ["Return { value: Some(Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })) }", "Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })", "Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })", "LocalFieldDeref(\"prod\", \"hi\")", "LocalFieldDeref(\"prod\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987492), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987492), Number(USIZE, 4)) }", "Arithmetic(Add, Number(USIZE, 987492), Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 02a64 Instruction { source: "inline_print_dec32_div32_by10_49_t9 <- 0n4/0x00000004u32 \n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })) }\", \"Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })\", \"Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })\", \"LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")\", \"LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987492), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987492), Number(USIZE, 4)) }\", \"Arithmetic(Add, Number(USIZE, 987492), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: LoadImm32, args: [Register(0x98), Constant32(0x00000004=4)], resolved: None }
20 98 04 00 00 00 
# inline_print_dec32_div32_by10_49_t7 <- inline_print_dec32_div32_by10_49_t8 Add inline_print_dec32_div32_by10_49_t9
# 	SourceContext { contexts: ["Return { value: Some(Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })) }", "Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })", "Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })", "LocalFieldDeref(\"prod\", \"hi\")", "LocalFieldDeref(\"prod\", \"hi\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987492), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987492), Number(USIZE, 4)) }", "Arithmetic(Add, Number(USIZE, 987492), Number(USIZE, 4))"] }
# 02a6a Instruction { source: "inline_print_dec32_div32_by10_49_t7 <- inline_print_dec32_div32_by10_49_t8 Add inline_print_dec32_div32_by10_49_t9\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })) }\", \"Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })\", \"Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })\", \"LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")\", \"LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987492), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987492), Number(USIZE, 4)) }\", \"Arithmetic(Add, Number(USIZE, 987492), Number(USIZE, 4))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 02a6b Instruction { source: "inline_print_dec32_div32_by10_49_t7 <- inline_print_dec32_div32_by10_49_t8 Add inline_print_dec32_div32_by10_49_t9\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })) }\", \"Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })\", \"Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })\", \"LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")\", \"LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987492), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987492), Number(USIZE, 4)) }\", \"Arithmetic(Add, Number(USIZE, 987492), Number(USIZE, 4))\"] }", opcode: AddCarry32_1, args: [Register(0x90), Register(0x98), Register(0x90)], resolved: None }
30 90 98 90 
# 02a6f Instruction { source: "inline_print_dec32_div32_by10_49_t7 <- inline_print_dec32_div32_by10_49_t8 Add inline_print_dec32_div32_by10_49_t9\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })) }\", \"Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })\", \"Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })\", \"LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")\", \"LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987492), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987492), Number(USIZE, 4)) }\", \"Arithmetic(Add, Number(USIZE, 987492), Number(USIZE, 4))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_print_dec32_div32_by10_49_t6 <- mem[inline_print_dec32_div32_by10_49_t7] U32
# 	SourceContext { contexts: ["Return { value: Some(Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })) }", "Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })", "Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })", "LocalFieldDeref(\"prod\", \"hi\")", "LocalFieldDeref(\"prod\", \"hi\")"] }
# 02a70 Instruction { source: "inline_print_dec32_div32_by10_49_t6 <- mem[inline_print_dec32_div32_by10_49_t7] U32\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })) }\", \"Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })\", \"Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })\", \"LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")\", \"LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")\"] }", opcode: Load32, args: [Register(0x90), Register(0x90)], resolved: None }
22 90 90 
# inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_a <- inline_print_dec32_div32_by10_49_t6 U32
# 	SourceContext { contexts: ["Return { value: Some(Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })) }", "Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })", "Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })"] }
# optimized away noop copy Instruction { source: "inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_a <- inline_print_dec32_div32_by10_49_t6 U32\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })) }\", \"Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })\", \"Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })\"] }", opcode: Copy32, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t1 <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_a[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 3)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 3))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 3))", "Index(\"a\", Number(U8, 0))", "Index(\"a\", Number(U8, 0))"] }
# 02a73 Instruction { source: "inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t1 <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_a[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 3)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 3))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 0))\", \"Index(\\\"a\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x90), Register(0x95)], resolved: None }
0b 90 95 
# inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t2 <- 0n3/0x03u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 3)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 3))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 3))", "Number(U8, 3)", "Number(U8, 3)"] }
# 02a76 Instruction { source: "inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t2 <- 0n3/0x03u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 3)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 3))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 3))\", \"Number(U8, 3)\", \"Number(U8, 3)\"] }", opcode: LoadImm8, args: [Register(0x94), Constant8(0x03=3)], resolved: None }
04 94 03 
# inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t0 <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t1 RotateRight inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t2
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 3)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 3))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 3))"] }
# 02a79 Instruction { source: "inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t0 <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t1 RotateRight inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t2\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 3)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 3))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 3))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0x94), Register(0x95), Register(0x94)], resolved: None }
1e 04 94 95 94 
# inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_a[0x00..0x01] <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t0 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 0)), Number(U8, 3)) }"] }
# 02a7e Instruction { source: "inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_a[0x00..0x01] <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t0 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 3)) }\"] }", opcode: Copy8, args: [Register(0x94), Register(0x90)], resolved: None }
0b 94 90 
# inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t4 <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 3)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 3))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 3))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 02a81 Instruction { source: "inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t4 <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 3)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 3))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x91), Register(0x95)], resolved: None }
0b 91 95 
# inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t5 <- 0n3/0x03u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 3)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 3))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 3))", "Number(U8, 3)", "Number(U8, 3)"] }
# 02a84 Instruction { source: "inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t5 <- 0n3/0x03u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 3)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 3))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 3))\", \"Number(U8, 3)\", \"Number(U8, 3)\"] }", opcode: LoadImm8, args: [Register(0x94), Constant8(0x03=3)], resolved: None }
04 94 03 
# inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t3 <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t4 RotateRight inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t5
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 3)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 3))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 3))"] }
# 02a87 Instruction { source: "inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t3 <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t4 RotateRight inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t5\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 3)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 3))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 3))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0x94), Register(0x95), Register(0x94)], resolved: None }
1e 04 94 95 94 
# inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_a[0x01..0x02] <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t3 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 1)), Number(U8, 3)) }"] }
# 02a8c Instruction { source: "inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_a[0x01..0x02] <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t3 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 3)) }\"] }", opcode: Copy8, args: [Register(0x94), Register(0x91)], resolved: None }
0b 94 91 
# inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t7 <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 3)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 3))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 3))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 02a8f Instruction { source: "inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t7 <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 3)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 3))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x92), Register(0x95)], resolved: None }
0b 92 95 
# inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t8 <- 0n3/0x03u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 3)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 3))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 3))", "Number(U8, 3)", "Number(U8, 3)"] }
# 02a92 Instruction { source: "inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t8 <- 0n3/0x03u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 3)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 3))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 3))\", \"Number(U8, 3)\", \"Number(U8, 3)\"] }", opcode: LoadImm8, args: [Register(0x94), Constant8(0x03=3)], resolved: None }
04 94 03 
# inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t6 <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t7 RotateRight inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 3)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 3))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 3))"] }
# 02a95 Instruction { source: "inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t6 <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t7 RotateRight inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 3)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 3))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 3))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0x94), Register(0x95), Register(0x94)], resolved: None }
1e 04 94 95 94 
# inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_a[0x02..0x03] <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t6 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 2)), Number(U8, 3)) }"] }
# 02a9a Instruction { source: "inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_a[0x02..0x03] <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t6 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 3)) }\"] }", opcode: Copy8, args: [Register(0x94), Register(0x92)], resolved: None }
0b 94 92 
# inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t10 <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_a[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 3)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 3))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 3))", "Index(\"a\", Number(U8, 3))", "Index(\"a\", Number(U8, 3))"] }
# 02a9d Instruction { source: "inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t10 <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_a[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 3)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 3))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0x93), Register(0x95)], resolved: None }
0b 93 95 
# inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t11 <- 0n3/0x03u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 3)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 3))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 3))", "Number(U8, 3)", "Number(U8, 3)"] }
# 02aa0 Instruction { source: "inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t11 <- 0n3/0x03u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 3)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 3))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 3))\", \"Number(U8, 3)\", \"Number(U8, 3)\"] }", opcode: LoadImm8, args: [Register(0x94), Constant8(0x03=3)], resolved: None }
04 94 03 
# inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t9 <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t10 RotateRight inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t11
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 3)) }", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 3))", "Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 3))"] }
# 02aa3 Instruction { source: "inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t9 <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t10 RotateRight inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t11\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 3)) }\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 3))\", \"Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 3))\"] }", opcode: Shift8, args: [Constant8(0x04=4), Register(0x94), Register(0x95), Register(0x94)], resolved: None }
1e 04 94 95 94 
# inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_a[0x03..0x04] <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t9 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\"a\", Number(U8, 3)), Number(U8, 3)) }"] }
# 02aa8 Instruction { source: "inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_a[0x03..0x04] <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t9 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 3)) }\"] }", opcode: Copy8, args: [Register(0x94), Register(0x93)], resolved: None }
0b 94 93 
# inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t13 <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_a[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 31)) }", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 31))", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 31))", "Index(\"a\", Number(U8, 0))", "Index(\"a\", Number(U8, 0))"] }
# 02aab Instruction { source: "inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t13 <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_a[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 31)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 31))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 31))\", \"Index(\\\"a\\\", Number(U8, 0))\", \"Index(\\\"a\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x90), Register(0x95)], resolved: None }
0b 90 95 
# inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t14 <- 0n31/0x1fu8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 31)) }", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 31))", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 31))", "Number(U8, 31)", "Number(U8, 31)"] }
# 02aae Instruction { source: "inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t14 <- 0n31/0x1fu8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 31)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 31))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 31))\", \"Number(U8, 31)\", \"Number(U8, 31)\"] }", opcode: LoadImm8, args: [Register(0x94), Constant8(0x1f=31)], resolved: None }
04 94 1f 
# inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t12 <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t13 BitwiseAnd inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t14
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 31)) }", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 31))", "Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 31))"] }
# 02ab1 Instruction { source: "inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t12 <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t13 BitwiseAnd inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t14\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 31)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 31))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 31))\"] }", opcode: And8, args: [Register(0x95), Register(0x94), Register(0x94)], resolved: None }
1b 95 94 94 
# inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_a[0x00..0x01] <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t12 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 0)), Number(U8, 31)) }"] }
# 02ab5 Instruction { source: "inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_a[0x00..0x01] <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t12 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 31)) }\"] }", opcode: Copy8, args: [Register(0x94), Register(0x90)], resolved: None }
0b 94 90 
# inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t16 <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_a[0x00..0x01] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224)))", "Index(\"a\", Number(U8, 0))", "Index(\"a\", Number(U8, 0))"] }
# 02ab8 Instruction { source: "inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t16 <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_a[0x00..0x01] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224)))\", \"Index(\\\"a\\\", Number(U8, 0))\", \"Index(\\\"a\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x90), Register(0x95)], resolved: None }
0b 90 95 
# inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t18 <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224)))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 02abb Instruction { source: "inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t18 <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x91), Register(0x94)], resolved: None }
0b 91 94 
# inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t19 <- 0n224/0xe0u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224)))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224))", "Number(U8, 224)", "Number(U8, 224)"] }
# 02abe Instruction { source: "inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t19 <- 0n224/0xe0u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224))\", \"Number(U8, 224)\", \"Number(U8, 224)\"] }", opcode: LoadImm8, args: [Register(0x96), Constant8(0xe0=224)], resolved: None }
04 96 e0 
# inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t17 <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t18 BitwiseAnd inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t19
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224)))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224))"] }
# 02ac1 Instruction { source: "inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t17 <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t18 BitwiseAnd inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t19\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224))\"] }", opcode: And8, args: [Register(0x94), Register(0x96), Register(0x94)], resolved: None }
1b 94 96 94 
# inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t15 <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t16 BitwiseOr inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t17
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224)))", "Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224)))"] }
# 02ac5 Instruction { source: "inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t15 <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t16 BitwiseOr inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t17\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224)))\"] }", opcode: Or8, args: [Register(0x95), Register(0x94), Register(0x94)], resolved: None }
1c 95 94 94 
# inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_a[0x00..0x01] <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t15 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 0)), Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 224))) }"] }
# 02ac9 Instruction { source: "inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_a[0x00..0x01] <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t15 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 0)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 224))) }\"] }", opcode: Copy8, args: [Register(0x94), Register(0x90)], resolved: None }
0b 94 90 
# inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t21 <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 31)) }", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 31))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 31))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 02acc Instruction { source: "inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t21 <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 31)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 31))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 31))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x91), Register(0x95)], resolved: None }
0b 91 95 
# inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t22 <- 0n31/0x1fu8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 31)) }", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 31))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 31))", "Number(U8, 31)", "Number(U8, 31)"] }
# 02acf Instruction { source: "inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t22 <- 0n31/0x1fu8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 31)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 31))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 31))\", \"Number(U8, 31)\", \"Number(U8, 31)\"] }", opcode: LoadImm8, args: [Register(0x94), Constant8(0x1f=31)], resolved: None }
04 94 1f 
# inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t20 <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t21 BitwiseAnd inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t22
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 31)) }", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 31))", "Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 31))"] }
# 02ad2 Instruction { source: "inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t20 <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t21 BitwiseAnd inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t22\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 31)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 31))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 31))\"] }", opcode: And8, args: [Register(0x95), Register(0x94), Register(0x94)], resolved: None }
1b 95 94 94 
# inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_a[0x01..0x02] <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t20 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 1)), Number(U8, 31)) }"] }
# 02ad6 Instruction { source: "inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_a[0x01..0x02] <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t20 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 1)), Number(U8, 31)) }\"] }", opcode: Copy8, args: [Register(0x94), Register(0x91)], resolved: None }
0b 94 91 
# inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t24 <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_a[0x01..0x02] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224)))", "Index(\"a\", Number(U8, 1))", "Index(\"a\", Number(U8, 1))"] }
# 02ad9 Instruction { source: "inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t24 <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_a[0x01..0x02] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224)))\", \"Index(\\\"a\\\", Number(U8, 1))\", \"Index(\\\"a\\\", Number(U8, 1))\"] }", opcode: Copy8, args: [Register(0x91), Register(0x95)], resolved: None }
0b 91 95 
# inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t26 <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224)))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 02adc Instruction { source: "inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t26 <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x92), Register(0x94)], resolved: None }
0b 92 94 
# inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t27 <- 0n224/0xe0u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224)))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224))", "Number(U8, 224)", "Number(U8, 224)"] }
# 02adf Instruction { source: "inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t27 <- 0n224/0xe0u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224))\", \"Number(U8, 224)\", \"Number(U8, 224)\"] }", opcode: LoadImm8, args: [Register(0x96), Constant8(0xe0=224)], resolved: None }
04 96 e0 
# inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t25 <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t26 BitwiseAnd inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t27
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224)))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224))"] }
# 02ae2 Instruction { source: "inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t25 <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t26 BitwiseAnd inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t27\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224))\"] }", opcode: And8, args: [Register(0x94), Register(0x96), Register(0x94)], resolved: None }
1b 94 96 94 
# inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t23 <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t24 BitwiseOr inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t25
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224)))", "Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224)))"] }
# 02ae6 Instruction { source: "inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t23 <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t24 BitwiseOr inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t25\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224)))\"] }", opcode: Or8, args: [Register(0x95), Register(0x94), Register(0x94)], resolved: None }
1c 95 94 94 
# inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_a[0x01..0x02] <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t23 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 1)), Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 224))) }"] }
# 02aea Instruction { source: "inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_a[0x01..0x02] <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t23 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 1)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 224))) }\"] }", opcode: Copy8, args: [Register(0x94), Register(0x91)], resolved: None }
0b 94 91 
# inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t29 <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 31)) }", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 31))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 31))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 02aed Instruction { source: "inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t29 <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 31)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 31))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 31))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x92), Register(0x95)], resolved: None }
0b 92 95 
# inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t30 <- 0n31/0x1fu8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 31)) }", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 31))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 31))", "Number(U8, 31)", "Number(U8, 31)"] }
# 02af0 Instruction { source: "inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t30 <- 0n31/0x1fu8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 31)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 31))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 31))\", \"Number(U8, 31)\", \"Number(U8, 31)\"] }", opcode: LoadImm8, args: [Register(0x94), Constant8(0x1f=31)], resolved: None }
04 94 1f 
# inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t28 <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t29 BitwiseAnd inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t30
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 31)) }", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 31))", "Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 31))"] }
# 02af3 Instruction { source: "inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t28 <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t29 BitwiseAnd inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t30\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 31)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 31))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 31))\"] }", opcode: And8, args: [Register(0x95), Register(0x94), Register(0x94)], resolved: None }
1b 95 94 94 
# inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_a[0x02..0x03] <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t28 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 2)), Number(U8, 31)) }"] }
# 02af7 Instruction { source: "inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_a[0x02..0x03] <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t28 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 2)), Number(U8, 31)) }\"] }", opcode: Copy8, args: [Register(0x94), Register(0x92)], resolved: None }
0b 94 92 
# inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t32 <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_a[0x02..0x03] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224)))", "Index(\"a\", Number(U8, 2))", "Index(\"a\", Number(U8, 2))"] }
# 02afa Instruction { source: "inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t32 <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_a[0x02..0x03] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224)))\", \"Index(\\\"a\\\", Number(U8, 2))\", \"Index(\\\"a\\\", Number(U8, 2))\"] }", opcode: Copy8, args: [Register(0x92), Register(0x95)], resolved: None }
0b 92 95 
# inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t34 <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_a[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224)))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224))", "Index(\"a\", Number(U8, 3))", "Index(\"a\", Number(U8, 3))"] }
# 02afd Instruction { source: "inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t34 <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_a[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224))\", \"Index(\\\"a\\\", Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0x93), Register(0x94)], resolved: None }
0b 93 94 
# inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t35 <- 0n224/0xe0u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224)))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224))", "Number(U8, 224)", "Number(U8, 224)"] }
# 02b00 Instruction { source: "inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t35 <- 0n224/0xe0u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224))\", \"Number(U8, 224)\", \"Number(U8, 224)\"] }", opcode: LoadImm8, args: [Register(0x96), Constant8(0xe0=224)], resolved: None }
04 96 e0 
# inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t33 <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t34 BitwiseAnd inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t35
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224)))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224))"] }
# 02b03 Instruction { source: "inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t33 <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t34 BitwiseAnd inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t35\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224)))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224))\"] }", opcode: And8, args: [Register(0x94), Register(0x96), Register(0x94)], resolved: None }
1b 94 96 94 
# inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t31 <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t32 BitwiseOr inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t33
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224))) }", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224)))", "Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224)))"] }
# 02b07 Instruction { source: "inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t31 <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t32 BitwiseOr inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t33\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224))) }\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224)))\", \"Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224)))\"] }", opcode: Or8, args: [Register(0x95), Register(0x94), Register(0x94)], resolved: None }
1c 95 94 94 
# inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_a[0x02..0x03] <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t31 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\"a\", Number(U8, 2)), Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 224))) }"] }
# 02b0b Instruction { source: "inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_a[0x02..0x03] <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t31 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index(\\\"a\\\", Number(U8, 2)), Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 224))) }\"] }", opcode: Copy8, args: [Register(0x94), Register(0x92)], resolved: None }
0b 94 92 
# inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t37 <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_a[0x03..0x04] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 31)) }", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 31))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 31))", "Index(\"a\", Number(U8, 3))", "Index(\"a\", Number(U8, 3))"] }
# 02b0e Instruction { source: "inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t37 <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_a[0x03..0x04] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 31)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 31))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 31))\", \"Index(\\\"a\\\", Number(U8, 3))\", \"Index(\\\"a\\\", Number(U8, 3))\"] }", opcode: Copy8, args: [Register(0x93), Register(0x95)], resolved: None }
0b 93 95 
# inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t38 <- 0n31/0x1fu8 
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 31)) }", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 31))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 31))", "Number(U8, 31)", "Number(U8, 31)"] }
# 02b11 Instruction { source: "inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t38 <- 0n31/0x1fu8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 31)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 31))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 31))\", \"Number(U8, 31)\", \"Number(U8, 31)\"] }", opcode: LoadImm8, args: [Register(0x94), Constant8(0x1f=31)], resolved: None }
04 94 1f 
# inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t36 <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t37 BitwiseAnd inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t38
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 31)) }", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 31))", "Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 31))"] }
# 02b14 Instruction { source: "inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t36 <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t37 BitwiseAnd inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t38\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 31)) }\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 31))\", \"Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 31))\"] }", opcode: And8, args: [Register(0x95), Register(0x94), Register(0x94)], resolved: None }
1b 95 94 94 
# inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_a[0x03..0x04] <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t36 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"a\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\"a\", Number(U8, 3)), Number(U8, 31)) }"] }
# 02b18 Instruction { source: "inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_a[0x03..0x04] <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t36 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"a\\\", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index(\\\"a\\\", Number(U8, 3)), Number(U8, 31)) }\"] }", opcode: Copy8, args: [Register(0x94), Register(0x93)], resolved: None }
0b 94 93 
# inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t39 <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_a U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"a\")) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t39 <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_a U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"a\\\")) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_print_dec32_div32_by10_49_t5 <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t39 U32
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"a\")) }"] }
# optimized away noop copy Instruction { source: "inline_print_dec32_div32_by10_49_t5 <- inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_t39 U32\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"a\\\")) }\"] }", opcode: Copy32, args: [Register(0x90), Register(0x90)], resolved: None }
# goto inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_function_end_shiftright3
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"a\")) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_function_end_shiftright3\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"a\\\")) }\"] }", opcode: JmpImm, args: [Label24(inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_function_end_shiftright3)], resolved: None }
# :inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_function_end_shiftright3
# 	SourceContext { contexts: [] }
# inline_print_dec32_div32_by10_49_inline_div32_by10_shiftright3_48_function_end_shiftright3
# b <- inline_print_dec32_div32_by10_49_t5 U32
# 	SourceContext { contexts: ["Return { value: Some(Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })) }"] }
# optimized away noop copy Instruction { source: "b <- inline_print_dec32_div32_by10_49_t5 U32\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })) }\"] }", opcode: Copy32, args: [Register(0x90), Register(0x90)], resolved: None }
# goto inline_print_dec32_div32_by10_49_function_end_div32_by10
# 	SourceContext { contexts: ["Return { value: Some(Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_print_dec32_div32_by10_49_function_end_div32_by10\n\tSourceContext { contexts: [\"Return { value: Some(Call(Call { function: \\\"shiftright3\\\", parameters: [LocalFieldDeref(\\\"prod\\\", \\\"hi\\\")] })) }\"] }", opcode: JmpImm, args: [Label24(inline_print_dec32_div32_by10_49_function_end_div32_by10)], resolved: None }
# :inline_print_dec32_div32_by10_49_function_end_div32_by10
# 	SourceContext { contexts: [] }
# inline_print_dec32_div32_by10_49_function_end_div32_by10
# t6 <- b U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"b\")] }) }", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"b\")] })", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"b\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "t6 <- b U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x90), Register(0x90)], resolved: None }
# None <= call print_dec32(t6,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"b\")] }) }", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"b\")] })", "Call(Call { function: \"print_dec32\", parameters: [Ident(\"b\")] })"] }
# 02b1b Instruction { source: "Arg0[a]=t6 None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0x90), Register(0x00)], resolved: None }
21 90 00 
# Registers used by this function: {140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 124, 125, 126, 127, 128, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 216, 217, 233, 234, 235, 236, 240, 241, 242, 243, 244, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: [140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159]
# 02b1e Instruction { source: "Saving reg0x9f before None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0x9f)], resolved: None }
09 9f 
# 02b20 Instruction { source: "Saving reg0x9e before None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0x9e)], resolved: None }
09 9e 
# 02b22 Instruction { source: "Saving reg0x9d before None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0x9d)], resolved: None }
09 9d 
# 02b24 Instruction { source: "Saving reg0x9c before None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0x9c)], resolved: None }
09 9c 
# 02b26 Instruction { source: "Saving reg0x9b before None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0x9b)], resolved: None }
09 9b 
# 02b28 Instruction { source: "Saving reg0x9a before None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0x9a)], resolved: None }
09 9a 
# 02b2a Instruction { source: "Saving reg0x99 before None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0x99)], resolved: None }
09 99 
# 02b2c Instruction { source: "Saving reg0x98 before None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0x98)], resolved: None }
09 98 
# 02b2e Instruction { source: "Saving reg0x97 before None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0x97)], resolved: None }
09 97 
# 02b30 Instruction { source: "Saving reg0x96 before None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0x96)], resolved: None }
09 96 
# 02b32 Instruction { source: "Saving reg0x95 before None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0x95)], resolved: None }
09 95 
# 02b34 Instruction { source: "Saving reg0x94 before None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0x94)], resolved: None }
09 94 
# 02b36 Instruction { source: "Saving reg0x93 before None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0x93)], resolved: None }
09 93 
# 02b38 Instruction { source: "Saving reg0x92 before None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0x92)], resolved: None }
09 92 
# 02b3a Instruction { source: "Saving reg0x91 before None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0x91)], resolved: None }
09 91 
# 02b3c Instruction { source: "Saving reg0x90 before None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0x90)], resolved: None }
09 90 
# 02b3e Instruction { source: "Saving reg0x8f before None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0x8f)], resolved: None }
09 8f 
# 02b40 Instruction { source: "Saving reg0x8e before None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0x8e)], resolved: None }
09 8e 
# 02b42 Instruction { source: "Saving reg0x8d before None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0x8d)], resolved: None }
09 8d 
# 02b44 Instruction { source: "Saving reg0x8c before None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0x8c)], resolved: None }
09 8c 
# 02b46 Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 02b4c Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 56 2b 00 00 
# 02b52 Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: JmpImm, args: [Label24(:print_dec32)], resolved: None }
70 d5 29 00 
# 02b56 Instruction { source: "PseudoCall(Label24(:print_dec32))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 02b5c Instruction { source: "Restoring reg0x8c after None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0x8c)], resolved: None }
0a 8c 
# 02b5e Instruction { source: "Restoring reg0x8d after None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0x8d)], resolved: None }
0a 8d 
# 02b60 Instruction { source: "Restoring reg0x8e after None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0x8e)], resolved: None }
0a 8e 
# 02b62 Instruction { source: "Restoring reg0x8f after None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0x8f)], resolved: None }
0a 8f 
# 02b64 Instruction { source: "Restoring reg0x90 after None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0x90)], resolved: None }
0a 90 
# 02b66 Instruction { source: "Restoring reg0x91 after None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0x91)], resolved: None }
0a 91 
# 02b68 Instruction { source: "Restoring reg0x92 after None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0x92)], resolved: None }
0a 92 
# 02b6a Instruction { source: "Restoring reg0x93 after None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0x93)], resolved: None }
0a 93 
# 02b6c Instruction { source: "Restoring reg0x94 after None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0x94)], resolved: None }
0a 94 
# 02b6e Instruction { source: "Restoring reg0x95 after None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0x95)], resolved: None }
0a 95 
# 02b70 Instruction { source: "Restoring reg0x96 after None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0x96)], resolved: None }
0a 96 
# 02b72 Instruction { source: "Restoring reg0x97 after None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0x97)], resolved: None }
0a 97 
# 02b74 Instruction { source: "Restoring reg0x98 after None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0x98)], resolved: None }
0a 98 
# 02b76 Instruction { source: "Restoring reg0x99 after None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0x99)], resolved: None }
0a 99 
# 02b78 Instruction { source: "Restoring reg0x9a after None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0x9a)], resolved: None }
0a 9a 
# 02b7a Instruction { source: "Restoring reg0x9b after None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0x9b)], resolved: None }
0a 9b 
# 02b7c Instruction { source: "Restoring reg0x9c after None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0x9c)], resolved: None }
0a 9c 
# 02b7e Instruction { source: "Restoring reg0x9d after None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0x9d)], resolved: None }
0a 9d 
# 02b80 Instruction { source: "Restoring reg0x9e after None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0x9e)], resolved: None }
0a 9e 
# 02b82 Instruction { source: "Restoring reg0x9f after None <= call print_dec32(t6,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec32\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0x9f)], resolved: None }
0a 9f 
# t7 <- a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] })) }", "Arithmetic(Subtract, Ident(\"a\"), Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] }))", "Ident(\"a\")", "Ident(\"a\")"] }
# 02b84 Instruction { source: "t7 <- a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] }))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x8c), Register(0x9c)], resolved: None }
21 8c 9c 
# t9 <- b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] })) }", "Arithmetic(Subtract, Ident(\"a\"), Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] }))", "Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] })", "Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# 02b87 Instruction { source: "t9 <- b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] }))\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x90), Register(0x8c)], resolved: None }
21 90 8c 
# inline_print_dec32_mul32_by10_16_a <- t9 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] })) }", "Arithmetic(Subtract, Ident(\"a\"), Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] }))", "Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] })", "Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] })"] }
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_16_a <- t9 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] }))\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Copy32, args: [Register(0x8c), Register(0x8c)], resolved: None }
# inline_print_dec32_mul32_by10_16_t0 <- inline_print_dec32_mul32_by10_16_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }", "Arithmetic(Add, Ident(\"a\"), Ident(\"a\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_16_t0 <- inline_print_dec32_mul32_by10_16_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x8c), Register(0x8c)], resolved: None }
# inline_print_dec32_mul32_by10_16_t1 <- inline_print_dec32_mul32_by10_16_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }", "Arithmetic(Add, Ident(\"a\"), Ident(\"a\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# 02b8a Instruction { source: "inline_print_dec32_mul32_by10_16_t1 <- inline_print_dec32_mul32_by10_16_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x8c), Register(0x90)], resolved: None }
21 8c 90 
# inline_print_dec32_mul32_by10_16_a <- inline_print_dec32_mul32_by10_16_t0 Add inline_print_dec32_mul32_by10_16_t1
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }", "Arithmetic(Add, Ident(\"a\"), Ident(\"a\"))"] }
# 02b8d Instruction { source: "inline_print_dec32_mul32_by10_16_a <- inline_print_dec32_mul32_by10_16_t0 Add inline_print_dec32_mul32_by10_16_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 02b8e Instruction { source: "inline_print_dec32_mul32_by10_16_a <- inline_print_dec32_mul32_by10_16_t0 Add inline_print_dec32_mul32_by10_16_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x8c), Register(0x90), Register(0x8c)], resolved: None }
30 8c 90 8c 
# 02b92 Instruction { source: "inline_print_dec32_mul32_by10_16_a <- inline_print_dec32_mul32_by10_16_t0 Add inline_print_dec32_mul32_by10_16_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_print_dec32_mul32_by10_16_t2 <- inline_print_dec32_mul32_by10_16_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }", "Arithmetic(Add, Ident(\"a\"), Ident(\"a\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_16_t2 <- inline_print_dec32_mul32_by10_16_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x8c), Register(0x8c)], resolved: None }
# inline_print_dec32_mul32_by10_16_t3 <- inline_print_dec32_mul32_by10_16_a U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }", "Arithmetic(Add, Ident(\"a\"), Ident(\"a\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# 02b93 Instruction { source: "inline_print_dec32_mul32_by10_16_t3 <- inline_print_dec32_mul32_by10_16_a U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x8c), Register(0x90)], resolved: None }
21 8c 90 
# inline_print_dec32_mul32_by10_16_b <- inline_print_dec32_mul32_by10_16_t2 Add inline_print_dec32_mul32_by10_16_t3
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }", "Arithmetic(Add, Ident(\"a\"), Ident(\"a\"))"] }
# 02b96 Instruction { source: "inline_print_dec32_mul32_by10_16_b <- inline_print_dec32_mul32_by10_16_t2 Add inline_print_dec32_mul32_by10_16_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 02b97 Instruction { source: "inline_print_dec32_mul32_by10_16_b <- inline_print_dec32_mul32_by10_16_t2 Add inline_print_dec32_mul32_by10_16_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x8c), Register(0x90), Register(0x90)], resolved: None }
30 8c 90 90 
# 02b9b Instruction { source: "inline_print_dec32_mul32_by10_16_b <- inline_print_dec32_mul32_by10_16_t2 Add inline_print_dec32_mul32_by10_16_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\")) }\", \"Arithmetic(Add, Ident(\\\"a\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_print_dec32_mul32_by10_16_t4 <- inline_print_dec32_mul32_by10_16_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: None, value: Arithmetic(Add, Ident(\"b\"), Ident(\"b\")) }", "Arithmetic(Add, Ident(\"b\"), Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_16_t4 <- inline_print_dec32_mul32_by10_16_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_print_dec32_mul32_by10_16_t5 <- inline_print_dec32_mul32_by10_16_b U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: None, value: Arithmetic(Add, Ident(\"b\"), Ident(\"b\")) }", "Arithmetic(Add, Ident(\"b\"), Ident(\"b\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# 02b9c Instruction { source: "inline_print_dec32_mul32_by10_16_t5 <- inline_print_dec32_mul32_by10_16_b U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x90), Register(0x98)], resolved: None }
21 90 98 
# inline_print_dec32_mul32_by10_16_b <- inline_print_dec32_mul32_by10_16_t4 Add inline_print_dec32_mul32_by10_16_t5
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: None, value: Arithmetic(Add, Ident(\"b\"), Ident(\"b\")) }", "Arithmetic(Add, Ident(\"b\"), Ident(\"b\"))"] }
# 02b9f Instruction { source: "inline_print_dec32_mul32_by10_16_b <- inline_print_dec32_mul32_by10_16_t4 Add inline_print_dec32_mul32_by10_16_t5\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 02ba0 Instruction { source: "inline_print_dec32_mul32_by10_16_b <- inline_print_dec32_mul32_by10_16_t4 Add inline_print_dec32_mul32_by10_16_t5\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x90), Register(0x98), Register(0x90)], resolved: None }
30 90 98 90 
# 02ba4 Instruction { source: "inline_print_dec32_mul32_by10_16_b <- inline_print_dec32_mul32_by10_16_t4 Add inline_print_dec32_mul32_by10_16_t5\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\")) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"b\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_print_dec32_mul32_by10_16_t7 <- inline_print_dec32_mul32_by10_16_b U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }", "Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))", "Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_16_t7 <- inline_print_dec32_mul32_by10_16_b U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy32, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_print_dec32_mul32_by10_16_t8 <- inline_print_dec32_mul32_by10_16_a U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }", "Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))", "Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_16_t8 <- inline_print_dec32_mul32_by10_16_a U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy32, args: [Register(0x8c), Register(0x8c)], resolved: None }
# inline_print_dec32_mul32_by10_16_t6 <- inline_print_dec32_mul32_by10_16_t7 Add inline_print_dec32_mul32_by10_16_t8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }", "Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))", "Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))"] }
# 02ba5 Instruction { source: "inline_print_dec32_mul32_by10_16_t6 <- inline_print_dec32_mul32_by10_16_t7 Add inline_print_dec32_mul32_by10_16_t8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 02ba6 Instruction { source: "inline_print_dec32_mul32_by10_16_t6 <- inline_print_dec32_mul32_by10_16_t7 Add inline_print_dec32_mul32_by10_16_t8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x90), Register(0x8c), Register(0x8c)], resolved: None }
30 90 8c 8c 
# 02baa Instruction { source: "inline_print_dec32_mul32_by10_16_t6 <- inline_print_dec32_mul32_by10_16_t7 Add inline_print_dec32_mul32_by10_16_t8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))) }\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\", \"Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t8 <- inline_print_dec32_mul32_by10_16_t6 U32
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }"] }
# optimized away noop copy Instruction { source: "t8 <- inline_print_dec32_mul32_by10_16_t6 U32\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))) }\"] }", opcode: Copy32, args: [Register(0x8c), Register(0x8c)], resolved: None }
# goto inline_print_dec32_mul32_by10_16_function_end_mul32_by10
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_print_dec32_mul32_by10_16_function_end_mul32_by10\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Ident(\\\"b\\\"), Ident(\\\"a\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_print_dec32_mul32_by10_16_function_end_mul32_by10)], resolved: None }
# :inline_print_dec32_mul32_by10_16_function_end_mul32_by10
# 	SourceContext { contexts: [] }
# inline_print_dec32_mul32_by10_16_function_end_mul32_by10
# a <- t7 Subtract t8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] })) }", "Arithmetic(Subtract, Ident(\"a\"), Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] }))"] }
# 02bab Instruction { source: "a <- t7 Subtract t8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] }))\"] }", opcode: Copy32, args: [Register(0x8c), Register(0x00)], resolved: None }
21 8c 00 
# 02bae Instruction { source: "a <- t7 Subtract t8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] }))\"] }", opcode: Invert8, args: [Register(0x00)], resolved: None }
01 00 
# 02bb0 Instruction { source: "a <- t7 Subtract t8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] }))\"] }", opcode: Invert8, args: [Register(0x01)], resolved: None }
01 01 
# 02bb2 Instruction { source: "a <- t7 Subtract t8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] }))\"] }", opcode: Invert8, args: [Register(0x02)], resolved: None }
01 02 
# 02bb4 Instruction { source: "a <- t7 Subtract t8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] }))\"] }", opcode: Invert8, args: [Register(0x03)], resolved: None }
01 03 
# 02bb6 Instruction { source: "a <- t7 Subtract t8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] }))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x00), Constant32(0x00000001=1)], resolved: None }
32 00 01 00 00 00 
# 02bbc Instruction { source: "a <- t7 Subtract t8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] }))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 02bbd Instruction { source: "a <- t7 Subtract t8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] }))\"] }", opcode: AddCarry32_1, args: [Register(0x9c), Register(0x00), Register(0x8c)], resolved: None }
30 9c 00 8c 
# 02bc1 Instruction { source: "a <- t7 Subtract t8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] })) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Call(Call { function: \\\"mul32_by10\\\", parameters: [Ident(\\\"b\\\")] }))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t12 <- a[0x00..0x01] U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))] })", "Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))", "Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))", "Index(\"a\", Number(U8, 0))", "Index(\"a\", Number(U8, 0))"] }
# 02bc2 Instruction { source: "t12 <- a[0x00..0x01] U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))] })\", \"Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))\", \"Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))\", \"Index(\\\"a\\\", Number(U8, 0))\", \"Index(\\\"a\\\", Number(U8, 0))\"] }", opcode: Copy8, args: [Register(0x8c), Register(0x97)], resolved: None }
0b 8c 97 
# t13 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))] })", "Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))", "Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))", "Number(U8, 48)", "Number(U8, 48)"] }
# 02bc5 Instruction { source: "t13 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))] })\", \"Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))\", \"Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0x95), Constant8(0x30=48)], resolved: None }
04 95 30 
# t11 <- t12 Add t13
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))] })", "Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))", "Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))"] }
# 02bc8 Instruction { source: "t11 <- t12 Add t13\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))] })\", \"Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))\", \"Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))\"] }", opcode: Add8NoCarryIn, args: [Register(0x97), Register(0x95), Register(0x97)], resolved: None }
14 97 95 97 
# inline_print_dec32_putc_31_c <- t11 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))] })"] }
# optimized away noop copy Instruction { source: "inline_print_dec32_putc_31_c <- t11 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Index(\\\"a\\\", Number(U8, 0)), Number(U8, 48))] })\"] }", opcode: Copy8, args: [Register(0x97), Register(0x97)], resolved: None }
# inline_print_dec32_putc_31_t1 <- inline_print_dec32_putc_31_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_print_dec32_putc_31_t1 <- inline_print_dec32_putc_31_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x97), Register(0x97)], resolved: None }
# None <= call io_write0(inline_print_dec32_putc_31_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 02bcc Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x97)], resolved: None }
68 97 
# inline_print_dec32_putc_31_t3 <- inline_print_dec32_putc_31_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_print_dec32_putc_31_t3 <- inline_print_dec32_putc_31_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x97), Register(0x97)], resolved: None }
# None <= call lcd_write_char(inline_print_dec32_putc_31_t3,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })"] }
# 02bce Instruction { source: "Arg0[ch]=inline_print_dec32_putc_31_t3 None <= call lcd_write_char(inline_print_dec32_putc_31_t3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy8, args: [Register(0x97), Register(0x00)], resolved: None }
0b 97 00 
# Registers used by this function: {140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 152, 153, 154, 155, 156, 157, 158, 159, 217, 233, 234, 235, 236, 240, 241, 242, 243, 244, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: [152, 153, 154, 155, 156, 157, 158, 159]
# 02bd1 Instruction { source: "Saving reg0x9f before None <= call lcd_write_char(inline_print_dec32_putc_31_t3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x9f)], resolved: None }
09 9f 
# 02bd3 Instruction { source: "Saving reg0x9e before None <= call lcd_write_char(inline_print_dec32_putc_31_t3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x9e)], resolved: None }
09 9e 
# 02bd5 Instruction { source: "Saving reg0x9d before None <= call lcd_write_char(inline_print_dec32_putc_31_t3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x9d)], resolved: None }
09 9d 
# 02bd7 Instruction { source: "Saving reg0x9c before None <= call lcd_write_char(inline_print_dec32_putc_31_t3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x9c)], resolved: None }
09 9c 
# 02bd9 Instruction { source: "Saving reg0x9b before None <= call lcd_write_char(inline_print_dec32_putc_31_t3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x9b)], resolved: None }
09 9b 
# 02bdb Instruction { source: "Saving reg0x9a before None <= call lcd_write_char(inline_print_dec32_putc_31_t3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x9a)], resolved: None }
09 9a 
# 02bdd Instruction { source: "Saving reg0x99 before None <= call lcd_write_char(inline_print_dec32_putc_31_t3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x99)], resolved: None }
09 99 
# 02bdf Instruction { source: "Saving reg0x98 before None <= call lcd_write_char(inline_print_dec32_putc_31_t3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Push8, args: [Register(0x98)], resolved: None }
09 98 
# 02be1 Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 02be7 Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c f1 2b 00 00 
# 02bed Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: JmpImm, args: [Label24(:lcd_write_char)], resolved: None }
70 1a 22 00 
# 02bf1 Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 02bf7 Instruction { source: "Restoring reg0x98 after None <= call lcd_write_char(inline_print_dec32_putc_31_t3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x98)], resolved: None }
0a 98 
# 02bf9 Instruction { source: "Restoring reg0x99 after None <= call lcd_write_char(inline_print_dec32_putc_31_t3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x99)], resolved: None }
0a 99 
# 02bfb Instruction { source: "Restoring reg0x9a after None <= call lcd_write_char(inline_print_dec32_putc_31_t3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x9a)], resolved: None }
0a 9a 
# 02bfd Instruction { source: "Restoring reg0x9b after None <= call lcd_write_char(inline_print_dec32_putc_31_t3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x9b)], resolved: None }
0a 9b 
# 02bff Instruction { source: "Restoring reg0x9c after None <= call lcd_write_char(inline_print_dec32_putc_31_t3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x9c)], resolved: None }
0a 9c 
# 02c01 Instruction { source: "Restoring reg0x9d after None <= call lcd_write_char(inline_print_dec32_putc_31_t3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x9d)], resolved: None }
0a 9d 
# 02c03 Instruction { source: "Restoring reg0x9e after None <= call lcd_write_char(inline_print_dec32_putc_31_t3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x9e)], resolved: None }
0a 9e 
# 02c05 Instruction { source: "Restoring reg0x9f after None <= call lcd_write_char(inline_print_dec32_putc_31_t3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Pop8, args: [Register(0x9f)], resolved: None }
0a 9f 
# goto inline_print_dec32_putc_31_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_print_dec32_putc_31_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_print_dec32_putc_31_function_end_putc)], resolved: None }
# :inline_print_dec32_putc_31_function_end_putc
# 	SourceContext { contexts: [] }
# inline_print_dec32_putc_31_function_end_putc
# return None
# 	SourceContext { contexts: ["Return { value: None }"] }
# 02c07 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# :function_end_print_dec32
# 	SourceContext { contexts: [] }
# function_end_print_dec32
# Unreachable
# 	SourceContext { contexts: [] }
# 02c09 Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
# :print_dec8
# Ret None
# Arg0=a
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var a (Arg0 a Number(U8)) Reg(U8) Some([160])
# Var b (Local b Number(U8) Reg(U8)) Reg(U8) Some([161])
# Var inline_print_dec8_putc_32_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_print_dec8_putc_32_c (Arg0 c Number(U8)) Reg(U8) Some([160])
# Var inline_print_dec8_putc_32_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_print_dec8_putc_32_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([160])
# Var inline_print_dec8_putc_32_t1 (t1 Ident("c")) Reg(U8) Some([160])
# Var inline_print_dec8_putc_32_t2 (t2 Call(Call { function: "lcd_write_char", parameters: [Ident("c")] })) Reg(U8) Some([160])
# Var inline_print_dec8_putc_32_t3 (t3 Ident("c")) Reg(U8) Some([160])
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var t0 (t0 Ident("a")) Reg(U8) Some([160])
# Var t1 (t1 Number(U8, 10)) Reg(U8) Some([161])
# Var t10 (t10 Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })) Reg(U8) Some([160])
# Var t11 (t11 Arithmetic(Add, Ident("a"), Number(U8, 48))) Reg(U8) Some([160])
# Var t12 (t12 Ident("a")) Reg(U8) Some([160])
# Var t13 (t13 Number(U8, 48)) Reg(U8) Some([161])
# Var t2 (t2 Ident("a")) Reg(U8) Some([160])
# Var t3 (t3 Number(U8, 10)) Reg(U8) Some([161])
# Var t4 (t4 Call(Call { function: "print_dec8", parameters: [Ident("b")] })) Reg(U8) Some([160])
# Var t5 (t5 Ident("b")) Reg(U8) Some([161])
# Var t6 (t6 Ident("a")) Reg(U8) Some([160])
# Var t7 (t7 Arithmetic(Multiply, Ident("b"), Number(U8, 10))) Reg(U8) Some([161])
# Var t8 (t8 Ident("b")) Reg(U8) Some([161])
# Var t9 (t9 Number(U8, 10)) Reg(U8) Some([162])
# 02c0e Instruction { source: "Save function parameter 'a' registers [0] to locals [160].", opcode: Copy8, args: [Register(0x00), Register(0xa0)], resolved: None }
0b 00 a0 
# t0 <- a U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"a\"), right: Number(U8, 10) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10))) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"a\"), right: Number(U8, 10) }", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t0 <- a U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0xa0), Register(0xa0)], resolved: None }
# t1 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"a\"), right: Number(U8, 10) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10))) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"a\"), right: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 02c11 Instruction { source: "t1 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0xa1), Constant8(0x0a=10)], resolved: None }
04 a1 0a 
# if t0 >= t1 then 'print_dec8_if_true_0_1' else 'print_dec8_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"a\"), right: Number(U8, 10) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10))) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"a\"), right: Number(U8, 10) }"] }
# 02c14 Instruction { source: "if t0 >= t1 then 'print_dec8_if_true_0_1' else 'print_dec8_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: Cmp8, args: [Register(0xa1), Register(0xa0)], resolved: None }
15 a1 a0 
# 02c17 Instruction { source: "if t0 >= t1 then 'print_dec8_if_true_0_1' else 'print_dec8_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JcImm, args: [Label24(print_dec8_if_true_0_1)], resolved: None }
71 1f 2c 00 
# 02c1b Instruction { source: "if t0 >= t1 then 'print_dec8_if_true_0_1' else 'print_dec8_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"a\\\"), right: Number(U8, 10) }, [Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] }) }, Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"a\\\"), right: Number(U8, 10) }\"] }", opcode: JmpImm, args: [Label24(print_dec8_if_else_0_2)], resolved: None }
70 5f 2c 00 
# :print_dec8_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"a\"), right: Number(U8, 10) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10))) }])], else_block: [] }"] }
# print_dec8_if_true_0_1
# t2 <- a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Divide, Ident(\"a\"), Number(U8, 10))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t2 <- a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 10))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0xa0), Register(0xa0)], resolved: None }
# t3 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Divide, Ident(\"a\"), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 02c1f Instruction { source: "t3 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0xa1), Constant8(0x0a=10)], resolved: None }
04 a1 0a 
# b <- t2 Divide t3
# 	SourceContext { contexts: ["Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(U8, 10)) }", "Arithmetic(Divide, Ident(\"a\"), Number(U8, 10))"] }
# 02c22 Instruction { source: "b <- t2 Divide t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"b\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 10)) }\", \"Arithmetic(Divide, Ident(\\\"a\\\"), Number(U8, 10))\"] }", opcode: Divide8, args: [Register(0xa0), Register(0xa1), Register(0xa1)], resolved: None }
17 a0 a1 a1 
# t5 <- b U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] }) }", "Call(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] })", "Call(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] })", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "t5 <- b U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy8, args: [Register(0xa1), Register(0xa1)], resolved: None }
# None <= call print_dec8(t5,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] }) }", "Call(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] })", "Call(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] })"] }
# 02c26 Instruction { source: "Arg0[a]=t5 None <= call print_dec8(t5,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Copy8, args: [Register(0xa1), Register(0x00)], resolved: None }
0b a1 00 
# Registers used by this function: {160, 161, 162}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 216, 217, 233, 234, 235, 236, 240, 241, 242, 243, 244, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: [160, 161, 162]
# 02c29 Instruction { source: "Saving reg0xa2 before None <= call print_dec8(t5,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0xa2)], resolved: None }
09 a2 
# 02c2b Instruction { source: "Saving reg0xa1 before None <= call print_dec8(t5,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0xa1)], resolved: None }
09 a1 
# 02c2d Instruction { source: "Saving reg0xa0 before None <= call print_dec8(t5,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Push8, args: [Register(0xa0)], resolved: None }
09 a0 
# 02c2f Instruction { source: "PseudoCall(Label24(:print_dec8))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 02c35 Instruction { source: "PseudoCall(Label24(:print_dec8))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 3f 2c 00 00 
# 02c3b Instruction { source: "PseudoCall(Label24(:print_dec8))", opcode: JmpImm, args: [Label24(:print_dec8)], resolved: None }
70 0e 2c 00 
# 02c3f Instruction { source: "PseudoCall(Label24(:print_dec8))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 02c45 Instruction { source: "Restoring reg0xa0 after None <= call print_dec8(t5,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0xa0)], resolved: None }
0a a0 
# 02c47 Instruction { source: "Restoring reg0xa1 after None <= call print_dec8(t5,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0xa1)], resolved: None }
0a a1 
# 02c49 Instruction { source: "Restoring reg0xa2 after None <= call print_dec8(t5,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] }) }\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\", \"Call(Call { function: \\\"print_dec8\\\", parameters: [Ident(\\\"b\\\")] })\"] }", opcode: Pop8, args: [Register(0xa2)], resolved: None }
0a a2 
# t6 <- a U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10)))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t6 <- a U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10)))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0xa0), Register(0xa0)], resolved: None }
# t8 <- b U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10)))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10))", "Ident(\"b\")", "Ident(\"b\")"] }
# optimized away noop copy Instruction { source: "t8 <- b U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10)))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))\", \"Ident(\\\"b\\\")\", \"Ident(\\\"b\\\")\"] }", opcode: Copy8, args: [Register(0xa1), Register(0xa1)], resolved: None }
# t9 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10)))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10))", "Number(U8, 10)", "Number(U8, 10)"] }
# 02c4b Instruction { source: "t9 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10)))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0xa2), Constant8(0x0a=10)], resolved: None }
04 a2 0a 
# t7 <- t8 Multiply t9
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10)))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10))", "Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10))"] }
# 02c4e Instruction { source: "t7 <- t8 Multiply t9\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10)))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))\", \"Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))\"] }", opcode: Mul8_8, args: [Register(0xa1), Register(0xa2), Register(0xa1)], resolved: None }
10 a1 a2 a1 
# a <- t6 Subtract t7
# 	SourceContext { contexts: ["Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10))) }", "Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10)))"] }
# 02c52 Instruction { source: "a <- t6 Subtract t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10)))\"] }", opcode: Copy8, args: [Register(0xa1), Register(0x00)], resolved: None }
0b a1 00 
# 02c55 Instruction { source: "a <- t6 Subtract t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10)))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 02c57 Instruction { source: "a <- t6 Subtract t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"a\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10))) }\", \"Arithmetic(Subtract, Ident(\\\"a\\\"), Arithmetic(Multiply, Ident(\\\"b\\\"), Number(U8, 10)))\"] }", opcode: Add8NoCarryIn, args: [Register(0xa0), Register(0x00), Register(0xa0)], resolved: None }
14 a0 00 a0 
# goto print_dec8_if_end_0
# 	SourceContext { contexts: [] }
# 02c5b Instruction { source: "goto print_dec8_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(print_dec8_if_end_0)], resolved: None }
70 5f 2c 00 
# :print_dec8_if_else_0_2
# 	SourceContext { contexts: [] }
# print_dec8_if_else_0_2
# :print_dec8_if_end_0
# 	SourceContext { contexts: [] }
# print_dec8_if_end_0
# t12 <- a U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Ident(\"a\")", "Ident(\"a\")"] }
# optimized away noop copy Instruction { source: "t12 <- a U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Ident(\\\"a\\\")\", \"Ident(\\\"a\\\")\"] }", opcode: Copy8, args: [Register(0xa0), Register(0xa0)], resolved: None }
# t13 <- 0n48/0x30u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Number(U8, 48)", "Number(U8, 48)"] }
# 02c5f Instruction { source: "t13 <- 0n48/0x30u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Number(U8, 48)\", \"Number(U8, 48)\"] }", opcode: LoadImm8, args: [Register(0xa1), Constant8(0x30=48)], resolved: None }
04 a1 30 
# t11 <- t12 Add t13
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))", "Arithmetic(Add, Ident(\"a\"), Number(U8, 48))"] }
# 02c62 Instruction { source: "t11 <- t12 Add t13\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\", \"Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))\"] }", opcode: Add8NoCarryIn, args: [Register(0xa0), Register(0xa1), Register(0xa0)], resolved: None }
14 a0 a1 a0 
# inline_print_dec8_putc_32_c <- t11 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })", "Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })"] }
# optimized away noop copy Instruction { source: "inline_print_dec8_putc_32_c <- t11 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Arithmetic(Add, Ident(\\\"a\\\"), Number(U8, 48))] })\"] }", opcode: Copy8, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_print_dec8_putc_32_t1 <- inline_print_dec8_putc_32_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_print_dec8_putc_32_t1 <- inline_print_dec8_putc_32_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0xa0), Register(0xa0)], resolved: None }
# None <= call io_write0(inline_print_dec8_putc_32_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 02c66 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0xa0)], resolved: None }
68 a0 
# inline_print_dec8_putc_32_t3 <- inline_print_dec8_putc_32_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_print_dec8_putc_32_t3 <- inline_print_dec8_putc_32_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0xa0), Register(0xa0)], resolved: None }
# None <= call lcd_write_char(inline_print_dec8_putc_32_t3,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_write_char\", parameters: [Ident(\"c\")] })"] }
# 02c68 Instruction { source: "Arg0[ch]=inline_print_dec8_putc_32_t3 None <= call lcd_write_char(inline_print_dec8_putc_32_t3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_write_char\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy8, args: [Register(0xa0), Register(0x00)], resolved: None }
0b a0 00 
# Registers used by this function: {160, 161, 162}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 152, 153, 154, 155, 156, 157, 158, 159, 217, 233, 234, 235, 236, 240, 241, 242, 243, 244, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 02c6b Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 02c71 Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 7b 2c 00 00 
# 02c77 Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: JmpImm, args: [Label24(:lcd_write_char)], resolved: None }
70 1a 22 00 
# 02c7b Instruction { source: "PseudoCall(Label24(:lcd_write_char))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# goto inline_print_dec8_putc_32_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_print_dec8_putc_32_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_print_dec8_putc_32_function_end_putc)], resolved: None }
# :inline_print_dec8_putc_32_function_end_putc
# 	SourceContext { contexts: [] }
# inline_print_dec8_putc_32_function_end_putc
# return None
# 	SourceContext { contexts: ["Return { value: None }"] }
# 02c81 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# :function_end_print_dec8
# 	SourceContext { contexts: [] }
# function_end_print_dec8
# Unreachable
# 	SourceContext { contexts: [] }
# 02c83 Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
# :stdio_init
# Ret None
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_stdio_init_queue_init_37_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_stdio_init_queue_init_37_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_stdio_init_queue_init_37_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([164, 165, 166, 167])
# Var inline_stdio_init_queue_init_37_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }) Reg(U32) Some([168, 169, 170, 171])
# Var inline_stdio_init_queue_init_37_t1 (t1 Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([164, 165, 166, 167])
# Var inline_stdio_init_queue_init_37_t2 (t2 Number(USIZE, 256)) Reg(U32) Some([168, 169, 170, 171])
# Var inline_stdio_init_queue_init_37_t3 (t3 Number(U8, 0)) Reg(U8) Some([172])
# Var inline_stdio_init_queue_init_37_t4 (t4 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([164, 165, 166, 167])
# Var inline_stdio_init_queue_init_37_t5 (t5 Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([164, 165, 166, 167])
# Var inline_stdio_init_queue_init_37_t6 (t6 Number(USIZE, 260)) Reg(U32) Some([168, 169, 170, 171])
# Var inline_stdio_init_queue_init_37_t7 (t7 Number(U8, 0)) Reg(U8) Some([173])
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var t0 (t0 Call(Call { function: "queue_init", parameters: [AddressOf(Ident("stdin"))] })) Reg(U8) Some([174])
# Var t1 (t1 AddressOf(Ident("stdin"))) Reg(U32) Some([164, 165, 166, 167])
# Var t2 (static "stdin") Reg(U32) Some([164, 165, 166, 167])
# Var t3 (t3 Call(Call { function: "lcd_init", parameters: [] })) Reg(U8) Some([174])
# Var t4 (t4 Call(Call { function: "KeyBoard_init", parameters: [] })) Reg(U8) Some([174])
# t2 <- 0n987228/0x000f105cu32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] }) }", "Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] })", "Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] })", "AddressOf(Ident(\"stdin\"))", "AddressOf(Ident(\"stdin\"))"] }
# 02c88 Instruction { source: "t2 <- 0n987228/0x000f105cu32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_init\\\", parameters: [AddressOf(Ident(\\\"stdin\\\"))] }) }\", \"Call(Call { function: \\\"queue_init\\\", parameters: [AddressOf(Ident(\\\"stdin\\\"))] })\", \"Call(Call { function: \\\"queue_init\\\", parameters: [AddressOf(Ident(\\\"stdin\\\"))] })\", \"AddressOf(Ident(\\\"stdin\\\"))\", \"AddressOf(Ident(\\\"stdin\\\"))\"] }", opcode: LoadImm32, args: [Register(0xa4), Constant32(0x000f105c=987228)], resolved: None }
20 a4 5c 10 0f 00 
# t1 <- t2 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] }) }", "Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] })", "Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] })", "AddressOf(Ident(\"stdin\"))", "AddressOf(Ident(\"stdin\"))"] }
# optimized away noop copy Instruction { source: "t1 <- t2 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_init\\\", parameters: [AddressOf(Ident(\\\"stdin\\\"))] }) }\", \"Call(Call { function: \\\"queue_init\\\", parameters: [AddressOf(Ident(\\\"stdin\\\"))] })\", \"Call(Call { function: \\\"queue_init\\\", parameters: [AddressOf(Ident(\\\"stdin\\\"))] })\", \"AddressOf(Ident(\\\"stdin\\\"))\", \"AddressOf(Ident(\\\"stdin\\\"))\"] }", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# inline_stdio_init_queue_init_37_s <- t1 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] }) }", "Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] })", "Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] })"] }
# optimized away noop copy Instruction { source: "inline_stdio_init_queue_init_37_s <- t1 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_init\\\", parameters: [AddressOf(Ident(\\\"stdin\\\"))] }) }\", \"Call(Call { function: \\\"queue_init\\\", parameters: [AddressOf(Ident(\\\"stdin\\\"))] })\", \"Call(Call { function: \\\"queue_init\\\", parameters: [AddressOf(Ident(\\\"stdin\\\"))] })\"] }", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# inline_stdio_init_queue_init_37_t1 <- inline_stdio_init_queue_init_37_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_stdio_init_queue_init_37_t1 <- inline_stdio_init_queue_init_37_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# inline_stdio_init_queue_init_37_t2 <- 0n256/0x00000100u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))", "Number(USIZE, 256)", "Number(USIZE, 256)"] }
# 02c8e Instruction { source: "inline_stdio_init_queue_init_37_t2 <- 0n256/0x00000100u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\", \"Number(USIZE, 256)\", \"Number(USIZE, 256)\"] }", opcode: LoadImm32, args: [Register(0xa8), Constant32(0x00000100=256)], resolved: None }
20 a8 00 01 00 00 
# inline_stdio_init_queue_init_37_t0 <- inline_stdio_init_queue_init_37_t1 Add inline_stdio_init_queue_init_37_t2
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))"] }
# 02c94 Instruction { source: "inline_stdio_init_queue_init_37_t0 <- inline_stdio_init_queue_init_37_t1 Add inline_stdio_init_queue_init_37_t2\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 02c95 Instruction { source: "inline_stdio_init_queue_init_37_t0 <- inline_stdio_init_queue_init_37_t1 Add inline_stdio_init_queue_init_37_t2\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: AddCarry32_1, args: [Register(0xa4), Register(0xa8), Register(0xa8)], resolved: None }
30 a4 a8 a8 
# 02c99 Instruction { source: "inline_stdio_init_queue_init_37_t0 <- inline_stdio_init_queue_init_37_t1 Add inline_stdio_init_queue_init_37_t2\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_stdio_init_queue_init_37_t3 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 02c9a Instruction { source: "inline_stdio_init_queue_init_37_t3 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0xac), Constant8(0x00=0)], resolved: None }
04 ac 00 
# mem[inline_stdio_init_queue_init_37_t0] <- inline_stdio_init_queue_init_37_t3 U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Number(U8, 0) }"] }
# 02c9d Instruction { source: "mem[inline_stdio_init_queue_init_37_t0] <- inline_stdio_init_queue_init_37_t3 U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Number(U8, 0) }\"] }", opcode: Store8, args: [Register(0xac), Register(0xa8)], resolved: None }
06 ac a8 
# inline_stdio_init_queue_init_37_t5 <- inline_stdio_init_queue_init_37_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_stdio_init_queue_init_37_t5 <- inline_stdio_init_queue_init_37_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# inline_stdio_init_queue_init_37_t6 <- 0n260/0x00000104u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Number(USIZE, 260)", "Number(USIZE, 260)"] }
# 02ca0 Instruction { source: "inline_stdio_init_queue_init_37_t6 <- 0n260/0x00000104u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Number(USIZE, 260)\", \"Number(USIZE, 260)\"] }", opcode: LoadImm32, args: [Register(0xa8), Constant32(0x00000104=260)], resolved: None }
20 a8 04 01 00 00 
# inline_stdio_init_queue_init_37_t4 <- inline_stdio_init_queue_init_37_t5 Add inline_stdio_init_queue_init_37_t6
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))"] }
# 02ca6 Instruction { source: "inline_stdio_init_queue_init_37_t4 <- inline_stdio_init_queue_init_37_t5 Add inline_stdio_init_queue_init_37_t6\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 02ca7 Instruction { source: "inline_stdio_init_queue_init_37_t4 <- inline_stdio_init_queue_init_37_t5 Add inline_stdio_init_queue_init_37_t6\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddCarry32_1, args: [Register(0xa4), Register(0xa8), Register(0xa4)], resolved: None }
30 a4 a8 a4 
# 02cab Instruction { source: "inline_stdio_init_queue_init_37_t4 <- inline_stdio_init_queue_init_37_t5 Add inline_stdio_init_queue_init_37_t6\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_stdio_init_queue_init_37_t7 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 02cac Instruction { source: "inline_stdio_init_queue_init_37_t7 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0xad), Constant8(0x00=0)], resolved: None }
04 ad 00 
# mem[inline_stdio_init_queue_init_37_t4] <- inline_stdio_init_queue_init_37_t7 U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Number(U8, 0) }"] }
# 02caf Instruction { source: "mem[inline_stdio_init_queue_init_37_t4] <- inline_stdio_init_queue_init_37_t7 U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Number(U8, 0) }\"] }", opcode: Store8, args: [Register(0xad), Register(0xa4)], resolved: None }
06 ad a4 
# goto inline_stdio_init_queue_init_37_function_end_queue_init
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_stdio_init_queue_init_37_function_end_queue_init\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_stdio_init_queue_init_37_function_end_queue_init)], resolved: None }
# :inline_stdio_init_queue_init_37_function_end_queue_init
# 	SourceContext { contexts: [] }
# inline_stdio_init_queue_init_37_function_end_queue_init
# None <= call lcd_init()
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_init\", parameters: [] }) }", "Call(Call { function: \"lcd_init\", parameters: [] })", "Call(Call { function: \"lcd_init\", parameters: [] })"] }
# Registers used by this function: {164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174}
# Registers used by callee tree: {152, 153, 154, 155, 156, 157, 158, 159, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232}
# Registers to save: []
# 02cb2 Instruction { source: "PseudoCall(Label24(:lcd_init))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 02cb8 Instruction { source: "PseudoCall(Label24(:lcd_init))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c c2 2c 00 00 
# 02cbe Instruction { source: "PseudoCall(Label24(:lcd_init))", opcode: JmpImm, args: [Label24(:lcd_init)], resolved: None }
70 41 1e 00 
# 02cc2 Instruction { source: "PseudoCall(Label24(:lcd_init))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# None <= call KeyBoard_init()
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"KeyBoard_init\", parameters: [] }) }", "Call(Call { function: \"KeyBoard_init\", parameters: [] })", "Call(Call { function: \"KeyBoard_init\", parameters: [] })"] }
# Registers used by this function: {164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174}
# Registers used by callee tree: {16, 17, 18, 19, 20, 24, 25, 26, 27}
# Registers to save: []
# 02cc8 Instruction { source: "PseudoCall(Label24(:KeyBoard_init))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 02cce Instruction { source: "PseudoCall(Label24(:KeyBoard_init))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c d8 2c 00 00 
# 02cd4 Instruction { source: "PseudoCall(Label24(:KeyBoard_init))", opcode: JmpImm, args: [Label24(:KeyBoard_init)], resolved: None }
70 27 04 00 
# 02cd8 Instruction { source: "PseudoCall(Label24(:KeyBoard_init))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# return None
# 	SourceContext { contexts: ["Return { value: None }"] }
# 02cde Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# :function_end_stdio_init
# 	SourceContext { contexts: [] }
# function_end_stdio_init
# Unreachable
# 	SourceContext { contexts: [] }
# 02ce0 Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
