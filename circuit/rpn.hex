v2.0 raw
# In IlFunctionId("Keyboard_poll"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `tfff6`.
# In IlFunctionId("RpnCalc_handle"), `c` is never written to, but is copied to `tbc15` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tbc15 <- c U32
# In IlFunctionId("RpnCalc_handle"), `c` is never written to, but is copied to `stack` - which is also never modified. Replacing refs to latter with the former and deleting the copy: stack <- c U32
# In IlFunctionId("RpnCalc_handle"), `c` is never written to, but is copied to `t7f48` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t7f48 <- c U32
# In IlFunctionId("RpnCalc_init"), `c` is never written to, but is copied to `tbc15` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tbc15 <- c U32
# In IlFunctionId("RpnCalc_init"), `c` is never written to, but is copied to `s` - which is also never modified. Replacing refs to latter with the former and deleting the copy: s <- c U32
# In IlFunctionId("RpnCalc_init"), `c` is never written to, but is copied to `tb2e9` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tb2e9 <- c U32
# In IlFunctionId("RpnCalc_init"), `c` is never written to, but is copied to `tb1ed` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tb1ed <- c U32
# In IlFunctionId("RpnCalc_push_pending"), `c` is never written to, but is copied to `tbc15` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tbc15 <- c U32
# In IlFunctionId("RpnCalc_push_pending"), `c` is never written to, but is copied to `t4760` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t4760 <- c U32
# In IlFunctionId("RpnCalc_run"), `calc` is never written to, but is copied to `td337` - which is also never modified. Replacing refs to latter with the former and deleting the copy: td337 <- calc U32
# In IlFunctionId("add_U64"), `a` is never written to, but is copied to `t3203` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t3203 <- a U32
# In IlFunctionId("add_U64"), `b` is never written to, but is copied to `teec0` - which is also never modified. Replacing refs to latter with the former and deleting the copy: teec0 <- b U32
# In IlFunctionId("add_U64"), `b` is never written to, but is copied to `t24ae` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t24ae <- b U32
# In IlFunctionId("div32"), removing no-op il instruction: t4a94 <- te825 Add Number(0n0/0x00000000u32)
# In IlFunctionId("div32_by10"), resolved the constant val `Number(0n987656/0x000f1208u32)` for var `t1c61`.
# In IlFunctionId("div32_by10"), `a` is never written to, but is copied to `t8792` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t8792 <- a U32
# In IlFunctionId("getchar"), resolved the constant val `Number(0n987144/0x000f1008u32)` for var `t0`.
# In IlFunctionId("getchar"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `tfff6`.
# In IlFunctionId("lcd_draw_char"), `i` is never written to, but is copied to `td0f3` - which is also never modified. Replacing refs to latter with the former and deleting the copy: td0f3 <- i U8
# In IlFunctionId("lcd_init"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t0`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t0`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t1`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t2`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t3`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t4`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t5`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t6`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t7`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t8`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t9`.
# In IlFunctionId("lcd_scroll_up"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t0`.
# In IlFunctionId("lcd_scroll_up"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t1`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987664/0x000f1210u32)` for var `tca8`.
# In IlFunctionId("mul32_64"), `c` is never written to, but is copied to `t8956` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t8956 <- c U32
# In IlFunctionId("mul32_64"), `c` is never written to, but is copied to `t2558` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t2558 <- c U32
# In IlFunctionId("mul8"), `x` is never written to, but is copied to `tad57` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tad57 <- x U8
# In IlFunctionId("mul8"), `y` is never written to, but is copied to `t8ae2` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t8ae2 <- y U8
# In IlFunctionId("mul8_16"), `x` is never written to, but is copied to `tad57` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tad57 <- x U8
# In IlFunctionId("mul8_16"), `y` is never written to, but is copied to `t8ae2` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t8ae2 <- y U8
# In IlFunctionId("print_dec32_test"), `a` is never written to, but is copied to `t8792` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t8792 <- a U32
# In IlFunctionId("print_dec8_test"), `a` is never written to, but is copied to `t8792` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t8792 <- a U8
# In IlFunctionId("putc"), resolved the constant val `Number(0n987228/0x000f105cu32)` for var `t0`.
# In IlFunctionId("queue_pop"), `s` is never written to, but is copied to `t565a` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t565a <- s U32
# In IlFunctionId("queue_pop"), `s` is never written to, but is copied to `values` - which is also never modified. Replacing refs to latter with the former and deleting the copy: values <- s U32
# In IlFunctionId("queue_pop"), `s` is never written to, but is copied to `t1d36` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t1d36 <- s U32
# In IlFunctionId("queue_push"), `s` is never written to, but is copied to `t565a` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t565a <- s U32
# In IlFunctionId("queue_push"), `s` is never written to, but is copied to `values` - which is also never modified. Replacing refs to latter with the former and deleting the copy: values <- s U32
# In IlFunctionId("queue_push"), `s` is never written to, but is copied to `t1d36` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t1d36 <- s U32
# In IlFunctionId("queue_push"), `n` is never written to, but is copied to `t531d` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t531d <- n U8
# In IlFunctionId("stack_get"), `s` is never written to, but is copied to `t587d` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t587d <- s U32
# In IlFunctionId("stack_get"), `s` is never written to, but is copied to `values` - which is also never modified. Replacing refs to latter with the former and deleting the copy: values <- s U32
# In IlFunctionId("stack_get"), `s` is never written to, but is copied to `tf90a` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tf90a <- s U32
# In IlFunctionId("stack_get"), `n` is never written to, but is copied to `t531d` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t531d <- n U32
# In IlFunctionId("stack_init"), `s` is never written to, but is copied to `t4bb9` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t4bb9 <- s U32
# In IlFunctionId("stack_pop"), `s` is never written to, but is copied to `t587d` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t587d <- s U32
# In IlFunctionId("stack_pop"), `s` is never written to, but is copied to `values` - which is also never modified. Replacing refs to latter with the former and deleting the copy: values <- s U32
# In IlFunctionId("stack_pop"), `s` is never written to, but is copied to `tf90a` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tf90a <- s U32
# In IlFunctionId("stack_push"), `s` is never written to, but is copied to `t587d` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t587d <- s U32
# In IlFunctionId("stack_push"), `s` is never written to, but is copied to `values` - which is also never modified. Replacing refs to latter with the former and deleting the copy: values <- s U32
# In IlFunctionId("stack_push"), `s` is never written to, but is copied to `tf90a` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tf90a <- s U32
# In IlFunctionId("stack_push"), `n` is never written to, but is copied to `t531d` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t531d <- n U32
# In IlFunctionId("stdio_init"), resolved the constant val `Number(0n987228/0x000f105cu32)` for var `t0`.
# In IlFunctionId("stdio_init"), resolved the constant val `Number(0n987144/0x000f1008u32)` for var `t1`.
# In IlFunctionId("stdio_init"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `tfff6`.
# In IlFunctionId("test_add_U64"), resolved the constant val `Number(0n987740/0x000f125cu32)` for var `tcc7b`.
# In IlFunctionId("test_add_U64"), `a` is never written to, but is copied to `t8792` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t8792 <- a U32
# In IlFunctionId("test_add_U64"), `b` is never written to, but is copied to `tace9` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tace9 <- b U32
# In IlFunctionId("test_delay"), `x` is never written to, but is copied to `tad57` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tad57 <- x U32
# In IlFunctionId("test_mul32_64"), resolved the constant val `Number(0n987748/0x000f1264u32)` for var `tcc7b`.
# In IlFunctionId("test_mul32_64"), `a` is never written to, but is copied to `t8792` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t8792 <- a U32
# In IlFunctionId("test_mul32_64"), `b` is never written to, but is copied to `tace9` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tace9 <- b U32
# In IlFunctionId("Keyboard_poll"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `inline_Keyboard_poll_queue_push_37_s`.
# In IlFunctionId("Keyboard_poll"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `inline_Keyboard_poll_queue_push_37_t4d4f`.
# In IlFunctionId("Keyboard_poll"), resolved the constant val `Number(0n987652/0x000f1204u32)` for var `inline_Keyboard_poll_queue_push_37_tc1ff`.
# In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_s <- tfff6 U32` with constant `inline_Keyboard_poll_queue_push_37_s <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_t4d4f <- inline_Keyboard_poll_queue_push_37_s U32` with constant `inline_Keyboard_poll_queue_push_37_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32 `.
# In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_t4d4f <- inline_Keyboard_poll_queue_push_37_s U32` with constant `inline_Keyboard_poll_queue_push_37_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32 `.
# In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_t4d4f <- inline_Keyboard_poll_queue_push_37_s U32` with constant `inline_Keyboard_poll_queue_push_37_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32 `.
# In IlFunctionId("Keyboard_poll"), var `inline_Keyboard_poll_queue_push_37_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_Keyboard_poll_queue_push_37_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(26,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8))", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"Keyboard_poll\"), replacing `inline_Keyboard_poll_queue_push_37_t4d4f <- inline_Keyboard_poll_queue_push_37_s U32` with constant `inline_Keyboard_poll_queue_push_37_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("Keyboard_poll"), var `inline_Keyboard_poll_queue_push_37_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_Keyboard_poll_queue_push_37_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(26,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"Keyboard_poll\"), replacing `inline_Keyboard_poll_queue_push_37_t4d4f <- inline_Keyboard_poll_queue_push_37_s U32` with constant `inline_Keyboard_poll_queue_push_37_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("Keyboard_poll"), var `inline_Keyboard_poll_queue_push_37_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_Keyboard_poll_queue_push_37_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(25,5)), SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"Keyboard_poll\"), replacing `inline_Keyboard_poll_queue_push_37_t4d4f <- inline_Keyboard_poll_queue_push_37_s U32` with constant `inline_Keyboard_poll_queue_push_37_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("Keyboard_poll"), var `tfff6` is written to, but never read. Removing the instruction that writes to it: (tfff6 <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Keyboard.j':(31,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })", "AddressOf(Ident(\"stdin\"))", "AddressOf(Ident(\"stdin\"))", "Number(0n987392/0x000f1100u32)"] })
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n69/0x45u8)` for var `inline_RpnCalc_handle_putc_15_c`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n69/0x45u8)` for var `inline_RpnCalc_handle_putc_15_tac13`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n82/0x52u8)` for var `inline_RpnCalc_handle_putc_16_c`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n82/0x52u8)` for var `inline_RpnCalc_handle_putc_16_tac13`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n82/0x52u8)` for var `inline_RpnCalc_handle_putc_17_c`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n82/0x52u8)` for var `inline_RpnCalc_handle_putc_17_tac13`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_RpnCalc_handle_putc_18_c`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_RpnCalc_handle_putc_18_tac13`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_RpnCalc_handle_putc_19_c`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_RpnCalc_handle_putc_19_tac13`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_RpnCalc_handle_putc_20_c`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_RpnCalc_handle_putc_20_tac13`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_RpnCalc_handle_putc_21_c`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_RpnCalc_handle_putc_21_tac13`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_RpnCalc_handle_putc_22_c`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_RpnCalc_handle_putc_22_tac13`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n58/0x3au8)` for var `inline_RpnCalc_handle_putc_23_c`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n58/0x3au8)` for var `inline_RpnCalc_handle_putc_23_tac13`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_RpnCalc_handle_putc_24_c`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_RpnCalc_handle_putc_24_tac13`.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_15_c <- t7ec4 U8` with constant `inline_RpnCalc_handle_putc_15_c <- 0n69/0x45u8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_15_tac13 <- inline_RpnCalc_handle_putc_15_c U8` with constant `inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_15_tac13 <- inline_RpnCalc_handle_putc_15_c U8` with constant `inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_16_c <- tf36 U8` with constant `inline_RpnCalc_handle_putc_16_c <- 0n82/0x52u8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_16_tac13 <- inline_RpnCalc_handle_putc_16_c U8` with constant `inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_16_tac13 <- inline_RpnCalc_handle_putc_16_c U8` with constant `inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_17_c <- tf36 U8` with constant `inline_RpnCalc_handle_putc_17_c <- 0n82/0x52u8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_17_tac13 <- inline_RpnCalc_handle_putc_17_c U8` with constant `inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_17_tac13 <- inline_RpnCalc_handle_putc_17_c U8` with constant `inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_18_c <- t25ee U8` with constant `inline_RpnCalc_handle_putc_18_c <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_18_tac13 <- inline_RpnCalc_handle_putc_18_c U8` with constant `inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_18_tac13 <- inline_RpnCalc_handle_putc_18_c U8` with constant `inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_19_c <- t25ee U8` with constant `inline_RpnCalc_handle_putc_19_c <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_19_tac13 <- inline_RpnCalc_handle_putc_19_c U8` with constant `inline_RpnCalc_handle_putc_19_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_19_tac13 <- inline_RpnCalc_handle_putc_19_c U8` with constant `inline_RpnCalc_handle_putc_19_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_20_c <- t25ee U8` with constant `inline_RpnCalc_handle_putc_20_c <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_20_tac13 <- inline_RpnCalc_handle_putc_20_c U8` with constant `inline_RpnCalc_handle_putc_20_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_20_tac13 <- inline_RpnCalc_handle_putc_20_c U8` with constant `inline_RpnCalc_handle_putc_20_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_21_c <- t25ee U8` with constant `inline_RpnCalc_handle_putc_21_c <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_21_tac13 <- inline_RpnCalc_handle_putc_21_c U8` with constant `inline_RpnCalc_handle_putc_21_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_21_tac13 <- inline_RpnCalc_handle_putc_21_c U8` with constant `inline_RpnCalc_handle_putc_21_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_22_c <- t25ee U8` with constant `inline_RpnCalc_handle_putc_22_c <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_22_tac13 <- inline_RpnCalc_handle_putc_22_c U8` with constant `inline_RpnCalc_handle_putc_22_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_22_tac13 <- inline_RpnCalc_handle_putc_22_c U8` with constant `inline_RpnCalc_handle_putc_22_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_23_c <- t506b U8` with constant `inline_RpnCalc_handle_putc_23_c <- 0n58/0x3au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_23_tac13 <- inline_RpnCalc_handle_putc_23_c U8` with constant `inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_23_tac13 <- inline_RpnCalc_handle_putc_23_c U8` with constant `inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_24_c <- t25ee U8` with constant `inline_RpnCalc_handle_putc_24_c <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_24_tac13 <- inline_RpnCalc_handle_putc_24_c U8` with constant `inline_RpnCalc_handle_putc_24_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_24_tac13 <- inline_RpnCalc_handle_putc_24_c U8` with constant `inline_RpnCalc_handle_putc_24_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), var `inline_RpnCalc_handle_putc_15_c` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_handle_putc_15_c <- 0n69/0x45u8 , Some('/lutcomp/programs/lib/rpnlib.j':(55,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n69/0x45u8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n69/0x45u8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n69/0x45u8)] })", "# In IlFunctionId(\"RpnCalc_handle\"), replacing `inline_RpnCalc_handle_putc_15_c <- t7ec4 U8` with constant `inline_RpnCalc_handle_putc_15_c <- 0n69/0x45u8 `."] })
# In IlFunctionId("RpnCalc_handle"), var `inline_RpnCalc_handle_putc_16_c` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_handle_putc_16_c <- 0n82/0x52u8 , Some('/lutcomp/programs/lib/rpnlib.j':(55,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] })", "# In IlFunctionId(\"RpnCalc_handle\"), replacing `inline_RpnCalc_handle_putc_16_c <- tf36 U8` with constant `inline_RpnCalc_handle_putc_16_c <- 0n82/0x52u8 `."] })
# In IlFunctionId("RpnCalc_handle"), var `inline_RpnCalc_handle_putc_17_c` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_handle_putc_17_c <- 0n82/0x52u8 , Some('/lutcomp/programs/lib/rpnlib.j':(55,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] })", "# In IlFunctionId(\"RpnCalc_handle\"), replacing `inline_RpnCalc_handle_putc_17_c <- tf36 U8` with constant `inline_RpnCalc_handle_putc_17_c <- 0n82/0x52u8 `."] })
# In IlFunctionId("RpnCalc_handle"), var `inline_RpnCalc_handle_putc_18_c` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_handle_putc_18_c <- 0n10/0x0au8 , Some('/lutcomp/programs/lib/rpnlib.j':(55,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "# In IlFunctionId(\"RpnCalc_handle\"), replacing `inline_RpnCalc_handle_putc_18_c <- t25ee U8` with constant `inline_RpnCalc_handle_putc_18_c <- 0n10/0x0au8 `."] })
# In IlFunctionId("RpnCalc_handle"), var `inline_RpnCalc_handle_putc_19_c` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_handle_putc_19_c <- 0n10/0x0au8 , Some('/lutcomp/programs/lib/rpnlib.j':(70,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "# In IlFunctionId(\"RpnCalc_handle\"), replacing `inline_RpnCalc_handle_putc_19_c <- t25ee U8` with constant `inline_RpnCalc_handle_putc_19_c <- 0n10/0x0au8 `."] })
# In IlFunctionId("RpnCalc_handle"), var `inline_RpnCalc_handle_putc_20_c` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_handle_putc_20_c <- 0n10/0x0au8 , Some('/lutcomp/programs/lib/rpnlib.j':(70,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "# In IlFunctionId(\"RpnCalc_handle\"), replacing `inline_RpnCalc_handle_putc_20_c <- t25ee U8` with constant `inline_RpnCalc_handle_putc_20_c <- 0n10/0x0au8 `."] })
# In IlFunctionId("RpnCalc_handle"), var `inline_RpnCalc_handle_putc_21_c` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_handle_putc_21_c <- 0n10/0x0au8 , Some('/lutcomp/programs/lib/rpnlib.j':(70,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "# In IlFunctionId(\"RpnCalc_handle\"), replacing `inline_RpnCalc_handle_putc_21_c <- t25ee U8` with constant `inline_RpnCalc_handle_putc_21_c <- 0n10/0x0au8 `."] })
# In IlFunctionId("RpnCalc_handle"), var `inline_RpnCalc_handle_putc_22_c` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_handle_putc_22_c <- 0n10/0x0au8 , Some('/lutcomp/programs/lib/rpnlib.j':(70,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "# In IlFunctionId(\"RpnCalc_handle\"), replacing `inline_RpnCalc_handle_putc_22_c <- t25ee U8` with constant `inline_RpnCalc_handle_putc_22_c <- 0n10/0x0au8 `."] })
# In IlFunctionId("RpnCalc_handle"), var `inline_RpnCalc_handle_putc_23_c` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_handle_putc_23_c <- 0n58/0x3au8 , Some('/lutcomp/programs/lib/rpnlib.j':(70,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n58/0x3au8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n58/0x3au8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n58/0x3au8)] })", "# In IlFunctionId(\"RpnCalc_handle\"), replacing `inline_RpnCalc_handle_putc_23_c <- t506b U8` with constant `inline_RpnCalc_handle_putc_23_c <- 0n58/0x3au8 `."] })
# In IlFunctionId("RpnCalc_handle"), var `inline_RpnCalc_handle_putc_24_c` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_handle_putc_24_c <- 0n10/0x0au8 , Some('/lutcomp/programs/lib/rpnlib.j':(70,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "# In IlFunctionId(\"RpnCalc_handle\"), replacing `inline_RpnCalc_handle_putc_24_c <- t25ee U8` with constant `inline_RpnCalc_handle_putc_24_c <- 0n10/0x0au8 `."] })
# In IlFunctionId("RpnCalc_handle"), var `t506b` is written to, but never read. Removing the instruction that writes to it: (t506b <- 0n58/0x3au8 , Some('/lutcomp/programs/lib/rpnlib.j':(70,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n58/0x3au8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n58/0x3au8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n58/0x3au8)] })", "Number(0n58/0x3au8)", "Number(0n58/0x3au8)"] })
# In IlFunctionId("RpnCalc_handle"), var `t7ec4` is written to, but never read. Removing the instruction that writes to it: (t7ec4 <- 0n69/0x45u8 , Some('/lutcomp/programs/lib/rpnlib.j':(55,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n69/0x45u8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n69/0x45u8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n69/0x45u8)] })", "Number(0n69/0x45u8)", "Number(0n69/0x45u8)"] })
# In IlFunctionId("RpnCalc_handle"), var `tf36` is written to, but never read. Removing the instruction that writes to it: (tf36 <- 0n82/0x52u8 , Some('/lutcomp/programs/lib/rpnlib.j':(55,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] })", "Number(0n82/0x52u8)", "Number(0n82/0x52u8)"] })
# In IlFunctionId("RpnCalc_handle"), var `tf36` is written to, but never read. Removing the instruction that writes to it: (tf36 <- 0n82/0x52u8 , Some('/lutcomp/programs/lib/rpnlib.j':(55,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] })", "Number(0n82/0x52u8)", "Number(0n82/0x52u8)"] })
# In IlFunctionId("RpnCalc_run"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s`.
# In IlFunctionId("RpnCalc_run"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f`.
# In IlFunctionId("RpnCalc_run"), resolved the constant val `Number(0n987648/0x000f1200u32)` for var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702`.
# In IlFunctionId("RpnCalc_run"), resolved the constant val `Number(0n987652/0x000f1204u32)` for var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff`.
# In IlFunctionId("RpnCalc_run"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s`.
# In IlFunctionId("RpnCalc_run"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f`.
# In IlFunctionId("RpnCalc_run"), resolved the constant val `Number(0n987652/0x000f1204u32)` for var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff`.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s <- inline_RpnCalc_run_getchar_39_tfff6 U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- inline_RpnCalc_run_getchar_39_tfff6 U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- 0n987652/0x000f1204u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32 `.
# In IlFunctionId("RpnCalc_run"), var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(19,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(0n1/0x01u8)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(0n1/0x01u8))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(0n1/0x01u8))", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"RpnCalc_run\"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("RpnCalc_run"), var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(19,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(0n1/0x01u8)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"RpnCalc_run\"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("RpnCalc_run"), var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(18,5)), SourceContext { contexts: ["Assign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first\"))", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"first\") }) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"first\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"first\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"first\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"first\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"RpnCalc_run\"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("RpnCalc_run"), var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(13,5)), SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"RpnCalc_run\"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("RpnCalc_run"), var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(13,5)), SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"RpnCalc_run\"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("RpnCalc_run"), var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(26,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8))", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"RpnCalc_run\"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("RpnCalc_run"), var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(26,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"RpnCalc_run\"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("RpnCalc_run"), var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(25,5)), SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"RpnCalc_run\"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("RpnCalc_run"), var `inline_RpnCalc_run_getchar_39_tfff6` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_run_getchar_39_tfff6 <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/stdio.j':(21,5)), SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"stdin\"))] }) }", "Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"stdin\"))] })", "AddressOf(Ident(\"stdin\"))", "AddressOf(Ident(\"stdin\"))", "Number(0n987392/0x000f1100u32)"] })
# In IlFunctionId("RpnCalc_run"), var `inline_RpnCalc_run_getchar_39_tfff6` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_run_getchar_39_tfff6 <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/stdio.j':(21,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] })", "AddressOf(Ident(\"stdin\"))", "AddressOf(Ident(\"stdin\"))", "Number(0n987392/0x000f1100u32)"] })
# In IlFunctionId("lcd_draw_char"), `i` is never written to, but is copied to `inline_lcd_draw_char_lcd_logical_to_physical_3_i` - which is also never modified. Replacing refs to latter with the former and deleting the copy: inline_lcd_draw_char_lcd_logical_to_physical_3_i <- i U8
# In IlFunctionId("main"), resolved the constant val `Number(0n987664/0x000f1210u32)` for var `inline_main_RpnCalc_init_51_c`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987664/0x000f1210u32)` for var `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987728/0x000f1250u32)` for var `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987732/0x000f1254u32)` for var `inline_main_RpnCalc_init_51_t6e8e`.
# In IlFunctionId("main"), resolved the constant val `Number(0n82/0x52u8)` for var `inline_main_putc_25_c`.
# In IlFunctionId("main"), resolved the constant val `Number(0n82/0x52u8)` for var `inline_main_putc_25_tac13`.
# In IlFunctionId("main"), resolved the constant val `Number(0n80/0x50u8)` for var `inline_main_putc_26_c`.
# In IlFunctionId("main"), resolved the constant val `Number(0n80/0x50u8)` for var `inline_main_putc_26_tac13`.
# In IlFunctionId("main"), resolved the constant val `Number(0n78/0x4eu8)` for var `inline_main_putc_27_c`.
# In IlFunctionId("main"), resolved the constant val `Number(0n78/0x4eu8)` for var `inline_main_putc_27_tac13`.
# In IlFunctionId("main"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_main_putc_28_c`.
# In IlFunctionId("main"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_main_putc_28_tac13`.
# In IlFunctionId("main"), replacing `inline_main_putc_25_c <- tf36 U8` with constant `inline_main_putc_25_c <- 0n82/0x52u8 `.
# In IlFunctionId("main"), replacing `inline_main_putc_25_tac13 <- inline_main_putc_25_c U8` with constant `inline_main_putc_25_tac13 <- 0n82/0x52u8 `.
# In IlFunctionId("main"), replacing `inline_main_putc_25_tac13 <- inline_main_putc_25_c U8` with constant `inline_main_putc_25_tac13 <- 0n82/0x52u8 `.
# In IlFunctionId("main"), replacing `inline_main_putc_26_c <- td749 U8` with constant `inline_main_putc_26_c <- 0n80/0x50u8 `.
# In IlFunctionId("main"), replacing `inline_main_putc_26_tac13 <- inline_main_putc_26_c U8` with constant `inline_main_putc_26_tac13 <- 0n80/0x50u8 `.
# In IlFunctionId("main"), replacing `inline_main_putc_26_tac13 <- inline_main_putc_26_c U8` with constant `inline_main_putc_26_tac13 <- 0n80/0x50u8 `.
# In IlFunctionId("main"), replacing `inline_main_RpnCalc_init_51_c <- tca8 U32` with constant `inline_main_RpnCalc_init_51_c <- 0n987664/0x000f1210u32 `.
# In IlFunctionId("main"), replacing `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s <- inline_main_RpnCalc_init_51_c U32` with constant `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s <- 0n987664/0x000f1210u32 `.
# In IlFunctionId("main"), replacing `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s Add Number(0n64/0x00000040u32)` with constant `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- 0n987728/0x000f1250u32 `.
# In IlFunctionId("main"), replacing `inline_main_RpnCalc_init_51_t6e8e <- inline_main_RpnCalc_init_51_c Add Number(0n68/0x00000044u32)` with constant `inline_main_RpnCalc_init_51_t6e8e <- 0n987732/0x000f1254u32 `.
# In IlFunctionId("main"), replacing `inline_main_putc_27_c <- t6adf U8` with constant `inline_main_putc_27_c <- 0n78/0x4eu8 `.
# In IlFunctionId("main"), replacing `inline_main_putc_27_tac13 <- inline_main_putc_27_c U8` with constant `inline_main_putc_27_tac13 <- 0n78/0x4eu8 `.
# In IlFunctionId("main"), replacing `inline_main_putc_27_tac13 <- inline_main_putc_27_c U8` with constant `inline_main_putc_27_tac13 <- 0n78/0x4eu8 `.
# In IlFunctionId("main"), replacing `inline_main_putc_28_c <- t25ee U8` with constant `inline_main_putc_28_c <- 0n10/0x0au8 `.
# In IlFunctionId("main"), replacing `inline_main_putc_28_tac13 <- inline_main_putc_28_c U8` with constant `inline_main_putc_28_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("main"), replacing `inline_main_putc_28_tac13 <- inline_main_putc_28_c U8` with constant `inline_main_putc_28_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("main"), var `inline_main_RpnCalc_init_51_c` is written to, but never read. Removing the instruction that writes to it: (inline_main_RpnCalc_init_51_c <- 0n987664/0x000f1210u32 , Some('programs/app/rpn.j':(12,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] }) }", "Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] })", "Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] })", "# In IlFunctionId(\"main\"), replacing `inline_main_RpnCalc_init_51_c <- tca8 U32` with constant `inline_main_RpnCalc_init_51_c <- 0n987664/0x000f1210u32 `."] })
# In IlFunctionId("main"), var `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s` is written to, but never read. Removing the instruction that writes to it: (inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s <- 0n987664/0x000f1210u32 , Some('/lutcomp/programs/lib/rpnlib.j':(15,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] }) }", "Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] })", "Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] })", "# In IlFunctionId(\"main\"), replacing `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s <- inline_main_RpnCalc_init_51_c U32` with constant `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s <- 0n987664/0x000f1210u32 `."] })
# In IlFunctionId("main"), var `inline_main_putc_25_c` is written to, but never read. Removing the instruction that writes to it: (inline_main_putc_25_c <- 0n82/0x52u8 , Some('programs/app/rpn.j':(6,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] })", "# In IlFunctionId(\"main\"), replacing `inline_main_putc_25_c <- tf36 U8` with constant `inline_main_putc_25_c <- 0n82/0x52u8 `."] })
# In IlFunctionId("main"), var `inline_main_putc_26_c` is written to, but never read. Removing the instruction that writes to it: (inline_main_putc_26_c <- 0n80/0x50u8 , Some('programs/app/rpn.j':(10,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n80/0x50u8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n80/0x50u8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n80/0x50u8)] })", "# In IlFunctionId(\"main\"), replacing `inline_main_putc_26_c <- td749 U8` with constant `inline_main_putc_26_c <- 0n80/0x50u8 `."] })
# In IlFunctionId("main"), var `inline_main_putc_27_c` is written to, but never read. Removing the instruction that writes to it: (inline_main_putc_27_c <- 0n78/0x4eu8 , Some('programs/app/rpn.j':(14,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n78/0x4eu8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n78/0x4eu8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n78/0x4eu8)] })", "# In IlFunctionId(\"main\"), replacing `inline_main_putc_27_c <- t6adf U8` with constant `inline_main_putc_27_c <- 0n78/0x4eu8 `."] })
# In IlFunctionId("main"), var `inline_main_putc_28_c` is written to, but never read. Removing the instruction that writes to it: (inline_main_putc_28_c <- 0n10/0x0au8 , Some('programs/app/rpn.j':(15,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "# In IlFunctionId(\"main\"), replacing `inline_main_putc_28_c <- t25ee U8` with constant `inline_main_putc_28_c <- 0n10/0x0au8 `."] })
# In IlFunctionId("main"), var `t25ee` is written to, but never read. Removing the instruction that writes to it: (t25ee <- 0n10/0x0au8 , Some('programs/app/rpn.j':(15,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "Number(0n10/0x0au8)", "Number(0n10/0x0au8)"] })
# In IlFunctionId("main"), var `t6adf` is written to, but never read. Removing the instruction that writes to it: (t6adf <- 0n78/0x4eu8 , Some('programs/app/rpn.j':(14,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n78/0x4eu8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n78/0x4eu8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n78/0x4eu8)] })", "Number(0n78/0x4eu8)", "Number(0n78/0x4eu8)"] })
# In IlFunctionId("main"), var `td749` is written to, but never read. Removing the instruction that writes to it: (td749 <- 0n80/0x50u8 , Some('programs/app/rpn.j':(10,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n80/0x50u8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n80/0x50u8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n80/0x50u8)] })", "Number(0n80/0x50u8)", "Number(0n80/0x50u8)"] })
# In IlFunctionId("main"), var `tf36` is written to, but never read. Removing the instruction that writes to it: (tf36 <- 0n82/0x52u8 , Some('programs/app/rpn.j':(6,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] })", "Number(0n82/0x52u8)", "Number(0n82/0x52u8)"] })
# In IlFunctionId("stdio_init"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `inline_stdio_init_queue_init_35_s`.
# In IlFunctionId("stdio_init"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `inline_stdio_init_queue_init_35_t4d4f`.
# In IlFunctionId("stdio_init"), resolved the constant val `Number(0n987648/0x000f1200u32)` for var `inline_stdio_init_queue_init_35_tb702`.
# In IlFunctionId("stdio_init"), resolved the constant val `Number(0n987652/0x000f1204u32)` for var `inline_stdio_init_queue_init_35_tc1ff`.
# In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_35_s <- tfff6 U32` with constant `inline_stdio_init_queue_init_35_s <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_35_t4d4f <- inline_stdio_init_queue_init_35_s U32` with constant `inline_stdio_init_queue_init_35_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_35_tb702 <- inline_stdio_init_queue_init_35_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_stdio_init_queue_init_35_tb702 <- 0n987648/0x000f1200u32 `.
# In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_35_t4d4f <- inline_stdio_init_queue_init_35_s U32` with constant `inline_stdio_init_queue_init_35_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_35_tc1ff <- inline_stdio_init_queue_init_35_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_stdio_init_queue_init_35_tc1ff <- 0n987652/0x000f1204u32 `.
# In IlFunctionId("stdio_init"), var `inline_stdio_init_queue_init_35_s` is written to, but never read. Removing the instruction that writes to it: (inline_stdio_init_queue_init_35_s <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/stdio.j':(13,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] }) }", "Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] })", "Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] })", "# In IlFunctionId(\"stdio_init\"), replacing `inline_stdio_init_queue_init_35_s <- tfff6 U32` with constant `inline_stdio_init_queue_init_35_s <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("stdio_init"), var `inline_stdio_init_queue_init_35_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_stdio_init_queue_init_35_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(9,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Number(0n0/0x00u8) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"stdio_init\"), replacing `inline_stdio_init_queue_init_35_t4d4f <- inline_stdio_init_queue_init_35_s U32` with constant `inline_stdio_init_queue_init_35_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("stdio_init"), var `inline_stdio_init_queue_init_35_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_stdio_init_queue_init_35_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(8,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Number(0n0/0x00u8) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"stdio_init\"), replacing `inline_stdio_init_queue_init_35_t4d4f <- inline_stdio_init_queue_init_35_s U32` with constant `inline_stdio_init_queue_init_35_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("stdio_init"), var `tfff6` is written to, but never read. Removing the instruction that writes to it: (tfff6 <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/stdio.j':(13,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] }) }", "Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] })", "Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] })", "AddressOf(Ident(\"stdin\"))", "AddressOf(Ident(\"stdin\"))", "Number(0n987392/0x000f1100u32)"] })
# IlFunctionId("KeyBoard_init")()
#  td45b <- 0n987136/0x000f1000u32  # Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
#  ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
#  mem[td45b] <- ta97f U8 # Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
#  tdaa <- 0n987140/0x000f1004u32  # Some('/lutcomp/programs/lib/Keyboard.j':(12,5))
#  ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(12,5))
#  mem[tdaa] <- ta97f U8 # Some('/lutcomp/programs/lib/Keyboard.j':(12,5))
#  return None # None
#  :function_end_KeyBoard_init # None
#  Unreachable # None

# IlFunctionId("Keyboard_poll")()
#  Some(t861f) <= call io_ready_to_read() # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#  t5ea1 <- t861f BitwiseAnd Number(0n4/0x04u8) # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#  ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#  if t5ea1 == ta97f then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_else_0_2' # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#  :Keyboard_poll_if_true_0_1 # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#  return None # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#  goto Keyboard_poll_if_end_0 # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#  :Keyboard_poll_if_else_0_2 # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#  :Keyboard_poll_if_end_0 # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#  Some(code) <= call io_read2() # Some('/lutcomp/programs/lib/Keyboard.j':(20,5))
#  tf68c <- code U8 # Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#  t528d U32 <- tf68c U8 # Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#  index <- t528d Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#  td45b <- 0n987136/0x000f1000u32  # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  t379c <- mem[td45b] U8 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  if t379c != ta97f then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5' # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  :Keyboard_poll_if_true_0_4 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  t4c8b <- const &PS2_SCAN_CODE_TO_ASCII # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  td18e <- index U32 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  t674 <- td18e Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  t23a <- t4c8b Add Var(t674) # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  c <- mem[t23a] U8 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  goto Keyboard_poll_if_end_3 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  :Keyboard_poll_if_else_0_5 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  t4c8b <- const &PS2_SCAN_CODE_TO_ASCII # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  td18e <- index U32 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  tb62e <- t4c8b Add Var(td18e) # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  c <- mem[tb62e] U8 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  :Keyboard_poll_if_end_3 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  tdaa <- 0n987140/0x000f1004u32  # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#  t7ebd <- mem[tdaa] U8 # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#  ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#  if t7ebd == ta97f then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_else_0_8' # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#  :Keyboard_poll_if_true_0_7 # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#  tac13 <- c U8 # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#  inline_Keyboard_poll_queue_push_37_s <- 0n987392/0x000f1100u32  # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#  inline_Keyboard_poll_queue_push_37_n <- tac13 U8 # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#  inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32  # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  inline_Keyboard_poll_queue_push_37_t3ee <- mem[inline_Keyboard_poll_queue_push_37_tc1ff] U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  inline_Keyboard_poll_queue_push_37_t5bb7 U32 <- inline_Keyboard_poll_queue_push_37_t3ee U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  inline_Keyboard_poll_queue_push_37_t2187 <- inline_Keyboard_poll_queue_push_37_s Add Var(inline_Keyboard_poll_queue_push_37_t5bb7) # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  mem[inline_Keyboard_poll_queue_push_37_t2187] <- inline_Keyboard_poll_queue_push_37_n U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32  # Some('/lutcomp/programs/lib/Queue.j':(26,5))
#  inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32  # Some('/lutcomp/programs/lib/Queue.j':(26,5))
#  inline_Keyboard_poll_queue_push_37_t3ee <- mem[inline_Keyboard_poll_queue_push_37_tc1ff] U8 # Some('/lutcomp/programs/lib/Queue.j':(26,5))
#  inline_Keyboard_poll_queue_push_37_tf3c4 <- inline_Keyboard_poll_queue_push_37_t3ee Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/Queue.j':(26,5))
#  mem[inline_Keyboard_poll_queue_push_37_tc1ff] <- inline_Keyboard_poll_queue_push_37_tf3c4 U8 # Some('/lutcomp/programs/lib/Queue.j':(26,5))
#  goto inline_Keyboard_poll_queue_push_37_function_end_queue_push # None
#  :inline_Keyboard_poll_queue_push_37_function_end_queue_push # None
#  goto Keyboard_poll_if_end_6 # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#  :Keyboard_poll_if_else_0_8 # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#  :Keyboard_poll_if_end_6 # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#  ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  t4c8b <- const &PS2_SCAN_CODE_TO_ASCII # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  td18e <- index U32 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  te5cf <- td18e Add Number(0n2/0x00000002u32) # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  ted94 <- t4c8b Add Var(te5cf) # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  t2ca9 <- mem[ted94] U8 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  if ta97f != t2ca9 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_else_0_11' # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  :Keyboard_poll_if_true_0_10 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  tdaa <- 0n987140/0x000f1004u32  # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  t7ebd <- mem[tdaa] U8 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  if t7ebd != ta97f then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14' # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  :Keyboard_poll_if_true_0_13 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  td45b <- 0n987136/0x000f1000u32  # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  mem[td45b] <- ta97f U8 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  goto Keyboard_poll_if_end_12 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  :Keyboard_poll_if_else_0_14 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  td45b <- 0n987136/0x000f1000u32  # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  ta11a <- 0n1/0x01u8  # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  mem[td45b] <- ta11a U8 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  :Keyboard_poll_if_end_12 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  goto Keyboard_poll_if_end_9 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  :Keyboard_poll_if_else_0_11 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  :Keyboard_poll_if_end_9 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  t4c8b <- const &PS2_SCAN_CODE_TO_ASCII # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  td18e <- index U32 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  t5e63 <- td18e Add Number(0n3/0x00000003u32) # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  t6cd9 <- t4c8b Add Var(t5e63) # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  t7b09 <- mem[t6cd9] U8 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  if ta97f != t7b09 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17' # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  :Keyboard_poll_if_true_0_16 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  tdaa <- 0n987140/0x000f1004u32  # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  ta11a <- 0n1/0x01u8  # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  mem[tdaa] <- ta11a U8 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  goto Keyboard_poll_if_end_15 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  :Keyboard_poll_if_else_0_17 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  tdaa <- 0n987140/0x000f1004u32  # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  mem[tdaa] <- ta97f U8 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  :Keyboard_poll_if_end_15 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  return None # None
#  :function_end_Keyboard_poll # None
#  Unreachable # None

# IlFunctionId("RpnCalc_handle")(c,ch,)
#  a <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(30,5))
#  b <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(31,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  tc333 <- 0n43/0x2bu8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  if tdcd9 == tc333 then 'RpnCalc_handle_if_true_0_1' else 'RpnCalc_handle_if_else_0_2' # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  :RpnCalc_handle_if_true_0_1 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  stack_needed <- 0n2/0x02u8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  goto RpnCalc_handle_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  :RpnCalc_handle_if_else_0_2 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  t8f63 <- 0n45/0x2du8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  if tdcd9 == t8f63 then 'RpnCalc_handle_if_true_1_3' else 'RpnCalc_handle_if_else_1_4' # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  :RpnCalc_handle_if_true_1_3 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  stack_needed <- 0n2/0x02u8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  goto RpnCalc_handle_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  :RpnCalc_handle_if_else_1_4 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  t622 <- 0n42/0x2au8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  if tdcd9 == t622 then 'RpnCalc_handle_if_true_2_5' else 'RpnCalc_handle_if_else_2_6' # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  :RpnCalc_handle_if_true_2_5 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  stack_needed <- 0n2/0x02u8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  goto RpnCalc_handle_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  :RpnCalc_handle_if_else_2_6 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  t13c5 <- 0n47/0x2fu8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  if tdcd9 == t13c5 then 'RpnCalc_handle_if_true_3_7' else 'RpnCalc_handle_if_else_3_8' # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  :RpnCalc_handle_if_true_3_7 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  stack_needed <- 0n2/0x02u8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  goto RpnCalc_handle_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  :RpnCalc_handle_if_else_3_8 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  tcdcd <- 0n115/0x73u8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  if tdcd9 == tcdcd then 'RpnCalc_handle_if_true_4_9' else 'RpnCalc_handle_if_else_4_10' # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  :RpnCalc_handle_if_true_4_9 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  stack_needed <- 0n2/0x02u8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  goto RpnCalc_handle_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  :RpnCalc_handle_if_else_4_10 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  stack_needed <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  :RpnCalc_handle_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  t4671 <- stack_needed U8 # Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#  ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#  if t4671 > ta97f then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_else_0_13' # Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#  :RpnCalc_handle_if_true_0_12 # Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#  tac13 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_c <- tac13 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n72/0x00000048u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7] U8 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  if inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_else_0_2' # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  :inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_61_td60 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t8f43 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t8f43 U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  goto inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push # None
#  :inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push # None
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n72/0x00000048u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  goto inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  :inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_else_0_2 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  :inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  goto inline_RpnCalc_handle_RpnCalc_push_pending_61_function_end_RpnCalc_push_pending # None
#  :inline_RpnCalc_handle_RpnCalc_push_pending_61_function_end_RpnCalc_push_pending # None
#  goto RpnCalc_handle_if_end_11 # Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#  :RpnCalc_handle_if_else_0_13 # Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#  :RpnCalc_handle_if_end_11 # Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#  tbf93 <- c Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/rpnlib.j':(52,5))
#  stack_count_usize <- mem[tbf93] U32 # Some('/lutcomp/programs/lib/rpnlib.j':(52,5))
#  stack_count <- stack_count_usize[0x00..0x01] U8 # Some('/lutcomp/programs/lib/rpnlib.j':(53,5))
#  t4671 <- stack_needed U8 # Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#  t6001 <- stack_count U8 # Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#  if t4671 > t6001 then 'RpnCalc_handle_if_true_0_15' else 'RpnCalc_handle_if_else_0_16' # Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#  :RpnCalc_handle_if_true_0_15 # Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#  inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  None <= call io_write0(inline_RpnCalc_handle_putc_15_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_15_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_15_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_putc_15_ta97f then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_15_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_RpnCalc_handle_putc_15_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_15_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_15_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_RpnCalc_handle_putc_15_function_end_putc # None
#  :inline_RpnCalc_handle_putc_15_function_end_putc # None
#  inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  None <= call io_write0(inline_RpnCalc_handle_putc_16_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_RpnCalc_handle_putc_16_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_16_t76c7 <- mem[inline_RpnCalc_handle_putc_16_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_16_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_putc_16_ta97f then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_16_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_RpnCalc_handle_putc_16_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_16_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_16_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_RpnCalc_handle_putc_16_function_end_putc # None
#  :inline_RpnCalc_handle_putc_16_function_end_putc # None
#  inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  None <= call io_write0(inline_RpnCalc_handle_putc_17_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_RpnCalc_handle_putc_17_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_17_t76c7 <- mem[inline_RpnCalc_handle_putc_17_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_17_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_putc_17_ta97f then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_17_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_RpnCalc_handle_putc_17_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_17_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_17_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_RpnCalc_handle_putc_17_function_end_putc # None
#  :inline_RpnCalc_handle_putc_17_function_end_putc # None
#  t25ee <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#  inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_RpnCalc_handle_putc_18_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_18_t76c7 <- mem[inline_RpnCalc_handle_putc_18_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_18_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_putc_18_ta97f then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_18_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_RpnCalc_handle_putc_18_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_18_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_18_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_RpnCalc_handle_putc_18_function_end_putc # None
#  :inline_RpnCalc_handle_putc_18_function_end_putc # None
#  ta11a <- 0n1/0x01u8  # Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#  return Some(ta11a) # Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#  goto RpnCalc_handle_if_end_14 # Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#  :RpnCalc_handle_if_else_0_16 # Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#  :RpnCalc_handle_if_end_14 # Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#  t4671 <- stack_needed U8 # Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#  ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#  if t4671 > ta97f then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_else_0_19' # Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#  :RpnCalc_handle_if_true_0_18 # Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#  tfe08 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#  inline_RpnCalc_handle_stack_pop_52_s <- tfe08 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#  inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 # Some('/lutcomp/programs/lib/Stack.j':(11,5))
#  inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(11,5))
#  inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 # Some('/lutcomp/programs/lib/Stack.j':(11,5))
#  inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(11,5))
#  inline_RpnCalc_handle_stack_pop_52_t14ab <- mem[inline_RpnCalc_handle_stack_pop_52_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(11,5))
#  inline_RpnCalc_handle_stack_pop_52_t1533 <- inline_RpnCalc_handle_stack_pop_52_t14ab Subtract Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(11,5))
#  mem[inline_RpnCalc_handle_stack_pop_52_tc957] <- inline_RpnCalc_handle_stack_pop_52_t1533 U32 # Some('/lutcomp/programs/lib/Stack.j':(11,5))
#  inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 # Some('/lutcomp/programs/lib/Stack.j':(13,5))
#  inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(13,5))
#  inline_RpnCalc_handle_stack_pop_52_t14ab <- mem[inline_RpnCalc_handle_stack_pop_52_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(13,5))
#  inline_RpnCalc_handle_stack_pop_52_tf659 <- inline_RpnCalc_handle_stack_pop_52_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(13,5))
#  inline_RpnCalc_handle_stack_pop_52_t100e <- inline_RpnCalc_handle_stack_pop_52_s Add Var(inline_RpnCalc_handle_stack_pop_52_tf659) # Some('/lutcomp/programs/lib/Stack.j':(13,5))
#  inline_RpnCalc_handle_stack_pop_52_t8e54 <- mem[inline_RpnCalc_handle_stack_pop_52_t100e] U32 # Some('/lutcomp/programs/lib/Stack.j':(13,5))
#  a <- inline_RpnCalc_handle_stack_pop_52_t8e54 U32 # Some('/lutcomp/programs/lib/Stack.j':(13,5))
#  goto inline_RpnCalc_handle_stack_pop_52_function_end_stack_pop # Some('/lutcomp/programs/lib/Stack.j':(13,5))
#  :inline_RpnCalc_handle_stack_pop_52_function_end_stack_pop # None
#  goto RpnCalc_handle_if_end_17 # Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#  :RpnCalc_handle_if_else_0_19 # Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#  :RpnCalc_handle_if_end_17 # Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#  t4671 <- stack_needed U8 # Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#  ta11a <- 0n1/0x01u8  # Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#  if t4671 > ta11a then 'RpnCalc_handle_if_true_0_21' else 'RpnCalc_handle_if_else_0_22' # Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#  :RpnCalc_handle_if_true_0_21 # Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#  tfe08 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#  inline_RpnCalc_handle_stack_pop_53_s <- tfe08 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#  inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 # Some('/lutcomp/programs/lib/Stack.j':(11,5))
#  inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(11,5))
#  inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 # Some('/lutcomp/programs/lib/Stack.j':(11,5))
#  inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(11,5))
#  inline_RpnCalc_handle_stack_pop_53_t14ab <- mem[inline_RpnCalc_handle_stack_pop_53_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(11,5))
#  inline_RpnCalc_handle_stack_pop_53_t1533 <- inline_RpnCalc_handle_stack_pop_53_t14ab Subtract Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(11,5))
#  mem[inline_RpnCalc_handle_stack_pop_53_tc957] <- inline_RpnCalc_handle_stack_pop_53_t1533 U32 # Some('/lutcomp/programs/lib/Stack.j':(11,5))
#  inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 # Some('/lutcomp/programs/lib/Stack.j':(13,5))
#  inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(13,5))
#  inline_RpnCalc_handle_stack_pop_53_t14ab <- mem[inline_RpnCalc_handle_stack_pop_53_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(13,5))
#  inline_RpnCalc_handle_stack_pop_53_tf659 <- inline_RpnCalc_handle_stack_pop_53_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(13,5))
#  inline_RpnCalc_handle_stack_pop_53_t100e <- inline_RpnCalc_handle_stack_pop_53_s Add Var(inline_RpnCalc_handle_stack_pop_53_tf659) # Some('/lutcomp/programs/lib/Stack.j':(13,5))
#  inline_RpnCalc_handle_stack_pop_53_t8e54 <- mem[inline_RpnCalc_handle_stack_pop_53_t100e] U32 # Some('/lutcomp/programs/lib/Stack.j':(13,5))
#  b <- inline_RpnCalc_handle_stack_pop_53_t8e54 U32 # Some('/lutcomp/programs/lib/Stack.j':(13,5))
#  goto inline_RpnCalc_handle_stack_pop_53_function_end_stack_pop # Some('/lutcomp/programs/lib/Stack.j':(13,5))
#  :inline_RpnCalc_handle_stack_pop_53_function_end_stack_pop # None
#  goto RpnCalc_handle_if_end_20 # Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#  :RpnCalc_handle_if_else_0_22 # Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#  :RpnCalc_handle_if_end_20 # Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tc333 <- 0n43/0x2bu8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  if tdcd9 == tc333 then 'RpnCalc_handle_if_true_0_24' else 'RpnCalc_handle_if_else_0_25' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_true_0_24 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tace9 <- b U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  sum <- tace9 Add Var(t8792) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t670d <- sum U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  None <= call print_dec32(t670d,) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t25ee <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_putc_19_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  None <= call io_write0(inline_RpnCalc_handle_putc_19_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_RpnCalc_handle_putc_19_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_19_t76c7 <- mem[inline_RpnCalc_handle_putc_19_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_19_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_putc_19_ta97f then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_19_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_19_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_RpnCalc_handle_putc_19_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_19_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_19_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_RpnCalc_handle_putc_19_function_end_putc # None
#  :inline_RpnCalc_handle_putc_19_function_end_putc # None
#  tfe08 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t670d <- sum U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_54_s <- tfe08 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_54_n <- t670d U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_54_t14ab <- mem[inline_RpnCalc_handle_stack_push_54_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_54_tf659 <- inline_RpnCalc_handle_stack_push_54_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_54_t100e <- inline_RpnCalc_handle_stack_push_54_s Add Var(inline_RpnCalc_handle_stack_push_54_tf659) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  mem[inline_RpnCalc_handle_stack_push_54_t100e] <- inline_RpnCalc_handle_stack_push_54_n U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_54_t14ab <- mem[inline_RpnCalc_handle_stack_push_54_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_54_t8f43 <- inline_RpnCalc_handle_stack_push_54_t14ab Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  mem[inline_RpnCalc_handle_stack_push_54_tc957] <- inline_RpnCalc_handle_stack_push_54_t8f43 U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  goto inline_RpnCalc_handle_stack_push_54_function_end_stack_push # None
#  :inline_RpnCalc_handle_stack_push_54_function_end_stack_push # None
#  goto RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_else_0_25 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t8f63 <- 0n45/0x2du8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  if tdcd9 == t8f63 then 'RpnCalc_handle_if_true_1_26' else 'RpnCalc_handle_if_else_1_27' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_true_1_26 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tace9 <- b U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  diff <- tace9 Subtract Var(t8792) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t17ee <- diff U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  None <= call print_dec32(t17ee,) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t25ee <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_putc_20_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  None <= call io_write0(inline_RpnCalc_handle_putc_20_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_RpnCalc_handle_putc_20_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_20_t76c7 <- mem[inline_RpnCalc_handle_putc_20_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_20_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_putc_20_ta97f then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_20_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_20_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_RpnCalc_handle_putc_20_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_20_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_20_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_RpnCalc_handle_putc_20_function_end_putc # None
#  :inline_RpnCalc_handle_putc_20_function_end_putc # None
#  tfe08 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t17ee <- diff U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_55_s <- tfe08 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_55_n <- t17ee U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_55_t14ab <- mem[inline_RpnCalc_handle_stack_push_55_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_55_tf659 <- inline_RpnCalc_handle_stack_push_55_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_55_t100e <- inline_RpnCalc_handle_stack_push_55_s Add Var(inline_RpnCalc_handle_stack_push_55_tf659) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  mem[inline_RpnCalc_handle_stack_push_55_t100e] <- inline_RpnCalc_handle_stack_push_55_n U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_55_t14ab <- mem[inline_RpnCalc_handle_stack_push_55_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_55_t8f43 <- inline_RpnCalc_handle_stack_push_55_t14ab Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  mem[inline_RpnCalc_handle_stack_push_55_tc957] <- inline_RpnCalc_handle_stack_push_55_t8f43 U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  goto inline_RpnCalc_handle_stack_push_55_function_end_stack_push # None
#  :inline_RpnCalc_handle_stack_push_55_function_end_stack_push # None
#  goto RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_else_1_27 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t622 <- 0n42/0x2au8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  if tdcd9 == t622 then 'RpnCalc_handle_if_true_2_28' else 'RpnCalc_handle_if_else_2_29' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_true_2_28 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tace9 <- b U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_mul32_32_12_a <- tace9 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_mul32_32_12_b <- t8792 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_mul32_32_12_t8792 <- inline_RpnCalc_handle_mul32_32_12_a U32 # Some('/lutcomp/programs/lib/mul.j':(30,5))
#  inline_RpnCalc_handle_mul32_32_12_tace9 <- inline_RpnCalc_handle_mul32_32_12_b U32 # Some('/lutcomp/programs/lib/mul.j':(30,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a <- inline_RpnCalc_handle_mul32_32_12_t8792 U32 # Some('/lutcomp/programs/lib/mul.j':(30,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b <- inline_RpnCalc_handle_mul32_32_12_tace9 U32 # Some('/lutcomp/programs/lib/mul.j':(30,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ec2 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ec2 U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t9922 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t9922 U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(15,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(15,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(16,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(16,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4) # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a U32 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b U32 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585) # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8575 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8575 U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t34f7 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t34f7 U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t30b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t30b9 U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(25,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(25,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5) # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_RpnCalc_handle_mul32_32_12_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  goto inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_function_end_mul16_32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  :inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_function_end_mul16_32 # None
#  inline_RpnCalc_handle_mul32_32_12_a_hi <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/mul.j':(32,5))
#  inline_RpnCalc_handle_mul32_32_12_t94df <- inline_RpnCalc_handle_mul32_32_12_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/mul.j':(33,5))
#  inline_RpnCalc_handle_mul32_32_12_a_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_t94df U8 # Some('/lutcomp/programs/lib/mul.j':(33,5))
#  inline_RpnCalc_handle_mul32_32_12_t3b02 <- inline_RpnCalc_handle_mul32_32_12_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(34,5))
#  inline_RpnCalc_handle_mul32_32_12_a_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_t3b02 U8 # Some('/lutcomp/programs/lib/mul.j':(34,5))
#  inline_RpnCalc_handle_mul32_32_12_b_hi <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/mul.j':(36,5))
#  inline_RpnCalc_handle_mul32_32_12_ta5f7 <- inline_RpnCalc_handle_mul32_32_12_b[0x03..0x04] U8 # Some('/lutcomp/programs/lib/mul.j':(37,5))
#  inline_RpnCalc_handle_mul32_32_12_b_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_ta5f7 U8 # Some('/lutcomp/programs/lib/mul.j':(37,5))
#  inline_RpnCalc_handle_mul32_32_12_t82cc <- inline_RpnCalc_handle_mul32_32_12_b[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(38,5))
#  inline_RpnCalc_handle_mul32_32_12_b_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_t82cc U8 # Some('/lutcomp/programs/lib/mul.j':(38,5))
#  inline_RpnCalc_handle_mul32_32_12_t8fbd <- inline_RpnCalc_handle_mul32_32_12_a_hi U32 # Some('/lutcomp/programs/lib/mul.j':(40,5))
#  inline_RpnCalc_handle_mul32_32_12_tace9 <- inline_RpnCalc_handle_mul32_32_12_b U32 # Some('/lutcomp/programs/lib/mul.j':(40,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a <- inline_RpnCalc_handle_mul32_32_12_t8fbd U32 # Some('/lutcomp/programs/lib/mul.j':(40,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b <- inline_RpnCalc_handle_mul32_32_12_tace9 U32 # Some('/lutcomp/programs/lib/mul.j':(40,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ec2 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ec2 U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t9922 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t9922 U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(15,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(15,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(16,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(16,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4) # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a U32 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b U32 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585) # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8575 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8575 U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t34f7 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t34f7 U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t30b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t30b9 U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(25,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(25,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5) # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_RpnCalc_handle_mul32_32_12_t6afc <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  goto inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_function_end_mul16_32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  :inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_function_end_mul16_32 # None
#  inline_RpnCalc_handle_mul32_32_12_t8792 <- inline_RpnCalc_handle_mul32_32_12_a U32 # Some('/lutcomp/programs/lib/mul.j':(40,5))
#  inline_RpnCalc_handle_mul32_32_12_t5cca <- inline_RpnCalc_handle_mul32_32_12_b_hi U32 # Some('/lutcomp/programs/lib/mul.j':(40,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a <- inline_RpnCalc_handle_mul32_32_12_t8792 U32 # Some('/lutcomp/programs/lib/mul.j':(40,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b <- inline_RpnCalc_handle_mul32_32_12_t5cca U32 # Some('/lutcomp/programs/lib/mul.j':(40,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ec2 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ec2 U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t9922 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t9922 U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(15,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(15,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(16,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(16,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4) # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a U32 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b U32 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585) # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8575 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8575 U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t34f7 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t34f7 U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t30b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t30b9 U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(25,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(25,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5) # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_RpnCalc_handle_mul32_32_12_tbe0a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  goto inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_function_end_mul16_32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  :inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_function_end_mul16_32 # None
#  inline_RpnCalc_handle_mul32_32_12_d <- inline_RpnCalc_handle_mul32_32_12_t6afc Add Var(inline_RpnCalc_handle_mul32_32_12_tbe0a) # Some('/lutcomp/programs/lib/mul.j':(40,5))
#  inline_RpnCalc_handle_mul32_32_12_t34f7 <- inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(41,5))
#  inline_RpnCalc_handle_mul32_32_12_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_t34f7 U8 # Some('/lutcomp/programs/lib/mul.j':(41,5))
#  inline_RpnCalc_handle_mul32_32_12_t30b9 <- inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(42,5))
#  inline_RpnCalc_handle_mul32_32_12_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_t30b9 U8 # Some('/lutcomp/programs/lib/mul.j':(42,5))
#  inline_RpnCalc_handle_mul32_32_12_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(43,5))
#  inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(43,5))
#  inline_RpnCalc_handle_mul32_32_12_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(44,5))
#  inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(44,5))
#  inline_RpnCalc_handle_mul32_32_12_tac13 <- inline_RpnCalc_handle_mul32_32_12_c U32 # Some('/lutcomp/programs/lib/mul.j':(45,5))
#  inline_RpnCalc_handle_mul32_32_12_t45f5 <- inline_RpnCalc_handle_mul32_32_12_d U32 # Some('/lutcomp/programs/lib/mul.j':(45,5))
#  inline_RpnCalc_handle_mul32_32_12_ta65d <- inline_RpnCalc_handle_mul32_32_12_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_t45f5) # Some('/lutcomp/programs/lib/mul.j':(45,5))
#  product <- inline_RpnCalc_handle_mul32_32_12_ta65d U32 # Some('/lutcomp/programs/lib/mul.j':(45,5))
#  goto inline_RpnCalc_handle_mul32_32_12_function_end_mul32_32 # Some('/lutcomp/programs/lib/mul.j':(45,5))
#  :inline_RpnCalc_handle_mul32_32_12_function_end_mul32_32 # None
#  t2754 <- product U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  None <= call print_dec32(t2754,) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t25ee <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_putc_21_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  None <= call io_write0(inline_RpnCalc_handle_putc_21_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_RpnCalc_handle_putc_21_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_21_t76c7 <- mem[inline_RpnCalc_handle_putc_21_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_21_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_putc_21_ta97f then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_21_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_21_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_RpnCalc_handle_putc_21_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_21_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_21_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_RpnCalc_handle_putc_21_function_end_putc # None
#  :inline_RpnCalc_handle_putc_21_function_end_putc # None
#  tfe08 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t2754 <- product U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_56_s <- tfe08 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_56_n <- t2754 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_56_t14ab <- mem[inline_RpnCalc_handle_stack_push_56_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_56_tf659 <- inline_RpnCalc_handle_stack_push_56_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_56_t100e <- inline_RpnCalc_handle_stack_push_56_s Add Var(inline_RpnCalc_handle_stack_push_56_tf659) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  mem[inline_RpnCalc_handle_stack_push_56_t100e] <- inline_RpnCalc_handle_stack_push_56_n U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_56_t14ab <- mem[inline_RpnCalc_handle_stack_push_56_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_56_t8f43 <- inline_RpnCalc_handle_stack_push_56_t14ab Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  mem[inline_RpnCalc_handle_stack_push_56_tc957] <- inline_RpnCalc_handle_stack_push_56_t8f43 U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  goto inline_RpnCalc_handle_stack_push_56_function_end_stack_push # None
#  :inline_RpnCalc_handle_stack_push_56_function_end_stack_push # None
#  goto RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_else_2_29 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t13c5 <- 0n47/0x2fu8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  if tdcd9 == t13c5 then 'RpnCalc_handle_if_true_3_30' else 'RpnCalc_handle_if_else_3_31' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_true_3_30 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tace9 <- b U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  Some(quotient) <= call div32(tace9,t8792,) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t1ba9 <- quotient U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  None <= call print_dec32(t1ba9,) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t25ee <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_putc_22_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  None <= call io_write0(inline_RpnCalc_handle_putc_22_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_RpnCalc_handle_putc_22_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_22_t76c7 <- mem[inline_RpnCalc_handle_putc_22_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_22_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_putc_22_ta97f then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_22_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_22_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_RpnCalc_handle_putc_22_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_22_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_22_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_RpnCalc_handle_putc_22_function_end_putc # None
#  :inline_RpnCalc_handle_putc_22_function_end_putc # None
#  tfe08 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t1ba9 <- quotient U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_57_s <- tfe08 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_57_n <- t1ba9 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_57_t14ab <- mem[inline_RpnCalc_handle_stack_push_57_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_57_tf659 <- inline_RpnCalc_handle_stack_push_57_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_57_t100e <- inline_RpnCalc_handle_stack_push_57_s Add Var(inline_RpnCalc_handle_stack_push_57_tf659) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  mem[inline_RpnCalc_handle_stack_push_57_t100e] <- inline_RpnCalc_handle_stack_push_57_n U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_57_t14ab <- mem[inline_RpnCalc_handle_stack_push_57_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_57_t8f43 <- inline_RpnCalc_handle_stack_push_57_t14ab Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  mem[inline_RpnCalc_handle_stack_push_57_tc957] <- inline_RpnCalc_handle_stack_push_57_t8f43 U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  goto inline_RpnCalc_handle_stack_push_57_function_end_stack_push # None
#  :inline_RpnCalc_handle_stack_push_57_function_end_stack_push # None
#  goto RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_else_3_31 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tcdcd <- 0n115/0x73u8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  if tdcd9 == tcdcd then 'RpnCalc_handle_if_true_4_32' else 'RpnCalc_handle_if_else_4_33' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_true_4_32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tfe08 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_58_s <- tfe08 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_58_n <- t8792 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_58_t14ab <- mem[inline_RpnCalc_handle_stack_push_58_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_58_tf659 <- inline_RpnCalc_handle_stack_push_58_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_58_t100e <- inline_RpnCalc_handle_stack_push_58_s Add Var(inline_RpnCalc_handle_stack_push_58_tf659) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  mem[inline_RpnCalc_handle_stack_push_58_t100e] <- inline_RpnCalc_handle_stack_push_58_n U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_58_t14ab <- mem[inline_RpnCalc_handle_stack_push_58_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_58_t8f43 <- inline_RpnCalc_handle_stack_push_58_t14ab Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  mem[inline_RpnCalc_handle_stack_push_58_tc957] <- inline_RpnCalc_handle_stack_push_58_t8f43 U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  goto inline_RpnCalc_handle_stack_push_58_function_end_stack_push # None
#  :inline_RpnCalc_handle_stack_push_58_function_end_stack_push # None
#  tfe08 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tace9 <- b U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_59_s <- tfe08 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_59_n <- tace9 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_59_t14ab <- mem[inline_RpnCalc_handle_stack_push_59_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_59_tf659 <- inline_RpnCalc_handle_stack_push_59_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_59_t100e <- inline_RpnCalc_handle_stack_push_59_s Add Var(inline_RpnCalc_handle_stack_push_59_tf659) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  mem[inline_RpnCalc_handle_stack_push_59_t100e] <- inline_RpnCalc_handle_stack_push_59_n U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_59_t14ab <- mem[inline_RpnCalc_handle_stack_push_59_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_59_t8f43 <- inline_RpnCalc_handle_stack_push_59_t14ab Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  mem[inline_RpnCalc_handle_stack_push_59_tc957] <- inline_RpnCalc_handle_stack_push_59_t8f43 U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  goto inline_RpnCalc_handle_stack_push_59_function_end_stack_push # None
#  :inline_RpnCalc_handle_stack_push_59_function_end_stack_push # None
#  goto RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_else_4_33 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tdf6e <- 0n113/0x71u8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  if tdcd9 == tdf6e then 'RpnCalc_handle_if_true_5_34' else 'RpnCalc_handle_if_else_5_35' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_true_5_34 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  return Some(ta97f) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  goto RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_else_5_35 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t25ee <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  if tdcd9 == t25ee then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_true_6_36 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tac13 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_c <- tac13 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] U8 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2' # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  :inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_62_td60 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t8f43 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t8f43 U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  goto inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push # None
#  :inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push # None
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f U8 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  goto inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  :inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  :inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  goto inline_RpnCalc_handle_RpnCalc_push_pending_62_function_end_RpnCalc_push_pending # None
#  :inline_RpnCalc_handle_RpnCalc_push_pending_62_function_end_RpnCalc_push_pending # None
#  goto RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_else_6_37 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tdf3b <- 0n32/0x20u8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  if tdcd9 == tdf3b then 'RpnCalc_handle_if_true_7_38' else 'RpnCalc_handle_if_else_7_39' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_true_7_38 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tac13 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_c <- tac13 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] U8 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2' # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  :inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_63_td60 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t8f43 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t8f43 U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  goto inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push # None
#  :inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push # None
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f U8 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  goto inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  :inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  :inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  goto inline_RpnCalc_handle_RpnCalc_push_pending_63_function_end_RpnCalc_push_pending # None
#  :inline_RpnCalc_handle_RpnCalc_push_pending_63_function_end_RpnCalc_push_pending # None
#  goto RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_else_7_39 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t47ec <- 0n99/0x63u8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  if tdcd9 == t47ec then 'RpnCalc_handle_if_true_8_40' else 'RpnCalc_handle_if_else_8_41' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_true_8_40 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tac13 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_RpnCalc_init_50_c <- tac13 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s <- inline_RpnCalc_handle_RpnCalc_init_50_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(15,5))
#  inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957 <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(7,5))
#  inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/Stack.j':(7,5))
#  mem[inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 # Some('/lutcomp/programs/lib/Stack.j':(7,5))
#  goto inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_function_end_stack_init # None
#  :inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_function_end_stack_init # None
#  inline_RpnCalc_handle_RpnCalc_init_50_t6e8e <- inline_RpnCalc_handle_RpnCalc_init_50_c Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#  inline_RpnCalc_handle_RpnCalc_init_50_t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#  mem[inline_RpnCalc_handle_RpnCalc_init_50_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_t60ec U32 # Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#  goto inline_RpnCalc_handle_RpnCalc_init_50_function_end_RpnCalc_init # None
#  :inline_RpnCalc_handle_RpnCalc_init_50_function_end_RpnCalc_init # None
#  goto RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_else_8_41 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tcc42 <- 0n100/0x64u8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  if tdcd9 == tcc42 then 'RpnCalc_handle_if_true_9_42' else 'RpnCalc_handle_if_else_9_43' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_true_9_42 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  i <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_while_predicate_44 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t6001 <- stack_count U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  if td0f3 < t6001 then 'RpnCalc_handle_while_body_45' else 'RpnCalc_handle_while_end_46' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_while_body_45 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  None <= call print_dec8(td0f3,) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  None <= call io_write0(inline_RpnCalc_handle_putc_23_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_RpnCalc_handle_putc_23_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_23_t76c7 <- mem[inline_RpnCalc_handle_putc_23_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_23_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_putc_23_ta97f then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_23_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_RpnCalc_handle_putc_23_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_23_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_23_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_RpnCalc_handle_putc_23_function_end_putc # None
#  :inline_RpnCalc_handle_putc_23_function_end_putc # None
#  tfe08 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t4376 U32 <- td0f3 U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_get_48_s <- tfe08 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_get_48_n <- t4376 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_get_48_td38d <- inline_RpnCalc_handle_stack_get_48_n Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(24,5))
#  inline_RpnCalc_handle_stack_get_48_t5abb <- inline_RpnCalc_handle_stack_get_48_s Add Var(inline_RpnCalc_handle_stack_get_48_td38d) # Some('/lutcomp/programs/lib/Stack.j':(24,5))
#  inline_RpnCalc_handle_stack_get_48_t2db0 <- mem[inline_RpnCalc_handle_stack_get_48_t5abb] U32 # Some('/lutcomp/programs/lib/Stack.j':(24,5))
#  tb336 <- inline_RpnCalc_handle_stack_get_48_t2db0 U32 # Some('/lutcomp/programs/lib/Stack.j':(24,5))
#  goto inline_RpnCalc_handle_stack_get_48_function_end_stack_get # Some('/lutcomp/programs/lib/Stack.j':(24,5))
#  :inline_RpnCalc_handle_stack_get_48_function_end_stack_get # None
#  None <= call print_dec32(tb336,) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t25ee <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_putc_24_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  None <= call io_write0(inline_RpnCalc_handle_putc_24_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_RpnCalc_handle_putc_24_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_24_t76c7 <- mem[inline_RpnCalc_handle_putc_24_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_24_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_putc_24_ta97f then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_24_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_24_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_RpnCalc_handle_putc_24_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_24_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_24_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_RpnCalc_handle_putc_24_function_end_putc # None
#  :inline_RpnCalc_handle_putc_24_function_end_putc # None
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  i <- td0f3 Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  goto RpnCalc_handle_while_predicate_44 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_while_end_46 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  goto RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_else_9_43 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  teed8 <- 0n57/0x39u8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  if tdcd9 <= teed8 then 'RpnCalc_handle_if_true_10_47' else 'RpnCalc_handle_if_else_10_48' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_true_10_47 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tdcb0 <- 0n48/0x30u8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  if tdcd9 >= tdcb0 then 'RpnCalc_handle_if_true_0_50' else 'RpnCalc_handle_if_else_0_51' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_true_0_50 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tb1ed <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tfdb7 <- tb1ed Add Number(0n72/0x00000048u32) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  ta11a <- 0n1/0x01u8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  mem[tfdb7] <- ta11a U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tb1ed <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t6e8e <- tb1ed Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tb1ed <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t6e8e <- tb1ed Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  td60 <- mem[t6e8e] U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_mul32_by10_13_a <- td60 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 # Some('/lutcomp/programs/lib/mul.j':(49,5))
#  inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 # Some('/lutcomp/programs/lib/mul.j':(49,5))
#  inline_RpnCalc_handle_mul32_by10_13_a <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) # Some('/lutcomp/programs/lib/mul.j':(49,5))
#  inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 # Some('/lutcomp/programs/lib/mul.j':(50,5))
#  inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 # Some('/lutcomp/programs/lib/mul.j':(50,5))
#  inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) # Some('/lutcomp/programs/lib/mul.j':(50,5))
#  inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 # Some('/lutcomp/programs/lib/mul.j':(51,5))
#  inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 # Some('/lutcomp/programs/lib/mul.j':(51,5))
#  inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_tace9) # Some('/lutcomp/programs/lib/mul.j':(51,5))
#  inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 # Some('/lutcomp/programs/lib/mul.j':(52,5))
#  inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 # Some('/lutcomp/programs/lib/mul.j':(52,5))
#  inline_RpnCalc_handle_mul32_by10_13_t7eaf <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) # Some('/lutcomp/programs/lib/mul.j':(52,5))
#  tadd <- inline_RpnCalc_handle_mul32_by10_13_t7eaf U32 # Some('/lutcomp/programs/lib/mul.j':(52,5))
#  goto inline_RpnCalc_handle_mul32_by10_13_function_end_mul32_by10 # Some('/lutcomp/programs/lib/mul.j':(52,5))
#  :inline_RpnCalc_handle_mul32_by10_13_function_end_mul32_by10 # None
#  mem[t6e8e] <- tadd U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tb1ed <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t6e8e <- tb1ed Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tb1ed <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t6e8e <- tb1ed Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  td60 <- mem[t6e8e] U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t9dae <- tdcd9 Subtract Number(0n48/0x30u8) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tdc11 U32 <- t9dae U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tbdb5 <- td60 Add Var(tdc11) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  mem[t6e8e] <- tbdb5 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  goto RpnCalc_handle_if_end_49 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_else_0_51 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_end_49 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  goto RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_else_10_48 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  ta11a <- 0n1/0x01u8  # Some('/lutcomp/programs/lib/rpnlib.j':(118,5))
#  return Some(ta11a) # Some('/lutcomp/programs/lib/rpnlib.j':(118,5))
#  :function_end_RpnCalc_handle # None
#  Unreachable # None

# IlFunctionId("RpnCalc_run")(calc,)
#  :RpnCalc_run_while_predicate_0 # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  if ta97f == ta97f then 'RpnCalc_run_while_body_1' else 'RpnCalc_run_while_end_2' # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  :RpnCalc_run_while_body_1 # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  inline_RpnCalc_run_getchar_39_ch <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(19,5))
#  :inline_RpnCalc_run_getchar_39_getchar_while_predicate_0 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_RpnCalc_run_getchar_39_tdcd9 <- inline_RpnCalc_run_getchar_39_ch U8 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_RpnCalc_run_getchar_39_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2' # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  :inline_RpnCalc_run_getchar_39_getchar_while_body_1 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  Some(inline_RpnCalc_run_getchar_39_t861f) <= call io_ready_to_read() # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_RpnCalc_run_getchar_39_te3c4 <- inline_RpnCalc_run_getchar_39_t861f BitwiseAnd Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_RpnCalc_run_getchar_39_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  if inline_RpnCalc_run_getchar_39_te3c4 != inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5' # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  :inline_RpnCalc_run_getchar_39_getchar_if_true_0_4 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_RpnCalc_run_getchar_39_tb816 <- ttyin # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s <- 0n987392/0x000f1100u32  # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_n <- inline_RpnCalc_run_getchar_39_tb816 U8 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32  # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7) # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_n U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32  # Some('/lutcomp/programs/lib/Queue.j':(26,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32  # Some('/lutcomp/programs/lib/Queue.j':(26,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] U8 # Some('/lutcomp/programs/lib/Queue.j':(26,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tf3c4 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/Queue.j':(26,5))
#  mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tf3c4 U8 # Some('/lutcomp/programs/lib/Queue.j':(26,5))
#  goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_function_end_queue_push # None
#  :inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_function_end_queue_push # None
#  goto inline_RpnCalc_run_getchar_39_getchar_if_end_3 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  :inline_RpnCalc_run_getchar_39_getchar_if_else_0_5 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_RpnCalc_run_getchar_39_t0 <- 0n987144/0x000f1008u32  # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_RpnCalc_run_getchar_39_teb6e <- mem[inline_RpnCalc_run_getchar_39_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_RpnCalc_run_getchar_39_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_1_7' # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  :inline_RpnCalc_run_getchar_39_getchar_if_true_1_6 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  None <= call Keyboard_poll() # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  goto inline_RpnCalc_run_getchar_39_getchar_if_end_3 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  :inline_RpnCalc_run_getchar_39_getchar_if_else_1_7 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  :inline_RpnCalc_run_getchar_39_getchar_if_end_3 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- 0n987392/0x000f1100u32  # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32  # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- 0n987652/0x000f1204u32  # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] U8 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee then 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1' else 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_else_0_2' # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  :inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  inline_RpnCalc_run_getchar_39_ch <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f U8 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_end_0 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  :inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_else_0_2 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  :inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_end_0 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32  # Some('/lutcomp/programs/lib/Queue.j':(18,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 # Some('/lutcomp/programs/lib/Queue.j':(18,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd U8 # Some('/lutcomp/programs/lib/Queue.j':(18,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469) # Some('/lutcomp/programs/lib/Queue.j':(18,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_value <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11] U8 # Some('/lutcomp/programs/lib/Queue.j':(18,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32  # Some('/lutcomp/programs/lib/Queue.j':(19,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32  # Some('/lutcomp/programs/lib/Queue.j':(19,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 # Some('/lutcomp/programs/lib/Queue.j':(19,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_te468 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/Queue.j':(19,5))
#  mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_te468 U8 # Some('/lutcomp/programs/lib/Queue.j':(19,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t44ed <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_value U8 # Some('/lutcomp/programs/lib/Queue.j':(20,5))
#  inline_RpnCalc_run_getchar_39_ch <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t44ed U8 # Some('/lutcomp/programs/lib/Queue.j':(20,5))
#  goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop # Some('/lutcomp/programs/lib/Queue.j':(20,5))
#  :inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop # None
#  goto inline_RpnCalc_run_getchar_39_getchar_while_predicate_0 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  :inline_RpnCalc_run_getchar_39_getchar_while_end_2 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_RpnCalc_run_getchar_39_tdcd9 <- inline_RpnCalc_run_getchar_39_ch U8 # Some('/lutcomp/programs/lib/stdio.j':(31,5))
#  ch <- inline_RpnCalc_run_getchar_39_tdcd9 U8 # Some('/lutcomp/programs/lib/stdio.j':(31,5))
#  goto inline_RpnCalc_run_getchar_39_function_end_getchar # Some('/lutcomp/programs/lib/stdio.j':(31,5))
#  :inline_RpnCalc_run_getchar_39_function_end_getchar # None
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  Some(result) <= call RpnCalc_handle(calc,tdcd9,) # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  t57fd <- result U8 # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  if t57fd == ta97f then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_else_0_5' # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  :RpnCalc_run_if_true_0_4 # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  return Some(ta97f) # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  goto RpnCalc_run_if_end_3 # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  :RpnCalc_run_if_else_0_5 # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  :RpnCalc_run_if_end_3 # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  goto RpnCalc_run_while_predicate_0 # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  :RpnCalc_run_while_end_2 # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  :function_end_RpnCalc_run # None
#  Unreachable # None

# IlFunctionId("delay")(x,)
#  :delay_while_predicate_0 # Some('/lutcomp/programs/lib/delay.j':(2,5))
#  tad57 <- x U32 # Some('/lutcomp/programs/lib/delay.j':(2,5))
#  t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/delay.j':(2,5))
#  if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' # Some('/lutcomp/programs/lib/delay.j':(2,5))
#  :delay_while_body_1 # Some('/lutcomp/programs/lib/delay.j':(2,5))
#  tad57 <- x U32 # Some('/lutcomp/programs/lib/delay.j':(2,5))
#  x <- tad57 Subtract Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/delay.j':(2,5))
#  goto delay_while_predicate_0 # Some('/lutcomp/programs/lib/delay.j':(2,5))
#  :delay_while_end_2 # Some('/lutcomp/programs/lib/delay.j':(2,5))
#  return None # None
#  :function_end_delay # None
#  Unreachable # None

# IlFunctionId("div32")(a,b,)
#  __frame_pointer <- __frame_pointer Add Number(0xfffffff8u32) # None
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/div.j':(67,5))
#  tace9 <- b U32 # Some('/lutcomp/programs/lib/div.j':(67,5))
#  if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_else_0_2' # Some('/lutcomp/programs/lib/div.j':(67,5))
#  :div32_if_true_0_1 # Some('/lutcomp/programs/lib/div.j':(67,5))
#  t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/div.j':(67,5))
#  __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) # Some('/lutcomp/programs/lib/div.j':(67,5))
#  return Some(t60ec) # Some('/lutcomp/programs/lib/div.j':(67,5))
#  goto div32_if_end_0 # Some('/lutcomp/programs/lib/div.j':(67,5))
#  :div32_if_else_0_2 # Some('/lutcomp/programs/lib/div.j':(67,5))
#  :div32_if_end_0 # Some('/lutcomp/programs/lib/div.j':(67,5))
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/div.j':(71,5))
#  t4917 <- 0n65536/0x00010000u32  # Some('/lutcomp/programs/lib/div.j':(71,5))
#  if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_else_0_5' # Some('/lutcomp/programs/lib/div.j':(71,5))
#  :div32_if_true_0_4 # Some('/lutcomp/programs/lib/div.j':(71,5))
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/div.j':(71,5))
#  tace9 <- b U32 # Some('/lutcomp/programs/lib/div.j':(71,5))
#  inline_div32_div16_43_a <- t8792 U32 # Some('/lutcomp/programs/lib/div.j':(71,5))
#  inline_div32_div16_43_b <- tace9 U32 # Some('/lutcomp/programs/lib/div.j':(71,5))
#  inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 # Some('/lutcomp/programs/lib/div.j':(21,5))
#  inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 # Some('/lutcomp/programs/lib/div.j':(21,5))
#  if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_else_0_2' # Some('/lutcomp/programs/lib/div.j':(21,5))
#  :inline_div32_div16_43_div16_if_true_0_1 # Some('/lutcomp/programs/lib/div.j':(21,5))
#  inline_div32_div16_43_t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/div.j':(21,5))
#  te81f <- inline_div32_div16_43_t60ec U32 # Some('/lutcomp/programs/lib/div.j':(21,5))
#  goto inline_div32_div16_43_function_end_div16 # Some('/lutcomp/programs/lib/div.j':(21,5))
#  goto inline_div32_div16_43_div16_if_end_0 # Some('/lutcomp/programs/lib/div.j':(21,5))
#  :inline_div32_div16_43_div16_if_else_0_2 # Some('/lutcomp/programs/lib/div.j':(21,5))
#  :inline_div32_div16_43_div16_if_end_0 # Some('/lutcomp/programs/lib/div.j':(21,5))
#  inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 # Some('/lutcomp/programs/lib/div.j':(25,5))
#  inline_div32_div16_43_t9c15 <- 0n256/0x00000100u32  # Some('/lutcomp/programs/lib/div.j':(25,5))
#  if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_else_0_5' # Some('/lutcomp/programs/lib/div.j':(25,5))
#  :inline_div32_div16_43_div16_if_true_0_4 # Some('/lutcomp/programs/lib/div.j':(25,5))
#  inline_div32_div16_43_t3404 <- inline_div32_div16_43_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(25,5))
#  inline_div32_div16_43_t5be0 <- inline_div32_div16_43_b[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(25,5))
#  inline_div32_div16_43_ta670 <- inline_div32_div16_43_t3404 Divide Var(inline_div32_div16_43_t5be0) # Some('/lutcomp/programs/lib/div.j':(25,5))
#  inline_div32_div16_43_tb0ef U32 <- inline_div32_div16_43_ta670 U8 # Some('/lutcomp/programs/lib/div.j':(25,5))
#  te81f <- inline_div32_div16_43_tb0ef U32 # Some('/lutcomp/programs/lib/div.j':(25,5))
#  goto inline_div32_div16_43_function_end_div16 # Some('/lutcomp/programs/lib/div.j':(25,5))
#  goto inline_div32_div16_43_div16_if_end_3 # Some('/lutcomp/programs/lib/div.j':(25,5))
#  :inline_div32_div16_43_div16_if_else_0_5 # Some('/lutcomp/programs/lib/div.j':(25,5))
#  :inline_div32_div16_43_div16_if_end_3 # Some('/lutcomp/programs/lib/div.j':(25,5))
#  inline_div32_div16_43_lo <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/div.j':(29,5))
#  inline_div32_div16_43_hi <- 0n65535/0x0000ffffu32  # Some('/lutcomp/programs/lib/div.j':(30,5))
#  :inline_div32_div16_43_div16_while_predicate_6 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_t5508 <- inline_div32_div16_43_hi U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8' # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_while_body_7 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_t5508 <- inline_div32_div16_43_hi U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_tf1d1 <- inline_div32_div16_43_t1506 Add Var(inline_div32_div16_43_t5508) # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_a <- inline_div32_div16_43_tf1d1 U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t3404 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(4,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_tf435 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3404 RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(4,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_tf435 U8 # Some('/lutcomp/programs/lib/div.j':(4,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t3009 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(5,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t1aa2 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(5,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_t1aa2 U8 # Some('/lutcomp/programs/lib/div.j':(5,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(6,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t878b <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(6,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t878b U8 # Some('/lutcomp/programs/lib/div.j':(6,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t94df <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(7,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t32ea <- inline_div32_div16_43_inline_div16_shiftright1_42_t94df RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(7,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] <- inline_div32_div16_43_inline_div16_shiftright1_42_t32ea U8 # Some('/lutcomp/programs/lib/div.j':(7,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t3404 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(9,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_tbe <- inline_div32_div16_43_inline_div16_shiftright1_42_t3404 BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(9,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_tbe U8 # Some('/lutcomp/programs/lib/div.j':(9,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t3404 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(10,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t3009 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(10,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t9170 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 BitwiseAnd Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/div.j':(10,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_tafc1 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3404 BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_t9170) # Some('/lutcomp/programs/lib/div.j':(10,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_tafc1 U8 # Some('/lutcomp/programs/lib/div.j':(10,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t3009 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(11,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_tdc9f <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(11,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_tdc9f U8 # Some('/lutcomp/programs/lib/div.j':(11,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t3009 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(12,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(12,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_tdb4c <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 BitwiseAnd Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/div.j':(12,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_tdbbe <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_tdb4c) # Some('/lutcomp/programs/lib/div.j':(12,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_tdbbe U8 # Some('/lutcomp/programs/lib/div.j':(12,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(13,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t4954 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(13,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t4954 U8 # Some('/lutcomp/programs/lib/div.j':(13,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(14,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t94df <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(14,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t17d0 <- inline_div32_div16_43_inline_div16_shiftright1_42_t94df BitwiseAnd Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/div.j':(14,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t837a <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_t17d0) # Some('/lutcomp/programs/lib/div.j':(14,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t837a U8 # Some('/lutcomp/programs/lib/div.j':(14,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t94df <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(15,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t965c <- inline_div32_div16_43_inline_div16_shiftright1_42_t94df BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(15,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] <- inline_div32_div16_43_inline_div16_shiftright1_42_t965c U8 # Some('/lutcomp/programs/lib/div.j':(15,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t8792 <- inline_div32_div16_43_inline_div16_shiftright1_42_a U32 # Some('/lutcomp/programs/lib/div.j':(17,5))
#  inline_div32_div16_43_mid <- inline_div32_div16_43_inline_div16_shiftright1_42_t8792 U32 # Some('/lutcomp/programs/lib/div.j':(17,5))
#  goto inline_div32_div16_43_inline_div16_shiftright1_42_function_end_shiftright1 # Some('/lutcomp/programs/lib/div.j':(17,5))
#  :inline_div32_div16_43_inline_div16_shiftright1_42_function_end_shiftright1 # None
#  inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_a <- inline_div32_div16_43_tfd7e U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_b <- inline_div32_div16_43_tace9 U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_t8792 <- inline_div32_div16_43_inline_div16_mul16_32_4_a U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_tace9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_t3009 <- inline_div32_div16_43_inline_div16_mul16_32_4_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_te47a <- inline_div32_div16_43_inline_div16_mul16_32_4_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_f <- inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_t6ec2 <- inline_div32_div16_43_inline_div16_mul16_32_4_f[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_f[0x03..0x04] <- inline_div32_div16_43_inline_div16_mul16_32_4_t6ec2 U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_t9922 <- inline_div32_div16_43_inline_div16_mul16_32_4_f[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_f[0x02..0x03] <- inline_div32_div16_43_inline_div16_mul16_32_4_t9922 U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(15,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_f[0x01..0x02] <- inline_div32_div16_43_inline_div16_mul16_32_4_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(15,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(16,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_f[0x00..0x01] <- inline_div32_div16_43_inline_div16_mul16_32_4_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(16,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_tac13 <- inline_div32_div16_43_inline_div16_mul16_32_4_c U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4 <- inline_div32_div16_43_inline_div16_mul16_32_4_f U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4) # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_t8792 <- inline_div32_div16_43_inline_div16_mul16_32_4_a U32 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_te47a <- inline_div32_div16_43_inline_div16_mul16_32_4_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_t3009 <- inline_div32_div16_43_inline_div16_mul16_32_4_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_tace9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b U32 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_e <- inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 <- inline_div32_div16_43_inline_div16_mul16_32_4_d U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_t3585 <- inline_div32_div16_43_inline_div16_mul16_32_4_e U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t3585) # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_t8575 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_d[0x03..0x04] <- inline_div32_div16_43_inline_div16_mul16_32_4_t8575 U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_t34f7 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_d[0x02..0x03] <- inline_div32_div16_43_inline_div16_mul16_32_4_t34f7 U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_t30b9 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_d[0x01..0x02] <- inline_div32_div16_43_inline_div16_mul16_32_4_t30b9 U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(25,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_d[0x00..0x01] <- inline_div32_div16_43_inline_div16_mul16_32_4_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(25,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_tac13 <- inline_div32_div16_43_inline_div16_mul16_32_4_c U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 <- inline_div32_div16_43_inline_div16_mul16_32_4_d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_ta65d <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t45f5) # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_div32_div16_43_x <- inline_div32_div16_43_inline_div16_mul16_32_4_ta65d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  goto inline_div32_div16_43_inline_div16_mul16_32_4_function_end_mul16_32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  :inline_div32_div16_43_inline_div16_mul16_32_4_function_end_mul16_32 # None
#  inline_div32_div16_43_tcd34 <- inline_div32_div16_43_x[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/div.j':(32,5))
#  if inline_div32_div16_43_tcd34 > inline_div32_div16_43_ta97f then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_else_0_11' # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_if_true_0_10 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/div.j':(32,5))
#  goto inline_div32_div16_43_div16_while_predicate_6 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  goto inline_div32_div16_43_div16_if_end_9 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_if_else_0_11 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_if_end_9 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_t4299 <- inline_div32_div16_43_x[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/div.j':(32,5))
#  if inline_div32_div16_43_t4299 > inline_div32_div16_43_ta97f then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_else_0_14' # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_if_true_0_13 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/div.j':(32,5))
#  goto inline_div32_div16_43_div16_while_predicate_6 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  goto inline_div32_div16_43_div16_if_end_12 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_if_else_0_14 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_if_end_12 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_else_0_17' # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_if_true_0_16 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/div.j':(32,5))
#  goto inline_div32_div16_43_div16_while_predicate_6 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  goto inline_div32_div16_43_div16_if_end_15 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_if_else_0_17 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_if_end_15 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_else_0_20' # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_if_true_0_19 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  te81f <- inline_div32_div16_43_tfd7e U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  goto inline_div32_div16_43_function_end_div16 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  goto inline_div32_div16_43_div16_if_end_18 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_if_else_0_20 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_if_end_18 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_taee0 <- inline_div32_div16_43_r U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_else_0_23' # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_if_true_0_22 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  te81f <- inline_div32_div16_43_tfd7e U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  goto inline_div32_div16_43_function_end_div16 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  goto inline_div32_div16_43_div16_if_end_21 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_if_else_0_23 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_if_end_21 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_lo <- inline_div32_div16_43_tfd7e Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/div.j':(32,5))
#  goto inline_div32_div16_43_div16_while_predicate_6 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_while_end_8 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 # Some('/lutcomp/programs/lib/div.j':(63,5))
#  te81f <- inline_div32_div16_43_t1506 U32 # Some('/lutcomp/programs/lib/div.j':(63,5))
#  goto inline_div32_div16_43_function_end_div16 # Some('/lutcomp/programs/lib/div.j':(63,5))
#  :inline_div32_div16_43_function_end_div16 # None
#  __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) # Some('/lutcomp/programs/lib/div.j':(71,5))
#  return Some(te81f) # Some('/lutcomp/programs/lib/div.j':(71,5))
#  goto div32_if_end_3 # Some('/lutcomp/programs/lib/div.j':(71,5))
#  :div32_if_else_0_5 # Some('/lutcomp/programs/lib/div.j':(71,5))
#  :div32_if_end_3 # Some('/lutcomp/programs/lib/div.j':(71,5))
#  lo <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/div.j':(75,5))
#  hi <- 0xffffffffu32  # Some('/lutcomp/programs/lib/div.j':(76,5))
#  :div32_while_predicate_6 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  t1506 <- lo U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  t5508 <- hi U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' # Some('/lutcomp/programs/lib/div.j':(78,5))
#  :div32_while_body_7 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  t1506 <- lo U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  inline_div32_shiftright1_44_a <- t1506 U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  inline_div32_shiftright1_44_t3404 <- inline_div32_shiftright1_44_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(4,5))
#  inline_div32_shiftright1_44_tf435 <- inline_div32_shiftright1_44_t3404 RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(4,5))
#  inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_tf435 U8 # Some('/lutcomp/programs/lib/div.j':(4,5))
#  inline_div32_shiftright1_44_t3009 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(5,5))
#  inline_div32_shiftright1_44_t1aa2 <- inline_div32_shiftright1_44_t3009 RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(5,5))
#  inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_t1aa2 U8 # Some('/lutcomp/programs/lib/div.j':(5,5))
#  inline_div32_shiftright1_44_t3b02 <- inline_div32_shiftright1_44_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(6,5))
#  inline_div32_shiftright1_44_t878b <- inline_div32_shiftright1_44_t3b02 RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(6,5))
#  inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t878b U8 # Some('/lutcomp/programs/lib/div.j':(6,5))
#  inline_div32_shiftright1_44_t94df <- inline_div32_shiftright1_44_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(7,5))
#  inline_div32_shiftright1_44_t32ea <- inline_div32_shiftright1_44_t94df RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(7,5))
#  inline_div32_shiftright1_44_a[0x03..0x04] <- inline_div32_shiftright1_44_t32ea U8 # Some('/lutcomp/programs/lib/div.j':(7,5))
#  inline_div32_shiftright1_44_t3404 <- inline_div32_shiftright1_44_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(9,5))
#  inline_div32_shiftright1_44_tbe <- inline_div32_shiftright1_44_t3404 BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(9,5))
#  inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_tbe U8 # Some('/lutcomp/programs/lib/div.j':(9,5))
#  inline_div32_shiftright1_44_t3404 <- inline_div32_shiftright1_44_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(10,5))
#  inline_div32_shiftright1_44_t3009 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(10,5))
#  inline_div32_shiftright1_44_t9170 <- inline_div32_shiftright1_44_t3009 BitwiseAnd Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/div.j':(10,5))
#  inline_div32_shiftright1_44_tafc1 <- inline_div32_shiftright1_44_t3404 BitwiseOr Var(inline_div32_shiftright1_44_t9170) # Some('/lutcomp/programs/lib/div.j':(10,5))
#  inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_tafc1 U8 # Some('/lutcomp/programs/lib/div.j':(10,5))
#  inline_div32_shiftright1_44_t3009 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(11,5))
#  inline_div32_shiftright1_44_tdc9f <- inline_div32_shiftright1_44_t3009 BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(11,5))
#  inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_tdc9f U8 # Some('/lutcomp/programs/lib/div.j':(11,5))
#  inline_div32_shiftright1_44_t3009 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(12,5))
#  inline_div32_shiftright1_44_t3b02 <- inline_div32_shiftright1_44_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(12,5))
#  inline_div32_shiftright1_44_tdb4c <- inline_div32_shiftright1_44_t3b02 BitwiseAnd Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/div.j':(12,5))
#  inline_div32_shiftright1_44_tdbbe <- inline_div32_shiftright1_44_t3009 BitwiseOr Var(inline_div32_shiftright1_44_tdb4c) # Some('/lutcomp/programs/lib/div.j':(12,5))
#  inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_tdbbe U8 # Some('/lutcomp/programs/lib/div.j':(12,5))
#  inline_div32_shiftright1_44_t3b02 <- inline_div32_shiftright1_44_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(13,5))
#  inline_div32_shiftright1_44_t4954 <- inline_div32_shiftright1_44_t3b02 BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(13,5))
#  inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t4954 U8 # Some('/lutcomp/programs/lib/div.j':(13,5))
#  inline_div32_shiftright1_44_t3b02 <- inline_div32_shiftright1_44_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(14,5))
#  inline_div32_shiftright1_44_t94df <- inline_div32_shiftright1_44_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(14,5))
#  inline_div32_shiftright1_44_t17d0 <- inline_div32_shiftright1_44_t94df BitwiseAnd Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/div.j':(14,5))
#  inline_div32_shiftright1_44_t837a <- inline_div32_shiftright1_44_t3b02 BitwiseOr Var(inline_div32_shiftright1_44_t17d0) # Some('/lutcomp/programs/lib/div.j':(14,5))
#  inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t837a U8 # Some('/lutcomp/programs/lib/div.j':(14,5))
#  inline_div32_shiftright1_44_t94df <- inline_div32_shiftright1_44_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(15,5))
#  inline_div32_shiftright1_44_t965c <- inline_div32_shiftright1_44_t94df BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(15,5))
#  inline_div32_shiftright1_44_a[0x03..0x04] <- inline_div32_shiftright1_44_t965c U8 # Some('/lutcomp/programs/lib/div.j':(15,5))
#  inline_div32_shiftright1_44_t8792 <- inline_div32_shiftright1_44_a U32 # Some('/lutcomp/programs/lib/div.j':(17,5))
#  t9599 <- inline_div32_shiftright1_44_t8792 U32 # Some('/lutcomp/programs/lib/div.j':(17,5))
#  goto inline_div32_shiftright1_44_function_end_shiftright1 # Some('/lutcomp/programs/lib/div.j':(17,5))
#  :inline_div32_shiftright1_44_function_end_shiftright1 # None
#  t5508 <- hi U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  inline_div32_shiftright1_45_a <- t5508 U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  inline_div32_shiftright1_45_t3404 <- inline_div32_shiftright1_45_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(4,5))
#  inline_div32_shiftright1_45_tf435 <- inline_div32_shiftright1_45_t3404 RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(4,5))
#  inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_tf435 U8 # Some('/lutcomp/programs/lib/div.j':(4,5))
#  inline_div32_shiftright1_45_t3009 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(5,5))
#  inline_div32_shiftright1_45_t1aa2 <- inline_div32_shiftright1_45_t3009 RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(5,5))
#  inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_t1aa2 U8 # Some('/lutcomp/programs/lib/div.j':(5,5))
#  inline_div32_shiftright1_45_t3b02 <- inline_div32_shiftright1_45_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(6,5))
#  inline_div32_shiftright1_45_t878b <- inline_div32_shiftright1_45_t3b02 RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(6,5))
#  inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t878b U8 # Some('/lutcomp/programs/lib/div.j':(6,5))
#  inline_div32_shiftright1_45_t94df <- inline_div32_shiftright1_45_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(7,5))
#  inline_div32_shiftright1_45_t32ea <- inline_div32_shiftright1_45_t94df RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(7,5))
#  inline_div32_shiftright1_45_a[0x03..0x04] <- inline_div32_shiftright1_45_t32ea U8 # Some('/lutcomp/programs/lib/div.j':(7,5))
#  inline_div32_shiftright1_45_t3404 <- inline_div32_shiftright1_45_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(9,5))
#  inline_div32_shiftright1_45_tbe <- inline_div32_shiftright1_45_t3404 BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(9,5))
#  inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_tbe U8 # Some('/lutcomp/programs/lib/div.j':(9,5))
#  inline_div32_shiftright1_45_t3404 <- inline_div32_shiftright1_45_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(10,5))
#  inline_div32_shiftright1_45_t3009 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(10,5))
#  inline_div32_shiftright1_45_t9170 <- inline_div32_shiftright1_45_t3009 BitwiseAnd Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/div.j':(10,5))
#  inline_div32_shiftright1_45_tafc1 <- inline_div32_shiftright1_45_t3404 BitwiseOr Var(inline_div32_shiftright1_45_t9170) # Some('/lutcomp/programs/lib/div.j':(10,5))
#  inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_tafc1 U8 # Some('/lutcomp/programs/lib/div.j':(10,5))
#  inline_div32_shiftright1_45_t3009 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(11,5))
#  inline_div32_shiftright1_45_tdc9f <- inline_div32_shiftright1_45_t3009 BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(11,5))
#  inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_tdc9f U8 # Some('/lutcomp/programs/lib/div.j':(11,5))
#  inline_div32_shiftright1_45_t3009 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(12,5))
#  inline_div32_shiftright1_45_t3b02 <- inline_div32_shiftright1_45_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(12,5))
#  inline_div32_shiftright1_45_tdb4c <- inline_div32_shiftright1_45_t3b02 BitwiseAnd Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/div.j':(12,5))
#  inline_div32_shiftright1_45_tdbbe <- inline_div32_shiftright1_45_t3009 BitwiseOr Var(inline_div32_shiftright1_45_tdb4c) # Some('/lutcomp/programs/lib/div.j':(12,5))
#  inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_tdbbe U8 # Some('/lutcomp/programs/lib/div.j':(12,5))
#  inline_div32_shiftright1_45_t3b02 <- inline_div32_shiftright1_45_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(13,5))
#  inline_div32_shiftright1_45_t4954 <- inline_div32_shiftright1_45_t3b02 BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(13,5))
#  inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t4954 U8 # Some('/lutcomp/programs/lib/div.j':(13,5))
#  inline_div32_shiftright1_45_t3b02 <- inline_div32_shiftright1_45_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(14,5))
#  inline_div32_shiftright1_45_t94df <- inline_div32_shiftright1_45_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(14,5))
#  inline_div32_shiftright1_45_t17d0 <- inline_div32_shiftright1_45_t94df BitwiseAnd Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/div.j':(14,5))
#  inline_div32_shiftright1_45_t837a <- inline_div32_shiftright1_45_t3b02 BitwiseOr Var(inline_div32_shiftright1_45_t17d0) # Some('/lutcomp/programs/lib/div.j':(14,5))
#  inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t837a U8 # Some('/lutcomp/programs/lib/div.j':(14,5))
#  inline_div32_shiftright1_45_t94df <- inline_div32_shiftright1_45_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(15,5))
#  inline_div32_shiftright1_45_t965c <- inline_div32_shiftright1_45_t94df BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(15,5))
#  inline_div32_shiftright1_45_a[0x03..0x04] <- inline_div32_shiftright1_45_t965c U8 # Some('/lutcomp/programs/lib/div.j':(15,5))
#  inline_div32_shiftright1_45_t8792 <- inline_div32_shiftright1_45_a U32 # Some('/lutcomp/programs/lib/div.j':(17,5))
#  t3803 <- inline_div32_shiftright1_45_t8792 U32 # Some('/lutcomp/programs/lib/div.j':(17,5))
#  goto inline_div32_shiftright1_45_function_end_shiftright1 # Some('/lutcomp/programs/lib/div.j':(17,5))
#  :inline_div32_shiftright1_45_function_end_shiftright1 # None
#  mid <- t9599 Add Var(t3803) # Some('/lutcomp/programs/lib/div.j':(78,5))
#  tfd7e <- mid U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  tace9 <- b U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  te825 <- __frame_pointer U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  tb608 <- te825 U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  None <= call mul32_64(tfd7e,tace9,tb608,) # Some('/lutcomp/programs/lib/div.j':(78,5))
#  te825 <- __frame_pointer U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  t3f2a <- te825 Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/div.j':(78,5))
#  tb973 <- mem[t3f2a] U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/div.j':(78,5))
#  if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11' # Some('/lutcomp/programs/lib/div.j':(78,5))
#  :div32_if_true_0_10 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  tfd7e <- mid U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  hi <- tfd7e Subtract Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/div.j':(78,5))
#  goto div32_while_predicate_6 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  goto div32_if_end_9 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  :div32_if_else_0_11 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  :div32_if_end_9 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  te546 <- __frame_pointer U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  x <- mem[te546] U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  tad57 <- x U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_else_0_14' # Some('/lutcomp/programs/lib/div.j':(78,5))
#  :div32_if_true_0_13 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  tfd7e <- mid U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  hi <- tfd7e Subtract Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/div.j':(78,5))
#  goto div32_while_predicate_6 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  goto div32_if_end_12 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  :div32_if_else_0_14 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  :div32_if_end_12 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  tad57 <- x U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_else_0_17' # Some('/lutcomp/programs/lib/div.j':(78,5))
#  :div32_if_true_0_16 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  tfd7e <- mid U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) # Some('/lutcomp/programs/lib/div.j':(78,5))
#  return Some(tfd7e) # Some('/lutcomp/programs/lib/div.j':(78,5))
#  goto div32_if_end_15 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  :div32_if_else_0_17 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  :div32_if_end_15 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  tad57 <- x U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  r <- t8792 Subtract Var(tad57) # Some('/lutcomp/programs/lib/div.j':(78,5))
#  taee0 <- r U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  tace9 <- b U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_else_0_20' # Some('/lutcomp/programs/lib/div.j':(78,5))
#  :div32_if_true_0_19 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  tfd7e <- mid U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) # Some('/lutcomp/programs/lib/div.j':(78,5))
#  return Some(tfd7e) # Some('/lutcomp/programs/lib/div.j':(78,5))
#  goto div32_if_end_18 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  :div32_if_else_0_20 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  :div32_if_end_18 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  tfd7e <- mid U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  lo <- tfd7e Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/div.j':(78,5))
#  goto div32_while_predicate_6 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  :div32_while_end_8 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  t1506 <- lo U32 # Some('/lutcomp/programs/lib/div.j':(108,5))
#  __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) # Some('/lutcomp/programs/lib/div.j':(108,5))
#  return Some(t1506) # Some('/lutcomp/programs/lib/div.j':(108,5))
#  :function_end_div32 # None
#  Unreachable # None

# IlFunctionId("io_read2")()
#  Unreachable # None
#  :function_end_io_read2 # None
#  Unreachable # None

# IlFunctionId("io_ready_to_read")()
#  Unreachable # None
#  :function_end_io_ready_to_read # None
#  Unreachable # None

# IlFunctionId("io_write0")(data,)
#  Unreachable # None
#  return None # None
#  :function_end_io_write0 # None
#  Unreachable # None

# IlFunctionId("io_write1")(data,)
#  Unreachable # None
#  return None # None
#  :function_end_io_write1 # None
#  Unreachable # None

# IlFunctionId("lcd_draw_char")(i,ch,)
#  inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(9,5))
#  inline_lcd_draw_char_lcd_logical_to_physical_3_row <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Divide Number(0n20/0x14u8) # Some('/lutcomp/programs/lib/lcd.j':(9,5))
#  inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(10,5))
#  inline_lcd_draw_char_lcd_logical_to_physical_3_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_3_row U8 # Some('/lutcomp/programs/lib/lcd.j':(10,5))
#  inline_lcd_draw_char_lcd_logical_to_physical_3_tf14 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 Multiply Number(0n20/0x14u8) # Some('/lutcomp/programs/lib/lcd.j':(10,5))
#  inline_lcd_draw_char_lcd_logical_to_physical_3_col <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Subtract Var(inline_lcd_draw_char_lcd_logical_to_physical_3_tf14) # Some('/lutcomp/programs/lib/lcd.j':(10,5))
#  inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 <- const &lcd_row_start # Some('/lutcomp/programs/lib/lcd.j':(11,5))
#  inline_lcd_draw_char_lcd_logical_to_physical_3_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_3_row U8 # Some('/lutcomp/programs/lib/lcd.j':(11,5))
#  inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd U32 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 U8 # Some('/lutcomp/programs/lib/lcd.j':(11,5))
#  inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf <- inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd) # Some('/lutcomp/programs/lib/lcd.j':(11,5))
#  inline_lcd_draw_char_lcd_logical_to_physical_3_t2f80 <- mem[inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf] U8 # Some('/lutcomp/programs/lib/lcd.j':(11,5))
#  inline_lcd_draw_char_lcd_logical_to_physical_3_tfee9 <- inline_lcd_draw_char_lcd_logical_to_physical_3_col U8 # Some('/lutcomp/programs/lib/lcd.j':(11,5))
#  inline_lcd_draw_char_lcd_logical_to_physical_3_t1acd <- inline_lcd_draw_char_lcd_logical_to_physical_3_t2f80 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_tfee9) # Some('/lutcomp/programs/lib/lcd.j':(11,5))
#  pos <- inline_lcd_draw_char_lcd_logical_to_physical_3_t1acd U8 # Some('/lutcomp/programs/lib/lcd.j':(11,5))
#  goto inline_lcd_draw_char_lcd_logical_to_physical_3_function_end_lcd_logical_to_physical # Some('/lutcomp/programs/lib/lcd.j':(11,5))
#  :inline_lcd_draw_char_lcd_logical_to_physical_3_function_end_lcd_logical_to_physical # None
#  t136d <- pos U8 # Some('/lutcomp/programs/lib/lcd.j':(17,5))
#  t1730 <- t136d ShiftRight Number(0n4/0x04u8) # Some('/lutcomp/programs/lib/lcd.j':(17,5))
#  t2176 <- t1730 BitwiseOr Number(0n8/0x08u8) # Some('/lutcomp/programs/lib/lcd.j':(17,5))
#  None <= call io_write1(t2176,) # Some('/lutcomp/programs/lib/lcd.j':(17,5))
#  t136d <- pos U8 # Some('/lutcomp/programs/lib/lcd.j':(18,5))
#  t791e <- t136d BitwiseAnd Number(0n15/0x0fu8) # Some('/lutcomp/programs/lib/lcd.j':(18,5))
#  None <= call io_write1(t791e,) # Some('/lutcomp/programs/lib/lcd.j':(18,5))
#  t9498 <- 0n2/0x00000002u32  # Some('/lutcomp/programs/lib/lcd.j':(19,5))
#  None <= call delay(t9498,) # Some('/lutcomp/programs/lib/lcd.j':(19,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(21,5))
#  t4028 <- tdcd9 ShiftRight Number(0n4/0x04u8) # Some('/lutcomp/programs/lib/lcd.j':(21,5))
#  t3e8f <- t4028 BitwiseOr Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/lcd.j':(21,5))
#  None <= call io_write1(t3e8f,) # Some('/lutcomp/programs/lib/lcd.j':(21,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(22,5))
#  t6611 <- tdcd9 BitwiseAnd Number(0n15/0x0fu8) # Some('/lutcomp/programs/lib/lcd.j':(22,5))
#  tb5dc <- t6611 BitwiseOr Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/lcd.j':(22,5))
#  None <= call io_write1(tb5dc,) # Some('/lutcomp/programs/lib/lcd.j':(22,5))
#  t9498 <- 0n2/0x00000002u32  # Some('/lutcomp/programs/lib/lcd.j':(23,5))
#  None <= call delay(t9498,) # Some('/lutcomp/programs/lib/lcd.j':(23,5))
#  return None # None
#  :function_end_lcd_draw_char # None
#  Unreachable # None

# IlFunctionId("lcd_init")()
#  t0 <- 0n987145/0x000f1009u32  # Some('/lutcomp/programs/lib/lcd.j':(69,5))
#  ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/lcd.j':(69,5))
#  mem[t0] <- ta97f U8 # Some('/lutcomp/programs/lib/lcd.j':(69,5))
#  i <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/lcd.j':(72,5))
#  :lcd_init_while_predicate_0 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
#  td749 <- 0n80/0x50u8  # Some('/lutcomp/programs/lib/lcd.j':(73,5))
#  if td0f3 < td749 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2' # Some('/lutcomp/programs/lib/lcd.j':(73,5))
#  :lcd_init_while_body_1 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
#  t9725 U32 <- td0f3 U8 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
#  t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) # Some('/lutcomp/programs/lib/lcd.j':(73,5))
#  tdf3b <- 0n32/0x20u8  # Some('/lutcomp/programs/lib/lcd.j':(73,5))
#  mem[t9e70] <- tdf3b U8 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
#  i <- td0f3 Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/lcd.j':(73,5))
#  goto lcd_init_while_predicate_0 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
#  :lcd_init_while_end_2 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
#  t3d69 <- 0n3/0x03u8  # Some('/lutcomp/programs/lib/lcd.j':(78,5))
#  None <= call io_write1(t3d69,) # Some('/lutcomp/programs/lib/lcd.j':(78,5))
#  t385d <- 0n1/0x00000001u32  # Some('/lutcomp/programs/lib/lcd.j':(79,5))
#  None <= call delay(t385d,) # Some('/lutcomp/programs/lib/lcd.j':(79,5))
#  t3d69 <- 0n3/0x03u8  # Some('/lutcomp/programs/lib/lcd.j':(80,5))
#  None <= call io_write1(t3d69,) # Some('/lutcomp/programs/lib/lcd.j':(80,5))
#  t385d <- 0n1/0x00000001u32  # Some('/lutcomp/programs/lib/lcd.j':(81,5))
#  None <= call delay(t385d,) # Some('/lutcomp/programs/lib/lcd.j':(81,5))
#  t3d69 <- 0n3/0x03u8  # Some('/lutcomp/programs/lib/lcd.j':(82,5))
#  None <= call io_write1(t3d69,) # Some('/lutcomp/programs/lib/lcd.j':(82,5))
#  t385d <- 0n1/0x00000001u32  # Some('/lutcomp/programs/lib/lcd.j':(83,5))
#  None <= call delay(t385d,) # Some('/lutcomp/programs/lib/lcd.j':(83,5))
#  t9f48 <- 0n2/0x02u8  # Some('/lutcomp/programs/lib/lcd.j':(85,5))
#  None <= call io_write1(t9f48,) # Some('/lutcomp/programs/lib/lcd.j':(85,5))
#  t9498 <- 0n2/0x00000002u32  # Some('/lutcomp/programs/lib/lcd.j':(86,5))
#  None <= call delay(t9498,) # Some('/lutcomp/programs/lib/lcd.j':(86,5))
#  t9f48 <- 0n2/0x02u8  # Some('/lutcomp/programs/lib/lcd.j':(88,5))
#  None <= call io_write1(t9f48,) # Some('/lutcomp/programs/lib/lcd.j':(88,5))
#  t477 <- 0n8/0x08u8  # Some('/lutcomp/programs/lib/lcd.j':(89,5))
#  None <= call io_write1(t477,) # Some('/lutcomp/programs/lib/lcd.j':(89,5))
#  t9498 <- 0n2/0x00000002u32  # Some('/lutcomp/programs/lib/lcd.j':(90,5))
#  None <= call delay(t9498,) # Some('/lutcomp/programs/lib/lcd.j':(90,5))
#  ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/lcd.j':(92,5))
#  None <= call io_write1(ta97f,) # Some('/lutcomp/programs/lib/lcd.j':(92,5))
#  tec13 <- 0n12/0x0cu8  # Some('/lutcomp/programs/lib/lcd.j':(93,5))
#  None <= call io_write1(tec13,) # Some('/lutcomp/programs/lib/lcd.j':(93,5))
#  t9498 <- 0n2/0x00000002u32  # Some('/lutcomp/programs/lib/lcd.j':(94,5))
#  None <= call delay(t9498,) # Some('/lutcomp/programs/lib/lcd.j':(94,5))
#  ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/lcd.j':(96,5))
#  None <= call io_write1(ta97f,) # Some('/lutcomp/programs/lib/lcd.j':(96,5))
#  ta11a <- 0n1/0x01u8  # Some('/lutcomp/programs/lib/lcd.j':(97,5))
#  None <= call io_write1(ta11a,) # Some('/lutcomp/programs/lib/lcd.j':(97,5))
#  t9498 <- 0n2/0x00000002u32  # Some('/lutcomp/programs/lib/lcd.j':(98,5))
#  None <= call delay(t9498,) # Some('/lutcomp/programs/lib/lcd.j':(98,5))
#  return None # None
#  :function_end_lcd_init # None
#  Unreachable # None

# IlFunctionId("lcd_putc")(ch,)
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t25ee <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  if tdcd9 == t25ee then 'lcd_putc_if_true_0_1' else 'lcd_putc_if_else_0_2' # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  :lcd_putc_if_true_0_1 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t0 <- 0n987145/0x000f1009u32  # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t5dda <- mem[t0] U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t78f0 <- t5dda Divide Number(0n20/0x14u8) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  tf5a3 <- t78f0 Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  next <- tf5a3 Multiply Number(0n20/0x14u8) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  :lcd_putc_while_predicate_3 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t1 <- 0n987145/0x000f1009u32  # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t5dda <- mem[t1] U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  ta5ff <- next U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  if t5dda < ta5ff then 'lcd_putc_while_body_4' else 'lcd_putc_while_end_5' # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  :lcd_putc_while_body_4 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t2 <- 0n987145/0x000f1009u32  # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t5dda <- mem[t2] U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  tad4e U32 <- t5dda U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t164d <- tad4e Add Number(0n987148/0x000f100cu32) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  tdf3b <- 0n32/0x20u8  # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  mem[t164d] <- tdf3b U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t3 <- 0n987145/0x000f1009u32  # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t4 <- 0n987145/0x000f1009u32  # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t5dda <- mem[t4] U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  tefac <- t5dda Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  mem[t3] <- tefac U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  goto lcd_putc_while_predicate_3 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  :lcd_putc_while_end_5 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  goto lcd_putc_if_end_0 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  :lcd_putc_if_else_0_2 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t5 <- 0n987145/0x000f1009u32  # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t5dda <- mem[t5] U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  tad4e U32 <- t5dda U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t164d <- tad4e Add Number(0n987148/0x000f100cu32) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  mem[t164d] <- tdcd9 U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t6 <- 0n987145/0x000f1009u32  # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t5dda <- mem[t6] U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  None <= call lcd_draw_char(t5dda,tdcd9,) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t7 <- 0n987145/0x000f1009u32  # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t8 <- 0n987145/0x000f1009u32  # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t5dda <- mem[t8] U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  tefac <- t5dda Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  mem[t7] <- tefac U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  :lcd_putc_if_end_0 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t9 <- 0n987145/0x000f1009u32  # Some('/lutcomp/programs/lib/lcd.j':(63,5))
#  t5dda <- mem[t9] U8 # Some('/lutcomp/programs/lib/lcd.j':(63,5))
#  td749 <- 0n80/0x50u8  # Some('/lutcomp/programs/lib/lcd.j':(63,5))
#  if t5dda >= td749 then 'lcd_putc_if_true_0_7' else 'lcd_putc_if_else_0_8' # Some('/lutcomp/programs/lib/lcd.j':(63,5))
#  :lcd_putc_if_true_0_7 # Some('/lutcomp/programs/lib/lcd.j':(63,5))
#  None <= call lcd_scroll_up() # Some('/lutcomp/programs/lib/lcd.j':(63,5))
#  goto lcd_putc_if_end_6 # Some('/lutcomp/programs/lib/lcd.j':(63,5))
#  :lcd_putc_if_else_0_8 # Some('/lutcomp/programs/lib/lcd.j':(63,5))
#  :lcd_putc_if_end_6 # Some('/lutcomp/programs/lib/lcd.j':(63,5))
#  return None # None
#  :function_end_lcd_putc # None
#  Unreachable # None

# IlFunctionId("lcd_scroll_up")()
#  t0 <- 0n987145/0x000f1009u32  # Some('/lutcomp/programs/lib/lcd.j':(27,5))
#  t1 <- 0n987145/0x000f1009u32  # Some('/lutcomp/programs/lib/lcd.j':(27,5))
#  t5dda <- mem[t1] U8 # Some('/lutcomp/programs/lib/lcd.j':(27,5))
#  t81b5 <- t5dda Subtract Number(0n20/0x14u8) # Some('/lutcomp/programs/lib/lcd.j':(27,5))
#  mem[t0] <- t81b5 U8 # Some('/lutcomp/programs/lib/lcd.j':(27,5))
#  i <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/lcd.j':(29,5))
#  :lcd_scroll_up_while_predicate_0 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  t9586 <- 0n60/0x3cu8  # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  if td0f3 < t9586 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2' # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  :lcd_scroll_up_while_body_1 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  tfd89 <- td0f3 Add Number(0n20/0x14u8) # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  t760c U32 <- tfd89 U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  t54b2 <- t760c Add Number(0n987148/0x000f100cu32) # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  ch <- mem[t54b2] U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  t9725 U32 <- td0f3 U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  ta094 <- mem[t9e70] U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  if tdcd9 != ta094 then 'lcd_scroll_up_if_true_0_4' else 'lcd_scroll_up_if_else_0_5' # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  :lcd_scroll_up_if_true_0_4 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  t9725 U32 <- td0f3 U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  mem[t9e70] <- tdcd9 U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  None <= call lcd_draw_char(td0f3,tdcd9,) # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  goto lcd_scroll_up_if_end_3 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  :lcd_scroll_up_if_else_0_5 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  :lcd_scroll_up_if_end_3 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  i <- td0f3 Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  goto lcd_scroll_up_while_predicate_0 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  :lcd_scroll_up_while_end_2 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  :lcd_scroll_up_while_predicate_6 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  td749 <- 0n80/0x50u8  # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  if td0f3 < td749 then 'lcd_scroll_up_while_body_7' else 'lcd_scroll_up_while_end_8' # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  :lcd_scroll_up_while_body_7 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  t9725 U32 <- td0f3 U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  ta094 <- mem[t9e70] U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  tdf3b <- 0n32/0x20u8  # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  if ta094 != tdf3b then 'lcd_scroll_up_if_true_0_10' else 'lcd_scroll_up_if_else_0_11' # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  :lcd_scroll_up_if_true_0_10 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  t9725 U32 <- td0f3 U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  tdf3b <- 0n32/0x20u8  # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  mem[t9e70] <- tdf3b U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  tdf3b <- 0n32/0x20u8  # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  None <= call lcd_draw_char(td0f3,tdf3b,) # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  goto lcd_scroll_up_if_end_9 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  :lcd_scroll_up_if_else_0_11 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  :lcd_scroll_up_if_end_9 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  i <- td0f3 Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  goto lcd_scroll_up_while_predicate_6 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  :lcd_scroll_up_while_end_8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  return None # None
#  :function_end_lcd_scroll_up # None
#  Unreachable # None

# IlFunctionId("main")()
#  None <= call stdio_init() # Some('programs/app/rpn.j':(4,5))
#  inline_main_putc_25_tac13 <- 0n82/0x52u8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  None <= call io_write0(inline_main_putc_25_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_main_putc_25_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_main_putc_25_t76c7 <- mem[inline_main_putc_25_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_main_putc_25_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_main_putc_25_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_25_putc_if_true_0_1' else 'inline_main_putc_25_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_main_putc_25_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_main_putc_25_tac13 <- 0n82/0x52u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_main_putc_25_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_main_putc_25_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_main_putc_25_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_main_putc_25_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_main_putc_25_function_end_putc # None
#  :inline_main_putc_25_function_end_putc # None
#  inline_main_putc_26_tac13 <- 0n80/0x50u8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  None <= call io_write0(inline_main_putc_26_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_main_putc_26_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_main_putc_26_t76c7 <- mem[inline_main_putc_26_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_main_putc_26_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_main_putc_26_t76c7 != inline_main_putc_26_ta97f then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_main_putc_26_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_main_putc_26_tac13 <- 0n80/0x50u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_main_putc_26_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_main_putc_26_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_main_putc_26_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_main_putc_26_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_main_putc_26_function_end_putc # None
#  :inline_main_putc_26_function_end_putc # None
#  tca8 <- 0n987664/0x000f1210u32  # Some('programs/app/rpn.j':(12,5))
#  inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- 0n987728/0x000f1250u32  # Some('/lutcomp/programs/lib/Stack.j':(7,5))
#  inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/Stack.j':(7,5))
#  mem[inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957] <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec U32 # Some('/lutcomp/programs/lib/Stack.j':(7,5))
#  goto inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_function_end_stack_init # None
#  :inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_function_end_stack_init # None
#  inline_main_RpnCalc_init_51_t6e8e <- 0n987732/0x000f1254u32  # Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#  inline_main_RpnCalc_init_51_t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#  mem[inline_main_RpnCalc_init_51_t6e8e] <- inline_main_RpnCalc_init_51_t60ec U32 # Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#  goto inline_main_RpnCalc_init_51_function_end_RpnCalc_init # None
#  :inline_main_RpnCalc_init_51_function_end_RpnCalc_init # None
#  inline_main_putc_27_tac13 <- 0n78/0x4eu8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  None <= call io_write0(inline_main_putc_27_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_main_putc_27_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_main_putc_27_t76c7 <- mem[inline_main_putc_27_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_main_putc_27_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_main_putc_27_t76c7 != inline_main_putc_27_ta97f then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_main_putc_27_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_main_putc_27_tac13 <- 0n78/0x4eu8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_main_putc_27_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_main_putc_27_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_main_putc_27_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_main_putc_27_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_main_putc_27_function_end_putc # None
#  :inline_main_putc_27_function_end_putc # None
#  inline_main_putc_28_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  None <= call io_write0(inline_main_putc_28_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_main_putc_28_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_main_putc_28_t76c7 <- mem[inline_main_putc_28_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_main_putc_28_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_main_putc_28_t76c7 != inline_main_putc_28_ta97f then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_main_putc_28_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_main_putc_28_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_main_putc_28_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_main_putc_28_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_main_putc_28_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_main_putc_28_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_main_putc_28_function_end_putc # None
#  :inline_main_putc_28_function_end_putc # None
#  tca8 <- 0n987664/0x000f1210u32  # Some('programs/app/rpn.j':(17,5))
#  Some(t2a99) <= call RpnCalc_run(tca8,) # Some('programs/app/rpn.j':(17,5))
#  return Some(t2a99) # Some('programs/app/rpn.j':(17,5))
#  :function_end_main # None
#  Unreachable # None

# IlFunctionId("mul32_64")(a,b,c,)
#  __frame_pointer <- __frame_pointer Add Number(0xfffffff8u32) # None
#  a_hi <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/mul.j':(58,5))
#  t94df <- a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/mul.j':(59,5))
#  a_hi[0x01..0x02] <- t94df U8 # Some('/lutcomp/programs/lib/mul.j':(59,5))
#  t3b02 <- a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(60,5))
#  a_hi[0x00..0x01] <- t3b02 U8 # Some('/lutcomp/programs/lib/mul.j':(60,5))
#  b_hi <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/mul.j':(62,5))
#  ta5f7 <- b[0x03..0x04] U8 # Some('/lutcomp/programs/lib/mul.j':(63,5))
#  b_hi[0x01..0x02] <- ta5f7 U8 # Some('/lutcomp/programs/lib/mul.j':(63,5))
#  t82cc <- b[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(64,5))
#  b_hi[0x00..0x01] <- t82cc U8 # Some('/lutcomp/programs/lib/mul.j':(64,5))
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/mul.j':(66,5))
#  tace9 <- b U32 # Some('/lutcomp/programs/lib/mul.j':(66,5))
#  inline_mul32_64_mul16_32_8_a <- t8792 U32 # Some('/lutcomp/programs/lib/mul.j':(66,5))
#  inline_mul32_64_mul16_32_8_b <- tace9 U32 # Some('/lutcomp/programs/lib/mul.j':(66,5))
#  inline_mul32_64_mul16_32_8_t8792 <- inline_mul32_64_mul16_32_8_a U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_mul32_64_mul16_32_8_tace9 <- inline_mul32_64_mul16_32_8_b U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_tace9) # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_mul32_64_mul16_32_8_t3009 <- inline_mul32_64_mul16_32_8_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_8_tb9f0 U32 <- inline_mul32_64_mul16_32_8_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_8_te47a <- inline_mul32_64_mul16_32_8_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_8_t6ca9 U32 <- inline_mul32_64_mul16_32_8_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_8_f <- inline_mul32_64_mul16_32_8_tb9f0 Multiply Var(inline_mul32_64_mul16_32_8_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_8_t6ec2 <- inline_mul32_64_mul16_32_8_f[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_mul32_64_mul16_32_8_f[0x03..0x04] <- inline_mul32_64_mul16_32_8_t6ec2 U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_mul32_64_mul16_32_8_t9922 <- inline_mul32_64_mul16_32_8_f[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_mul32_64_mul16_32_8_f[0x02..0x03] <- inline_mul32_64_mul16_32_8_t9922 U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_mul32_64_mul16_32_8_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(15,5))
#  inline_mul32_64_mul16_32_8_f[0x01..0x02] <- inline_mul32_64_mul16_32_8_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(15,5))
#  inline_mul32_64_mul16_32_8_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(16,5))
#  inline_mul32_64_mul16_32_8_f[0x00..0x01] <- inline_mul32_64_mul16_32_8_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(16,5))
#  inline_mul32_64_mul16_32_8_tac13 <- inline_mul32_64_mul16_32_8_c U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_mul32_64_mul16_32_8_tcbd4 <- inline_mul32_64_mul16_32_8_f U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_tcbd4) # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_mul32_64_mul16_32_8_t8792 <- inline_mul32_64_mul16_32_8_a U32 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_8_te47a <- inline_mul32_64_mul16_32_8_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_8_t6ca9 U32 <- inline_mul32_64_mul16_32_8_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_8_t3009 <- inline_mul32_64_mul16_32_8_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_8_tb9f0 U32 <- inline_mul32_64_mul16_32_8_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_8_tace9 <- inline_mul32_64_mul16_32_8_b U32 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_8_e <- inline_mul32_64_mul16_32_8_tb9f0 Multiply Var(inline_mul32_64_mul16_32_8_tace9) # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_8_t45f5 <- inline_mul32_64_mul16_32_8_d U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_mul32_64_mul16_32_8_t3585 <- inline_mul32_64_mul16_32_8_e U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t45f5 Add Var(inline_mul32_64_mul16_32_8_t3585) # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_mul32_64_mul16_32_8_t8575 <- inline_mul32_64_mul16_32_8_d[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_mul32_64_mul16_32_8_d[0x03..0x04] <- inline_mul32_64_mul16_32_8_t8575 U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_mul32_64_mul16_32_8_t34f7 <- inline_mul32_64_mul16_32_8_d[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_mul32_64_mul16_32_8_d[0x02..0x03] <- inline_mul32_64_mul16_32_8_t34f7 U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_mul32_64_mul16_32_8_t30b9 <- inline_mul32_64_mul16_32_8_d[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_mul32_64_mul16_32_8_d[0x01..0x02] <- inline_mul32_64_mul16_32_8_t30b9 U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_mul32_64_mul16_32_8_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(25,5))
#  inline_mul32_64_mul16_32_8_d[0x00..0x01] <- inline_mul32_64_mul16_32_8_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(25,5))
#  inline_mul32_64_mul16_32_8_tac13 <- inline_mul32_64_mul16_32_8_c U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_mul32_64_mul16_32_8_t45f5 <- inline_mul32_64_mul16_32_8_d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_mul32_64_mul16_32_8_ta65d <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_t45f5) # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  t720d <- inline_mul32_64_mul16_32_8_ta65d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  goto inline_mul32_64_mul16_32_8_function_end_mul16_32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  :inline_mul32_64_mul16_32_8_function_end_mul16_32 # None
#  mem[c] <- t720d U32 # Some('/lutcomp/programs/lib/mul.j':(66,5))
#  t1335 <- c Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/mul.j':(67,5))
#  t8fbd <- a_hi U32 # Some('/lutcomp/programs/lib/mul.j':(67,5))
#  t5cca <- b_hi U32 # Some('/lutcomp/programs/lib/mul.j':(67,5))
#  inline_mul32_64_mul16_32_9_a <- t8fbd U32 # Some('/lutcomp/programs/lib/mul.j':(67,5))
#  inline_mul32_64_mul16_32_9_b <- t5cca U32 # Some('/lutcomp/programs/lib/mul.j':(67,5))
#  inline_mul32_64_mul16_32_9_t8792 <- inline_mul32_64_mul16_32_9_a U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_mul32_64_mul16_32_9_tace9 <- inline_mul32_64_mul16_32_9_b U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_tace9) # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_mul32_64_mul16_32_9_t3009 <- inline_mul32_64_mul16_32_9_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_9_tb9f0 U32 <- inline_mul32_64_mul16_32_9_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_9_te47a <- inline_mul32_64_mul16_32_9_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_9_t6ca9 U32 <- inline_mul32_64_mul16_32_9_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_9_f <- inline_mul32_64_mul16_32_9_tb9f0 Multiply Var(inline_mul32_64_mul16_32_9_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_9_t6ec2 <- inline_mul32_64_mul16_32_9_f[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_mul32_64_mul16_32_9_f[0x03..0x04] <- inline_mul32_64_mul16_32_9_t6ec2 U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_mul32_64_mul16_32_9_t9922 <- inline_mul32_64_mul16_32_9_f[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_mul32_64_mul16_32_9_f[0x02..0x03] <- inline_mul32_64_mul16_32_9_t9922 U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_mul32_64_mul16_32_9_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(15,5))
#  inline_mul32_64_mul16_32_9_f[0x01..0x02] <- inline_mul32_64_mul16_32_9_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(15,5))
#  inline_mul32_64_mul16_32_9_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(16,5))
#  inline_mul32_64_mul16_32_9_f[0x00..0x01] <- inline_mul32_64_mul16_32_9_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(16,5))
#  inline_mul32_64_mul16_32_9_tac13 <- inline_mul32_64_mul16_32_9_c U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_mul32_64_mul16_32_9_tcbd4 <- inline_mul32_64_mul16_32_9_f U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_tcbd4) # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_mul32_64_mul16_32_9_t8792 <- inline_mul32_64_mul16_32_9_a U32 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_9_te47a <- inline_mul32_64_mul16_32_9_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_9_t6ca9 U32 <- inline_mul32_64_mul16_32_9_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_9_t3009 <- inline_mul32_64_mul16_32_9_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_9_tb9f0 U32 <- inline_mul32_64_mul16_32_9_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_9_tace9 <- inline_mul32_64_mul16_32_9_b U32 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_9_e <- inline_mul32_64_mul16_32_9_tb9f0 Multiply Var(inline_mul32_64_mul16_32_9_tace9) # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_9_t45f5 <- inline_mul32_64_mul16_32_9_d U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_mul32_64_mul16_32_9_t3585 <- inline_mul32_64_mul16_32_9_e U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t45f5 Add Var(inline_mul32_64_mul16_32_9_t3585) # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_mul32_64_mul16_32_9_t8575 <- inline_mul32_64_mul16_32_9_d[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_mul32_64_mul16_32_9_d[0x03..0x04] <- inline_mul32_64_mul16_32_9_t8575 U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_mul32_64_mul16_32_9_t34f7 <- inline_mul32_64_mul16_32_9_d[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_mul32_64_mul16_32_9_d[0x02..0x03] <- inline_mul32_64_mul16_32_9_t34f7 U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_mul32_64_mul16_32_9_t30b9 <- inline_mul32_64_mul16_32_9_d[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_mul32_64_mul16_32_9_d[0x01..0x02] <- inline_mul32_64_mul16_32_9_t30b9 U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_mul32_64_mul16_32_9_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(25,5))
#  inline_mul32_64_mul16_32_9_d[0x00..0x01] <- inline_mul32_64_mul16_32_9_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(25,5))
#  inline_mul32_64_mul16_32_9_tac13 <- inline_mul32_64_mul16_32_9_c U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_mul32_64_mul16_32_9_t45f5 <- inline_mul32_64_mul16_32_9_d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_mul32_64_mul16_32_9_ta65d <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_t45f5) # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  t5a04 <- inline_mul32_64_mul16_32_9_ta65d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  goto inline_mul32_64_mul16_32_9_function_end_mul16_32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  :inline_mul32_64_mul16_32_9_function_end_mul16_32 # None
#  mem[t1335] <- t5a04 U32 # Some('/lutcomp/programs/lib/mul.j':(67,5))
#  temp_lo <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/mul.j':(71,5))
#  temp_hi <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/mul.j':(72,5))
#  t8fbd <- a_hi U32 # Some('/lutcomp/programs/lib/mul.j':(74,5))
#  tace9 <- b U32 # Some('/lutcomp/programs/lib/mul.j':(74,5))
#  inline_mul32_64_mul16_32_10_a <- t8fbd U32 # Some('/lutcomp/programs/lib/mul.j':(74,5))
#  inline_mul32_64_mul16_32_10_b <- tace9 U32 # Some('/lutcomp/programs/lib/mul.j':(74,5))
#  inline_mul32_64_mul16_32_10_t8792 <- inline_mul32_64_mul16_32_10_a U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_mul32_64_mul16_32_10_tace9 <- inline_mul32_64_mul16_32_10_b U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_tace9) # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_mul32_64_mul16_32_10_t3009 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_10_tb9f0 U32 <- inline_mul32_64_mul16_32_10_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_10_te47a <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_10_t6ca9 U32 <- inline_mul32_64_mul16_32_10_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_10_f <- inline_mul32_64_mul16_32_10_tb9f0 Multiply Var(inline_mul32_64_mul16_32_10_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_10_t6ec2 <- inline_mul32_64_mul16_32_10_f[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_mul32_64_mul16_32_10_f[0x03..0x04] <- inline_mul32_64_mul16_32_10_t6ec2 U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_mul32_64_mul16_32_10_t9922 <- inline_mul32_64_mul16_32_10_f[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_mul32_64_mul16_32_10_f[0x02..0x03] <- inline_mul32_64_mul16_32_10_t9922 U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(15,5))
#  inline_mul32_64_mul16_32_10_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(15,5))
#  inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(16,5))
#  inline_mul32_64_mul16_32_10_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(16,5))
#  inline_mul32_64_mul16_32_10_tac13 <- inline_mul32_64_mul16_32_10_c U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_mul32_64_mul16_32_10_tcbd4 <- inline_mul32_64_mul16_32_10_f U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_tcbd4) # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_mul32_64_mul16_32_10_t8792 <- inline_mul32_64_mul16_32_10_a U32 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_10_te47a <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_10_t6ca9 U32 <- inline_mul32_64_mul16_32_10_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_10_t3009 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_10_tb9f0 U32 <- inline_mul32_64_mul16_32_10_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_10_tace9 <- inline_mul32_64_mul16_32_10_b U32 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_10_e <- inline_mul32_64_mul16_32_10_tb9f0 Multiply Var(inline_mul32_64_mul16_32_10_tace9) # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_10_t45f5 <- inline_mul32_64_mul16_32_10_d U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_mul32_64_mul16_32_10_t3585 <- inline_mul32_64_mul16_32_10_e U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t45f5 Add Var(inline_mul32_64_mul16_32_10_t3585) # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_mul32_64_mul16_32_10_t8575 <- inline_mul32_64_mul16_32_10_d[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_mul32_64_mul16_32_10_d[0x03..0x04] <- inline_mul32_64_mul16_32_10_t8575 U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_mul32_64_mul16_32_10_t34f7 <- inline_mul32_64_mul16_32_10_d[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_mul32_64_mul16_32_10_d[0x02..0x03] <- inline_mul32_64_mul16_32_10_t34f7 U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_mul32_64_mul16_32_10_t30b9 <- inline_mul32_64_mul16_32_10_d[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_mul32_64_mul16_32_10_d[0x01..0x02] <- inline_mul32_64_mul16_32_10_t30b9 U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(25,5))
#  inline_mul32_64_mul16_32_10_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(25,5))
#  inline_mul32_64_mul16_32_10_tac13 <- inline_mul32_64_mul16_32_10_c U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_mul32_64_mul16_32_10_t45f5 <- inline_mul32_64_mul16_32_10_d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_mul32_64_mul16_32_10_ta65d <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_t45f5) # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  temp <- inline_mul32_64_mul16_32_10_ta65d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  goto inline_mul32_64_mul16_32_10_function_end_mul16_32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  :inline_mul32_64_mul16_32_10_function_end_mul16_32 # None
#  t9186 <- temp[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(75,5))
#  temp_lo[0x02..0x03] <- t9186 U8 # Some('/lutcomp/programs/lib/mul.j':(75,5))
#  t3d83 <- temp[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(76,5))
#  temp_lo[0x03..0x04] <- t3d83 U8 # Some('/lutcomp/programs/lib/mul.j':(76,5))
#  t3970 <- temp[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(77,5))
#  temp_hi[0x00..0x01] <- t3970 U8 # Some('/lutcomp/programs/lib/mul.j':(77,5))
#  t3b80 <- temp[0x03..0x04] U8 # Some('/lutcomp/programs/lib/mul.j':(78,5))
#  temp_hi[0x01..0x02] <- t3b80 U8 # Some('/lutcomp/programs/lib/mul.j':(78,5))
#  te546 <- __frame_pointer U32 # Some('/lutcomp/programs/lib/mul.j':(80,5))
#  t3308 <- temp_lo U32 # Some('/lutcomp/programs/lib/mul.j':(80,5))
#  mem[te546] <- t3308 U32 # Some('/lutcomp/programs/lib/mul.j':(80,5))
#  te825 <- __frame_pointer U32 # Some('/lutcomp/programs/lib/mul.j':(81,5))
#  t3f2a <- te825 Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/mul.j':(81,5))
#  t41f5 <- temp_hi U32 # Some('/lutcomp/programs/lib/mul.j':(81,5))
#  mem[t3f2a] <- t41f5 U32 # Some('/lutcomp/programs/lib/mul.j':(81,5))
#  tac13 <- c U32 # Some('/lutcomp/programs/lib/mul.j':(82,5))
#  te825 <- __frame_pointer U32 # Some('/lutcomp/programs/lib/mul.j':(82,5))
#  t4a94 <- te825 Add Number(0n0/0x00000000u32) # Some('/lutcomp/programs/lib/mul.j':(82,5))
#  tf4b2 <- t4a94 U32 # Some('/lutcomp/programs/lib/mul.j':(82,5))
#  tac13 <- c U32 # Some('/lutcomp/programs/lib/mul.j':(82,5))
#  inline_mul32_64_add_U64_0_a <- tac13 U32 # Some('/lutcomp/programs/lib/mul.j':(82,5))
#  inline_mul32_64_add_U64_0_b <- tf4b2 U32 # Some('/lutcomp/programs/lib/mul.j':(82,5))
#  inline_mul32_64_add_U64_0_c <- tac13 U32 # Some('/lutcomp/programs/lib/mul.j':(82,5))
#  inline_mul32_64_add_U64_0_tbeec <- inline_mul32_64_add_U64_0_a U32 # Some('/lutcomp/programs/lib/U64.j':(7,5))
#  inline_mul32_64_add_U64_0_lo <- mem[inline_mul32_64_add_U64_0_tbeec] U32 # Some('/lutcomp/programs/lib/U64.j':(7,5))
#  inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  inline_mul32_64_add_U64_0_t144a <- inline_mul32_64_add_U64_0_a Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  inline_mul32_64_add_U64_0_te24c <- mem[inline_mul32_64_add_U64_0_t144a] U32 # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  inline_mul32_64_add_U64_0_t809 <- inline_mul32_64_add_U64_0_b Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  inline_mul32_64_add_U64_0_t153d <- mem[inline_mul32_64_add_U64_0_t809] U32 # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  inline_mul32_64_add_U64_0_t6f1c <- inline_mul32_64_add_U64_0_te24c Add Var(inline_mul32_64_add_U64_0_t153d) # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_t6f1c U32 # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  inline_mul32_64_add_U64_0_t8956 <- inline_mul32_64_add_U64_0_c U32 # Some('/lutcomp/programs/lib/U64.j':(9,5))
#  inline_mul32_64_add_U64_0_tbeec <- inline_mul32_64_add_U64_0_a U32 # Some('/lutcomp/programs/lib/U64.j':(9,5))
#  inline_mul32_64_add_U64_0_td868 <- mem[inline_mul32_64_add_U64_0_tbeec] U32 # Some('/lutcomp/programs/lib/U64.j':(9,5))
#  inline_mul32_64_add_U64_0_td5bf <- mem[inline_mul32_64_add_U64_0_b] U32 # Some('/lutcomp/programs/lib/U64.j':(9,5))
#  inline_mul32_64_add_U64_0_ta95f <- inline_mul32_64_add_U64_0_td868 Add Var(inline_mul32_64_add_U64_0_td5bf) # Some('/lutcomp/programs/lib/U64.j':(9,5))
#  mem[inline_mul32_64_add_U64_0_t8956] <- inline_mul32_64_add_U64_0_ta95f U32 # Some('/lutcomp/programs/lib/U64.j':(9,5))
#  inline_mul32_64_add_U64_0_t8956 <- inline_mul32_64_add_U64_0_c U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_0_t90ac <- mem[inline_mul32_64_add_U64_0_t8956] U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_0_t1506 <- inline_mul32_64_add_U64_0_lo U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2' # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  :inline_mul32_64_add_U64_0_add_U64_if_true_0_1 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_0_tf677 <- mem[inline_mul32_64_add_U64_0_t1335] U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_0_tcbd1 <- inline_mul32_64_add_U64_0_tf677 Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_tcbd1 U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  goto inline_mul32_64_add_U64_0_add_U64_if_end_0 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  :inline_mul32_64_add_U64_0_add_U64_if_else_0_2 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  :inline_mul32_64_add_U64_0_add_U64_if_end_0 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  goto inline_mul32_64_add_U64_0_function_end_add_U64 # None
#  :inline_mul32_64_add_U64_0_function_end_add_U64 # None
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/mul.j':(84,5))
#  t5cca <- b_hi U32 # Some('/lutcomp/programs/lib/mul.j':(84,5))
#  inline_mul32_64_mul16_32_11_a <- t8792 U32 # Some('/lutcomp/programs/lib/mul.j':(84,5))
#  inline_mul32_64_mul16_32_11_b <- t5cca U32 # Some('/lutcomp/programs/lib/mul.j':(84,5))
#  inline_mul32_64_mul16_32_11_t8792 <- inline_mul32_64_mul16_32_11_a U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_mul32_64_mul16_32_11_tace9 <- inline_mul32_64_mul16_32_11_b U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_tace9) # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_mul32_64_mul16_32_11_t3009 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_11_tb9f0 U32 <- inline_mul32_64_mul16_32_11_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_11_te47a <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_11_t6ca9 U32 <- inline_mul32_64_mul16_32_11_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_11_f <- inline_mul32_64_mul16_32_11_tb9f0 Multiply Var(inline_mul32_64_mul16_32_11_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_11_t6ec2 <- inline_mul32_64_mul16_32_11_f[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_mul32_64_mul16_32_11_f[0x03..0x04] <- inline_mul32_64_mul16_32_11_t6ec2 U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_mul32_64_mul16_32_11_t9922 <- inline_mul32_64_mul16_32_11_f[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_mul32_64_mul16_32_11_f[0x02..0x03] <- inline_mul32_64_mul16_32_11_t9922 U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_mul32_64_mul16_32_11_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(15,5))
#  inline_mul32_64_mul16_32_11_f[0x01..0x02] <- inline_mul32_64_mul16_32_11_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(15,5))
#  inline_mul32_64_mul16_32_11_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(16,5))
#  inline_mul32_64_mul16_32_11_f[0x00..0x01] <- inline_mul32_64_mul16_32_11_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(16,5))
#  inline_mul32_64_mul16_32_11_tac13 <- inline_mul32_64_mul16_32_11_c U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_mul32_64_mul16_32_11_tcbd4 <- inline_mul32_64_mul16_32_11_f U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_tcbd4) # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_mul32_64_mul16_32_11_t8792 <- inline_mul32_64_mul16_32_11_a U32 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_11_te47a <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_11_t6ca9 U32 <- inline_mul32_64_mul16_32_11_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_11_t3009 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_11_tb9f0 U32 <- inline_mul32_64_mul16_32_11_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_11_tace9 <- inline_mul32_64_mul16_32_11_b U32 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_11_e <- inline_mul32_64_mul16_32_11_tb9f0 Multiply Var(inline_mul32_64_mul16_32_11_tace9) # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_11_t45f5 <- inline_mul32_64_mul16_32_11_d U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_mul32_64_mul16_32_11_t3585 <- inline_mul32_64_mul16_32_11_e U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t45f5 Add Var(inline_mul32_64_mul16_32_11_t3585) # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_mul32_64_mul16_32_11_t8575 <- inline_mul32_64_mul16_32_11_d[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_mul32_64_mul16_32_11_d[0x03..0x04] <- inline_mul32_64_mul16_32_11_t8575 U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_mul32_64_mul16_32_11_t34f7 <- inline_mul32_64_mul16_32_11_d[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_mul32_64_mul16_32_11_d[0x02..0x03] <- inline_mul32_64_mul16_32_11_t34f7 U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_mul32_64_mul16_32_11_t30b9 <- inline_mul32_64_mul16_32_11_d[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_mul32_64_mul16_32_11_d[0x01..0x02] <- inline_mul32_64_mul16_32_11_t30b9 U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_mul32_64_mul16_32_11_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(25,5))
#  inline_mul32_64_mul16_32_11_d[0x00..0x01] <- inline_mul32_64_mul16_32_11_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(25,5))
#  inline_mul32_64_mul16_32_11_tac13 <- inline_mul32_64_mul16_32_11_c U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_mul32_64_mul16_32_11_t45f5 <- inline_mul32_64_mul16_32_11_d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_mul32_64_mul16_32_11_ta65d <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_t45f5) # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  temp <- inline_mul32_64_mul16_32_11_ta65d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  goto inline_mul32_64_mul16_32_11_function_end_mul16_32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  :inline_mul32_64_mul16_32_11_function_end_mul16_32 # None
#  t9186 <- temp[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(85,5))
#  temp_lo[0x02..0x03] <- t9186 U8 # Some('/lutcomp/programs/lib/mul.j':(85,5))
#  t3d83 <- temp[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(86,5))
#  temp_lo[0x03..0x04] <- t3d83 U8 # Some('/lutcomp/programs/lib/mul.j':(86,5))
#  t3970 <- temp[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(87,5))
#  temp_hi[0x00..0x01] <- t3970 U8 # Some('/lutcomp/programs/lib/mul.j':(87,5))
#  t3b80 <- temp[0x03..0x04] U8 # Some('/lutcomp/programs/lib/mul.j':(88,5))
#  temp_hi[0x01..0x02] <- t3b80 U8 # Some('/lutcomp/programs/lib/mul.j':(88,5))
#  te546 <- __frame_pointer U32 # Some('/lutcomp/programs/lib/mul.j':(90,5))
#  t3308 <- temp_lo U32 # Some('/lutcomp/programs/lib/mul.j':(90,5))
#  mem[te546] <- t3308 U32 # Some('/lutcomp/programs/lib/mul.j':(90,5))
#  te825 <- __frame_pointer U32 # Some('/lutcomp/programs/lib/mul.j':(91,5))
#  t3f2a <- te825 Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/mul.j':(91,5))
#  t41f5 <- temp_hi U32 # Some('/lutcomp/programs/lib/mul.j':(91,5))
#  mem[t3f2a] <- t41f5 U32 # Some('/lutcomp/programs/lib/mul.j':(91,5))
#  tac13 <- c U32 # Some('/lutcomp/programs/lib/mul.j':(92,5))
#  te825 <- __frame_pointer U32 # Some('/lutcomp/programs/lib/mul.j':(92,5))
#  t4a94 <- te825 Add Number(0n0/0x00000000u32) # Some('/lutcomp/programs/lib/mul.j':(92,5))
#  tf4b2 <- t4a94 U32 # Some('/lutcomp/programs/lib/mul.j':(92,5))
#  tac13 <- c U32 # Some('/lutcomp/programs/lib/mul.j':(92,5))
#  inline_mul32_64_add_U64_1_a <- tac13 U32 # Some('/lutcomp/programs/lib/mul.j':(92,5))
#  inline_mul32_64_add_U64_1_b <- tf4b2 U32 # Some('/lutcomp/programs/lib/mul.j':(92,5))
#  inline_mul32_64_add_U64_1_c <- tac13 U32 # Some('/lutcomp/programs/lib/mul.j':(92,5))
#  inline_mul32_64_add_U64_1_tbeec <- inline_mul32_64_add_U64_1_a U32 # Some('/lutcomp/programs/lib/U64.j':(7,5))
#  inline_mul32_64_add_U64_1_lo <- mem[inline_mul32_64_add_U64_1_tbeec] U32 # Some('/lutcomp/programs/lib/U64.j':(7,5))
#  inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  inline_mul32_64_add_U64_1_t144a <- inline_mul32_64_add_U64_1_a Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  inline_mul32_64_add_U64_1_te24c <- mem[inline_mul32_64_add_U64_1_t144a] U32 # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  inline_mul32_64_add_U64_1_t809 <- inline_mul32_64_add_U64_1_b Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  inline_mul32_64_add_U64_1_t153d <- mem[inline_mul32_64_add_U64_1_t809] U32 # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  inline_mul32_64_add_U64_1_t6f1c <- inline_mul32_64_add_U64_1_te24c Add Var(inline_mul32_64_add_U64_1_t153d) # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_t6f1c U32 # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  inline_mul32_64_add_U64_1_t8956 <- inline_mul32_64_add_U64_1_c U32 # Some('/lutcomp/programs/lib/U64.j':(9,5))
#  inline_mul32_64_add_U64_1_tbeec <- inline_mul32_64_add_U64_1_a U32 # Some('/lutcomp/programs/lib/U64.j':(9,5))
#  inline_mul32_64_add_U64_1_td868 <- mem[inline_mul32_64_add_U64_1_tbeec] U32 # Some('/lutcomp/programs/lib/U64.j':(9,5))
#  inline_mul32_64_add_U64_1_td5bf <- mem[inline_mul32_64_add_U64_1_b] U32 # Some('/lutcomp/programs/lib/U64.j':(9,5))
#  inline_mul32_64_add_U64_1_ta95f <- inline_mul32_64_add_U64_1_td868 Add Var(inline_mul32_64_add_U64_1_td5bf) # Some('/lutcomp/programs/lib/U64.j':(9,5))
#  mem[inline_mul32_64_add_U64_1_t8956] <- inline_mul32_64_add_U64_1_ta95f U32 # Some('/lutcomp/programs/lib/U64.j':(9,5))
#  inline_mul32_64_add_U64_1_t8956 <- inline_mul32_64_add_U64_1_c U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_1_t90ac <- mem[inline_mul32_64_add_U64_1_t8956] U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_1_t1506 <- inline_mul32_64_add_U64_1_lo U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2' # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  :inline_mul32_64_add_U64_1_add_U64_if_true_0_1 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_1_tf677 <- mem[inline_mul32_64_add_U64_1_t1335] U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_1_tcbd1 <- inline_mul32_64_add_U64_1_tf677 Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_tcbd1 U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  goto inline_mul32_64_add_U64_1_add_U64_if_end_0 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  :inline_mul32_64_add_U64_1_add_U64_if_else_0_2 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  :inline_mul32_64_add_U64_1_add_U64_if_end_0 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  goto inline_mul32_64_add_U64_1_function_end_add_U64 # None
#  :inline_mul32_64_add_U64_1_function_end_add_U64 # None
#  __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) # None
#  return None # None
#  :function_end_mul32_64 # None
#  Unreachable # None

# IlFunctionId("print_dec32")(a,)
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#  t9c15 <- 0n256/0x00000100u32  # Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#  if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2' # Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#  :print_dec32_if_true_0_1 # Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#  t3404 <- a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#  None <= call print_dec8(t3404,) # Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#  return None # Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#  goto print_dec32_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#  :print_dec32_if_else_0_2 # Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#  :print_dec32_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/rpnlib.j':(147,5))
#  inline_print_dec32_div32_by10_47_a <- t8792 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(147,5))
#  inline_print_dec32_div32_by10_47_tef1a <- 0xcccccccdu32  # Some('/lutcomp/programs/lib/div.j':(130,5))
#  inline_print_dec32_div32_by10_47_t1c61 <- 0n987656/0x000f1208u32  # Some('/lutcomp/programs/lib/div.j':(130,5))
#  None <= call mul32_64(inline_print_dec32_div32_by10_47_a,inline_print_dec32_div32_by10_47_tef1a,inline_print_dec32_div32_by10_47_t1c61,) # Some('/lutcomp/programs/lib/div.j':(130,5))
#  inline_print_dec32_div32_by10_47_tb7c3 <- 0n987660/0x000f120cu32  # Some('/lutcomp/programs/lib/div.j':(131,5))
#  inline_print_dec32_div32_by10_47_tb354 <- mem[inline_print_dec32_div32_by10_47_tb7c3] U32 # Some('/lutcomp/programs/lib/div.j':(131,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a <- inline_print_dec32_div32_by10_47_tb354 U32 # Some('/lutcomp/programs/lib/div.j':(131,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(112,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tfbb9 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 RotateRight Number(0n3/0x03u8) # Some('/lutcomp/programs/lib/div.j':(112,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tfbb9 U8 # Some('/lutcomp/programs/lib/div.j':(112,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(113,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t858c <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 RotateRight Number(0n3/0x03u8) # Some('/lutcomp/programs/lib/div.j':(113,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t858c U8 # Some('/lutcomp/programs/lib/div.j':(113,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(114,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7d53 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 RotateRight Number(0n3/0x03u8) # Some('/lutcomp/programs/lib/div.j':(114,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7d53 U8 # Some('/lutcomp/programs/lib/div.j':(114,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(115,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4b1e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df RotateRight Number(0n3/0x03u8) # Some('/lutcomp/programs/lib/div.j':(115,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4b1e U8 # Some('/lutcomp/programs/lib/div.j':(115,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(117,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1a5d <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 BitwiseAnd Number(0n31/0x1fu8) # Some('/lutcomp/programs/lib/div.j':(117,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1a5d U8 # Some('/lutcomp/programs/lib/div.j':(117,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(118,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(118,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4e2b <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 BitwiseAnd Number(0n224/0xe0u8) # Some('/lutcomp/programs/lib/div.j':(118,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_td726 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4e2b) # Some('/lutcomp/programs/lib/div.j':(118,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_td726 U8 # Some('/lutcomp/programs/lib/div.j':(118,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(119,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7123 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 BitwiseAnd Number(0n31/0x1fu8) # Some('/lutcomp/programs/lib/div.j':(119,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7123 U8 # Some('/lutcomp/programs/lib/div.j':(119,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(120,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(120,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta4e7 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 BitwiseAnd Number(0n224/0xe0u8) # Some('/lutcomp/programs/lib/div.j':(120,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tb4e5 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta4e7) # Some('/lutcomp/programs/lib/div.j':(120,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tb4e5 U8 # Some('/lutcomp/programs/lib/div.j':(120,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(121,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tf695 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 BitwiseAnd Number(0n31/0x1fu8) # Some('/lutcomp/programs/lib/div.j':(121,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tf695 U8 # Some('/lutcomp/programs/lib/div.j':(121,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(122,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(122,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t286d <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df BitwiseAnd Number(0n224/0xe0u8) # Some('/lutcomp/programs/lib/div.j':(122,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8c2e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t286d) # Some('/lutcomp/programs/lib/div.j':(122,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8c2e U8 # Some('/lutcomp/programs/lib/div.j':(122,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(123,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te6a8 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df BitwiseAnd Number(0n31/0x1fu8) # Some('/lutcomp/programs/lib/div.j':(123,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te6a8 U8 # Some('/lutcomp/programs/lib/div.j':(123,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8792 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a U32 # Some('/lutcomp/programs/lib/div.j':(124,5))
#  inline_print_dec32_div32_by10_47_t45ae <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8792 U32 # Some('/lutcomp/programs/lib/div.j':(124,5))
#  goto inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_function_end_shiftright3 # Some('/lutcomp/programs/lib/div.j':(124,5))
#  :inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_function_end_shiftright3 # None
#  b <- inline_print_dec32_div32_by10_47_t45ae U32 # Some('/lutcomp/programs/lib/div.j':(131,5))
#  goto inline_print_dec32_div32_by10_47_function_end_div32_by10 # Some('/lutcomp/programs/lib/div.j':(131,5))
#  :inline_print_dec32_div32_by10_47_function_end_div32_by10 # None
#  tace9 <- b U32 # Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#  None <= call print_dec32(tace9,) # Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#  tace9 <- b U32 # Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#  inline_print_dec32_mul32_by10_14_a <- tace9 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#  inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 # Some('/lutcomp/programs/lib/mul.j':(49,5))
#  inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 # Some('/lutcomp/programs/lib/mul.j':(49,5))
#  inline_print_dec32_mul32_by10_14_a <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) # Some('/lutcomp/programs/lib/mul.j':(49,5))
#  inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 # Some('/lutcomp/programs/lib/mul.j':(50,5))
#  inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 # Some('/lutcomp/programs/lib/mul.j':(50,5))
#  inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) # Some('/lutcomp/programs/lib/mul.j':(50,5))
#  inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 # Some('/lutcomp/programs/lib/mul.j':(51,5))
#  inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 # Some('/lutcomp/programs/lib/mul.j':(51,5))
#  inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_tace9) # Some('/lutcomp/programs/lib/mul.j':(51,5))
#  inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 # Some('/lutcomp/programs/lib/mul.j':(52,5))
#  inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 # Some('/lutcomp/programs/lib/mul.j':(52,5))
#  inline_print_dec32_mul32_by10_14_t7eaf <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_t8792) # Some('/lutcomp/programs/lib/mul.j':(52,5))
#  t86e2 <- inline_print_dec32_mul32_by10_14_t7eaf U32 # Some('/lutcomp/programs/lib/mul.j':(52,5))
#  goto inline_print_dec32_mul32_by10_14_function_end_mul32_by10 # Some('/lutcomp/programs/lib/mul.j':(52,5))
#  :inline_print_dec32_mul32_by10_14_function_end_mul32_by10 # None
#  a <- t8792 Subtract Var(t86e2) # Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#  t3404 <- a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/rpnlib.j':(151,5))
#  t6f38 <- t3404 Add Number(0n48/0x30u8) # Some('/lutcomp/programs/lib/rpnlib.j':(151,5))
#  inline_print_dec32_putc_29_c <- t6f38 U8 # Some('/lutcomp/programs/lib/rpnlib.j':(151,5))
#  inline_print_dec32_putc_29_tac13 <- inline_print_dec32_putc_29_c U8 # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  None <= call io_write0(inline_print_dec32_putc_29_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_print_dec32_putc_29_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_print_dec32_putc_29_t76c7 <- mem[inline_print_dec32_putc_29_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_print_dec32_putc_29_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_print_dec32_putc_29_t76c7 != inline_print_dec32_putc_29_ta97f then 'inline_print_dec32_putc_29_putc_if_true_0_1' else 'inline_print_dec32_putc_29_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_print_dec32_putc_29_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_print_dec32_putc_29_tac13 <- inline_print_dec32_putc_29_c U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_print_dec32_putc_29_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_print_dec32_putc_29_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_print_dec32_putc_29_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_print_dec32_putc_29_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_print_dec32_putc_29_function_end_putc # None
#  :inline_print_dec32_putc_29_function_end_putc # None
#  return None # None
#  :function_end_print_dec32 # None
#  Unreachable # None

# IlFunctionId("print_dec8")(a,)
#  t8792 <- a U8 # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#  t25ee <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#  if t8792 >= t25ee then 'print_dec8_if_true_0_1' else 'print_dec8_if_else_0_2' # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#  :print_dec8_if_true_0_1 # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#  t8792 <- a U8 # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#  b <- t8792 Divide Number(0n10/0x0au8) # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#  tace9 <- b U8 # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#  None <= call print_dec8(tace9,) # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#  t8792 <- a U8 # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#  tace9 <- b U8 # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#  tf5e0 <- tace9 Multiply Number(0n10/0x0au8) # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#  a <- t8792 Subtract Var(tf5e0) # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#  goto print_dec8_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#  :print_dec8_if_else_0_2 # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#  :print_dec8_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#  t8792 <- a U8 # Some('/lutcomp/programs/lib/rpnlib.j':(161,5))
#  t5673 <- t8792 Add Number(0n48/0x30u8) # Some('/lutcomp/programs/lib/rpnlib.j':(161,5))
#  inline_print_dec8_putc_30_c <- t5673 U8 # Some('/lutcomp/programs/lib/rpnlib.j':(161,5))
#  inline_print_dec8_putc_30_tac13 <- inline_print_dec8_putc_30_c U8 # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  None <= call io_write0(inline_print_dec8_putc_30_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_print_dec8_putc_30_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_print_dec8_putc_30_t76c7 <- mem[inline_print_dec8_putc_30_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_print_dec8_putc_30_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_print_dec8_putc_30_t76c7 != inline_print_dec8_putc_30_ta97f then 'inline_print_dec8_putc_30_putc_if_true_0_1' else 'inline_print_dec8_putc_30_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_print_dec8_putc_30_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_print_dec8_putc_30_tac13 <- inline_print_dec8_putc_30_c U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_print_dec8_putc_30_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_print_dec8_putc_30_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_print_dec8_putc_30_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_print_dec8_putc_30_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_print_dec8_putc_30_function_end_putc # None
#  :inline_print_dec8_putc_30_function_end_putc # None
#  return None # None
#  :function_end_print_dec8 # None
#  Unreachable # None

# IlFunctionId("stdio_init")()
#  t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(11,5))
#  ta11a <- 0n1/0x01u8  # Some('/lutcomp/programs/lib/stdio.j':(11,5))
#  mem[t0] <- ta11a U8 # Some('/lutcomp/programs/lib/stdio.j':(11,5))
#  t1 <- 0n987144/0x000f1008u32  # Some('/lutcomp/programs/lib/stdio.j':(12,5))
#  ta11a <- 0n1/0x01u8  # Some('/lutcomp/programs/lib/stdio.j':(12,5))
#  mem[t1] <- ta11a U8 # Some('/lutcomp/programs/lib/stdio.j':(12,5))
#  inline_stdio_init_queue_init_35_tb702 <- 0n987648/0x000f1200u32  # Some('/lutcomp/programs/lib/Queue.j':(8,5))
#  inline_stdio_init_queue_init_35_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Queue.j':(8,5))
#  mem[inline_stdio_init_queue_init_35_tb702] <- inline_stdio_init_queue_init_35_ta97f U8 # Some('/lutcomp/programs/lib/Queue.j':(8,5))
#  inline_stdio_init_queue_init_35_tc1ff <- 0n987652/0x000f1204u32  # Some('/lutcomp/programs/lib/Queue.j':(9,5))
#  inline_stdio_init_queue_init_35_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Queue.j':(9,5))
#  mem[inline_stdio_init_queue_init_35_tc1ff] <- inline_stdio_init_queue_init_35_ta97f U8 # Some('/lutcomp/programs/lib/Queue.j':(9,5))
#  goto inline_stdio_init_queue_init_35_function_end_queue_init # None
#  :inline_stdio_init_queue_init_35_function_end_queue_init # None
#  None <= call lcd_init() # Some('/lutcomp/programs/lib/stdio.j':(14,5))
#  None <= call KeyBoard_init() # Some('/lutcomp/programs/lib/stdio.j':(15,5))
#  return None # None
#  :function_end_stdio_init # None
#  Unreachable # None


# ImageBaseAddress=0x00000000
# entry
# 00000 Init []
#       Initialzing flags and internal regs.
00 

# 00001 LoadImm32 [Register(0x0c), Constant32(0x000f0f00=986880)]
#       Initialzing stack register to 0x000f0f00.
20 0c 00 0f 0f 00 

# 00007 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:main))
32 0c fc ff ff ff 

# 0000d StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:main))
25 0c 17 00 00 00 

# 00013 JmpImm [Label24(:main)]
#       PseudoCall(Label24(:main))
70 7b 21 00 

# 00017 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:main))
32 0c 04 00 00 00 

# 0001d Halt [Constant32(0x00000000=0)]
#       Halting after return from entry function.
7e 00 00 00 00 

# :PS2_SCAN_CODE_TO_ASCII
# const Array(Number(U8), Some(1025))
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
60 
7e 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
01 
00 
00 
00 
00 
00 
00 
00 
00 
00 
71 
51 
00 
00 
31 
21 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
7a 
5a 
00 
00 
73 
53 
00 
00 
61 
41 
00 
00 
77 
57 
00 
00 
32 
40 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
63 
43 
00 
00 
78 
58 
00 
00 
64 
44 
00 
00 
65 
45 
00 
00 
34 
24 
00 
00 
33 
23 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
20 
20 
00 
00 
76 
56 
00 
00 
66 
46 
00 
00 
74 
54 
00 
00 
72 
52 
00 
00 
35 
25 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
6e 
4e 
00 
00 
62 
42 
00 
00 
68 
48 
00 
00 
67 
47 
00 
00 
79 
59 
00 
00 
36 
5e 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
6d 
4d 
00 
00 
6a 
4a 
00 
00 
75 
55 
00 
00 
37 
26 
00 
00 
38 
2a 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
2c 
3c 
00 
00 
6b 
4b 
00 
00 
69 
49 
00 
00 
6f 
4f 
00 
00 
30 
29 
00 
00 
39 
28 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
2e 
3e 
00 
00 
2f 
3f 
00 
00 
6c 
4c 
00 
00 
3b 
3a 
00 
00 
70 
50 
00 
00 
2d 
5f 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
27 
22 
00 
00 
00 
00 
00 
00 
5b 
7b 
00 
00 
3d 
2b 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
01 
00 
0a 
0a 
00 
00 
5d 
7d 
00 
00 
5c 
7c 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
01 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
ff 
# :lcd_row_start
# const Array(Number(U8), Some(4))
00 
40 
14 
54 
# :KeyBoard_init
# Ret None
# Var ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([16]) Number(0n0/0x00u8)
# Var td45b (td45b Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Number(0n987136/0x000f1000u32) }) Reg(U32) Some([20, 21, 22, 23]) Number(0n987136/0x000f1000u32)
# Var tdaa (tdaa Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }) Reg(U32) Some([20, 21, 22, 23]) Number(0n987140/0x000f1004u32)
# td45b <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Number(0n987136/0x000f1000u32) }
# Number(0n987136/0x000f1000u32)
# 00427 LoadImm32 [Register(0x14), Constant32(0x000f1000=987136)]
#       td45b <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Number(0n987136/0x000f1000u32) }
#       Number(0n987136/0x000f1000u32)
20 14 00 10 0f 00 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 0042d LoadImm8 [Register(0x10), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 10 00 

# mem[td45b] <- ta97f U8 Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
# 00430 Store8 [Register(0x10), Register(0x14)]
#       mem[td45b] <- ta97f U8 Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
06 10 14 

# tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(12,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }
# Number(0n987140/0x000f1004u32)
# 00433 LoadImm32 [Register(0x14), Constant32(0x000f1004=987140)]
#       tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(12,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }
#       Number(0n987140/0x000f1004u32)
20 14 04 10 0f 00 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(12,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 00439 LoadImm8 [Register(0x10), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(12,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 10 00 

# mem[tdaa] <- ta97f U8 Some('/lutcomp/programs/lib/Keyboard.j':(12,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
# 0043c Store8 [Register(0x10), Register(0x14)]
#       mem[tdaa] <- ta97f U8 Some('/lutcomp/programs/lib/Keyboard.j':(12,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
06 10 14 

# return None None
# Return { value: None }
# 0043f JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_KeyBoard_init None
# function_end_KeyBoard_init
# Unreachable None
# 00441 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :Keyboard_poll
# Ret None
# Var c (Local c Number(U8) Reg(U8)) Reg(U8) Some([24])
# Var code (Local code Number(U8) Reg(U8)) Reg(U8) Some([24])
# Var index (Local index Number(U32) Reg(U32)) Reg(U32) Some([28, 29, 30, 31])
# Var inline_Keyboard_poll_queue_push_37_n (Arg1 n Number(U8)) Reg(U8) Some([24])
# Var inline_Keyboard_poll_queue_push_37_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([32, 33, 34, 35]) Number(0n987392/0x000f1100u32)
# Var inline_Keyboard_poll_queue_push_37_t2187 (t2187 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }) Reg(U32) Some([32, 33, 34, 35])
# Var inline_Keyboard_poll_queue_push_37_t3ee (t3ee PtrFieldDeref("s", "last")) Reg(U8) Some([36])
# Var inline_Keyboard_poll_queue_push_37_t5bb7 (t5bb7 Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) Reg(U32) Some([40, 41, 42, 43])
# Var inline_Keyboard_poll_queue_push_37_tc1ff (tc1ff Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }) Reg(U32) Some([44, 45, 46, 47]) Number(0n987652/0x000f1204u32)
# Var inline_Keyboard_poll_queue_push_37_tf3c4 (tf3c4 Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))) Reg(U8) Some([24])
# Var t23a (t23a Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }) Reg(U32) Some([48, 49, 50, 51])
# Var t2ca9 (t2ca9 Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))) Reg(U8) Some([24])
# Var t379c (t379c LocalFieldDeref("keyboard", "shift_held")) Reg(U8) Some([24])
# Var t4c8b (t4c8b Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }) Reg(U32) Some([48, 49, 50, 51])
# Var t528d (t528d Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("code") }) Reg(U32) Some([48, 49, 50, 51])
# Var t5e63 (t5e63 Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) Reg(U32) Some([28, 29, 30, 31])
# Var t5ea1 (t5ea1 Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8))) Reg(U8) Some([24])
# Var t674 (t674 Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) Reg(U32) Some([32, 33, 34, 35])
# Var t6cd9 (t6cd9 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }) Reg(U32) Some([48, 49, 50, 51])
# Var t7b09 (t7b09 Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))) Reg(U8) Some([24])
# Var t7ebd (t7ebd LocalFieldDeref("keyboard", "release_in_progress")) Reg(U8) Some([52])
# Var t861f (t861f Call(Call { function: "io_ready_to_read", parameters: [] })) Reg(U8) Some([24])
# Var ta11a (ta11a Number(0n1/0x01u8)) Reg(U8) Some([24]) Number(0n1/0x01u8)
# Var ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([36]) Number(0n0/0x00u8)
# Var tac13 (tac13 Ident("c")) Reg(U8) Some([24])
# Var tb62e (tb62e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }) Reg(U32) Some([48, 49, 50, 51])
# Var td18e (td18e Ident("index")) Reg(U32) Some([28, 29, 30, 31])
# Var td45b (td45b Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Number(0n987136/0x000f1000u32) }) Reg(U32) Some([32, 33, 34, 35]) Number(0n987136/0x000f1000u32)
# Var tdaa (tdaa Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }) Reg(U32) Some([32, 33, 34, 35]) Number(0n987140/0x000f1004u32)
# Var te5cf (te5cf Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) Reg(U32) Some([32, 33, 34, 35])
# Var ted94 (ted94 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }) Reg(U32) Some([48, 49, 50, 51])
# Var tf68c (tf68c Ident("code")) Reg(U8) Some([24])
# Some(t861f) <= call io_ready_to_read() Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [Return { value: None }])], else_block: [] }
# Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
# Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8))
# Call(Call { function: "io_ready_to_read", parameters: [] })
# 00446 IoReadyToRead [Register(0x18)]
#       ReadyToRead
79 18 

# t5ea1 <- t861f BitwiseAnd Number(0n4/0x04u8) Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [Return { value: None }])], else_block: [] }
# Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
# Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8))
# 00448 AndImm8 [Register(0x18), Constant8(0x04=4)]
#       t5ea1 <- t861f BitwiseAnd Number(0n4/0x04u8) Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [Return { value: None }])], else_block: [] }
#       Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
#       Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8))
18 18 04 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [Return { value: None }])], else_block: [] }
# Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 0044b LoadImm8 [Register(0x24), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [Return { value: None }])], else_block: [] }
#       Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 24 00 

# if t5ea1 == ta97f then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_else_0_2' Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [Return { value: None }])], else_block: [] }
# Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
# 0044e Cmp8 [Register(0x18), Register(0x24)]
#       if t5ea1 == ta97f then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_else_0_2' Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [Return { value: None }])], else_block: [] }
#       Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
15 18 24 

# 00451 JzImm [Label24(Keyboard_poll_if_true_0_1)]
#       if t5ea1 == ta97f then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_else_0_2' Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [Return { value: None }])], else_block: [] }
#       Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
72 59 04 00 

# 00455 JmpImm [Label24(Keyboard_poll_if_else_0_2)]
#       if t5ea1 == ta97f then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_else_0_2' Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [Return { value: None }])], else_block: [] }
#       Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
70 5f 04 00 

# :Keyboard_poll_if_true_0_1 Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [Return { value: None }])], else_block: [] }
# Keyboard_poll_if_true_0_1
# return None Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# Return { value: None }
# 00459 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto Keyboard_poll_if_end_0 Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# 0045b JmpImm [Label24(Keyboard_poll_if_end_0)]
#       goto Keyboard_poll_if_end_0 Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
70 5f 04 00 

# :Keyboard_poll_if_else_0_2 Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# Keyboard_poll_if_else_0_2
# :Keyboard_poll_if_end_0 Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# Keyboard_poll_if_end_0
# Some(code) <= call io_read2() Some('/lutcomp/programs/lib/Keyboard.j':(20,5))
# Assign { target: Ident("code"), var_type: Some(Number(U8)), value: Call(Call { function: "io_read2", parameters: [] }) }
# Call(Call { function: "io_read2", parameters: [] })
# 0045f In2 [Register(0x18)]
#       IoRead2
62 18 

# tf68c <- code U8 Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
# Assign { target: Ident("index"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
# Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("code") }
# Ident("code")
# optimized away noop copy Instruction { source: "tf68c <- code U8 Some('/lutcomp/programs/lib/Keyboard.j':(22,5))\nAssign { target: Ident(\"index\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident(\"code\")) }\nArithmetic(Multiply, Number(0n4/0x00000004u32), Ident(\"code\"))\nCast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"code\") }\nIdent(\"code\")\n", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# t528d U32 <- tf68c U8 Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
# Assign { target: Ident("index"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
# Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("code") }
# 00461 LoadImm32 [Register(0x30), Constant32(0x00000000=0)]
#       Zero-pad for t528d U32 <- tf68c U8 Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
#       Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("code") }
20 30 00 00 00 00 

# 00467 Copy8 [Register(0x18), Register(0x30)]
#       t528d U32 <- tf68c U8 Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
#       Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("code") }
0b 18 30 

# index <- t528d Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
# Assign { target: Ident("index"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
# Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
# 0046a LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       index <- t528d Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
#       Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
20 00 04 00 00 00 

# 00470 Mul8_16 [Register(0x30), Register(0x00), Register(0x1c)]
#       index <- t528d Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
#       Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
11 30 00 1c 

# 00474 LoadImm8 [Register(0x1e), Constant8(0x00=0)]
#       index <- t528d Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
#       Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
04 1e 00 

# 00477 LoadImm8 [Register(0x1f), Constant8(0x00=0)]
#       index <- t528d Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
#       Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
04 1f 00 

# td45b <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }
# LocalFieldDeref("keyboard", "shift_held")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Number(0n987136/0x000f1000u32) }
# Number(0n987136/0x000f1000u32)
# 0047a LoadImm32 [Register(0x20), Constant32(0x000f1000=987136)]
#       td45b <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }
#       LocalFieldDeref("keyboard", "shift_held")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Number(0n987136/0x000f1000u32) }
#       Number(0n987136/0x000f1000u32)
20 20 00 10 0f 00 

# t379c <- mem[td45b] U8 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }
# LocalFieldDeref("keyboard", "shift_held")
# 00480 Load8 [Register(0x20), Register(0x18)]
#       t379c <- mem[td45b] U8 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }
#       LocalFieldDeref("keyboard", "shift_held")
05 20 18 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 00483 LoadImm8 [Register(0x24), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 24 00 

# if t379c != ta97f then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5' Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }
# 00486 Cmp8 [Register(0x18), Register(0x24)]
#       if t379c != ta97f then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5' Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }
15 18 24 

# 00489 JzImm [Label24(Keyboard_poll_if_else_0_5)]
#       if t379c != ta97f then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5' Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }
72 a9 04 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t379c != ta97f then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5' Some('/lutcomp/programs/lib/Keyboard.j':(25,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"shift_held\"), right: Number(0n0/0x00u8) }, [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }] }\nComparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"shift_held\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(Keyboard_poll_if_true_0_4)], resolved: None }
# :Keyboard_poll_if_true_0_4 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Keyboard_poll_if_true_0_4
# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
# Ident("PS2_SCAN_CODE_TO_ASCII")
# 0048d LoadImm32 [Register(0x30), Label32(:PS2_SCAN_CODE_TO_ASCII)]
#       t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
#       Ident("PS2_SCAN_CODE_TO_ASCII")
20 30 22 00 00 00 

# td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))
# Ident("index")
# optimized away noop copy Instruction { source: "td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n1/0x00000001u32))) }\nIndex(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n1/0x00000001u32)))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(0n1/0x00000001u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(0n1/0x00000001u32)))\nArithmetic(Add, Ident(\"index\"), Number(0n1/0x00000001u32))\nIdent(\"index\")\n", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# t674 <- td18e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))
# 00493 Copy32 [Register(0x1c), Register(0x20)]
#       t674 <- td18e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))
21 1c 20 

# 00496 AddImm32IgnoreCarry [Register(0x20), Constant32(0x00000001=1)]
#       t674 <- td18e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))
32 20 01 00 00 00 

# t23a <- t4c8b Add Var(t674) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# 0049c ClearCarry []
#       t23a <- t4c8b Add Var(t674) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
03 

# 0049d AddCarry32_1 [Register(0x30), Register(0x20), Register(0x30)]
#       t23a <- t4c8b Add Var(t674) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
30 30 20 30 

# 004a1 AddCarry32_2 []
#       t23a <- t4c8b Add Var(t674) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
31 

# c <- mem[t23a] U8 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# 004a2 Load8 [Register(0x30), Register(0x18)]
#       c <- mem[t23a] U8 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
05 30 18 

# goto Keyboard_poll_if_end_3 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# 004a5 JmpImm [Label24(Keyboard_poll_if_end_3)]
#       goto Keyboard_poll_if_end_3 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
70 b8 04 00 

# :Keyboard_poll_if_else_0_5 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Keyboard_poll_if_else_0_5
# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
# Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
# Ident("PS2_SCAN_CODE_TO_ASCII")
# 004a9 LoadImm32 [Register(0x30), Label32(:PS2_SCAN_CODE_TO_ASCII)]
#       t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
#       Ident("PS2_SCAN_CODE_TO_ASCII")
20 30 22 00 00 00 

# td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
# Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
# Ident("index")
# optimized away noop copy Instruction { source: "td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }\nIndex(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\"))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\")) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\"))\nIdent(\"index\")\n", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# tb62e <- t4c8b Add Var(td18e) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
# Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
# 004af ClearCarry []
#       tb62e <- t4c8b Add Var(td18e) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
03 

# 004b0 AddCarry32_1 [Register(0x30), Register(0x1c), Register(0x30)]
#       tb62e <- t4c8b Add Var(td18e) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
30 30 1c 30 

# 004b4 AddCarry32_2 []
#       tb62e <- t4c8b Add Var(td18e) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
31 

# c <- mem[tb62e] U8 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
# Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
# 004b5 Load8 [Register(0x30), Register(0x18)]
#       c <- mem[tb62e] U8 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
05 30 18 

# :Keyboard_poll_if_end_3 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Keyboard_poll_if_end_3
# tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
# Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
# LocalFieldDeref("keyboard", "release_in_progress")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }
# Number(0n987140/0x000f1004u32)
# 004b8 LoadImm32 [Register(0x20), Constant32(0x000f1004=987140)]
#       tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
#       LocalFieldDeref("keyboard", "release_in_progress")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }
#       Number(0n987140/0x000f1004u32)
20 20 04 10 0f 00 

# t7ebd <- mem[tdaa] U8 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
# Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
# LocalFieldDeref("keyboard", "release_in_progress")
# 004be Load8 [Register(0x20), Register(0x34)]
#       t7ebd <- mem[tdaa] U8 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
#       LocalFieldDeref("keyboard", "release_in_progress")
05 20 34 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
# Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 004c1 LoadImm8 [Register(0x24), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 24 00 

# if t7ebd == ta97f then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_else_0_8' Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
# Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
# 004c4 Cmp8 [Register(0x34), Register(0x24)]
#       if t7ebd == ta97f then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_else_0_8' Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
15 34 24 

# 004c7 JzImm [Label24(Keyboard_poll_if_true_0_7)]
#       if t7ebd == ta97f then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_else_0_8' Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
72 cf 04 00 

# 004cb JmpImm [Label24(Keyboard_poll_if_else_0_8)]
#       if t7ebd == ta97f then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_else_0_8' Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
70 0d 05 00 

# :Keyboard_poll_if_true_0_7 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
# Keyboard_poll_if_true_0_7
# tac13 <- c U8 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U8 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }\nCall(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_Keyboard_poll_queue_push_37_s <- 0n987392/0x000f1100u32  Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] })
# # In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_s <- tfff6 U32` with constant `inline_Keyboard_poll_queue_push_37_s <- 0n987392/0x000f1100u32 `.
# 004cf LoadImm32 [Register(0x20), Constant32(0x000f1100=987392)]
#       inline_Keyboard_poll_queue_push_37_s <- 0n987392/0x000f1100u32  Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }
#       Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] })
#       # In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_s <- tfff6 U32` with constant `inline_Keyboard_poll_queue_push_37_s <- 0n987392/0x000f1100u32 `.
20 20 00 11 0f 00 

# inline_Keyboard_poll_queue_push_37_n <- tac13 U8 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] })
# optimized away noop copy Instruction { source: "inline_Keyboard_poll_queue_push_37_n <- tac13 U8 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }\nCall(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })\n", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
# # In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32 `.
# 004d5 LoadImm32 [Register(0x2c), Constant32(0x000f1204=987652)]
#       inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
#       # In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32 `.
20 2c 04 12 0f 00 

# inline_Keyboard_poll_queue_push_37_t3ee <- mem[inline_Keyboard_poll_queue_push_37_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# 004db Load8 [Register(0x2c), Register(0x24)]
#       inline_Keyboard_poll_queue_push_37_t3ee <- mem[inline_Keyboard_poll_queue_push_37_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
05 2c 24 

# inline_Keyboard_poll_queue_push_37_t5bb7 U32 <- inline_Keyboard_poll_queue_push_37_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
# 004de LoadImm32 [Register(0x28), Constant32(0x00000000=0)]
#       Zero-pad for inline_Keyboard_poll_queue_push_37_t5bb7 U32 <- inline_Keyboard_poll_queue_push_37_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
20 28 00 00 00 00 

# 004e4 Copy8 [Register(0x24), Register(0x28)]
#       inline_Keyboard_poll_queue_push_37_t5bb7 U32 <- inline_Keyboard_poll_queue_push_37_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
0b 24 28 

# inline_Keyboard_poll_queue_push_37_t2187 <- inline_Keyboard_poll_queue_push_37_s Add Var(inline_Keyboard_poll_queue_push_37_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# 004e7 ClearCarry []
#       inline_Keyboard_poll_queue_push_37_t2187 <- inline_Keyboard_poll_queue_push_37_s Add Var(inline_Keyboard_poll_queue_push_37_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
03 

# 004e8 AddCarry32_1 [Register(0x20), Register(0x28), Register(0x20)]
#       inline_Keyboard_poll_queue_push_37_t2187 <- inline_Keyboard_poll_queue_push_37_s Add Var(inline_Keyboard_poll_queue_push_37_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
30 20 28 20 

# 004ec AddCarry32_2 []
#       inline_Keyboard_poll_queue_push_37_t2187 <- inline_Keyboard_poll_queue_push_37_s Add Var(inline_Keyboard_poll_queue_push_37_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
31 

# mem[inline_Keyboard_poll_queue_push_37_t2187] <- inline_Keyboard_poll_queue_push_37_n U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# 004ed Store8 [Register(0x18), Register(0x20)]
#       mem[inline_Keyboard_poll_queue_push_37_t2187] <- inline_Keyboard_poll_queue_push_37_n U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
06 18 20 

# inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
# # In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32 `.
# 004f0 LoadImm32 [Register(0x2c), Constant32(0x000f1204=987652)]
#       inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
#       # In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32 `.
20 2c 04 12 0f 00 

# inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
# # In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32 `.
# 004f6 LoadImm32 [Register(0x2c), Constant32(0x000f1204=987652)]
#       inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
#       # In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32 `.
20 2c 04 12 0f 00 

# inline_Keyboard_poll_queue_push_37_t3ee <- mem[inline_Keyboard_poll_queue_push_37_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "last")
# 004fc Load8 [Register(0x2c), Register(0x24)]
#       inline_Keyboard_poll_queue_push_37_t3ee <- mem[inline_Keyboard_poll_queue_push_37_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "last")
05 2c 24 

# inline_Keyboard_poll_queue_push_37_tf3c4 <- inline_Keyboard_poll_queue_push_37_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
# 004ff LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_Keyboard_poll_queue_push_37_tf3c4 <- inline_Keyboard_poll_queue_push_37_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
04 00 01 

# 00502 Add8NoCarryIn [Register(0x24), Register(0x00), Register(0x18)]
#       inline_Keyboard_poll_queue_push_37_tf3c4 <- inline_Keyboard_poll_queue_push_37_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
14 24 00 18 

# mem[inline_Keyboard_poll_queue_push_37_tc1ff] <- inline_Keyboard_poll_queue_push_37_tf3c4 U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
# 00506 Store8 [Register(0x18), Register(0x2c)]
#       mem[inline_Keyboard_poll_queue_push_37_tc1ff] <- inline_Keyboard_poll_queue_push_37_tf3c4 U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
06 18 2c 

# goto inline_Keyboard_poll_queue_push_37_function_end_queue_push None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_Keyboard_poll_queue_push_37_function_end_queue_push None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_Keyboard_poll_queue_push_37_function_end_queue_push)], resolved: None }
# :inline_Keyboard_poll_queue_push_37_function_end_queue_push None
# inline_Keyboard_poll_queue_push_37_function_end_queue_push
# goto Keyboard_poll_if_end_6 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# 00509 JmpImm [Label24(Keyboard_poll_if_end_6)]
#       goto Keyboard_poll_if_end_6 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
70 0d 05 00 

# :Keyboard_poll_if_else_0_8 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# Keyboard_poll_if_else_0_8
# :Keyboard_poll_if_end_6 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# Keyboard_poll_if_end_6
# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Number(0n0/0x00u8)
# 0050d LoadImm8 [Register(0x24), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Number(0n0/0x00u8)
04 24 00 

# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
# Ident("PS2_SCAN_CODE_TO_ASCII")
# 00510 LoadImm32 [Register(0x30), Label32(:PS2_SCAN_CODE_TO_ASCII)]
#       t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
#       Ident("PS2_SCAN_CODE_TO_ASCII")
20 30 22 00 00 00 

# td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))
# Ident("index")
# optimized away noop copy Instruction { source: "td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }\nComparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32))) }\nIndex(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32)))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32)))\nArithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32))\nIdent(\"index\")\n", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# te5cf <- td18e Add Number(0n2/0x00000002u32) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))
# 00516 Copy32 [Register(0x1c), Register(0x20)]
#       te5cf <- td18e Add Number(0n2/0x00000002u32) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))
21 1c 20 

# 00519 AddImm32IgnoreCarry [Register(0x20), Constant32(0x00000002=2)]
#       te5cf <- td18e Add Number(0n2/0x00000002u32) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))
32 20 02 00 00 00 

# ted94 <- t4c8b Add Var(te5cf) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# 0051f ClearCarry []
#       ted94 <- t4c8b Add Var(te5cf) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
03 

# 00520 AddCarry32_1 [Register(0x30), Register(0x20), Register(0x30)]
#       ted94 <- t4c8b Add Var(te5cf) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
30 30 20 30 

# 00524 AddCarry32_2 []
#       ted94 <- t4c8b Add Var(te5cf) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
31 

# t2ca9 <- mem[ted94] U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# 00525 Load8 [Register(0x30), Register(0x18)]
#       t2ca9 <- mem[ted94] U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
05 30 18 

# if ta97f != t2ca9 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_else_0_11' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# 00528 Cmp8 [Register(0x24), Register(0x18)]
#       if ta97f != t2ca9 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_else_0_11' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
15 24 18 

# 0052b JzImm [Label24(Keyboard_poll_if_else_0_11)]
#       if ta97f != t2ca9 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_else_0_11' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
72 62 05 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if ta97f != t2ca9 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_else_0_11' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }\nComparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32))) }\n", opcode: JmpImm, args: [Label24(Keyboard_poll_if_true_0_10)], resolved: None }
# :Keyboard_poll_if_true_0_10 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# Keyboard_poll_if_true_0_10
# tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
# LocalFieldDeref("keyboard", "release_in_progress")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }
# Number(0n987140/0x000f1004u32)
# 0052f LoadImm32 [Register(0x20), Constant32(0x000f1004=987140)]
#       tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
#       LocalFieldDeref("keyboard", "release_in_progress")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }
#       Number(0n987140/0x000f1004u32)
20 20 04 10 0f 00 

# t7ebd <- mem[tdaa] U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
# LocalFieldDeref("keyboard", "release_in_progress")
# 00535 Load8 [Register(0x20), Register(0x34)]
#       t7ebd <- mem[tdaa] U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
#       LocalFieldDeref("keyboard", "release_in_progress")
05 20 34 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 00538 LoadImm8 [Register(0x24), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 24 00 

# if t7ebd != ta97f then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
# 0053b Cmp8 [Register(0x34), Register(0x24)]
#       if t7ebd != ta97f then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
15 34 24 

# 0053e JzImm [Label24(Keyboard_poll_if_else_0_14)]
#       if t7ebd != ta97f then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
72 52 05 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t7ebd != ta97f then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(0n1/0x01u8) }] }\nComparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(Keyboard_poll_if_true_0_13)], resolved: None }
# :Keyboard_poll_if_true_0_13 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
# Keyboard_poll_if_true_0_13
# td45b <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Number(0n987136/0x000f1000u32) }
# Number(0n987136/0x000f1000u32)
# 00542 LoadImm32 [Register(0x20), Constant32(0x000f1000=987136)]
#       td45b <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Number(0n987136/0x000f1000u32) }
#       Number(0n987136/0x000f1000u32)
20 20 00 10 0f 00 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 00548 LoadImm8 [Register(0x24), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 24 00 

# mem[td45b] <- ta97f U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
# 0054b Store8 [Register(0x24), Register(0x20)]
#       mem[td45b] <- ta97f U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
06 24 20 

# goto Keyboard_poll_if_end_12 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 0054e JmpImm [Label24(Keyboard_poll_if_end_12)]
#       goto Keyboard_poll_if_end_12 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
70 5e 05 00 

# :Keyboard_poll_if_else_0_14 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Keyboard_poll_if_else_0_14
# td45b <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Number(0n987136/0x000f1000u32) }
# Number(0n987136/0x000f1000u32)
# 00552 LoadImm32 [Register(0x20), Constant32(0x000f1000=987136)]
#       td45b <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Number(0n987136/0x000f1000u32) }
#       Number(0n987136/0x000f1000u32)
20 20 00 10 0f 00 

# ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }
# Number(0n1/0x01u8)
# 00558 LoadImm8 [Register(0x18), Constant8(0x01=1)]
#       ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }
#       Number(0n1/0x01u8)
04 18 01 

# mem[td45b] <- ta11a U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }
# 0055b Store8 [Register(0x18), Register(0x20)]
#       mem[td45b] <- ta11a U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }
06 18 20 

# :Keyboard_poll_if_end_12 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Keyboard_poll_if_end_12
# goto Keyboard_poll_if_end_9 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 0055e JmpImm [Label24(Keyboard_poll_if_end_9)]
#       goto Keyboard_poll_if_end_9 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
70 62 05 00 

# :Keyboard_poll_if_else_0_11 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Keyboard_poll_if_else_0_11
# :Keyboard_poll_if_end_9 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Keyboard_poll_if_end_9
# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Number(0n0/0x00u8)
# 00562 LoadImm8 [Register(0x24), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Number(0n0/0x00u8)
04 24 00 

# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
# Ident("PS2_SCAN_CODE_TO_ASCII")
# 00565 LoadImm32 [Register(0x30), Label32(:PS2_SCAN_CODE_TO_ASCII)]
#       t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
#       Ident("PS2_SCAN_CODE_TO_ASCII")
20 30 22 00 00 00 

# td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))
# Ident("index")
# optimized away noop copy Instruction { source: "td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(0n0/0x00u8) }] }\nComparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32))) }\nIndex(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32)))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32)))\nArithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32))\nIdent(\"index\")\n", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# t5e63 <- td18e Add Number(0n3/0x00000003u32) Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))
# 0056b AddImm32IgnoreCarry [Register(0x1c), Constant32(0x00000003=3)]
#       t5e63 <- td18e Add Number(0n3/0x00000003u32) Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
#       Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))
32 1c 03 00 00 00 

# t6cd9 <- t4c8b Add Var(t5e63) Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# 00571 ClearCarry []
#       t6cd9 <- t4c8b Add Var(t5e63) Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
03 

# 00572 AddCarry32_1 [Register(0x30), Register(0x1c), Register(0x30)]
#       t6cd9 <- t4c8b Add Var(t5e63) Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
30 30 1c 30 

# 00576 AddCarry32_2 []
#       t6cd9 <- t4c8b Add Var(t5e63) Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
31 

# t7b09 <- mem[t6cd9] U8 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# 00577 Load8 [Register(0x30), Register(0x18)]
#       t7b09 <- mem[t6cd9] U8 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
05 30 18 

# if ta97f != t7b09 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17' Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# 0057a Cmp8 [Register(0x24), Register(0x18)]
#       if ta97f != t7b09 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17' Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
15 24 18 

# 0057d JzImm [Label24(Keyboard_poll_if_else_0_17)]
#       if ta97f != t7b09 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17' Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
72 91 05 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if ta97f != t7b09 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17' Some('/lutcomp/programs/lib/Keyboard.j':(49,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(0n0/0x00u8) }] }\nComparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32))) }\n", opcode: JmpImm, args: [Label24(Keyboard_poll_if_true_0_16)], resolved: None }
# :Keyboard_poll_if_true_0_16 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# Keyboard_poll_if_true_0_16
# tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }
# Number(0n987140/0x000f1004u32)
# 00581 LoadImm32 [Register(0x20), Constant32(0x000f1004=987140)]
#       tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }
#       Number(0n987140/0x000f1004u32)
20 20 04 10 0f 00 

# ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }
# Number(0n1/0x01u8)
# 00587 LoadImm8 [Register(0x18), Constant8(0x01=1)]
#       ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }
#       Number(0n1/0x01u8)
04 18 01 

# mem[tdaa] <- ta11a U8 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }
# 0058a Store8 [Register(0x18), Register(0x20)]
#       mem[tdaa] <- ta11a U8 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }
06 18 20 

# goto Keyboard_poll_if_end_15 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# 0058d JmpImm [Label24(Keyboard_poll_if_end_15)]
#       goto Keyboard_poll_if_end_15 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
70 9d 05 00 

# :Keyboard_poll_if_else_0_17 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Keyboard_poll_if_else_0_17
# tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }
# Number(0n987140/0x000f1004u32)
# 00591 LoadImm32 [Register(0x20), Constant32(0x000f1004=987140)]
#       tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }
#       Number(0n987140/0x000f1004u32)
20 20 04 10 0f 00 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 00597 LoadImm8 [Register(0x24), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 24 00 

# mem[tdaa] <- ta97f U8 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
# 0059a Store8 [Register(0x24), Register(0x20)]
#       mem[tdaa] <- ta97f U8 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
06 24 20 

# :Keyboard_poll_if_end_15 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Keyboard_poll_if_end_15
# return None None
# Return { value: None }
# 0059d JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_Keyboard_poll None
# function_end_Keyboard_poll
# Unreachable None
# 0059f Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :RpnCalc_handle
# Ret Some(U8)
# Arg0=c
# Arg1=ch
# Var a (Local a Number(U32) Reg(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var b (Local b Number(U32) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([64, 65, 66, 67])
# Var ch (Arg1 ch Number(U8)) Reg(U8) Some([68])
# Var diff (Local diff Number(U32) Reg(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var i (Local i Number(U8) Reg(U8)) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_RpnCalc_init_50_c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec (t60ec Number(0n0/0x00000000u32)) Reg(U32) Some([60, 61, 62, 63]) Number(0n0/0x00000000u32)
# Var inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_init_50_t60ec (t60ec Number(0n0/0x00000000u32)) Reg(U32) Some([56, 57, 58, 59]) Number(0n0/0x00000000u32)
# Var inline_RpnCalc_handle_RpnCalc_init_50_t6e8e (t6e8e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n (Arg1 n Number(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e (t100e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t8f43 (t8f43 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec (t60ec Number(0n0/0x00000000u32)) Reg(U32) Some([76, 77, 78, 79]) Number(0n0/0x00000000u32)
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e (t6e8e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f (ta34f PtrFieldDeref("c", "have_num")) Reg(U8) Some([88])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([89]) Number(0n0/0x00u8)
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed (tb1ed Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_td60 (td60 PtrFieldDeref("c", "num")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 (tfdb7 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n (Arg1 n Number(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e (t100e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t8f43 (t8f43 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec (t60ec Number(0n0/0x00000000u32)) Reg(U32) Some([60, 61, 62, 63]) Number(0n0/0x00000000u32)
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e (t6e8e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f (ta34f PtrFieldDeref("c", "have_num")) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([97]) Number(0n0/0x00u8)
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed (tb1ed Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_td60 (td60 PtrFieldDeref("c", "num")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 (tfdb7 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n (Arg1 n Number(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e (t100e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t8f43 (t8f43 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec (t60ec Number(0n0/0x00000000u32)) Reg(U32) Some([60, 61, 62, 63]) Number(0n0/0x00000000u32)
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e (t6e8e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f (ta34f PtrFieldDeref("c", "have_num")) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([97]) Number(0n0/0x00u8)
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed (tb1ed Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_td60 (td60 PtrFieldDeref("c", "num")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 (tfdb7 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_a (Arg0 a Number(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_a_hi (Local a_hi Number(U32) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_b (Arg1 b Number(U32)) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_mul32_32_12_b_hi (Local b_hi Number(U32) Reg(U32)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_mul32_32_12_c (Local c Number(U32) Reg(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_mul32_32_12_d (Local d Number(U32) Reg(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a (Arg0 a Number(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b (Arg1 b Number(U32)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c (Local c Number(U32) Reg(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d (Local d Number(U32) Reg(U32)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e (Local e Number(U32) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f (Local f Number(U32) Reg(U32)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 (t3009 Index("a", Number(0n1/0x01u8))) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t30b9 (t30b9 Index("d", Number(0n0/0x00u8))) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t34f7 (t34f7 Index("d", Number(0n1/0x01u8))) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585 (t3585 Ident("e")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 (t45f5 Ident("d")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9 (t6ca9 Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ec2 (t6ec2 Index("f", Number(0n1/0x01u8))) Reg(U8) Some([89])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8575 (t8575 Index("d", Number(0n2/0x02u8))) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 (t8792 Ident("a")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t9922 (t9922 Index("f", Number(0n0/0x00u8))) Reg(U8) Some([89])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([98]) Number(0n0/0x00u8)
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 (tac13 Ident("c")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9 (tace9 Ident("b")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 (tb9f0 Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a (te47a Index("b", Number(0n1/0x01u8))) Reg(U8) Some([99])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a (Arg0 a Number(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b (Arg1 b Number(U32)) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c (Local c Number(U32) Reg(U32)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d (Local d Number(U32) Reg(U32)) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e (Local e Number(U32) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f (Local f Number(U32) Reg(U32)) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 (t3009 Index("a", Number(0n1/0x01u8))) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t30b9 (t30b9 Index("d", Number(0n0/0x00u8))) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t34f7 (t34f7 Index("d", Number(0n1/0x01u8))) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585 (t3585 Ident("e")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 (t45f5 Ident("d")) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9 (t6ca9 Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ec2 (t6ec2 Index("f", Number(0n1/0x01u8))) Reg(U8) Some([98])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8575 (t8575 Index("d", Number(0n2/0x02u8))) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 (t8792 Ident("a")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t9922 (t9922 Index("f", Number(0n0/0x00u8))) Reg(U8) Some([98])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([100]) Number(0n0/0x00u8)
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 (tac13 Ident("c")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9 (tace9 Ident("b")) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 (tb9f0 Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a (te47a Index("b", Number(0n1/0x01u8))) Reg(U8) Some([68])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a (Arg0 a Number(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b (Arg1 b Number(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c (Local c Number(U32) Reg(U32)) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d (Local d Number(U32) Reg(U32)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e (Local e Number(U32) Reg(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f (Local f Number(U32) Reg(U32)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 (t3009 Index("a", Number(0n1/0x01u8))) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t30b9 (t30b9 Index("d", Number(0n0/0x00u8))) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t34f7 (t34f7 Index("d", Number(0n1/0x01u8))) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585 (t3585 Ident("e")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 (t45f5 Ident("d")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9 (t6ca9 Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ec2 (t6ec2 Index("f", Number(0n1/0x01u8))) Reg(U8) Some([99])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8575 (t8575 Index("d", Number(0n2/0x02u8))) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 (t8792 Ident("a")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t9922 (t9922 Index("f", Number(0n0/0x00u8))) Reg(U8) Some([99])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([89]) Number(0n0/0x00u8)
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 (tac13 Ident("c")) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9 (tace9 Ident("b")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 (tb9f0 Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a (te47a Index("b", Number(0n1/0x01u8))) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_mul32_32_12_t30b9 (t30b9 Index("d", Number(0n0/0x00u8))) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_mul32_32_12_t34f7 (t34f7 Index("d", Number(0n1/0x01u8))) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_mul32_32_12_t3b02 (t3b02 Index("a", Number(0n2/0x02u8))) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_mul32_32_12_t45f5 (t45f5 Ident("d")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_t5cca (t5cca Ident("b_hi")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_t6afc (t6afc Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_12_t82cc (t82cc Index("b", Number(0n2/0x02u8))) Reg(U8) Some([68])
# Var inline_RpnCalc_handle_mul32_32_12_t8792 (t8792 Ident("a")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_t8fbd (t8fbd Ident("a_hi")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_t94df (t94df Index("a", Number(0n3/0x03u8))) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_mul32_32_12_ta5f7 (ta5f7 Index("b", Number(0n3/0x03u8))) Reg(U8) Some([68])
# Var inline_RpnCalc_handle_mul32_32_12_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([96]) Number(0n0/0x00u8)
# Var inline_RpnCalc_handle_mul32_32_12_tac13 (tac13 Ident("c")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_tace9 (tace9 Ident("b")) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_mul32_32_12_tbe0a (tbe0a Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_by10_13_a (Arg0 a Number(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_by10_13_b (Local b Number(U32) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_by10_13_t7eaf (t7eaf Arithmetic(Add, Ident("b"), Ident("a"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_by10_13_t8792 (t8792 Ident("a")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_by10_13_tace9 (tace9 Ident("b")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_putc_15_t0 (static "lcd_enable" addr) Reg(U32) Some([56, 57, 58, 59]) Number(0n987228/0x000f105cu32)
# Var inline_RpnCalc_handle_putc_15_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_15_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([96]) Number(0n0/0x00u8)
# Var inline_RpnCalc_handle_putc_15_tac13 (tac13 Ident("c")) Reg(U8) Some([69]) Number(0n69/0x45u8)
# Var inline_RpnCalc_handle_putc_16_t0 (static "lcd_enable" addr) Reg(U32) Some([56, 57, 58, 59]) Number(0n987228/0x000f105cu32)
# Var inline_RpnCalc_handle_putc_16_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_16_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([96]) Number(0n0/0x00u8)
# Var inline_RpnCalc_handle_putc_16_tac13 (tac13 Ident("c")) Reg(U8) Some([69]) Number(0n82/0x52u8)
# Var inline_RpnCalc_handle_putc_17_t0 (static "lcd_enable" addr) Reg(U32) Some([56, 57, 58, 59]) Number(0n987228/0x000f105cu32)
# Var inline_RpnCalc_handle_putc_17_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_17_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([96]) Number(0n0/0x00u8)
# Var inline_RpnCalc_handle_putc_17_tac13 (tac13 Ident("c")) Reg(U8) Some([69]) Number(0n82/0x52u8)
# Var inline_RpnCalc_handle_putc_18_t0 (static "lcd_enable" addr) Reg(U32) Some([56, 57, 58, 59]) Number(0n987228/0x000f105cu32)
# Var inline_RpnCalc_handle_putc_18_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_18_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([96]) Number(0n0/0x00u8)
# Var inline_RpnCalc_handle_putc_18_tac13 (tac13 Ident("c")) Reg(U8) Some([69]) Number(0n10/0x0au8)
# Var inline_RpnCalc_handle_putc_19_t0 (static "lcd_enable" addr) Reg(U32) Some([56, 57, 58, 59]) Number(0n987228/0x000f105cu32)
# Var inline_RpnCalc_handle_putc_19_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_19_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([96]) Number(0n0/0x00u8)
# Var inline_RpnCalc_handle_putc_19_tac13 (tac13 Ident("c")) Reg(U8) Some([69]) Number(0n10/0x0au8)
# Var inline_RpnCalc_handle_putc_20_t0 (static "lcd_enable" addr) Reg(U32) Some([60, 61, 62, 63]) Number(0n987228/0x000f105cu32)
# Var inline_RpnCalc_handle_putc_20_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_putc_20_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([68]) Number(0n0/0x00u8)
# Var inline_RpnCalc_handle_putc_20_tac13 (tac13 Ident("c")) Reg(U8) Some([96]) Number(0n10/0x0au8)
# Var inline_RpnCalc_handle_putc_21_t0 (static "lcd_enable" addr) Reg(U32) Some([56, 57, 58, 59]) Number(0n987228/0x000f105cu32)
# Var inline_RpnCalc_handle_putc_21_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_21_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([96]) Number(0n0/0x00u8)
# Var inline_RpnCalc_handle_putc_21_tac13 (tac13 Ident("c")) Reg(U8) Some([69]) Number(0n10/0x0au8)
# Var inline_RpnCalc_handle_putc_22_t0 (static "lcd_enable" addr) Reg(U32) Some([56, 57, 58, 59]) Number(0n987228/0x000f105cu32)
# Var inline_RpnCalc_handle_putc_22_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_22_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([96]) Number(0n0/0x00u8)
# Var inline_RpnCalc_handle_putc_22_tac13 (tac13 Ident("c")) Reg(U8) Some([69]) Number(0n10/0x0au8)
# Var inline_RpnCalc_handle_putc_23_t0 (static "lcd_enable" addr) Reg(U32) Some([60, 61, 62, 63]) Number(0n987228/0x000f105cu32)
# Var inline_RpnCalc_handle_putc_23_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_putc_23_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([68]) Number(0n0/0x00u8)
# Var inline_RpnCalc_handle_putc_23_tac13 (tac13 Ident("c")) Reg(U8) Some([96]) Number(0n58/0x3au8)
# Var inline_RpnCalc_handle_putc_24_t0 (static "lcd_enable" addr) Reg(U32) Some([60, 61, 62, 63]) Number(0n987228/0x000f105cu32)
# Var inline_RpnCalc_handle_putc_24_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_putc_24_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([68]) Number(0n0/0x00u8)
# Var inline_RpnCalc_handle_putc_24_tac13 (tac13 Ident("c")) Reg(U8) Some([96]) Number(0n10/0x0au8)
# Var inline_RpnCalc_handle_stack_get_48_n (Arg1 n Number(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_get_48_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_stack_get_48_t2db0 (t2db0 Index("values", Ident("n"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_get_48_t5abb (t5abb Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))) }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_get_48_td38d (td38d Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_52_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_pop_52_t100e (t100e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_pop_52_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_pop_52_t1533 (t1533 Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_pop_52_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_pop_52_t8e54 (t8e54 Index("values", PtrFieldDeref("s", "first_free"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_pop_52_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_pop_52_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_pop_53_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_53_t100e (t100e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_53_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_pop_53_t1533 (t1533 Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_pop_53_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_53_t8e54 (t8e54 Index("values", PtrFieldDeref("s", "first_free"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_53_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_pop_53_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_push_54_n (Arg1 n Number(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_54_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_54_t100e (t100e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_54_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_54_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_54_t8f43 (t8f43 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_54_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_stack_push_54_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_55_n (Arg1 n Number(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_55_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_55_t100e (t100e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_55_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_55_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_55_t8f43 (t8f43 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_55_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_stack_push_55_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_56_n (Arg1 n Number(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_56_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_56_t100e (t100e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_56_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_56_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_56_t8f43 (t8f43 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_56_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_stack_push_56_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_57_n (Arg1 n Number(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_57_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_57_t100e (t100e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_57_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_57_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_57_t8f43 (t8f43 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_57_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_stack_push_57_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_58_n (Arg1 n Number(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_58_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_stack_push_58_t100e (t100e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_push_58_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_push_58_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_stack_push_58_t8f43 (t8f43 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_58_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_push_58_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_push_59_n (Arg1 n Number(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_59_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_59_t100e (t100e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_59_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_59_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_59_t8f43 (t8f43 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_59_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_stack_push_59_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) Reg(U32) Some([64, 65, 66, 67])
# Var product (Local product Number(U32) Reg(U32)) Reg(U32) Some([92, 93, 94, 95])
# Var quotient (Local quotient Number(U32) Reg(U32)) Reg(U32) Some([92, 93, 94, 95])
# Var stack_count (Local stack_count Number(U8) Reg(U8)) Reg(U8) Some([89])
# Var stack_count_usize (Local stack_count_usize Number(U32) Reg(U32)) Reg(U32) Some([72, 73, 74, 75])
# Var stack_needed (Local stack_needed Number(U8) Reg(U8)) Reg(U8) Some([100])
# Var sum (Local sum Number(U32) Reg(U32)) Reg(U32) Some([92, 93, 94, 95])
# Var t13c5 (t13c5 Number(0n47/0x2fu8)) Reg(U8) Some([99]) Number(0n47/0x2fu8)
# Var t17ee (t17ee Ident("diff")) Reg(U32) Some([56, 57, 58, 59])
# Var t1ba9 (t1ba9 Ident("quotient")) Reg(U32) Some([56, 57, 58, 59])
# Var t25ee (t25ee Number(0n10/0x0au8)) Reg(U8) Some([96]) Number(0n10/0x0au8)
# Var t2754 (t2754 Ident("product")) Reg(U32) Some([56, 57, 58, 59])
# Var t4376 (t4376 Cast { old_type: None, new_type: Number(U32), value: Ident("i") }) Reg(U32) Some([60, 61, 62, 63])
# Var t4671 (t4671 Ident("stack_needed")) Reg(U8) Some([99])
# Var t47ec (t47ec Number(0n99/0x63u8)) Reg(U8) Some([69]) Number(0n99/0x63u8)
# Var t6001 (t6001 Ident("stack_count")) Reg(U8) Some([88])
# Var t622 (t622 Number(0n42/0x2au8)) Reg(U8) Some([99]) Number(0n42/0x2au8)
# Var t670d (t670d Ident("sum")) Reg(U32) Some([56, 57, 58, 59])
# Var t6e8e (t6e8e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }) Reg(U32) Some([72, 73, 74, 75])
# Var t8792 (t8792 Ident("a")) Reg(U32) Some([72, 73, 74, 75])
# Var t8f63 (t8f63 Number(0n45/0x2du8)) Reg(U8) Some([99]) Number(0n45/0x2du8)
# Var t9dae (t9dae Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8))) Reg(U8) Some([69])
# Var ta11a (ta11a Number(0n1/0x01u8)) Reg(U8) Some([88]) Number(0n1/0x01u8)
# Var ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([88]) Number(0n0/0x00u8)
# Var tac13 (tac13 Ident("c")) Reg(U32) Some([64, 65, 66, 67])
# Var tace9 (tace9 Ident("b")) Reg(U32) Some([92, 93, 94, 95])
# Var tadd (tadd Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })) Reg(U32) Some([56, 57, 58, 59])
# Var tb1ed (tb1ed Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }) Reg(U32) Some([56, 57, 58, 59])
# Var tb336 (tb336 Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })) Reg(U32) Some([60, 61, 62, 63])
# Var tbdb5 (tbdb5 Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })) Reg(U32) Some([56, 57, 58, 59])
# Var tbf93 (tbf93 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("stack") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([72, 73, 74, 75])
# Var tc333 (tc333 Number(0n43/0x2bu8)) Reg(U8) Some([99]) Number(0n43/0x2bu8)
# Var tcc42 (tcc42 Number(0n100/0x64u8)) Reg(U8) Some([69]) Number(0n100/0x64u8)
# Var tcdcd (tcdcd Number(0n115/0x73u8)) Reg(U8) Some([99]) Number(0n115/0x73u8)
# Var td0f3 (td0f3 Ident("i")) Reg(U8) Some([69])
# Var td60 (td60 PtrFieldDeref("c", "num")) Reg(U32) Some([60, 61, 62, 63])
# Var tdc11 (tdc11 Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) Reg(U32) Some([56, 57, 58, 59])
# Var tdcb0 (tdcb0 Number(0n48/0x30u8)) Reg(U8) Some([69]) Number(0n48/0x30u8)
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([68])
# Var tdf3b (tdf3b Number(0n32/0x20u8)) Reg(U8) Some([69]) Number(0n32/0x20u8)
# Var tdf6e (tdf6e Number(0n113/0x71u8)) Reg(U8) Some([69]) Number(0n113/0x71u8)
# Var teed8 (teed8 Number(0n57/0x39u8)) Reg(U8) Some([69]) Number(0n57/0x39u8)
# Var tfdb7 (tfdb7 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }) Reg(U32) Some([56, 57, 58, 59])
# Var tfe08 (tfe08 Ident("stack")) Reg(U32) Some([64, 65, 66, 67])
# 005a4 Copy32 [Register(0x00), Register(0x40)]
#       Save function parameter 'c' registers [0, 1, 2, 3] to locals [64, 65, 66, 67].
21 00 40 

# 005a7 Copy8 [Register(0x04), Register(0x44)]
#       Save function parameter 'ch' registers [4] to locals [68].
0b 04 44 

# a <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(30,5))
# Assign { target: Ident("a"), var_type: Some(Number(U32)), value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 005aa LoadImm8 [Register(0x38), Constant8(0x00=0)]
#       a <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(30,5))
#       Assign { target: Ident("a"), var_type: Some(Number(U32)), value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 38 00 

# b <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(31,5))
# Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 005ad LoadImm8 [Register(0x3c), Constant8(0x00=0)]
#       b <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(31,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 3c 00 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n45/0x2du8) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n42/0x2au8) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n115/0x73u8) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(0n2/0x02u8) }])], else_block: [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(0n0/0x00u8) }] }\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n43/0x2bu8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# tc333 <- 0n43/0x2bu8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
# Number(0n43/0x2bu8)
# 005b0 LoadImm8 [Register(0x63), Constant8(0x2b=43)]
#       tc333 <- 0n43/0x2bu8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
#       Number(0n43/0x2bu8)
04 63 2b 

# if tdcd9 == tc333 then 'RpnCalc_handle_if_true_0_1' else 'RpnCalc_handle_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
# 005b3 Cmp8 [Register(0x44), Register(0x63)]
#       if tdcd9 == tc333 then 'RpnCalc_handle_if_true_0_1' else 'RpnCalc_handle_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
15 44 63 

# 005b6 JzImm [Label24(RpnCalc_handle_if_true_0_1)]
#       if tdcd9 == tc333 then 'RpnCalc_handle_if_true_0_1' else 'RpnCalc_handle_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
72 be 05 00 

# 005ba JmpImm [Label24(RpnCalc_handle_if_else_0_2)]
#       if tdcd9 == tc333 then 'RpnCalc_handle_if_true_0_1' else 'RpnCalc_handle_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
70 c5 05 00 

# :RpnCalc_handle_if_true_0_1 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n0/0x00u8) }] }
# RpnCalc_handle_if_true_0_1
# stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }
# Number(0n2/0x02u8)
# 005be LoadImm8 [Register(0x64), Constant8(0x02=2)]
#       stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }
#       Number(0n2/0x02u8)
04 64 02 

# goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 005c1 JmpImm [Label24(RpnCalc_handle_if_end_0)]
#       goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
70 1c 06 00 

# :RpnCalc_handle_if_else_0_2 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_else_0_2
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n45/0x2du8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t8f63 <- 0n45/0x2du8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
# Number(0n45/0x2du8)
# 005c5 LoadImm8 [Register(0x63), Constant8(0x2d=45)]
#       t8f63 <- 0n45/0x2du8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
#       Number(0n45/0x2du8)
04 63 2d 

# if tdcd9 == t8f63 then 'RpnCalc_handle_if_true_1_3' else 'RpnCalc_handle_if_else_1_4' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
# 005c8 Cmp8 [Register(0x44), Register(0x63)]
#       if tdcd9 == t8f63 then 'RpnCalc_handle_if_true_1_3' else 'RpnCalc_handle_if_else_1_4' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
15 44 63 

# 005cb JzImm [Label24(RpnCalc_handle_if_true_1_3)]
#       if tdcd9 == t8f63 then 'RpnCalc_handle_if_true_1_3' else 'RpnCalc_handle_if_else_1_4' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
72 d3 05 00 

# 005cf JmpImm [Label24(RpnCalc_handle_if_else_1_4)]
#       if tdcd9 == t8f63 then 'RpnCalc_handle_if_true_1_3' else 'RpnCalc_handle_if_else_1_4' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
70 da 05 00 

# :RpnCalc_handle_if_true_1_3 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_true_1_3
# stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }
# Number(0n2/0x02u8)
# 005d3 LoadImm8 [Register(0x64), Constant8(0x02=2)]
#       stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }
#       Number(0n2/0x02u8)
04 64 02 

# goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 005d6 JmpImm [Label24(RpnCalc_handle_if_end_0)]
#       goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
70 1c 06 00 

# :RpnCalc_handle_if_else_1_4 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_else_1_4
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n42/0x2au8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t622 <- 0n42/0x2au8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
# Number(0n42/0x2au8)
# 005da LoadImm8 [Register(0x63), Constant8(0x2a=42)]
#       t622 <- 0n42/0x2au8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
#       Number(0n42/0x2au8)
04 63 2a 

# if tdcd9 == t622 then 'RpnCalc_handle_if_true_2_5' else 'RpnCalc_handle_if_else_2_6' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
# 005dd Cmp8 [Register(0x44), Register(0x63)]
#       if tdcd9 == t622 then 'RpnCalc_handle_if_true_2_5' else 'RpnCalc_handle_if_else_2_6' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
15 44 63 

# 005e0 JzImm [Label24(RpnCalc_handle_if_true_2_5)]
#       if tdcd9 == t622 then 'RpnCalc_handle_if_true_2_5' else 'RpnCalc_handle_if_else_2_6' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
72 e8 05 00 

# 005e4 JmpImm [Label24(RpnCalc_handle_if_else_2_6)]
#       if tdcd9 == t622 then 'RpnCalc_handle_if_true_2_5' else 'RpnCalc_handle_if_else_2_6' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
70 ef 05 00 

# :RpnCalc_handle_if_true_2_5 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_true_2_5
# stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }
# Number(0n2/0x02u8)
# 005e8 LoadImm8 [Register(0x64), Constant8(0x02=2)]
#       stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }
#       Number(0n2/0x02u8)
04 64 02 

# goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 005eb JmpImm [Label24(RpnCalc_handle_if_end_0)]
#       goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
70 1c 06 00 

# :RpnCalc_handle_if_else_2_6 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_else_2_6
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n47/0x2fu8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t13c5 <- 0n47/0x2fu8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
# Number(0n47/0x2fu8)
# 005ef LoadImm8 [Register(0x63), Constant8(0x2f=47)]
#       t13c5 <- 0n47/0x2fu8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
#       Number(0n47/0x2fu8)
04 63 2f 

# if tdcd9 == t13c5 then 'RpnCalc_handle_if_true_3_7' else 'RpnCalc_handle_if_else_3_8' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
# 005f2 Cmp8 [Register(0x44), Register(0x63)]
#       if tdcd9 == t13c5 then 'RpnCalc_handle_if_true_3_7' else 'RpnCalc_handle_if_else_3_8' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
15 44 63 

# 005f5 JzImm [Label24(RpnCalc_handle_if_true_3_7)]
#       if tdcd9 == t13c5 then 'RpnCalc_handle_if_true_3_7' else 'RpnCalc_handle_if_else_3_8' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
72 fd 05 00 

# 005f9 JmpImm [Label24(RpnCalc_handle_if_else_3_8)]
#       if tdcd9 == t13c5 then 'RpnCalc_handle_if_true_3_7' else 'RpnCalc_handle_if_else_3_8' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
70 04 06 00 

# :RpnCalc_handle_if_true_3_7 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_true_3_7
# stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }
# Number(0n2/0x02u8)
# 005fd LoadImm8 [Register(0x64), Constant8(0x02=2)]
#       stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }
#       Number(0n2/0x02u8)
04 64 02 

# goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 00600 JmpImm [Label24(RpnCalc_handle_if_end_0)]
#       goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
70 1c 06 00 

# :RpnCalc_handle_if_else_3_8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_else_3_8
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n115/0x73u8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# tcdcd <- 0n115/0x73u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
# Number(0n115/0x73u8)
# 00604 LoadImm8 [Register(0x63), Constant8(0x73=115)]
#       tcdcd <- 0n115/0x73u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
#       Number(0n115/0x73u8)
04 63 73 

# if tdcd9 == tcdcd then 'RpnCalc_handle_if_true_4_9' else 'RpnCalc_handle_if_else_4_10' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
# 00607 Cmp8 [Register(0x44), Register(0x63)]
#       if tdcd9 == tcdcd then 'RpnCalc_handle_if_true_4_9' else 'RpnCalc_handle_if_else_4_10' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
15 44 63 

# 0060a JzImm [Label24(RpnCalc_handle_if_true_4_9)]
#       if tdcd9 == tcdcd then 'RpnCalc_handle_if_true_4_9' else 'RpnCalc_handle_if_else_4_10' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
72 12 06 00 

# 0060e JmpImm [Label24(RpnCalc_handle_if_else_4_10)]
#       if tdcd9 == tcdcd then 'RpnCalc_handle_if_true_4_9' else 'RpnCalc_handle_if_else_4_10' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
70 19 06 00 

# :RpnCalc_handle_if_true_4_9 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_true_4_9
# stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }
# Number(0n2/0x02u8)
# 00612 LoadImm8 [Register(0x64), Constant8(0x02=2)]
#       stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }
#       Number(0n2/0x02u8)
04 64 02 

# goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 00615 JmpImm [Label24(RpnCalc_handle_if_end_0)]
#       goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
70 1c 06 00 

# :RpnCalc_handle_if_else_4_10 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_else_4_10
# stack_needed <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 00619 LoadImm8 [Register(0x64), Constant8(0x00=0)]
#       stack_needed <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 64 00 

# :RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_end_0
# t4671 <- stack_needed U8 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
# Ident("stack_needed")
# 0061c Copy8 [Register(0x64), Register(0x63)]
#       t4671 <- stack_needed U8 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
#       Ident("stack_needed")
0b 64 63 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 0061f LoadImm8 [Register(0x58), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 58 00 

# if t4671 > ta97f then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_else_0_13' Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
# 00622 Cmp8 [Register(0x63), Register(0x58)]
#       if t4671 > ta97f then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_else_0_13' Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
15 63 58 

# 00625 JcImm [Label24(RpnCalc_handle_if_else_0_13)]
#       if t4671 > ta97f then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_else_0_13' Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
71 c9 06 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t4671 > ta97f then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_else_0_13' Some('/lutcomp/programs/lib/rpnlib.j':(48,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_true_0_12)], resolved: None }
# :RpnCalc_handle_if_true_0_12 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
# RpnCalc_handle_if_true_0_12
# tac13 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))\nVoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_c <- tac13 U32 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
# 00629 Copy32 [Register(0x40), Register(0x48)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_c <- tac13 U32 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
#       Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
21 40 48 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# PtrFieldDeref("c", "have_num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }\nComparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(0n0/0x00u8) }\nPtrFieldDeref(\"c\", \"have_num\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n72/0x00000048u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n72/0x00000048u32))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# PtrFieldDeref("c", "have_num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# 0062c Copy32 [Register(0x48), Register(0x4c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       PtrFieldDeref("c", "have_num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
21 48 4c 

# 0062f AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000048=72)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       PtrFieldDeref("c", "have_num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
32 4c 48 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7] U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# PtrFieldDeref("c", "have_num")
# 00635 Load8 [Register(0x4c), Register(0x58)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7] U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       PtrFieldDeref("c", "have_num")
05 4c 58 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 00638 LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 59 00 

# if inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# 0063b Cmp8 [Register(0x58), Register(0x59)]
#       if inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
15 58 59 

# 0063e JzImm [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_else_0_2)]
#       if inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
72 c5 06 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }\nComparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1
# inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\nPtrFieldDeref(\"c\", \"num\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n68/0x00000044u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n68/0x00000044u32))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# 00642 Copy32 [Register(0x48), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
21 48 50 

# 00645 AddImm32IgnoreCarry [Register(0x50), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
32 50 44 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# 0064b Load32 [Register(0x50), Register(0x4c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
22 50 4c 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_61_td60 U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_61_td60 U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# 0064e Copy32 [Register(0x48), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
#       Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
#       Ident("s")
21 48 50 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 00651 Copy32 [Register(0x50), Register(0x54)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 50 54 

# 00654 AddImm32IgnoreCarry [Register(0x54), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 54 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# 0065a Load32 [Register(0x54), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
22 54 50 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# 0065d LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
20 00 04 00 00 00 

# 00663 Mul8_16 [Register(0x50), Register(0x00), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
11 50 00 50 

# 00667 LoadImm8 [Register(0x52), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 52 00 

# 0066a LoadImm8 [Register(0x53), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 53 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# 0066d ClearCarry []
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
03 

# 0066e AddCarry32_1 [Register(0x48), Register(0x50), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
30 48 50 50 

# 00672 AddCarry32_2 []
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
31 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 00673 Store32_1 [Register(0x4c), Register(0x50)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 4c 50 

# 00676 Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# 00677 Copy32 [Register(0x48), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
#       Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
#       Ident("s")
21 48 50 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 0067a Copy32 [Register(0x50), Register(0x54)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 50 54 

# 0067d AddImm32IgnoreCarry [Register(0x54), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 54 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# 00683 Copy32 [Register(0x48), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
#       Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
#       Ident("s")
21 48 50 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 00686 Copy32 [Register(0x50), Register(0x54)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 50 54 

# 00689 AddImm32IgnoreCarry [Register(0x54), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 54 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# 0068f Load32 [Register(0x54), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
22 54 50 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t8f43 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# 00692 Copy32 [Register(0x50), Register(0x4c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t8f43 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
21 50 4c 

# 00695 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t8f43 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
32 4c 01 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# 0069b Store32_1 [Register(0x4c), Register(0x54)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
23 4c 54 

# 0069e Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
24 

# goto inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push None
# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push
# inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nAssign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(0n0/0x00000000u32) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n68/0x00000044u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n68/0x00000044u32))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# 0069f Copy32 [Register(0x48), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
21 48 50 

# 006a2 AddImm32IgnoreCarry [Register(0x50), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
32 50 44 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 006a8 LoadImm32 [Register(0x4c), Constant32(0x00000000=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 4c 00 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# 006ae Store32_1 [Register(0x4c), Register(0x50)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
23 4c 50 

# 006b1 Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
24 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nAssign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(0n0/0x00u8) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n72/0x00000048u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n72/0x00000048u32))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# 006b2 Copy32 [Register(0x48), Register(0x4c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
21 48 4c 

# 006b5 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000048=72)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
32 4c 48 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 006bb LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 59 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
# 006be Store8 [Register(0x59), Register(0x4c)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
06 59 4c 

# goto inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 006c1 JmpImm [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_end_0)]
#       goto inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
70 c5 06 00 

# :inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_else_0_2 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_else_0_2
# :inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_end_0
# goto inline_RpnCalc_handle_RpnCalc_push_pending_61_function_end_RpnCalc_push_pending None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_61_function_end_RpnCalc_push_pending None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_61_function_end_RpnCalc_push_pending)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_61_function_end_RpnCalc_push_pending None
# inline_RpnCalc_handle_RpnCalc_push_pending_61_function_end_RpnCalc_push_pending
# goto RpnCalc_handle_if_end_11 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# 006c5 JmpImm [Label24(RpnCalc_handle_if_end_11)]
#       goto RpnCalc_handle_if_end_11 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
70 c9 06 00 

# :RpnCalc_handle_if_else_0_13 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# RpnCalc_handle_if_else_0_13
# :RpnCalc_handle_if_end_11 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# RpnCalc_handle_if_end_11
# tbf93 <- c Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/rpnlib.j':(52,5))
# Assign { target: Ident("stack_count_usize"), var_type: Some(Number(U32)), value: PtrFieldDeref("stack", "first_free") }
# PtrFieldDeref("stack", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("stack") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("stack") }, Number(0n64/0x00000040u32))
# 006c9 Copy32 [Register(0x40), Register(0x48)]
#       tbf93 <- c Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/rpnlib.j':(52,5))
#       Assign { target: Ident("stack_count_usize"), var_type: Some(Number(U32)), value: PtrFieldDeref("stack", "first_free") }
#       PtrFieldDeref("stack", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("stack") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("stack") }, Number(0n64/0x00000040u32))
21 40 48 

# 006cc AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000040=64)]
#       tbf93 <- c Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/rpnlib.j':(52,5))
#       Assign { target: Ident("stack_count_usize"), var_type: Some(Number(U32)), value: PtrFieldDeref("stack", "first_free") }
#       PtrFieldDeref("stack", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("stack") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("stack") }, Number(0n64/0x00000040u32))
32 48 40 00 00 00 

# stack_count_usize <- mem[tbf93] U32 Some('/lutcomp/programs/lib/rpnlib.j':(52,5))
# Assign { target: Ident("stack_count_usize"), var_type: Some(Number(U32)), value: PtrFieldDeref("stack", "first_free") }
# PtrFieldDeref("stack", "first_free")
# 006d2 Load32 [Register(0x48), Register(0x48)]
#       stack_count_usize <- mem[tbf93] U32 Some('/lutcomp/programs/lib/rpnlib.j':(52,5))
#       Assign { target: Ident("stack_count_usize"), var_type: Some(Number(U32)), value: PtrFieldDeref("stack", "first_free") }
#       PtrFieldDeref("stack", "first_free")
22 48 48 

# stack_count <- stack_count_usize[0x00..0x01] U8 Some('/lutcomp/programs/lib/rpnlib.j':(53,5))
# Assign { target: Ident("stack_count"), var_type: Some(Number(U8)), value: Index("stack_count_usize", Number(0n0/0x00u8)) }
# Index("stack_count_usize", Number(0n0/0x00u8))
# 006d5 Copy8 [Register(0x48), Register(0x59)]
#       stack_count <- stack_count_usize[0x00..0x01] U8 Some('/lutcomp/programs/lib/rpnlib.j':(53,5))
#       Assign { target: Ident("stack_count"), var_type: Some(Number(U8)), value: Index("stack_count_usize", Number(0n0/0x00u8)) }
#       Index("stack_count_usize", Number(0n0/0x00u8))
0b 48 59 

# t4671 <- stack_needed U8 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n69/0x45u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Return { value: Some(Number(0n1/0x01u8)) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
# Ident("stack_needed")
# 006d8 Copy8 [Register(0x64), Register(0x63)]
#       t4671 <- stack_needed U8 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n69/0x45u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Return { value: Some(Number(0n1/0x01u8)) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
#       Ident("stack_needed")
0b 64 63 

# t6001 <- stack_count U8 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n69/0x45u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Return { value: Some(Number(0n1/0x01u8)) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
# Ident("stack_count")
# 006db Copy8 [Register(0x59), Register(0x58)]
#       t6001 <- stack_count U8 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n69/0x45u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Return { value: Some(Number(0n1/0x01u8)) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
#       Ident("stack_count")
0b 59 58 

# if t4671 > t6001 then 'RpnCalc_handle_if_true_0_15' else 'RpnCalc_handle_if_else_0_16' Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n69/0x45u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Return { value: Some(Number(0n1/0x01u8)) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
# 006de Cmp8 [Register(0x63), Register(0x58)]
#       if t4671 > t6001 then 'RpnCalc_handle_if_true_0_15' else 'RpnCalc_handle_if_else_0_16' Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n69/0x45u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Return { value: Some(Number(0n1/0x01u8)) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
15 63 58 

# 006e1 JcImm [Label24(RpnCalc_handle_if_else_0_16)]
#       if t4671 > t6001 then 'RpnCalc_handle_if_true_0_15' else 'RpnCalc_handle_if_else_0_16' Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n69/0x45u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Return { value: Some(Number(0n1/0x01u8)) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
71 d4 07 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t4671 > t6001 then 'RpnCalc_handle_if_true_0_15' else 'RpnCalc_handle_if_else_0_16' Some('/lutcomp/programs/lib/rpnlib.j':(55,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Ident(\"stack_count\") }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n69/0x45u8)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }, Return { value: Some(Number(0n1/0x01u8)) }])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Ident(\"stack_count\") }\n", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_true_0_15)], resolved: None }
# :RpnCalc_handle_if_true_0_15 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n69/0x45u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Return { value: Some(Number(0n1/0x01u8)) }])], else_block: [] }
# RpnCalc_handle_if_true_0_15
# inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_15_tac13 <- inline_RpnCalc_handle_putc_15_c U8` with constant `inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8 `.
# 006e5 LoadImm8 [Register(0x45), Constant8(0x45=69)]
#       inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_15_tac13 <- inline_RpnCalc_handle_putc_15_c U8` with constant `inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8 `.
04 45 45 

# None <= call io_write0(inline_RpnCalc_handle_putc_15_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 006e8 Out0 [Register(0x45)]
#       IoWrite0
68 45 

# inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 006ea LoadImm32 [Register(0x38), Constant32(0x000f105c=987228)]
#       inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
20 38 5c 10 0f 00 

# inline_RpnCalc_handle_putc_15_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 006f0 Load8 [Register(0x38), Register(0x45)]
#       inline_RpnCalc_handle_putc_15_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
05 38 45 

# inline_RpnCalc_handle_putc_15_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 006f3 LoadImm8 [Register(0x60), Constant8(0x00=0)]
#       inline_RpnCalc_handle_putc_15_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 60 00 

# if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_putc_15_ta97f then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# 006f6 Cmp8 [Register(0x45), Register(0x60)]
#       if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_putc_15_ta97f then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
15 45 60 

# 006f9 JzImm [Label24(inline_RpnCalc_handle_putc_15_putc_if_else_0_2)]
#       if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_putc_15_ta97f then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
72 1d 07 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_putc_15_ta97f then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_15_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_15_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_15_putc_if_true_0_1
# inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_15_tac13 <- inline_RpnCalc_handle_putc_15_c U8` with constant `inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8 `.
# 006fd LoadImm8 [Register(0x45), Constant8(0x45=69)]
#       inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_15_tac13 <- inline_RpnCalc_handle_putc_15_c U8` with constant `inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8 `.
04 45 45 

# None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 00700 Copy8 [Register(0x45), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_15_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 45 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 140, 141, 142, 143, 144, 145, 146, 147, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252}
# Registers to save: []
# 00703 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 00709 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 13 07 00 00 

# 0070f JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 67 1f 00 

# 00713 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_RpnCalc_handle_putc_15_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 00719 JmpImm [Label24(inline_RpnCalc_handle_putc_15_putc_if_end_0)]
#       goto inline_RpnCalc_handle_putc_15_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 1d 07 00 

# :inline_RpnCalc_handle_putc_15_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_15_putc_if_else_0_2
# :inline_RpnCalc_handle_putc_15_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_15_putc_if_end_0
# goto inline_RpnCalc_handle_putc_15_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_15_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_15_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_15_function_end_putc None
# inline_RpnCalc_handle_putc_15_function_end_putc
# inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_16_tac13 <- inline_RpnCalc_handle_putc_16_c U8` with constant `inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8 `.
# 0071d LoadImm8 [Register(0x45), Constant8(0x52=82)]
#       inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_16_tac13 <- inline_RpnCalc_handle_putc_16_c U8` with constant `inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8 `.
04 45 52 

# None <= call io_write0(inline_RpnCalc_handle_putc_16_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 00720 Out0 [Register(0x45)]
#       IoWrite0
68 45 

# inline_RpnCalc_handle_putc_16_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 00722 LoadImm32 [Register(0x38), Constant32(0x000f105c=987228)]
#       inline_RpnCalc_handle_putc_16_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
20 38 5c 10 0f 00 

# inline_RpnCalc_handle_putc_16_t76c7 <- mem[inline_RpnCalc_handle_putc_16_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 00728 Load8 [Register(0x38), Register(0x45)]
#       inline_RpnCalc_handle_putc_16_t76c7 <- mem[inline_RpnCalc_handle_putc_16_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
05 38 45 

# inline_RpnCalc_handle_putc_16_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 0072b LoadImm8 [Register(0x60), Constant8(0x00=0)]
#       inline_RpnCalc_handle_putc_16_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 60 00 

# if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_putc_16_ta97f then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# 0072e Cmp8 [Register(0x45), Register(0x60)]
#       if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_putc_16_ta97f then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
15 45 60 

# 00731 JzImm [Label24(inline_RpnCalc_handle_putc_16_putc_if_else_0_2)]
#       if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_putc_16_ta97f then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
72 55 07 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_putc_16_ta97f then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_16_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_16_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_16_putc_if_true_0_1
# inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_16_tac13 <- inline_RpnCalc_handle_putc_16_c U8` with constant `inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8 `.
# 00735 LoadImm8 [Register(0x45), Constant8(0x52=82)]
#       inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_16_tac13 <- inline_RpnCalc_handle_putc_16_c U8` with constant `inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8 `.
04 45 52 

# None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 00738 Copy8 [Register(0x45), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_16_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 45 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 140, 141, 142, 143, 144, 145, 146, 147, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252}
# Registers to save: []
# 0073b AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 00741 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 4b 07 00 00 

# 00747 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 67 1f 00 

# 0074b AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_RpnCalc_handle_putc_16_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 00751 JmpImm [Label24(inline_RpnCalc_handle_putc_16_putc_if_end_0)]
#       goto inline_RpnCalc_handle_putc_16_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 55 07 00 

# :inline_RpnCalc_handle_putc_16_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_16_putc_if_else_0_2
# :inline_RpnCalc_handle_putc_16_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_16_putc_if_end_0
# goto inline_RpnCalc_handle_putc_16_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_16_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_16_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_16_function_end_putc None
# inline_RpnCalc_handle_putc_16_function_end_putc
# inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_17_tac13 <- inline_RpnCalc_handle_putc_17_c U8` with constant `inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8 `.
# 00755 LoadImm8 [Register(0x45), Constant8(0x52=82)]
#       inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_17_tac13 <- inline_RpnCalc_handle_putc_17_c U8` with constant `inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8 `.
04 45 52 

# None <= call io_write0(inline_RpnCalc_handle_putc_17_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 00758 Out0 [Register(0x45)]
#       IoWrite0
68 45 

# inline_RpnCalc_handle_putc_17_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 0075a LoadImm32 [Register(0x38), Constant32(0x000f105c=987228)]
#       inline_RpnCalc_handle_putc_17_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
20 38 5c 10 0f 00 

# inline_RpnCalc_handle_putc_17_t76c7 <- mem[inline_RpnCalc_handle_putc_17_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 00760 Load8 [Register(0x38), Register(0x45)]
#       inline_RpnCalc_handle_putc_17_t76c7 <- mem[inline_RpnCalc_handle_putc_17_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
05 38 45 

# inline_RpnCalc_handle_putc_17_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 00763 LoadImm8 [Register(0x60), Constant8(0x00=0)]
#       inline_RpnCalc_handle_putc_17_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 60 00 

# if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_putc_17_ta97f then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# 00766 Cmp8 [Register(0x45), Register(0x60)]
#       if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_putc_17_ta97f then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
15 45 60 

# 00769 JzImm [Label24(inline_RpnCalc_handle_putc_17_putc_if_else_0_2)]
#       if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_putc_17_ta97f then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
72 8d 07 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_putc_17_ta97f then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_17_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_17_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_17_putc_if_true_0_1
# inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_17_tac13 <- inline_RpnCalc_handle_putc_17_c U8` with constant `inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8 `.
# 0076d LoadImm8 [Register(0x45), Constant8(0x52=82)]
#       inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_17_tac13 <- inline_RpnCalc_handle_putc_17_c U8` with constant `inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8 `.
04 45 52 

# None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 00770 Copy8 [Register(0x45), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_17_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 45 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 140, 141, 142, 143, 144, 145, 146, 147, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252}
# Registers to save: []
# 00773 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 00779 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 83 07 00 00 

# 0077f JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 67 1f 00 

# 00783 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_RpnCalc_handle_putc_17_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 00789 JmpImm [Label24(inline_RpnCalc_handle_putc_17_putc_if_end_0)]
#       goto inline_RpnCalc_handle_putc_17_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 8d 07 00 

# :inline_RpnCalc_handle_putc_17_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_17_putc_if_else_0_2
# :inline_RpnCalc_handle_putc_17_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_17_putc_if_end_0
# goto inline_RpnCalc_handle_putc_17_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_17_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_17_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_17_function_end_putc None
# inline_RpnCalc_handle_putc_17_function_end_putc
# t25ee <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }
# Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] })
# Number(0n10/0x0au8)
# 0078d LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       t25ee <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }
#       Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] })
#       Number(0n10/0x0au8)
04 60 0a 

# inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_18_tac13 <- inline_RpnCalc_handle_putc_18_c U8` with constant `inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 `.
# 00790 LoadImm8 [Register(0x45), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_18_tac13 <- inline_RpnCalc_handle_putc_18_c U8` with constant `inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 `.
04 45 0a 

# None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 00793 Out0 [Register(0x45)]
#       IoWrite0
68 45 

# inline_RpnCalc_handle_putc_18_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 00795 LoadImm32 [Register(0x38), Constant32(0x000f105c=987228)]
#       inline_RpnCalc_handle_putc_18_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
20 38 5c 10 0f 00 

# inline_RpnCalc_handle_putc_18_t76c7 <- mem[inline_RpnCalc_handle_putc_18_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 0079b Load8 [Register(0x38), Register(0x45)]
#       inline_RpnCalc_handle_putc_18_t76c7 <- mem[inline_RpnCalc_handle_putc_18_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
05 38 45 

# inline_RpnCalc_handle_putc_18_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 0079e LoadImm8 [Register(0x60), Constant8(0x00=0)]
#       inline_RpnCalc_handle_putc_18_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 60 00 

# if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_putc_18_ta97f then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# 007a1 Cmp8 [Register(0x45), Register(0x60)]
#       if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_putc_18_ta97f then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
15 45 60 

# 007a4 JzImm [Label24(inline_RpnCalc_handle_putc_18_putc_if_else_0_2)]
#       if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_putc_18_ta97f then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
72 c8 07 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_putc_18_ta97f then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_18_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_18_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_18_putc_if_true_0_1
# inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_18_tac13 <- inline_RpnCalc_handle_putc_18_c U8` with constant `inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 `.
# 007a8 LoadImm8 [Register(0x45), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_18_tac13 <- inline_RpnCalc_handle_putc_18_c U8` with constant `inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 `.
04 45 0a 

# None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 007ab Copy8 [Register(0x45), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_18_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 45 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 140, 141, 142, 143, 144, 145, 146, 147, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252}
# Registers to save: []
# 007ae AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 007b4 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c be 07 00 00 

# 007ba JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 67 1f 00 

# 007be AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_RpnCalc_handle_putc_18_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 007c4 JmpImm [Label24(inline_RpnCalc_handle_putc_18_putc_if_end_0)]
#       goto inline_RpnCalc_handle_putc_18_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 c8 07 00 

# :inline_RpnCalc_handle_putc_18_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_18_putc_if_else_0_2
# :inline_RpnCalc_handle_putc_18_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_18_putc_if_end_0
# goto inline_RpnCalc_handle_putc_18_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_18_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_18_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_18_function_end_putc None
# inline_RpnCalc_handle_putc_18_function_end_putc
# ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# Return { value: Some(Number(0n1/0x01u8)) }
# Number(0n1/0x01u8)
# 007c8 LoadImm8 [Register(0x58), Constant8(0x01=1)]
#       ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#       Return { value: Some(Number(0n1/0x01u8)) }
#       Number(0n1/0x01u8)
04 58 01 

# return Some(ta11a) Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# Return { value: Some(Number(0n1/0x01u8)) }
# 007cb Copy8 [Register(0x58), Register(0x00)]
#       return Some(ta11a) Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#       Return { value: Some(Number(0n1/0x01u8)) }
0b 58 00 

# 007ce JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto RpnCalc_handle_if_end_14 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# 007d0 JmpImm [Label24(RpnCalc_handle_if_end_14)]
#       goto RpnCalc_handle_if_end_14 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
70 d4 07 00 

# :RpnCalc_handle_if_else_0_16 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# RpnCalc_handle_if_else_0_16
# :RpnCalc_handle_if_end_14 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# RpnCalc_handle_if_end_14
# t4671 <- stack_needed U8 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
# Ident("stack_needed")
# 007d4 Copy8 [Register(0x64), Register(0x63)]
#       t4671 <- stack_needed U8 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
#       Ident("stack_needed")
0b 64 63 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 007d7 LoadImm8 [Register(0x58), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 58 00 

# if t4671 > ta97f then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_else_0_19' Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
# 007da Cmp8 [Register(0x63), Register(0x58)]
#       if t4671 > ta97f then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_else_0_19' Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
15 63 58 

# 007dd JcImm [Label24(RpnCalc_handle_if_else_0_19)]
#       if t4671 > ta97f then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_else_0_19' Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
71 2c 08 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t4671 > ta97f then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_else_0_19' Some('/lutcomp/programs/lib/rpnlib.j':(63,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(0n0/0x00u8) }, [Assign { target: Ident(\"a\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_true_0_18)], resolved: None }
# :RpnCalc_handle_if_true_0_18 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# RpnCalc_handle_if_true_0_18
# tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }
# Call(Call { function: "stack_pop", parameters: [Ident("stack")] })
# Ident("stack")
# optimized away noop copy Instruction { source: "tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }\nCall(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] })\nIdent(\"stack\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_pop_52_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }
# Call(Call { function: "stack_pop", parameters: [Ident("stack")] })
# 007e1 Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_stack_pop_52_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#       Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }
#       Call(Call { function: "stack_pop", parameters: [Ident("stack")] })
21 40 38 

# inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 007e4 Copy32 [Register(0x38), Register(0x4c)]
#       inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 38 4c 

# 007e7 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nArithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 007ed Copy32 [Register(0x38), Register(0x4c)]
#       inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 38 4c 

# 007f0 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_pop_52_t14ab <- mem[inline_RpnCalc_handle_stack_pop_52_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# 007f6 Load32 [Register(0x4c), Register(0x48)]
#       inline_RpnCalc_handle_stack_pop_52_t14ab <- mem[inline_RpnCalc_handle_stack_pop_52_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
22 4c 48 

# inline_RpnCalc_handle_stack_pop_52_t1533 <- inline_RpnCalc_handle_stack_pop_52_t14ab Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# 007f9 AddImm32IgnoreCarry [Register(0x48), Constant32(0xffffffff=4294967295)]
#       inline_RpnCalc_handle_stack_pop_52_t1533 <- inline_RpnCalc_handle_stack_pop_52_t14ab Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
32 48 ff ff ff ff 

# mem[inline_RpnCalc_handle_stack_pop_52_tc957] <- inline_RpnCalc_handle_stack_pop_52_t1533 U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# 007ff Store32_1 [Register(0x48), Register(0x4c)]
#       mem[inline_RpnCalc_handle_stack_pop_52_tc957] <- inline_RpnCalc_handle_stack_pop_52_t1533 U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
23 48 4c 

# 00802 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_pop_52_tc957] <- inline_RpnCalc_handle_stack_pop_52_t1533 U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
24 

# inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))\nReturn { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }\nIndex(\"values\", PtrFieldDeref(\"s\", \"first_free\"))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 00803 Copy32 [Register(0x38), Register(0x4c)]
#       inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 38 4c 

# 00806 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_pop_52_t14ab <- mem[inline_RpnCalc_handle_stack_pop_52_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# 0080c Load32 [Register(0x4c), Register(0x48)]
#       inline_RpnCalc_handle_stack_pop_52_t14ab <- mem[inline_RpnCalc_handle_stack_pop_52_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
22 4c 48 

# inline_RpnCalc_handle_stack_pop_52_tf659 <- inline_RpnCalc_handle_stack_pop_52_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# 0080f LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_pop_52_tf659 <- inline_RpnCalc_handle_stack_pop_52_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
20 00 04 00 00 00 

# 00815 Mul8_16 [Register(0x48), Register(0x00), Register(0x48)]
#       inline_RpnCalc_handle_stack_pop_52_tf659 <- inline_RpnCalc_handle_stack_pop_52_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
11 48 00 48 

# 00819 LoadImm8 [Register(0x4a), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_pop_52_tf659 <- inline_RpnCalc_handle_stack_pop_52_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 4a 00 

# 0081c LoadImm8 [Register(0x4b), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_pop_52_tf659 <- inline_RpnCalc_handle_stack_pop_52_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 4b 00 

# inline_RpnCalc_handle_stack_pop_52_t100e <- inline_RpnCalc_handle_stack_pop_52_s Add Var(inline_RpnCalc_handle_stack_pop_52_tf659) Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# 0081f ClearCarry []
#       inline_RpnCalc_handle_stack_pop_52_t100e <- inline_RpnCalc_handle_stack_pop_52_s Add Var(inline_RpnCalc_handle_stack_pop_52_tf659) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
03 

# 00820 AddCarry32_1 [Register(0x38), Register(0x48), Register(0x38)]
#       inline_RpnCalc_handle_stack_pop_52_t100e <- inline_RpnCalc_handle_stack_pop_52_s Add Var(inline_RpnCalc_handle_stack_pop_52_tf659) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
30 38 48 38 

# 00824 AddCarry32_2 []
#       inline_RpnCalc_handle_stack_pop_52_t100e <- inline_RpnCalc_handle_stack_pop_52_s Add Var(inline_RpnCalc_handle_stack_pop_52_tf659) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
31 

# inline_RpnCalc_handle_stack_pop_52_t8e54 <- mem[inline_RpnCalc_handle_stack_pop_52_t100e] U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# 00825 Load32 [Register(0x38), Register(0x38)]
#       inline_RpnCalc_handle_stack_pop_52_t8e54 <- mem[inline_RpnCalc_handle_stack_pop_52_t100e] U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
22 38 38 

# a <- inline_RpnCalc_handle_stack_pop_52_t8e54 U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# optimized away noop copy Instruction { source: "a <- inline_RpnCalc_handle_stack_pop_52_t8e54 U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))\nReturn { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# goto inline_RpnCalc_handle_stack_pop_52_function_end_stack_pop Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_pop_52_function_end_stack_pop Some('/lutcomp/programs/lib/Stack.j':(13,5))\nReturn { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_pop_52_function_end_stack_pop)], resolved: None }
# :inline_RpnCalc_handle_stack_pop_52_function_end_stack_pop None
# inline_RpnCalc_handle_stack_pop_52_function_end_stack_pop
# goto RpnCalc_handle_if_end_17 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# 00828 JmpImm [Label24(RpnCalc_handle_if_end_17)]
#       goto RpnCalc_handle_if_end_17 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
70 2c 08 00 

# :RpnCalc_handle_if_else_0_19 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# RpnCalc_handle_if_else_0_19
# :RpnCalc_handle_if_end_17 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# RpnCalc_handle_if_end_17
# t4671 <- stack_needed U8 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }
# Ident("stack_needed")
# 0082c Copy8 [Register(0x64), Register(0x63)]
#       t4671 <- stack_needed U8 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }
#       Ident("stack_needed")
0b 64 63 

# ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }
# Number(0n1/0x01u8)
# 0082f LoadImm8 [Register(0x58), Constant8(0x01=1)]
#       ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }
#       Number(0n1/0x01u8)
04 58 01 

# if t4671 > ta11a then 'RpnCalc_handle_if_true_0_21' else 'RpnCalc_handle_if_else_0_22' Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }
# 00832 Cmp8 [Register(0x63), Register(0x58)]
#       if t4671 > ta11a then 'RpnCalc_handle_if_true_0_21' else 'RpnCalc_handle_if_else_0_22' Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }
15 63 58 

# 00835 JcImm [Label24(RpnCalc_handle_if_else_0_22)]
#       if t4671 > ta11a then 'RpnCalc_handle_if_true_0_21' else 'RpnCalc_handle_if_else_0_22' Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }
71 84 08 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t4671 > ta11a then 'RpnCalc_handle_if_true_0_21' else 'RpnCalc_handle_if_else_0_22' Some('/lutcomp/programs/lib/rpnlib.j':(66,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(0n1/0x01u8) }, [Assign { target: Ident(\"b\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(0n1/0x01u8) }\n", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_true_0_21)], resolved: None }
# :RpnCalc_handle_if_true_0_21 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# RpnCalc_handle_if_true_0_21
# tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }
# Call(Call { function: "stack_pop", parameters: [Ident("stack")] })
# Ident("stack")
# optimized away noop copy Instruction { source: "tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))\nAssign { target: Ident(\"b\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }\nCall(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] })\nIdent(\"stack\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_pop_53_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }
# Call(Call { function: "stack_pop", parameters: [Ident("stack")] })
# 00839 Copy32 [Register(0x40), Register(0x3c)]
#       inline_RpnCalc_handle_stack_pop_53_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#       Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }
#       Call(Call { function: "stack_pop", parameters: [Ident("stack")] })
21 40 3c 

# inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 0083c Copy32 [Register(0x3c), Register(0x4c)]
#       inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 4c 

# 0083f AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nArithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 00845 Copy32 [Register(0x3c), Register(0x4c)]
#       inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 4c 

# 00848 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_pop_53_t14ab <- mem[inline_RpnCalc_handle_stack_pop_53_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# 0084e Load32 [Register(0x4c), Register(0x48)]
#       inline_RpnCalc_handle_stack_pop_53_t14ab <- mem[inline_RpnCalc_handle_stack_pop_53_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
22 4c 48 

# inline_RpnCalc_handle_stack_pop_53_t1533 <- inline_RpnCalc_handle_stack_pop_53_t14ab Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# 00851 AddImm32IgnoreCarry [Register(0x48), Constant32(0xffffffff=4294967295)]
#       inline_RpnCalc_handle_stack_pop_53_t1533 <- inline_RpnCalc_handle_stack_pop_53_t14ab Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
32 48 ff ff ff ff 

# mem[inline_RpnCalc_handle_stack_pop_53_tc957] <- inline_RpnCalc_handle_stack_pop_53_t1533 U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# 00857 Store32_1 [Register(0x48), Register(0x4c)]
#       mem[inline_RpnCalc_handle_stack_pop_53_tc957] <- inline_RpnCalc_handle_stack_pop_53_t1533 U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
23 48 4c 

# 0085a Store32_2 []
#       mem[inline_RpnCalc_handle_stack_pop_53_tc957] <- inline_RpnCalc_handle_stack_pop_53_t1533 U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
24 

# inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))\nReturn { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }\nIndex(\"values\", PtrFieldDeref(\"s\", \"first_free\"))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 0085b Copy32 [Register(0x3c), Register(0x4c)]
#       inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 4c 

# 0085e AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_pop_53_t14ab <- mem[inline_RpnCalc_handle_stack_pop_53_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# 00864 Load32 [Register(0x4c), Register(0x48)]
#       inline_RpnCalc_handle_stack_pop_53_t14ab <- mem[inline_RpnCalc_handle_stack_pop_53_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
22 4c 48 

# inline_RpnCalc_handle_stack_pop_53_tf659 <- inline_RpnCalc_handle_stack_pop_53_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# 00867 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_pop_53_tf659 <- inline_RpnCalc_handle_stack_pop_53_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
20 00 04 00 00 00 

# 0086d Mul8_16 [Register(0x48), Register(0x00), Register(0x48)]
#       inline_RpnCalc_handle_stack_pop_53_tf659 <- inline_RpnCalc_handle_stack_pop_53_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
11 48 00 48 

# 00871 LoadImm8 [Register(0x4a), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_pop_53_tf659 <- inline_RpnCalc_handle_stack_pop_53_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 4a 00 

# 00874 LoadImm8 [Register(0x4b), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_pop_53_tf659 <- inline_RpnCalc_handle_stack_pop_53_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 4b 00 

# inline_RpnCalc_handle_stack_pop_53_t100e <- inline_RpnCalc_handle_stack_pop_53_s Add Var(inline_RpnCalc_handle_stack_pop_53_tf659) Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# 00877 ClearCarry []
#       inline_RpnCalc_handle_stack_pop_53_t100e <- inline_RpnCalc_handle_stack_pop_53_s Add Var(inline_RpnCalc_handle_stack_pop_53_tf659) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
03 

# 00878 AddCarry32_1 [Register(0x3c), Register(0x48), Register(0x3c)]
#       inline_RpnCalc_handle_stack_pop_53_t100e <- inline_RpnCalc_handle_stack_pop_53_s Add Var(inline_RpnCalc_handle_stack_pop_53_tf659) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
30 3c 48 3c 

# 0087c AddCarry32_2 []
#       inline_RpnCalc_handle_stack_pop_53_t100e <- inline_RpnCalc_handle_stack_pop_53_s Add Var(inline_RpnCalc_handle_stack_pop_53_tf659) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
31 

# inline_RpnCalc_handle_stack_pop_53_t8e54 <- mem[inline_RpnCalc_handle_stack_pop_53_t100e] U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# 0087d Load32 [Register(0x3c), Register(0x3c)]
#       inline_RpnCalc_handle_stack_pop_53_t8e54 <- mem[inline_RpnCalc_handle_stack_pop_53_t100e] U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
22 3c 3c 

# b <- inline_RpnCalc_handle_stack_pop_53_t8e54 U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# optimized away noop copy Instruction { source: "b <- inline_RpnCalc_handle_stack_pop_53_t8e54 U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))\nReturn { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# goto inline_RpnCalc_handle_stack_pop_53_function_end_stack_pop Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_pop_53_function_end_stack_pop Some('/lutcomp/programs/lib/Stack.j':(13,5))\nReturn { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_pop_53_function_end_stack_pop)], resolved: None }
# :inline_RpnCalc_handle_stack_pop_53_function_end_stack_pop None
# inline_RpnCalc_handle_stack_pop_53_function_end_stack_pop
# goto RpnCalc_handle_if_end_20 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# 00880 JmpImm [Label24(RpnCalc_handle_if_end_20)]
#       goto RpnCalc_handle_if_end_20 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
70 84 08 00 

# :RpnCalc_handle_if_else_0_22 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# RpnCalc_handle_if_else_0_22
# :RpnCalc_handle_if_end_20 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# RpnCalc_handle_if_end_20
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }])], else_block: [] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident(\"sum\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident(\"b\"), Ident(\"a\")) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"sum\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n45/0x2du8) }, [Assign { target: Ident(\"diff\"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident(\"b\"), Ident(\"a\")) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n42/0x2au8) }, [Assign { target: Ident(\"product\"), var_type: Some(Number(U32)), value: Call(Call { function: \"mul32_32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"product\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident(\"quotient\"), var_type: Some(Number(U32)), value: Call(Call { function: \"div32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"quotient\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n115/0x73u8) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n10/0x0au8) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n32/0x20u8) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n99/0x63u8) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n100/0x64u8) }, [Assign { target: Ident(\"i\"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }, While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(0n57/0x39u8) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident(\"ch\"), Number(0n48/0x30u8)) }) }])], else_block: [] }])], else_block: [] }\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n43/0x2bu8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# tc333 <- 0n43/0x2bu8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }])], else_block: [] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
# Number(0n43/0x2bu8)
# 00884 LoadImm8 [Register(0x63), Constant8(0x2b=43)]
#       tc333 <- 0n43/0x2bu8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
#       Number(0n43/0x2bu8)
04 63 2b 

# if tdcd9 == tc333 then 'RpnCalc_handle_if_true_0_24' else 'RpnCalc_handle_if_else_0_25' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }])], else_block: [] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
# 00887 Cmp8 [Register(0x44), Register(0x63)]
#       if tdcd9 == tc333 then 'RpnCalc_handle_if_true_0_24' else 'RpnCalc_handle_if_else_0_25' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
15 44 63 

# 0088a JzImm [Label24(RpnCalc_handle_if_true_0_24)]
#       if tdcd9 == tc333 then 'RpnCalc_handle_if_true_0_24' else 'RpnCalc_handle_if_else_0_25' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
72 92 08 00 

# 0088e JmpImm [Label24(RpnCalc_handle_if_else_0_25)]
#       if tdcd9 == tc333 then 'RpnCalc_handle_if_true_0_24' else 'RpnCalc_handle_if_else_0_25' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
70 fb 09 00 

# :RpnCalc_handle_if_true_0_24 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }])], else_block: [] }
# RpnCalc_handle_if_true_0_24
# tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# Ident("b")
# 00892 Copy32 [Register(0x3c), Register(0x5c)]
#       tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
#       Ident("b")
21 3c 5c 

# t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# Ident("a")
# 00895 Copy32 [Register(0x38), Register(0x48)]
#       t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
#       Ident("a")
21 38 48 

# sum <- tace9 Add Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# 00898 ClearCarry []
#       sum <- tace9 Add Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
03 

# 00899 AddCarry32_1 [Register(0x5c), Register(0x48), Register(0x5c)]
#       sum <- tace9 Add Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
30 5c 48 5c 

# 0089d AddCarry32_2 []
#       sum <- tace9 Add Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
31 

# t670d <- sum U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
# Ident("sum")
# 0089e Copy32 [Register(0x5c), Register(0x38)]
#       t670d <- sum U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
#       Ident("sum")
21 5c 38 

# None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
# 008a1 Copy32 [Register(0x38), Register(0x00)]
#       Arg0[a]=t670d None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
21 38 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 204, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252}
# Registers to save: [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107]
# 008a4 Push8 [Register(0x6b)]
#       Saving reg0x6b before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 6b 

# 008a6 Push8 [Register(0x6a)]
#       Saving reg0x6a before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 6a 

# 008a8 Push8 [Register(0x69)]
#       Saving reg0x69 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 69 

# 008aa Push8 [Register(0x68)]
#       Saving reg0x68 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 68 

# 008ac Push8 [Register(0x64)]
#       Saving reg0x64 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 64 

# 008ae Push8 [Register(0x63)]
#       Saving reg0x63 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 63 

# 008b0 Push8 [Register(0x62)]
#       Saving reg0x62 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 62 

# 008b2 Push8 [Register(0x61)]
#       Saving reg0x61 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 61 

# 008b4 Push8 [Register(0x60)]
#       Saving reg0x60 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 60 

# 008b6 Push8 [Register(0x5f)]
#       Saving reg0x5f before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 5f 

# 008b8 Push8 [Register(0x5e)]
#       Saving reg0x5e before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 5e 

# 008ba Push8 [Register(0x5d)]
#       Saving reg0x5d before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 5d 

# 008bc Push8 [Register(0x5c)]
#       Saving reg0x5c before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 5c 

# 008be Push8 [Register(0x59)]
#       Saving reg0x59 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 59 

# 008c0 Push8 [Register(0x58)]
#       Saving reg0x58 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 58 

# 008c2 Push8 [Register(0x57)]
#       Saving reg0x57 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 57 

# 008c4 Push8 [Register(0x56)]
#       Saving reg0x56 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 56 

# 008c6 Push8 [Register(0x55)]
#       Saving reg0x55 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 55 

# 008c8 Push8 [Register(0x54)]
#       Saving reg0x54 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 54 

# 008ca Push8 [Register(0x53)]
#       Saving reg0x53 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 53 

# 008cc Push8 [Register(0x52)]
#       Saving reg0x52 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 52 

# 008ce Push8 [Register(0x51)]
#       Saving reg0x51 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 51 

# 008d0 Push8 [Register(0x50)]
#       Saving reg0x50 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 50 

# 008d2 Push8 [Register(0x4f)]
#       Saving reg0x4f before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 4f 

# 008d4 Push8 [Register(0x4e)]
#       Saving reg0x4e before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 4e 

# 008d6 Push8 [Register(0x4d)]
#       Saving reg0x4d before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 4d 

# 008d8 Push8 [Register(0x4c)]
#       Saving reg0x4c before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 4c 

# 008da Push8 [Register(0x4b)]
#       Saving reg0x4b before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 4b 

# 008dc Push8 [Register(0x4a)]
#       Saving reg0x4a before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 4a 

# 008de Push8 [Register(0x49)]
#       Saving reg0x49 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 49 

# 008e0 Push8 [Register(0x48)]
#       Saving reg0x48 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 48 

# 008e2 Push8 [Register(0x45)]
#       Saving reg0x45 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 45 

# 008e4 Push8 [Register(0x44)]
#       Saving reg0x44 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 44 

# 008e6 Push8 [Register(0x43)]
#       Saving reg0x43 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 43 

# 008e8 Push8 [Register(0x42)]
#       Saving reg0x42 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 42 

# 008ea Push8 [Register(0x41)]
#       Saving reg0x41 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 41 

# 008ec Push8 [Register(0x40)]
#       Saving reg0x40 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 40 

# 008ee Push8 [Register(0x3f)]
#       Saving reg0x3f before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 3f 

# 008f0 Push8 [Register(0x3e)]
#       Saving reg0x3e before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 3e 

# 008f2 Push8 [Register(0x3d)]
#       Saving reg0x3d before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 3d 

# 008f4 Push8 [Register(0x3c)]
#       Saving reg0x3c before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 3c 

# 008f6 Push8 [Register(0x3b)]
#       Saving reg0x3b before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 3b 

# 008f8 Push8 [Register(0x3a)]
#       Saving reg0x3a before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 3a 

# 008fa Push8 [Register(0x39)]
#       Saving reg0x39 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 39 

# 008fc Push8 [Register(0x38)]
#       Saving reg0x38 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 38 

# 008fe AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec32))
32 0c fc ff ff ff 

# 00904 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec32))
25 0c 0e 09 00 00 

# 0090a JmpImm [Label24(:print_dec32)]
#       PseudoCall(Label24(:print_dec32))
70 6b 27 00 

# 0090e AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec32))
32 0c 04 00 00 00 

# 00914 Pop8 [Register(0x38)]
#       Restoring reg0x38 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 38 

# 00916 Pop8 [Register(0x39)]
#       Restoring reg0x39 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 39 

# 00918 Pop8 [Register(0x3a)]
#       Restoring reg0x3a after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 3a 

# 0091a Pop8 [Register(0x3b)]
#       Restoring reg0x3b after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 3b 

# 0091c Pop8 [Register(0x3c)]
#       Restoring reg0x3c after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 3c 

# 0091e Pop8 [Register(0x3d)]
#       Restoring reg0x3d after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 3d 

# 00920 Pop8 [Register(0x3e)]
#       Restoring reg0x3e after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 3e 

# 00922 Pop8 [Register(0x3f)]
#       Restoring reg0x3f after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 3f 

# 00924 Pop8 [Register(0x40)]
#       Restoring reg0x40 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 40 

# 00926 Pop8 [Register(0x41)]
#       Restoring reg0x41 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 41 

# 00928 Pop8 [Register(0x42)]
#       Restoring reg0x42 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 42 

# 0092a Pop8 [Register(0x43)]
#       Restoring reg0x43 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 43 

# 0092c Pop8 [Register(0x44)]
#       Restoring reg0x44 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 44 

# 0092e Pop8 [Register(0x45)]
#       Restoring reg0x45 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 45 

# 00930 Pop8 [Register(0x48)]
#       Restoring reg0x48 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 48 

# 00932 Pop8 [Register(0x49)]
#       Restoring reg0x49 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 49 

# 00934 Pop8 [Register(0x4a)]
#       Restoring reg0x4a after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 4a 

# 00936 Pop8 [Register(0x4b)]
#       Restoring reg0x4b after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 4b 

# 00938 Pop8 [Register(0x4c)]
#       Restoring reg0x4c after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 4c 

# 0093a Pop8 [Register(0x4d)]
#       Restoring reg0x4d after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 4d 

# 0093c Pop8 [Register(0x4e)]
#       Restoring reg0x4e after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 4e 

# 0093e Pop8 [Register(0x4f)]
#       Restoring reg0x4f after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 4f 

# 00940 Pop8 [Register(0x50)]
#       Restoring reg0x50 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 50 

# 00942 Pop8 [Register(0x51)]
#       Restoring reg0x51 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 51 

# 00944 Pop8 [Register(0x52)]
#       Restoring reg0x52 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 52 

# 00946 Pop8 [Register(0x53)]
#       Restoring reg0x53 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 53 

# 00948 Pop8 [Register(0x54)]
#       Restoring reg0x54 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 54 

# 0094a Pop8 [Register(0x55)]
#       Restoring reg0x55 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 55 

# 0094c Pop8 [Register(0x56)]
#       Restoring reg0x56 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 56 

# 0094e Pop8 [Register(0x57)]
#       Restoring reg0x57 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 57 

# 00950 Pop8 [Register(0x58)]
#       Restoring reg0x58 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 58 

# 00952 Pop8 [Register(0x59)]
#       Restoring reg0x59 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 59 

# 00954 Pop8 [Register(0x5c)]
#       Restoring reg0x5c after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 5c 

# 00956 Pop8 [Register(0x5d)]
#       Restoring reg0x5d after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 5d 

# 00958 Pop8 [Register(0x5e)]
#       Restoring reg0x5e after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 5e 

# 0095a Pop8 [Register(0x5f)]
#       Restoring reg0x5f after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 5f 

# 0095c Pop8 [Register(0x60)]
#       Restoring reg0x60 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 60 

# 0095e Pop8 [Register(0x61)]
#       Restoring reg0x61 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 61 

# 00960 Pop8 [Register(0x62)]
#       Restoring reg0x62 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 62 

# 00962 Pop8 [Register(0x63)]
#       Restoring reg0x63 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 63 

# 00964 Pop8 [Register(0x64)]
#       Restoring reg0x64 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 64 

# 00966 Pop8 [Register(0x68)]
#       Restoring reg0x68 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 68 

# 00968 Pop8 [Register(0x69)]
#       Restoring reg0x69 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 69 

# 0096a Pop8 [Register(0x6a)]
#       Restoring reg0x6a after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 6a 

# 0096c Pop8 [Register(0x6b)]
#       Restoring reg0x6b after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 6b 

# t25ee <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }
# Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] })
# Number(0n10/0x0au8)
# 0096e LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       t25ee <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }
#       Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] })
#       Number(0n10/0x0au8)
04 60 0a 

# inline_RpnCalc_handle_putc_19_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_19_tac13 <- inline_RpnCalc_handle_putc_19_c U8` with constant `inline_RpnCalc_handle_putc_19_tac13 <- 0n10/0x0au8 `.
# 00971 LoadImm8 [Register(0x45), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_19_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_19_tac13 <- inline_RpnCalc_handle_putc_19_c U8` with constant `inline_RpnCalc_handle_putc_19_tac13 <- 0n10/0x0au8 `.
04 45 0a 

# None <= call io_write0(inline_RpnCalc_handle_putc_19_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 00974 Out0 [Register(0x45)]
#       IoWrite0
68 45 

# inline_RpnCalc_handle_putc_19_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 00976 LoadImm32 [Register(0x38), Constant32(0x000f105c=987228)]
#       inline_RpnCalc_handle_putc_19_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
20 38 5c 10 0f 00 

# inline_RpnCalc_handle_putc_19_t76c7 <- mem[inline_RpnCalc_handle_putc_19_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 0097c Load8 [Register(0x38), Register(0x45)]
#       inline_RpnCalc_handle_putc_19_t76c7 <- mem[inline_RpnCalc_handle_putc_19_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
05 38 45 

# inline_RpnCalc_handle_putc_19_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 0097f LoadImm8 [Register(0x60), Constant8(0x00=0)]
#       inline_RpnCalc_handle_putc_19_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 60 00 

# if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_putc_19_ta97f then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# 00982 Cmp8 [Register(0x45), Register(0x60)]
#       if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_putc_19_ta97f then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
15 45 60 

# 00985 JzImm [Label24(inline_RpnCalc_handle_putc_19_putc_if_else_0_2)]
#       if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_putc_19_ta97f then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
72 a9 09 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_putc_19_ta97f then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_19_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_19_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_19_putc_if_true_0_1
# inline_RpnCalc_handle_putc_19_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_19_tac13 <- inline_RpnCalc_handle_putc_19_c U8` with constant `inline_RpnCalc_handle_putc_19_tac13 <- 0n10/0x0au8 `.
# 00989 LoadImm8 [Register(0x45), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_19_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_19_tac13 <- inline_RpnCalc_handle_putc_19_c U8` with constant `inline_RpnCalc_handle_putc_19_tac13 <- 0n10/0x0au8 `.
04 45 0a 

# None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 0098c Copy8 [Register(0x45), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_19_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 45 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 140, 141, 142, 143, 144, 145, 146, 147, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252}
# Registers to save: []
# 0098f AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 00995 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 9f 09 00 00 

# 0099b JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 67 1f 00 

# 0099f AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_RpnCalc_handle_putc_19_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 009a5 JmpImm [Label24(inline_RpnCalc_handle_putc_19_putc_if_end_0)]
#       goto inline_RpnCalc_handle_putc_19_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 a9 09 00 

# :inline_RpnCalc_handle_putc_19_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_19_putc_if_else_0_2
# :inline_RpnCalc_handle_putc_19_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_19_putc_if_end_0
# goto inline_RpnCalc_handle_putc_19_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_19_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_19_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_19_function_end_putc None
# inline_RpnCalc_handle_putc_19_function_end_putc
# tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })
# Ident("stack")
# optimized away noop copy Instruction { source: "tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] })\nIdent(\"stack\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# t670d <- sum U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })
# Ident("sum")
# 009a9 Copy32 [Register(0x5c), Register(0x38)]
#       t670d <- sum U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })
#       Ident("sum")
21 5c 38 

# inline_RpnCalc_handle_stack_push_54_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })
# 009ac Copy32 [Register(0x40), Register(0x3c)]
#       inline_RpnCalc_handle_stack_push_54_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })
21 40 3c 

# inline_RpnCalc_handle_stack_push_54_n <- t670d U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_54_n <- t670d U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] })\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 009af Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 009b2 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_54_t14ab <- mem[inline_RpnCalc_handle_stack_push_54_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# 009b8 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_54_t14ab <- mem[inline_RpnCalc_handle_stack_push_54_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_stack_push_54_tf659 <- inline_RpnCalc_handle_stack_push_54_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# 009bb LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_push_54_tf659 <- inline_RpnCalc_handle_stack_push_54_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
20 00 04 00 00 00 

# 009c1 Mul8_16 [Register(0x40), Register(0x00), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_54_tf659 <- inline_RpnCalc_handle_stack_push_54_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
11 40 00 40 

# 009c5 LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_54_tf659 <- inline_RpnCalc_handle_stack_push_54_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 42 00 

# 009c8 LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_54_tf659 <- inline_RpnCalc_handle_stack_push_54_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 43 00 

# inline_RpnCalc_handle_stack_push_54_t100e <- inline_RpnCalc_handle_stack_push_54_s Add Var(inline_RpnCalc_handle_stack_push_54_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# 009cb ClearCarry []
#       inline_RpnCalc_handle_stack_push_54_t100e <- inline_RpnCalc_handle_stack_push_54_s Add Var(inline_RpnCalc_handle_stack_push_54_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
03 

# 009cc AddCarry32_1 [Register(0x3c), Register(0x40), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_54_t100e <- inline_RpnCalc_handle_stack_push_54_s Add Var(inline_RpnCalc_handle_stack_push_54_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
30 3c 40 40 

# 009d0 AddCarry32_2 []
#       inline_RpnCalc_handle_stack_push_54_t100e <- inline_RpnCalc_handle_stack_push_54_s Add Var(inline_RpnCalc_handle_stack_push_54_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
31 

# mem[inline_RpnCalc_handle_stack_push_54_t100e] <- inline_RpnCalc_handle_stack_push_54_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 009d1 Store32_1 [Register(0x38), Register(0x40)]
#       mem[inline_RpnCalc_handle_stack_push_54_t100e] <- inline_RpnCalc_handle_stack_push_54_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 38 40 

# 009d4 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_54_t100e] <- inline_RpnCalc_handle_stack_push_54_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 009d5 Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 009d8 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 009de Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 009e1 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_54_t14ab <- mem[inline_RpnCalc_handle_stack_push_54_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# 009e7 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_54_t14ab <- mem[inline_RpnCalc_handle_stack_push_54_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_stack_push_54_t8f43 <- inline_RpnCalc_handle_stack_push_54_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# 009ea Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_stack_push_54_t8f43 <- inline_RpnCalc_handle_stack_push_54_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
21 40 38 

# 009ed AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_stack_push_54_t8f43 <- inline_RpnCalc_handle_stack_push_54_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
32 38 01 00 00 00 

# mem[inline_RpnCalc_handle_stack_push_54_tc957] <- inline_RpnCalc_handle_stack_push_54_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# 009f3 Store32_1 [Register(0x38), Register(0x5c)]
#       mem[inline_RpnCalc_handle_stack_push_54_tc957] <- inline_RpnCalc_handle_stack_push_54_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
23 38 5c 

# 009f6 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_54_tc957] <- inline_RpnCalc_handle_stack_push_54_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
24 

# goto inline_RpnCalc_handle_stack_push_54_function_end_stack_push None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_push_54_function_end_stack_push None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_push_54_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_stack_push_54_function_end_stack_push None
# inline_RpnCalc_handle_stack_push_54_function_end_stack_push
# goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 009f7 JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 24 16 00 

# :RpnCalc_handle_if_else_0_25 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_0_25
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n45/0x2du8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t8f63 <- 0n45/0x2du8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
# Number(0n45/0x2du8)
# 009fb LoadImm8 [Register(0x63), Constant8(0x2d=45)]
#       t8f63 <- 0n45/0x2du8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
#       Number(0n45/0x2du8)
04 63 2d 

# if tdcd9 == t8f63 then 'RpnCalc_handle_if_true_1_26' else 'RpnCalc_handle_if_else_1_27' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
# 009fe Cmp8 [Register(0x44), Register(0x63)]
#       if tdcd9 == t8f63 then 'RpnCalc_handle_if_true_1_26' else 'RpnCalc_handle_if_else_1_27' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
15 44 63 

# 00a01 JzImm [Label24(RpnCalc_handle_if_true_1_26)]
#       if tdcd9 == t8f63 then 'RpnCalc_handle_if_true_1_26' else 'RpnCalc_handle_if_else_1_27' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
72 09 0a 00 

# 00a05 JmpImm [Label24(RpnCalc_handle_if_else_1_27)]
#       if tdcd9 == t8f63 then 'RpnCalc_handle_if_true_1_26' else 'RpnCalc_handle_if_else_1_27' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
70 7d 0b 00 

# :RpnCalc_handle_if_true_1_26 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_1_26
# tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
# Arithmetic(Subtract, Ident("b"), Ident("a"))
# Ident("b")
# 00a09 Copy32 [Register(0x3c), Register(0x5c)]
#       tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
#       Ident("b")
21 3c 5c 

# t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
# Arithmetic(Subtract, Ident("b"), Ident("a"))
# Ident("a")
# 00a0c Copy32 [Register(0x38), Register(0x48)]
#       t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
#       Ident("a")
21 38 48 

# diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
# Arithmetic(Subtract, Ident("b"), Ident("a"))
# 00a0f Copy32 [Register(0x48), Register(0x00)]
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
21 48 00 

# 00a12 Invert8 [Register(0x00)]
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
01 00 

# 00a14 Invert8 [Register(0x01)]
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
01 01 

# 00a16 Invert8 [Register(0x02)]
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
01 02 

# 00a18 Invert8 [Register(0x03)]
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
01 03 

# 00a1a AddImm32IgnoreCarry [Register(0x00), Constant32(0x00000001=1)]
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
32 00 01 00 00 00 

# 00a20 ClearCarry []
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
03 

# 00a21 AddCarry32_1 [Register(0x5c), Register(0x00), Register(0x38)]
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
30 5c 00 38 

# 00a25 AddCarry32_2 []
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
31 

# t17ee <- diff U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
# Ident("diff")
# optimized away noop copy Instruction { source: "t17ee <- diff U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] }) }\nCall(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] })\nIdent(\"diff\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
# 00a26 Copy32 [Register(0x38), Register(0x00)]
#       Arg0[a]=t17ee None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
21 38 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 204, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252}
# Registers to save: [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107]
# 00a29 Push8 [Register(0x6b)]
#       Saving reg0x6b before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 6b 

# 00a2b Push8 [Register(0x6a)]
#       Saving reg0x6a before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 6a 

# 00a2d Push8 [Register(0x69)]
#       Saving reg0x69 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 69 

# 00a2f Push8 [Register(0x68)]
#       Saving reg0x68 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 68 

# 00a31 Push8 [Register(0x64)]
#       Saving reg0x64 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 64 

# 00a33 Push8 [Register(0x63)]
#       Saving reg0x63 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 63 

# 00a35 Push8 [Register(0x62)]
#       Saving reg0x62 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 62 

# 00a37 Push8 [Register(0x61)]
#       Saving reg0x61 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 61 

# 00a39 Push8 [Register(0x60)]
#       Saving reg0x60 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 60 

# 00a3b Push8 [Register(0x5f)]
#       Saving reg0x5f before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 5f 

# 00a3d Push8 [Register(0x5e)]
#       Saving reg0x5e before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 5e 

# 00a3f Push8 [Register(0x5d)]
#       Saving reg0x5d before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 5d 

# 00a41 Push8 [Register(0x5c)]
#       Saving reg0x5c before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 5c 

# 00a43 Push8 [Register(0x59)]
#       Saving reg0x59 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 59 

# 00a45 Push8 [Register(0x58)]
#       Saving reg0x58 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 58 

# 00a47 Push8 [Register(0x57)]
#       Saving reg0x57 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 57 

# 00a49 Push8 [Register(0x56)]
#       Saving reg0x56 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 56 

# 00a4b Push8 [Register(0x55)]
#       Saving reg0x55 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 55 

# 00a4d Push8 [Register(0x54)]
#       Saving reg0x54 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 54 

# 00a4f Push8 [Register(0x53)]
#       Saving reg0x53 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 53 

# 00a51 Push8 [Register(0x52)]
#       Saving reg0x52 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 52 

# 00a53 Push8 [Register(0x51)]
#       Saving reg0x51 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 51 

# 00a55 Push8 [Register(0x50)]
#       Saving reg0x50 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 50 

# 00a57 Push8 [Register(0x4f)]
#       Saving reg0x4f before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 4f 

# 00a59 Push8 [Register(0x4e)]
#       Saving reg0x4e before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 4e 

# 00a5b Push8 [Register(0x4d)]
#       Saving reg0x4d before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 4d 

# 00a5d Push8 [Register(0x4c)]
#       Saving reg0x4c before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 4c 

# 00a5f Push8 [Register(0x4b)]
#       Saving reg0x4b before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 4b 

# 00a61 Push8 [Register(0x4a)]
#       Saving reg0x4a before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 4a 

# 00a63 Push8 [Register(0x49)]
#       Saving reg0x49 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 49 

# 00a65 Push8 [Register(0x48)]
#       Saving reg0x48 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 48 

# 00a67 Push8 [Register(0x45)]
#       Saving reg0x45 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 45 

# 00a69 Push8 [Register(0x44)]
#       Saving reg0x44 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 44 

# 00a6b Push8 [Register(0x43)]
#       Saving reg0x43 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 43 

# 00a6d Push8 [Register(0x42)]
#       Saving reg0x42 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 42 

# 00a6f Push8 [Register(0x41)]
#       Saving reg0x41 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 41 

# 00a71 Push8 [Register(0x40)]
#       Saving reg0x40 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 40 

# 00a73 Push8 [Register(0x3f)]
#       Saving reg0x3f before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 3f 

# 00a75 Push8 [Register(0x3e)]
#       Saving reg0x3e before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 3e 

# 00a77 Push8 [Register(0x3d)]
#       Saving reg0x3d before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 3d 

# 00a79 Push8 [Register(0x3c)]
#       Saving reg0x3c before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 3c 

# 00a7b Push8 [Register(0x3b)]
#       Saving reg0x3b before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 3b 

# 00a7d Push8 [Register(0x3a)]
#       Saving reg0x3a before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 3a 

# 00a7f Push8 [Register(0x39)]
#       Saving reg0x39 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 39 

# 00a81 Push8 [Register(0x38)]
#       Saving reg0x38 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 38 

# 00a83 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec32))
32 0c fc ff ff ff 

# 00a89 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec32))
25 0c 93 0a 00 00 

# 00a8f JmpImm [Label24(:print_dec32)]
#       PseudoCall(Label24(:print_dec32))
70 6b 27 00 

# 00a93 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec32))
32 0c 04 00 00 00 

# 00a99 Pop8 [Register(0x38)]
#       Restoring reg0x38 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 38 

# 00a9b Pop8 [Register(0x39)]
#       Restoring reg0x39 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 39 

# 00a9d Pop8 [Register(0x3a)]
#       Restoring reg0x3a after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 3a 

# 00a9f Pop8 [Register(0x3b)]
#       Restoring reg0x3b after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 3b 

# 00aa1 Pop8 [Register(0x3c)]
#       Restoring reg0x3c after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 3c 

# 00aa3 Pop8 [Register(0x3d)]
#       Restoring reg0x3d after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 3d 

# 00aa5 Pop8 [Register(0x3e)]
#       Restoring reg0x3e after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 3e 

# 00aa7 Pop8 [Register(0x3f)]
#       Restoring reg0x3f after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 3f 

# 00aa9 Pop8 [Register(0x40)]
#       Restoring reg0x40 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 40 

# 00aab Pop8 [Register(0x41)]
#       Restoring reg0x41 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 41 

# 00aad Pop8 [Register(0x42)]
#       Restoring reg0x42 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 42 

# 00aaf Pop8 [Register(0x43)]
#       Restoring reg0x43 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 43 

# 00ab1 Pop8 [Register(0x44)]
#       Restoring reg0x44 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 44 

# 00ab3 Pop8 [Register(0x45)]
#       Restoring reg0x45 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 45 

# 00ab5 Pop8 [Register(0x48)]
#       Restoring reg0x48 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 48 

# 00ab7 Pop8 [Register(0x49)]
#       Restoring reg0x49 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 49 

# 00ab9 Pop8 [Register(0x4a)]
#       Restoring reg0x4a after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 4a 

# 00abb Pop8 [Register(0x4b)]
#       Restoring reg0x4b after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 4b 

# 00abd Pop8 [Register(0x4c)]
#       Restoring reg0x4c after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 4c 

# 00abf Pop8 [Register(0x4d)]
#       Restoring reg0x4d after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 4d 

# 00ac1 Pop8 [Register(0x4e)]
#       Restoring reg0x4e after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 4e 

# 00ac3 Pop8 [Register(0x4f)]
#       Restoring reg0x4f after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 4f 

# 00ac5 Pop8 [Register(0x50)]
#       Restoring reg0x50 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 50 

# 00ac7 Pop8 [Register(0x51)]
#       Restoring reg0x51 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 51 

# 00ac9 Pop8 [Register(0x52)]
#       Restoring reg0x52 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 52 

# 00acb Pop8 [Register(0x53)]
#       Restoring reg0x53 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 53 

# 00acd Pop8 [Register(0x54)]
#       Restoring reg0x54 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 54 

# 00acf Pop8 [Register(0x55)]
#       Restoring reg0x55 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 55 

# 00ad1 Pop8 [Register(0x56)]
#       Restoring reg0x56 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 56 

# 00ad3 Pop8 [Register(0x57)]
#       Restoring reg0x57 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 57 

# 00ad5 Pop8 [Register(0x58)]
#       Restoring reg0x58 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 58 

# 00ad7 Pop8 [Register(0x59)]
#       Restoring reg0x59 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 59 

# 00ad9 Pop8 [Register(0x5c)]
#       Restoring reg0x5c after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 5c 

# 00adb Pop8 [Register(0x5d)]
#       Restoring reg0x5d after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 5d 

# 00add Pop8 [Register(0x5e)]
#       Restoring reg0x5e after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 5e 

# 00adf Pop8 [Register(0x5f)]
#       Restoring reg0x5f after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 5f 

# 00ae1 Pop8 [Register(0x60)]
#       Restoring reg0x60 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 60 

# 00ae3 Pop8 [Register(0x61)]
#       Restoring reg0x61 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 61 

# 00ae5 Pop8 [Register(0x62)]
#       Restoring reg0x62 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 62 

# 00ae7 Pop8 [Register(0x63)]
#       Restoring reg0x63 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 63 

# 00ae9 Pop8 [Register(0x64)]
#       Restoring reg0x64 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 64 

# 00aeb Pop8 [Register(0x68)]
#       Restoring reg0x68 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 68 

# 00aed Pop8 [Register(0x69)]
#       Restoring reg0x69 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 69 

# 00aef Pop8 [Register(0x6a)]
#       Restoring reg0x6a after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 6a 

# 00af1 Pop8 [Register(0x6b)]
#       Restoring reg0x6b after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 6b 

# t25ee <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }
# Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] })
# Number(0n10/0x0au8)
# 00af3 LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       t25ee <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }
#       Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] })
#       Number(0n10/0x0au8)
04 60 0a 

# inline_RpnCalc_handle_putc_20_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_20_tac13 <- inline_RpnCalc_handle_putc_20_c U8` with constant `inline_RpnCalc_handle_putc_20_tac13 <- 0n10/0x0au8 `.
# 00af6 LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_20_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_20_tac13 <- inline_RpnCalc_handle_putc_20_c U8` with constant `inline_RpnCalc_handle_putc_20_tac13 <- 0n10/0x0au8 `.
04 60 0a 

# None <= call io_write0(inline_RpnCalc_handle_putc_20_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 00af9 Out0 [Register(0x60)]
#       IoWrite0
68 60 

# inline_RpnCalc_handle_putc_20_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 00afb LoadImm32 [Register(0x3c), Constant32(0x000f105c=987228)]
#       inline_RpnCalc_handle_putc_20_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
20 3c 5c 10 0f 00 

# inline_RpnCalc_handle_putc_20_t76c7 <- mem[inline_RpnCalc_handle_putc_20_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 00b01 Load8 [Register(0x3c), Register(0x60)]
#       inline_RpnCalc_handle_putc_20_t76c7 <- mem[inline_RpnCalc_handle_putc_20_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
05 3c 60 

# inline_RpnCalc_handle_putc_20_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 00b04 LoadImm8 [Register(0x44), Constant8(0x00=0)]
#       inline_RpnCalc_handle_putc_20_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 44 00 

# if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_putc_20_ta97f then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# 00b07 Cmp8 [Register(0x60), Register(0x44)]
#       if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_putc_20_ta97f then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
15 60 44 

# 00b0a JzImm [Label24(inline_RpnCalc_handle_putc_20_putc_if_else_0_2)]
#       if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_putc_20_ta97f then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
72 2e 0b 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_putc_20_ta97f then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_20_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_20_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_20_putc_if_true_0_1
# inline_RpnCalc_handle_putc_20_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_20_tac13 <- inline_RpnCalc_handle_putc_20_c U8` with constant `inline_RpnCalc_handle_putc_20_tac13 <- 0n10/0x0au8 `.
# 00b0e LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_20_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_20_tac13 <- inline_RpnCalc_handle_putc_20_c U8` with constant `inline_RpnCalc_handle_putc_20_tac13 <- 0n10/0x0au8 `.
04 60 0a 

# None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 00b11 Copy8 [Register(0x60), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_20_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 60 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 140, 141, 142, 143, 144, 145, 146, 147, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252}
# Registers to save: []
# 00b14 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 00b1a StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 24 0b 00 00 

# 00b20 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 67 1f 00 

# 00b24 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_RpnCalc_handle_putc_20_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 00b2a JmpImm [Label24(inline_RpnCalc_handle_putc_20_putc_if_end_0)]
#       goto inline_RpnCalc_handle_putc_20_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 2e 0b 00 

# :inline_RpnCalc_handle_putc_20_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_20_putc_if_else_0_2
# :inline_RpnCalc_handle_putc_20_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_20_putc_if_end_0
# goto inline_RpnCalc_handle_putc_20_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_20_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_20_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_20_function_end_putc None
# inline_RpnCalc_handle_putc_20_function_end_putc
# tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] })
# Ident("stack")
# optimized away noop copy Instruction { source: "tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] })\nIdent(\"stack\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# t17ee <- diff U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] })
# Ident("diff")
# optimized away noop copy Instruction { source: "t17ee <- diff U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] })\nIdent(\"diff\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_stack_push_55_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] })
# 00b2e Copy32 [Register(0x40), Register(0x3c)]
#       inline_RpnCalc_handle_stack_push_55_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] })
21 40 3c 

# inline_RpnCalc_handle_stack_push_55_n <- t17ee U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_55_n <- t17ee U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] })\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 00b31 Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 00b34 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_55_t14ab <- mem[inline_RpnCalc_handle_stack_push_55_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# 00b3a Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_55_t14ab <- mem[inline_RpnCalc_handle_stack_push_55_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_stack_push_55_tf659 <- inline_RpnCalc_handle_stack_push_55_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# 00b3d LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_push_55_tf659 <- inline_RpnCalc_handle_stack_push_55_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
20 00 04 00 00 00 

# 00b43 Mul8_16 [Register(0x40), Register(0x00), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_55_tf659 <- inline_RpnCalc_handle_stack_push_55_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
11 40 00 40 

# 00b47 LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_55_tf659 <- inline_RpnCalc_handle_stack_push_55_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 42 00 

# 00b4a LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_55_tf659 <- inline_RpnCalc_handle_stack_push_55_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 43 00 

# inline_RpnCalc_handle_stack_push_55_t100e <- inline_RpnCalc_handle_stack_push_55_s Add Var(inline_RpnCalc_handle_stack_push_55_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# 00b4d ClearCarry []
#       inline_RpnCalc_handle_stack_push_55_t100e <- inline_RpnCalc_handle_stack_push_55_s Add Var(inline_RpnCalc_handle_stack_push_55_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
03 

# 00b4e AddCarry32_1 [Register(0x3c), Register(0x40), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_55_t100e <- inline_RpnCalc_handle_stack_push_55_s Add Var(inline_RpnCalc_handle_stack_push_55_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
30 3c 40 40 

# 00b52 AddCarry32_2 []
#       inline_RpnCalc_handle_stack_push_55_t100e <- inline_RpnCalc_handle_stack_push_55_s Add Var(inline_RpnCalc_handle_stack_push_55_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
31 

# mem[inline_RpnCalc_handle_stack_push_55_t100e] <- inline_RpnCalc_handle_stack_push_55_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 00b53 Store32_1 [Register(0x38), Register(0x40)]
#       mem[inline_RpnCalc_handle_stack_push_55_t100e] <- inline_RpnCalc_handle_stack_push_55_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 38 40 

# 00b56 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_55_t100e] <- inline_RpnCalc_handle_stack_push_55_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 00b57 Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 00b5a AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 00b60 Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 00b63 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_55_t14ab <- mem[inline_RpnCalc_handle_stack_push_55_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# 00b69 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_55_t14ab <- mem[inline_RpnCalc_handle_stack_push_55_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_stack_push_55_t8f43 <- inline_RpnCalc_handle_stack_push_55_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# 00b6c Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_stack_push_55_t8f43 <- inline_RpnCalc_handle_stack_push_55_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
21 40 38 

# 00b6f AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_stack_push_55_t8f43 <- inline_RpnCalc_handle_stack_push_55_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
32 38 01 00 00 00 

# mem[inline_RpnCalc_handle_stack_push_55_tc957] <- inline_RpnCalc_handle_stack_push_55_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# 00b75 Store32_1 [Register(0x38), Register(0x5c)]
#       mem[inline_RpnCalc_handle_stack_push_55_tc957] <- inline_RpnCalc_handle_stack_push_55_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
23 38 5c 

# 00b78 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_55_tc957] <- inline_RpnCalc_handle_stack_push_55_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
24 

# goto inline_RpnCalc_handle_stack_push_55_function_end_stack_push None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_push_55_function_end_stack_push None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_push_55_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_stack_push_55_function_end_stack_push None
# inline_RpnCalc_handle_stack_push_55_function_end_stack_push
# goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 00b79 JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 24 16 00 

# :RpnCalc_handle_if_else_1_27 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_1_27
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n42/0x2au8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t622 <- 0n42/0x2au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
# Number(0n42/0x2au8)
# 00b7d LoadImm8 [Register(0x63), Constant8(0x2a=42)]
#       t622 <- 0n42/0x2au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
#       Number(0n42/0x2au8)
04 63 2a 

# if tdcd9 == t622 then 'RpnCalc_handle_if_true_2_28' else 'RpnCalc_handle_if_else_2_29' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
# 00b80 Cmp8 [Register(0x44), Register(0x63)]
#       if tdcd9 == t622 then 'RpnCalc_handle_if_true_2_28' else 'RpnCalc_handle_if_else_2_29' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
15 44 63 

# 00b83 JzImm [Label24(RpnCalc_handle_if_true_2_28)]
#       if tdcd9 == t622 then 'RpnCalc_handle_if_true_2_28' else 'RpnCalc_handle_if_else_2_29' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
72 8b 0b 00 

# 00b87 JmpImm [Label24(RpnCalc_handle_if_else_2_29)]
#       if tdcd9 == t622 then 'RpnCalc_handle_if_true_2_28' else 'RpnCalc_handle_if_else_2_29' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
70 31 0f 00 

# :RpnCalc_handle_if_true_2_28 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_2_28
# tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
# Ident("b")
# 00b8b Copy32 [Register(0x3c), Register(0x5c)]
#       tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
#       Ident("b")
21 3c 5c 

# t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
# Ident("a")
# 00b8e Copy32 [Register(0x38), Register(0x48)]
#       t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
#       Ident("a")
21 38 48 

# inline_RpnCalc_handle_mul32_32_12_a <- tace9 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
# 00b91 Copy32 [Register(0x5c), Register(0x38)]
#       inline_RpnCalc_handle_mul32_32_12_a <- tace9 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
21 5c 38 

# inline_RpnCalc_handle_mul32_32_12_b <- t8792 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
# 00b94 Copy32 [Register(0x48), Register(0x5c)]
#       inline_RpnCalc_handle_mul32_32_12_b <- t8792 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
21 48 5c 

# inline_RpnCalc_handle_mul32_32_12_t8792 <- inline_RpnCalc_handle_mul32_32_12_a U32 Some('/lutcomp/programs/lib/mul.j':(30,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_t8792 <- inline_RpnCalc_handle_mul32_32_12_a U32 Some('/lutcomp/programs/lib/mul.j':(30,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_tace9 <- inline_RpnCalc_handle_mul32_32_12_b U32 Some('/lutcomp/programs/lib/mul.j':(30,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_tace9 <- inline_RpnCalc_handle_mul32_32_12_b U32 Some('/lutcomp/programs/lib/mul.j':(30,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a <- inline_RpnCalc_handle_mul32_32_12_t8792 U32 Some('/lutcomp/programs/lib/mul.j':(30,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# 00b97 Copy32 [Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a <- inline_RpnCalc_handle_mul32_32_12_t8792 U32 Some('/lutcomp/programs/lib/mul.j':(30,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
21 38 3c 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b <- inline_RpnCalc_handle_mul32_32_12_tace9 U32 Some('/lutcomp/programs/lib/mul.j':(30,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# 00b9a Copy32 [Register(0x5c), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b <- inline_RpnCalc_handle_mul32_32_12_tace9 U32 Some('/lutcomp/programs/lib/mul.j':(30,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
21 5c 48 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 00b9d Mul8_16 [Register(0x3c), Register(0x48), Register(0x4c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 3c 48 4c 

# 00ba1 LoadImm8 [Register(0x4e), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 4e 00 

# 00ba4 LoadImm8 [Register(0x4f), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 4f 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 00ba7 Copy8 [Register(0x3d), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 3d 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 00baa LoadImm32 [Register(0x54), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 54 00 00 00 00 

# 00bb0 Copy8 [Register(0x60), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 60 54 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 00bb3 Copy8 [Register(0x49), Register(0x63)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 49 63 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 00bb6 LoadImm32 [Register(0x50), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 50 00 00 00 00 

# 00bbc Copy8 [Register(0x63), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 63 50 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 00bbf Mul8_16 [Register(0x54), Register(0x50), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 54 50 50 

# 00bc3 LoadImm8 [Register(0x52), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 52 00 

# 00bc6 LoadImm8 [Register(0x53), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 53 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ec2 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# Index("f", Number(0n1/0x01u8))
# 00bc9 Copy8 [Register(0x51), Register(0x59)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ec2 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
#       Index("f", Number(0n1/0x01u8))
0b 51 59 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# 00bcc Copy8 [Register(0x59), Register(0x53)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
0b 59 53 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t9922 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# Index("f", Number(0n0/0x00u8))
# 00bcf Copy8 [Register(0x50), Register(0x59)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t9922 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
#       Index("f", Number(0n0/0x00u8))
0b 50 59 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# 00bd2 Copy8 [Register(0x59), Register(0x52)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
0b 59 52 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 00bd5 LoadImm8 [Register(0x62), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 62 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# 00bd8 Copy8 [Register(0x62), Register(0x51)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
0b 62 51 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 00bdb LoadImm8 [Register(0x62), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 62 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# 00bde Copy8 [Register(0x62), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
0b 62 50 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 00be1 ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 00be2 AddCarry32_1 [Register(0x4c), Register(0x50), Register(0x4c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 4c 50 4c 

# 00be6 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 00be7 Copy8 [Register(0x49), Register(0x63)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 49 63 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 00bea LoadImm32 [Register(0x50), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 50 00 00 00 00 

# 00bf0 Copy8 [Register(0x63), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 63 50 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 00bf3 Mul8_16 [Register(0x3c), Register(0x50), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 3c 50 50 

# 00bf7 LoadImm8 [Register(0x52), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 52 00 

# 00bfa LoadImm8 [Register(0x53), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 53 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 00bfd Copy8 [Register(0x3d), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 3d 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 00c00 LoadImm32 [Register(0x54), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 54 00 00 00 00 

# 00c06 Copy8 [Register(0x60), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 60 54 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# 00c09 Mul8_16 [Register(0x54), Register(0x48), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
11 54 48 3c 

# 00c0d LoadImm8 [Register(0x3e), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 3e 00 

# 00c10 LoadImm8 [Register(0x3f), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 3f 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 00c13 Copy32 [Register(0x50), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 50 48 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 00c16 ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 00c17 AddCarry32_1 [Register(0x48), Register(0x3c), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 48 3c 50 

# 00c1b AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8575 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# Index("d", Number(0n2/0x02u8))
# 00c1c Copy8 [Register(0x52), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8575 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
#       Index("d", Number(0n2/0x02u8))
0b 52 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# 00c1f Copy8 [Register(0x60), Register(0x53)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
0b 60 53 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t34f7 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# Index("d", Number(0n1/0x01u8))
# 00c22 Copy8 [Register(0x51), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t34f7 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
#       Index("d", Number(0n1/0x01u8))
0b 51 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# 00c25 Copy8 [Register(0x60), Register(0x52)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
0b 60 52 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t30b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# Index("d", Number(0n0/0x00u8))
# 00c28 Copy8 [Register(0x50), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t30b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
#       Index("d", Number(0n0/0x00u8))
0b 50 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# 00c2b Copy8 [Register(0x60), Register(0x51)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
0b 60 51 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 00c2e LoadImm8 [Register(0x62), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 62 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# 00c31 Copy8 [Register(0x62), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
0b 62 50 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 00c34 Copy32 [Register(0x50), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 50 48 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 00c37 ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 00c38 AddCarry32_1 [Register(0x4c), Register(0x48), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 4c 48 3c 

# 00c3c AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# inline_RpnCalc_handle_mul32_32_12_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# 00c3d Copy32 [Register(0x3c), Register(0x4c)]
#       inline_RpnCalc_handle_mul32_32_12_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
21 3c 4c 

# goto inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_function_end_mul16_32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_function_end_mul16_32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_function_end_mul16_32)], resolved: None }
# :inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_function_end_mul16_32 None
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_function_end_mul16_32
# inline_RpnCalc_handle_mul32_32_12_a_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(32,5))
# Assign { target: Ident("a_hi"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 00c40 LoadImm32 [Register(0x3c), Constant32(0x00000000=0)]
#       inline_RpnCalc_handle_mul32_32_12_a_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(32,5))
#       Assign { target: Ident("a_hi"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 3c 00 00 00 00 

# inline_RpnCalc_handle_mul32_32_12_t94df <- inline_RpnCalc_handle_mul32_32_12_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(33,5))
# Assign { target: Index("a_hi", Number(0n1/0x01u8)), var_type: None, value: Index("a", Number(0n3/0x03u8)) }
# Index("a", Number(0n3/0x03u8))
# 00c46 Copy8 [Register(0x3b), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_t94df <- inline_RpnCalc_handle_mul32_32_12_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(33,5))
#       Assign { target: Index("a_hi", Number(0n1/0x01u8)), var_type: None, value: Index("a", Number(0n3/0x03u8)) }
#       Index("a", Number(0n3/0x03u8))
0b 3b 45 

# inline_RpnCalc_handle_mul32_32_12_a_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_t94df U8 Some('/lutcomp/programs/lib/mul.j':(33,5))
# Assign { target: Index("a_hi", Number(0n1/0x01u8)), var_type: None, value: Index("a", Number(0n3/0x03u8)) }
# 00c49 Copy8 [Register(0x45), Register(0x3d)]
#       inline_RpnCalc_handle_mul32_32_12_a_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_t94df U8 Some('/lutcomp/programs/lib/mul.j':(33,5))
#       Assign { target: Index("a_hi", Number(0n1/0x01u8)), var_type: None, value: Index("a", Number(0n3/0x03u8)) }
0b 45 3d 

# inline_RpnCalc_handle_mul32_32_12_t3b02 <- inline_RpnCalc_handle_mul32_32_12_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(34,5))
# Assign { target: Index("a_hi", Number(0n0/0x00u8)), var_type: None, value: Index("a", Number(0n2/0x02u8)) }
# Index("a", Number(0n2/0x02u8))
# 00c4c Copy8 [Register(0x3a), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_t3b02 <- inline_RpnCalc_handle_mul32_32_12_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(34,5))
#       Assign { target: Index("a_hi", Number(0n0/0x00u8)), var_type: None, value: Index("a", Number(0n2/0x02u8)) }
#       Index("a", Number(0n2/0x02u8))
0b 3a 45 

# inline_RpnCalc_handle_mul32_32_12_a_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_t3b02 U8 Some('/lutcomp/programs/lib/mul.j':(34,5))
# Assign { target: Index("a_hi", Number(0n0/0x00u8)), var_type: None, value: Index("a", Number(0n2/0x02u8)) }
# 00c4f Copy8 [Register(0x45), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_a_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_t3b02 U8 Some('/lutcomp/programs/lib/mul.j':(34,5))
#       Assign { target: Index("a_hi", Number(0n0/0x00u8)), var_type: None, value: Index("a", Number(0n2/0x02u8)) }
0b 45 3c 

# inline_RpnCalc_handle_mul32_32_12_b_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(36,5))
# Assign { target: Ident("b_hi"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 00c52 LoadImm32 [Register(0x48), Constant32(0x00000000=0)]
#       inline_RpnCalc_handle_mul32_32_12_b_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(36,5))
#       Assign { target: Ident("b_hi"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 48 00 00 00 00 

# inline_RpnCalc_handle_mul32_32_12_ta5f7 <- inline_RpnCalc_handle_mul32_32_12_b[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(37,5))
# Assign { target: Index("b_hi", Number(0n1/0x01u8)), var_type: None, value: Index("b", Number(0n3/0x03u8)) }
# Index("b", Number(0n3/0x03u8))
# 00c58 Copy8 [Register(0x5f), Register(0x44)]
#       inline_RpnCalc_handle_mul32_32_12_ta5f7 <- inline_RpnCalc_handle_mul32_32_12_b[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(37,5))
#       Assign { target: Index("b_hi", Number(0n1/0x01u8)), var_type: None, value: Index("b", Number(0n3/0x03u8)) }
#       Index("b", Number(0n3/0x03u8))
0b 5f 44 

# inline_RpnCalc_handle_mul32_32_12_b_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_ta5f7 U8 Some('/lutcomp/programs/lib/mul.j':(37,5))
# Assign { target: Index("b_hi", Number(0n1/0x01u8)), var_type: None, value: Index("b", Number(0n3/0x03u8)) }
# 00c5b Copy8 [Register(0x44), Register(0x49)]
#       inline_RpnCalc_handle_mul32_32_12_b_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_ta5f7 U8 Some('/lutcomp/programs/lib/mul.j':(37,5))
#       Assign { target: Index("b_hi", Number(0n1/0x01u8)), var_type: None, value: Index("b", Number(0n3/0x03u8)) }
0b 44 49 

# inline_RpnCalc_handle_mul32_32_12_t82cc <- inline_RpnCalc_handle_mul32_32_12_b[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(38,5))
# Assign { target: Index("b_hi", Number(0n0/0x00u8)), var_type: None, value: Index("b", Number(0n2/0x02u8)) }
# Index("b", Number(0n2/0x02u8))
# 00c5e Copy8 [Register(0x5e), Register(0x44)]
#       inline_RpnCalc_handle_mul32_32_12_t82cc <- inline_RpnCalc_handle_mul32_32_12_b[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(38,5))
#       Assign { target: Index("b_hi", Number(0n0/0x00u8)), var_type: None, value: Index("b", Number(0n2/0x02u8)) }
#       Index("b", Number(0n2/0x02u8))
0b 5e 44 

# inline_RpnCalc_handle_mul32_32_12_b_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_t82cc U8 Some('/lutcomp/programs/lib/mul.j':(38,5))
# Assign { target: Index("b_hi", Number(0n0/0x00u8)), var_type: None, value: Index("b", Number(0n2/0x02u8)) }
# 00c61 Copy8 [Register(0x44), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_b_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_t82cc U8 Some('/lutcomp/programs/lib/mul.j':(38,5))
#       Assign { target: Index("b_hi", Number(0n0/0x00u8)), var_type: None, value: Index("b", Number(0n2/0x02u8)) }
0b 44 48 

# inline_RpnCalc_handle_mul32_32_12_t8fbd <- inline_RpnCalc_handle_mul32_32_12_a_hi U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# Ident("a_hi")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_t8fbd <- inline_RpnCalc_handle_mul32_32_12_a_hi U32 Some('/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\nIdent(\"a_hi\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_tace9 <- inline_RpnCalc_handle_mul32_32_12_b U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_tace9 <- inline_RpnCalc_handle_mul32_32_12_b U32 Some('/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a <- inline_RpnCalc_handle_mul32_32_12_t8fbd U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a <- inline_RpnCalc_handle_mul32_32_12_t8fbd U32 Some('/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b <- inline_RpnCalc_handle_mul32_32_12_tace9 U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b <- inline_RpnCalc_handle_mul32_32_12_tace9 U32 Some('/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 00c64 Mul8_16 [Register(0x3c), Register(0x5c), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 3c 5c 50 

# 00c68 LoadImm8 [Register(0x52), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 52 00 

# 00c6b LoadImm8 [Register(0x53), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 53 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 00c6e Copy8 [Register(0x3d), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 3d 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 00c71 LoadImm32 [Register(0x68), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 68 00 00 00 00 

# 00c77 Copy8 [Register(0x60), Register(0x68)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 60 68 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 00c7a Copy8 [Register(0x5d), Register(0x44)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 5d 44 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 00c7d LoadImm32 [Register(0x54), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 54 00 00 00 00 

# 00c83 Copy8 [Register(0x44), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 44 54 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 00c86 Mul8_16 [Register(0x68), Register(0x54), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 68 54 54 

# 00c8a LoadImm8 [Register(0x56), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 56 00 

# 00c8d LoadImm8 [Register(0x57), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 57 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ec2 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# Index("f", Number(0n1/0x01u8))
# 00c90 Copy8 [Register(0x55), Register(0x62)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ec2 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
#       Index("f", Number(0n1/0x01u8))
0b 55 62 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# 00c93 Copy8 [Register(0x62), Register(0x57)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
0b 62 57 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t9922 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# Index("f", Number(0n0/0x00u8))
# 00c96 Copy8 [Register(0x54), Register(0x62)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t9922 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
#       Index("f", Number(0n0/0x00u8))
0b 54 62 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# 00c99 Copy8 [Register(0x62), Register(0x56)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
0b 62 56 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 00c9c LoadImm8 [Register(0x64), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 64 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# 00c9f Copy8 [Register(0x64), Register(0x55)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
0b 64 55 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 00ca2 LoadImm8 [Register(0x64), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 64 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# 00ca5 Copy8 [Register(0x64), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
0b 64 54 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 00ca8 ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 00ca9 AddCarry32_1 [Register(0x50), Register(0x54), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 50 54 50 

# 00cad AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 00cae Copy8 [Register(0x5d), Register(0x44)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 5d 44 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 00cb1 LoadImm32 [Register(0x54), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 54 00 00 00 00 

# 00cb7 Copy8 [Register(0x44), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 44 54 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 00cba Mul8_16 [Register(0x3c), Register(0x54), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 3c 54 54 

# 00cbe LoadImm8 [Register(0x56), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 56 00 

# 00cc1 LoadImm8 [Register(0x57), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 57 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 00cc4 Copy8 [Register(0x3d), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 3d 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 00cc7 LoadImm32 [Register(0x68), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 68 00 00 00 00 

# 00ccd Copy8 [Register(0x60), Register(0x68)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 60 68 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# 00cd0 Mul8_16 [Register(0x68), Register(0x5c), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
11 68 5c 3c 

# 00cd4 LoadImm8 [Register(0x3e), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 3e 00 

# 00cd7 LoadImm8 [Register(0x3f), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 3f 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 00cda Copy32 [Register(0x54), Register(0x5c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 54 5c 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 00cdd ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 00cde AddCarry32_1 [Register(0x5c), Register(0x3c), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 5c 3c 54 

# 00ce2 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8575 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# Index("d", Number(0n2/0x02u8))
# 00ce3 Copy8 [Register(0x56), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8575 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
#       Index("d", Number(0n2/0x02u8))
0b 56 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# 00ce6 Copy8 [Register(0x60), Register(0x57)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
0b 60 57 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t34f7 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# Index("d", Number(0n1/0x01u8))
# 00ce9 Copy8 [Register(0x55), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t34f7 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
#       Index("d", Number(0n1/0x01u8))
0b 55 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# 00cec Copy8 [Register(0x60), Register(0x56)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
0b 60 56 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t30b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# Index("d", Number(0n0/0x00u8))
# 00cef Copy8 [Register(0x54), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t30b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
#       Index("d", Number(0n0/0x00u8))
0b 54 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# 00cf2 Copy8 [Register(0x60), Register(0x55)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
0b 60 55 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 00cf5 LoadImm8 [Register(0x64), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 64 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# 00cf8 Copy8 [Register(0x64), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
0b 64 54 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 00cfb Copy32 [Register(0x54), Register(0x5c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 54 5c 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 00cfe ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 00cff AddCarry32_1 [Register(0x50), Register(0x5c), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 50 5c 3c 

# 00d03 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# inline_RpnCalc_handle_mul32_32_12_t6afc <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# 00d04 Copy32 [Register(0x3c), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_t6afc <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
21 3c 54 

# goto inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_function_end_mul16_32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_function_end_mul16_32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_function_end_mul16_32)], resolved: None }
# :inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_function_end_mul16_32 None
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_function_end_mul16_32
# inline_RpnCalc_handle_mul32_32_12_t8792 <- inline_RpnCalc_handle_mul32_32_12_a U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_t8792 <- inline_RpnCalc_handle_mul32_32_12_a U32 Some('/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_t5cca <- inline_RpnCalc_handle_mul32_32_12_b_hi U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# Ident("b_hi")
# 00d07 Copy32 [Register(0x48), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_t5cca <- inline_RpnCalc_handle_mul32_32_12_b_hi U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
#       Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
#       Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
#       Ident("b_hi")
21 48 3c 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a <- inline_RpnCalc_handle_mul32_32_12_t8792 U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a <- inline_RpnCalc_handle_mul32_32_12_t8792 U32 Some('/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b <- inline_RpnCalc_handle_mul32_32_12_t5cca U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b <- inline_RpnCalc_handle_mul32_32_12_t5cca U32 Some('/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 00d0a Mul8_16 [Register(0x38), Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 38 3c 5c 

# 00d0e LoadImm8 [Register(0x5e), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 5e 00 

# 00d11 LoadImm8 [Register(0x5f), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 5f 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 00d14 Copy8 [Register(0x39), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 39 45 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 00d17 LoadImm32 [Register(0x50), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 50 00 00 00 00 

# 00d1d Copy8 [Register(0x45), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 45 50 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 00d20 Copy8 [Register(0x3d), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 3d 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 00d23 LoadImm32 [Register(0x48), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 48 00 00 00 00 

# 00d29 Copy8 [Register(0x60), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 60 48 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 00d2c Mul8_16 [Register(0x50), Register(0x48), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 50 48 48 

# 00d30 LoadImm8 [Register(0x4a), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 4a 00 

# 00d33 LoadImm8 [Register(0x4b), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 4b 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ec2 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# Index("f", Number(0n1/0x01u8))
# 00d36 Copy8 [Register(0x49), Register(0x63)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ec2 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
#       Index("f", Number(0n1/0x01u8))
0b 49 63 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# 00d39 Copy8 [Register(0x63), Register(0x4b)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
0b 63 4b 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t9922 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# Index("f", Number(0n0/0x00u8))
# 00d3c Copy8 [Register(0x48), Register(0x63)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t9922 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
#       Index("f", Number(0n0/0x00u8))
0b 48 63 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# 00d3f Copy8 [Register(0x63), Register(0x4a)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
0b 63 4a 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 00d42 LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 59 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# 00d45 Copy8 [Register(0x59), Register(0x49)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
0b 59 49 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 00d48 LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 59 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# 00d4b Copy8 [Register(0x59), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
0b 59 48 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 00d4e ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 00d4f AddCarry32_1 [Register(0x5c), Register(0x48), Register(0x5c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 5c 48 5c 

# 00d53 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 00d54 Copy8 [Register(0x3d), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 3d 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 00d57 LoadImm32 [Register(0x48), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 48 00 00 00 00 

# 00d5d Copy8 [Register(0x60), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 60 48 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 00d60 Mul8_16 [Register(0x38), Register(0x48), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 38 48 48 

# 00d64 LoadImm8 [Register(0x4a), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 4a 00 

# 00d67 LoadImm8 [Register(0x4b), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 4b 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 00d6a Copy8 [Register(0x39), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 39 45 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 00d6d LoadImm32 [Register(0x50), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 50 00 00 00 00 

# 00d73 Copy8 [Register(0x45), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 45 50 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# 00d76 Mul8_16 [Register(0x50), Register(0x3c), Register(0x38)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
11 50 3c 38 

# 00d7a LoadImm8 [Register(0x3a), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 3a 00 

# 00d7d LoadImm8 [Register(0x3b), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 3b 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 00d80 Copy32 [Register(0x48), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 48 3c 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 00d83 ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 00d84 AddCarry32_1 [Register(0x3c), Register(0x38), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 3c 38 48 

# 00d88 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8575 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# Index("d", Number(0n2/0x02u8))
# 00d89 Copy8 [Register(0x4a), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8575 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
#       Index("d", Number(0n2/0x02u8))
0b 4a 45 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# 00d8c Copy8 [Register(0x45), Register(0x4b)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
0b 45 4b 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t34f7 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# Index("d", Number(0n1/0x01u8))
# 00d8f Copy8 [Register(0x49), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t34f7 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
#       Index("d", Number(0n1/0x01u8))
0b 49 45 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# 00d92 Copy8 [Register(0x45), Register(0x4a)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
0b 45 4a 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t30b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# Index("d", Number(0n0/0x00u8))
# 00d95 Copy8 [Register(0x48), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t30b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
#       Index("d", Number(0n0/0x00u8))
0b 48 45 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# 00d98 Copy8 [Register(0x45), Register(0x49)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
0b 45 49 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 00d9b LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 59 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# 00d9e Copy8 [Register(0x59), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
0b 59 48 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 00da1 Copy32 [Register(0x48), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 48 3c 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 00da4 ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 00da5 AddCarry32_1 [Register(0x5c), Register(0x3c), Register(0x38)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 5c 3c 38 

# 00da9 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# inline_RpnCalc_handle_mul32_32_12_tbe0a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_tbe0a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# goto inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_function_end_mul16_32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_function_end_mul16_32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_function_end_mul16_32)], resolved: None }
# :inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_function_end_mul16_32 None
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_function_end_mul16_32
# inline_RpnCalc_handle_mul32_32_12_d <- inline_RpnCalc_handle_mul32_32_12_t6afc Add Var(inline_RpnCalc_handle_mul32_32_12_tbe0a) Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# 00daa ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_d <- inline_RpnCalc_handle_mul32_32_12_t6afc Add Var(inline_RpnCalc_handle_mul32_32_12_tbe0a) Some('/lutcomp/programs/lib/mul.j':(40,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
#       Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
03 

# 00dab AddCarry32_1 [Register(0x54), Register(0x38), Register(0x38)]
#       inline_RpnCalc_handle_mul32_32_12_d <- inline_RpnCalc_handle_mul32_32_12_t6afc Add Var(inline_RpnCalc_handle_mul32_32_12_tbe0a) Some('/lutcomp/programs/lib/mul.j':(40,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
#       Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
30 54 38 38 

# 00daf AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_d <- inline_RpnCalc_handle_mul32_32_12_t6afc Add Var(inline_RpnCalc_handle_mul32_32_12_tbe0a) Some('/lutcomp/programs/lib/mul.j':(40,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
#       Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
31 

# inline_RpnCalc_handle_mul32_32_12_t34f7 <- inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(41,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# Index("d", Number(0n1/0x01u8))
# 00db0 Copy8 [Register(0x39), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_t34f7 <- inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(41,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
#       Index("d", Number(0n1/0x01u8))
0b 39 45 

# inline_RpnCalc_handle_mul32_32_12_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(41,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# 00db3 Copy8 [Register(0x45), Register(0x3b)]
#       inline_RpnCalc_handle_mul32_32_12_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(41,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
0b 45 3b 

# inline_RpnCalc_handle_mul32_32_12_t30b9 <- inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(42,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# Index("d", Number(0n0/0x00u8))
# 00db6 Copy8 [Register(0x38), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_t30b9 <- inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(42,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
#       Index("d", Number(0n0/0x00u8))
0b 38 45 

# inline_RpnCalc_handle_mul32_32_12_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(42,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# 00db9 Copy8 [Register(0x45), Register(0x3a)]
#       inline_RpnCalc_handle_mul32_32_12_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(42,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
0b 45 3a 

# inline_RpnCalc_handle_mul32_32_12_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(43,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 00dbc LoadImm8 [Register(0x60), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(43,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 60 00 

# inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(43,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# 00dbf Copy8 [Register(0x60), Register(0x39)]
#       inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(43,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
0b 60 39 

# inline_RpnCalc_handle_mul32_32_12_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(44,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 00dc2 LoadImm8 [Register(0x60), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(44,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 60 00 

# inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(44,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# 00dc5 Copy8 [Register(0x60), Register(0x38)]
#       inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(44,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
0b 60 38 

# inline_RpnCalc_handle_mul32_32_12_tac13 <- inline_RpnCalc_handle_mul32_32_12_c U32 Some('/lutcomp/programs/lib/mul.j':(45,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# 00dc8 Copy32 [Register(0x4c), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_tac13 <- inline_RpnCalc_handle_mul32_32_12_c U32 Some('/lutcomp/programs/lib/mul.j':(45,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("c")
21 4c 3c 

# inline_RpnCalc_handle_mul32_32_12_t45f5 <- inline_RpnCalc_handle_mul32_32_12_d U32 Some('/lutcomp/programs/lib/mul.j':(45,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_t45f5 <- inline_RpnCalc_handle_mul32_32_12_d U32 Some('/lutcomp/programs/lib/mul.j':(45,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"d\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_ta65d <- inline_RpnCalc_handle_mul32_32_12_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_t45f5) Some('/lutcomp/programs/lib/mul.j':(45,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 00dcb ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_ta65d <- inline_RpnCalc_handle_mul32_32_12_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_t45f5) Some('/lutcomp/programs/lib/mul.j':(45,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 00dcc AddCarry32_1 [Register(0x3c), Register(0x38), Register(0x38)]
#       inline_RpnCalc_handle_mul32_32_12_ta65d <- inline_RpnCalc_handle_mul32_32_12_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_t45f5) Some('/lutcomp/programs/lib/mul.j':(45,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 3c 38 38 

# 00dd0 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_ta65d <- inline_RpnCalc_handle_mul32_32_12_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_t45f5) Some('/lutcomp/programs/lib/mul.j':(45,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# product <- inline_RpnCalc_handle_mul32_32_12_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(45,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# 00dd1 Copy32 [Register(0x38), Register(0x5c)]
#       product <- inline_RpnCalc_handle_mul32_32_12_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(45,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
21 38 5c 

# goto inline_RpnCalc_handle_mul32_32_12_function_end_mul32_32 Some('/lutcomp/programs/lib/mul.j':(45,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_mul32_32_12_function_end_mul32_32 Some('/lutcomp/programs/lib/mul.j':(45,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_mul32_32_12_function_end_mul32_32)], resolved: None }
# :inline_RpnCalc_handle_mul32_32_12_function_end_mul32_32 None
# inline_RpnCalc_handle_mul32_32_12_function_end_mul32_32
# t2754 <- product U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("product")] })
# Ident("product")
# 00dd4 Copy32 [Register(0x5c), Register(0x38)]
#       t2754 <- product U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
#       Ident("product")
21 5c 38 

# None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("product")] })
# 00dd7 Copy32 [Register(0x38), Register(0x00)]
#       Arg0[a]=t2754 None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
21 38 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 204, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252}
# Registers to save: [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107]
# 00dda Push8 [Register(0x6b)]
#       Saving reg0x6b before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 6b 

# 00ddc Push8 [Register(0x6a)]
#       Saving reg0x6a before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 6a 

# 00dde Push8 [Register(0x69)]
#       Saving reg0x69 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 69 

# 00de0 Push8 [Register(0x68)]
#       Saving reg0x68 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 68 

# 00de2 Push8 [Register(0x64)]
#       Saving reg0x64 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 64 

# 00de4 Push8 [Register(0x63)]
#       Saving reg0x63 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 63 

# 00de6 Push8 [Register(0x62)]
#       Saving reg0x62 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 62 

# 00de8 Push8 [Register(0x61)]
#       Saving reg0x61 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 61 

# 00dea Push8 [Register(0x60)]
#       Saving reg0x60 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 60 

# 00dec Push8 [Register(0x5f)]
#       Saving reg0x5f before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 5f 

# 00dee Push8 [Register(0x5e)]
#       Saving reg0x5e before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 5e 

# 00df0 Push8 [Register(0x5d)]
#       Saving reg0x5d before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 5d 

# 00df2 Push8 [Register(0x5c)]
#       Saving reg0x5c before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 5c 

# 00df4 Push8 [Register(0x59)]
#       Saving reg0x59 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 59 

# 00df6 Push8 [Register(0x58)]
#       Saving reg0x58 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 58 

# 00df8 Push8 [Register(0x57)]
#       Saving reg0x57 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 57 

# 00dfa Push8 [Register(0x56)]
#       Saving reg0x56 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 56 

# 00dfc Push8 [Register(0x55)]
#       Saving reg0x55 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 55 

# 00dfe Push8 [Register(0x54)]
#       Saving reg0x54 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 54 

# 00e00 Push8 [Register(0x53)]
#       Saving reg0x53 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 53 

# 00e02 Push8 [Register(0x52)]
#       Saving reg0x52 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 52 

# 00e04 Push8 [Register(0x51)]
#       Saving reg0x51 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 51 

# 00e06 Push8 [Register(0x50)]
#       Saving reg0x50 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 50 

# 00e08 Push8 [Register(0x4f)]
#       Saving reg0x4f before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 4f 

# 00e0a Push8 [Register(0x4e)]
#       Saving reg0x4e before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 4e 

# 00e0c Push8 [Register(0x4d)]
#       Saving reg0x4d before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 4d 

# 00e0e Push8 [Register(0x4c)]
#       Saving reg0x4c before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 4c 

# 00e10 Push8 [Register(0x4b)]
#       Saving reg0x4b before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 4b 

# 00e12 Push8 [Register(0x4a)]
#       Saving reg0x4a before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 4a 

# 00e14 Push8 [Register(0x49)]
#       Saving reg0x49 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 49 

# 00e16 Push8 [Register(0x48)]
#       Saving reg0x48 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 48 

# 00e18 Push8 [Register(0x45)]
#       Saving reg0x45 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 45 

# 00e1a Push8 [Register(0x44)]
#       Saving reg0x44 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 44 

# 00e1c Push8 [Register(0x43)]
#       Saving reg0x43 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 43 

# 00e1e Push8 [Register(0x42)]
#       Saving reg0x42 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 42 

# 00e20 Push8 [Register(0x41)]
#       Saving reg0x41 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 41 

# 00e22 Push8 [Register(0x40)]
#       Saving reg0x40 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 40 

# 00e24 Push8 [Register(0x3f)]
#       Saving reg0x3f before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 3f 

# 00e26 Push8 [Register(0x3e)]
#       Saving reg0x3e before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 3e 

# 00e28 Push8 [Register(0x3d)]
#       Saving reg0x3d before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 3d 

# 00e2a Push8 [Register(0x3c)]
#       Saving reg0x3c before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 3c 

# 00e2c Push8 [Register(0x3b)]
#       Saving reg0x3b before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 3b 

# 00e2e Push8 [Register(0x3a)]
#       Saving reg0x3a before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 3a 

# 00e30 Push8 [Register(0x39)]
#       Saving reg0x39 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 39 

# 00e32 Push8 [Register(0x38)]
#       Saving reg0x38 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 38 

# 00e34 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec32))
32 0c fc ff ff ff 

# 00e3a StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec32))
25 0c 44 0e 00 00 

# 00e40 JmpImm [Label24(:print_dec32)]
#       PseudoCall(Label24(:print_dec32))
70 6b 27 00 

# 00e44 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec32))
32 0c 04 00 00 00 

# 00e4a Pop8 [Register(0x38)]
#       Restoring reg0x38 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 38 

# 00e4c Pop8 [Register(0x39)]
#       Restoring reg0x39 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 39 

# 00e4e Pop8 [Register(0x3a)]
#       Restoring reg0x3a after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 3a 

# 00e50 Pop8 [Register(0x3b)]
#       Restoring reg0x3b after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 3b 

# 00e52 Pop8 [Register(0x3c)]
#       Restoring reg0x3c after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 3c 

# 00e54 Pop8 [Register(0x3d)]
#       Restoring reg0x3d after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 3d 

# 00e56 Pop8 [Register(0x3e)]
#       Restoring reg0x3e after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 3e 

# 00e58 Pop8 [Register(0x3f)]
#       Restoring reg0x3f after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 3f 

# 00e5a Pop8 [Register(0x40)]
#       Restoring reg0x40 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 40 

# 00e5c Pop8 [Register(0x41)]
#       Restoring reg0x41 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 41 

# 00e5e Pop8 [Register(0x42)]
#       Restoring reg0x42 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 42 

# 00e60 Pop8 [Register(0x43)]
#       Restoring reg0x43 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 43 

# 00e62 Pop8 [Register(0x44)]
#       Restoring reg0x44 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 44 

# 00e64 Pop8 [Register(0x45)]
#       Restoring reg0x45 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 45 

# 00e66 Pop8 [Register(0x48)]
#       Restoring reg0x48 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 48 

# 00e68 Pop8 [Register(0x49)]
#       Restoring reg0x49 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 49 

# 00e6a Pop8 [Register(0x4a)]
#       Restoring reg0x4a after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 4a 

# 00e6c Pop8 [Register(0x4b)]
#       Restoring reg0x4b after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 4b 

# 00e6e Pop8 [Register(0x4c)]
#       Restoring reg0x4c after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 4c 

# 00e70 Pop8 [Register(0x4d)]
#       Restoring reg0x4d after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 4d 

# 00e72 Pop8 [Register(0x4e)]
#       Restoring reg0x4e after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 4e 

# 00e74 Pop8 [Register(0x4f)]
#       Restoring reg0x4f after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 4f 

# 00e76 Pop8 [Register(0x50)]
#       Restoring reg0x50 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 50 

# 00e78 Pop8 [Register(0x51)]
#       Restoring reg0x51 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 51 

# 00e7a Pop8 [Register(0x52)]
#       Restoring reg0x52 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 52 

# 00e7c Pop8 [Register(0x53)]
#       Restoring reg0x53 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 53 

# 00e7e Pop8 [Register(0x54)]
#       Restoring reg0x54 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 54 

# 00e80 Pop8 [Register(0x55)]
#       Restoring reg0x55 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 55 

# 00e82 Pop8 [Register(0x56)]
#       Restoring reg0x56 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 56 

# 00e84 Pop8 [Register(0x57)]
#       Restoring reg0x57 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 57 

# 00e86 Pop8 [Register(0x58)]
#       Restoring reg0x58 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 58 

# 00e88 Pop8 [Register(0x59)]
#       Restoring reg0x59 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 59 

# 00e8a Pop8 [Register(0x5c)]
#       Restoring reg0x5c after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 5c 

# 00e8c Pop8 [Register(0x5d)]
#       Restoring reg0x5d after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 5d 

# 00e8e Pop8 [Register(0x5e)]
#       Restoring reg0x5e after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 5e 

# 00e90 Pop8 [Register(0x5f)]
#       Restoring reg0x5f after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 5f 

# 00e92 Pop8 [Register(0x60)]
#       Restoring reg0x60 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 60 

# 00e94 Pop8 [Register(0x61)]
#       Restoring reg0x61 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 61 

# 00e96 Pop8 [Register(0x62)]
#       Restoring reg0x62 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 62 

# 00e98 Pop8 [Register(0x63)]
#       Restoring reg0x63 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 63 

# 00e9a Pop8 [Register(0x64)]
#       Restoring reg0x64 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 64 

# 00e9c Pop8 [Register(0x68)]
#       Restoring reg0x68 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 68 

# 00e9e Pop8 [Register(0x69)]
#       Restoring reg0x69 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 69 

# 00ea0 Pop8 [Register(0x6a)]
#       Restoring reg0x6a after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 6a 

# 00ea2 Pop8 [Register(0x6b)]
#       Restoring reg0x6b after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 6b 

# t25ee <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }
# Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] })
# Number(0n10/0x0au8)
# 00ea4 LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       t25ee <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }
#       Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] })
#       Number(0n10/0x0au8)
04 60 0a 

# inline_RpnCalc_handle_putc_21_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_21_tac13 <- inline_RpnCalc_handle_putc_21_c U8` with constant `inline_RpnCalc_handle_putc_21_tac13 <- 0n10/0x0au8 `.
# 00ea7 LoadImm8 [Register(0x45), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_21_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_21_tac13 <- inline_RpnCalc_handle_putc_21_c U8` with constant `inline_RpnCalc_handle_putc_21_tac13 <- 0n10/0x0au8 `.
04 45 0a 

# None <= call io_write0(inline_RpnCalc_handle_putc_21_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 00eaa Out0 [Register(0x45)]
#       IoWrite0
68 45 

# inline_RpnCalc_handle_putc_21_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 00eac LoadImm32 [Register(0x38), Constant32(0x000f105c=987228)]
#       inline_RpnCalc_handle_putc_21_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
20 38 5c 10 0f 00 

# inline_RpnCalc_handle_putc_21_t76c7 <- mem[inline_RpnCalc_handle_putc_21_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 00eb2 Load8 [Register(0x38), Register(0x45)]
#       inline_RpnCalc_handle_putc_21_t76c7 <- mem[inline_RpnCalc_handle_putc_21_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
05 38 45 

# inline_RpnCalc_handle_putc_21_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 00eb5 LoadImm8 [Register(0x60), Constant8(0x00=0)]
#       inline_RpnCalc_handle_putc_21_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 60 00 

# if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_putc_21_ta97f then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# 00eb8 Cmp8 [Register(0x45), Register(0x60)]
#       if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_putc_21_ta97f then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
15 45 60 

# 00ebb JzImm [Label24(inline_RpnCalc_handle_putc_21_putc_if_else_0_2)]
#       if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_putc_21_ta97f then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
72 df 0e 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_putc_21_ta97f then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_21_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_21_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_21_putc_if_true_0_1
# inline_RpnCalc_handle_putc_21_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_21_tac13 <- inline_RpnCalc_handle_putc_21_c U8` with constant `inline_RpnCalc_handle_putc_21_tac13 <- 0n10/0x0au8 `.
# 00ebf LoadImm8 [Register(0x45), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_21_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_21_tac13 <- inline_RpnCalc_handle_putc_21_c U8` with constant `inline_RpnCalc_handle_putc_21_tac13 <- 0n10/0x0au8 `.
04 45 0a 

# None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 00ec2 Copy8 [Register(0x45), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_21_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 45 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 140, 141, 142, 143, 144, 145, 146, 147, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252}
# Registers to save: []
# 00ec5 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 00ecb StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c d5 0e 00 00 

# 00ed1 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 67 1f 00 

# 00ed5 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_RpnCalc_handle_putc_21_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 00edb JmpImm [Label24(inline_RpnCalc_handle_putc_21_putc_if_end_0)]
#       goto inline_RpnCalc_handle_putc_21_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 df 0e 00 

# :inline_RpnCalc_handle_putc_21_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_21_putc_if_else_0_2
# :inline_RpnCalc_handle_putc_21_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_21_putc_if_end_0
# goto inline_RpnCalc_handle_putc_21_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_21_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_21_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_21_function_end_putc None
# inline_RpnCalc_handle_putc_21_function_end_putc
# tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })
# Ident("stack")
# optimized away noop copy Instruction { source: "tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] })\nIdent(\"stack\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# t2754 <- product U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })
# Ident("product")
# 00edf Copy32 [Register(0x5c), Register(0x38)]
#       t2754 <- product U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })
#       Ident("product")
21 5c 38 

# inline_RpnCalc_handle_stack_push_56_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })
# 00ee2 Copy32 [Register(0x40), Register(0x3c)]
#       inline_RpnCalc_handle_stack_push_56_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })
21 40 3c 

# inline_RpnCalc_handle_stack_push_56_n <- t2754 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_56_n <- t2754 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] })\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 00ee5 Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 00ee8 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_56_t14ab <- mem[inline_RpnCalc_handle_stack_push_56_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# 00eee Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_56_t14ab <- mem[inline_RpnCalc_handle_stack_push_56_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_stack_push_56_tf659 <- inline_RpnCalc_handle_stack_push_56_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# 00ef1 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_push_56_tf659 <- inline_RpnCalc_handle_stack_push_56_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
20 00 04 00 00 00 

# 00ef7 Mul8_16 [Register(0x40), Register(0x00), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_56_tf659 <- inline_RpnCalc_handle_stack_push_56_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
11 40 00 40 

# 00efb LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_56_tf659 <- inline_RpnCalc_handle_stack_push_56_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 42 00 

# 00efe LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_56_tf659 <- inline_RpnCalc_handle_stack_push_56_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 43 00 

# inline_RpnCalc_handle_stack_push_56_t100e <- inline_RpnCalc_handle_stack_push_56_s Add Var(inline_RpnCalc_handle_stack_push_56_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# 00f01 ClearCarry []
#       inline_RpnCalc_handle_stack_push_56_t100e <- inline_RpnCalc_handle_stack_push_56_s Add Var(inline_RpnCalc_handle_stack_push_56_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
03 

# 00f02 AddCarry32_1 [Register(0x3c), Register(0x40), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_56_t100e <- inline_RpnCalc_handle_stack_push_56_s Add Var(inline_RpnCalc_handle_stack_push_56_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
30 3c 40 40 

# 00f06 AddCarry32_2 []
#       inline_RpnCalc_handle_stack_push_56_t100e <- inline_RpnCalc_handle_stack_push_56_s Add Var(inline_RpnCalc_handle_stack_push_56_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
31 

# mem[inline_RpnCalc_handle_stack_push_56_t100e] <- inline_RpnCalc_handle_stack_push_56_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 00f07 Store32_1 [Register(0x38), Register(0x40)]
#       mem[inline_RpnCalc_handle_stack_push_56_t100e] <- inline_RpnCalc_handle_stack_push_56_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 38 40 

# 00f0a Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_56_t100e] <- inline_RpnCalc_handle_stack_push_56_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 00f0b Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 00f0e AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 00f14 Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 00f17 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_56_t14ab <- mem[inline_RpnCalc_handle_stack_push_56_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# 00f1d Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_56_t14ab <- mem[inline_RpnCalc_handle_stack_push_56_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_stack_push_56_t8f43 <- inline_RpnCalc_handle_stack_push_56_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# 00f20 Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_stack_push_56_t8f43 <- inline_RpnCalc_handle_stack_push_56_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
21 40 38 

# 00f23 AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_stack_push_56_t8f43 <- inline_RpnCalc_handle_stack_push_56_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
32 38 01 00 00 00 

# mem[inline_RpnCalc_handle_stack_push_56_tc957] <- inline_RpnCalc_handle_stack_push_56_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# 00f29 Store32_1 [Register(0x38), Register(0x5c)]
#       mem[inline_RpnCalc_handle_stack_push_56_tc957] <- inline_RpnCalc_handle_stack_push_56_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
23 38 5c 

# 00f2c Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_56_tc957] <- inline_RpnCalc_handle_stack_push_56_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
24 

# goto inline_RpnCalc_handle_stack_push_56_function_end_stack_push None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_push_56_function_end_stack_push None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_push_56_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_stack_push_56_function_end_stack_push None
# inline_RpnCalc_handle_stack_push_56_function_end_stack_push
# goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 00f2d JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 24 16 00 

# :RpnCalc_handle_if_else_2_29 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_2_29
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n47/0x2fu8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t13c5 <- 0n47/0x2fu8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
# Number(0n47/0x2fu8)
# 00f31 LoadImm8 [Register(0x63), Constant8(0x2f=47)]
#       t13c5 <- 0n47/0x2fu8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
#       Number(0n47/0x2fu8)
04 63 2f 

# if tdcd9 == t13c5 then 'RpnCalc_handle_if_true_3_30' else 'RpnCalc_handle_if_else_3_31' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
# 00f34 Cmp8 [Register(0x44), Register(0x63)]
#       if tdcd9 == t13c5 then 'RpnCalc_handle_if_true_3_30' else 'RpnCalc_handle_if_else_3_31' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
15 44 63 

# 00f37 JzImm [Label24(RpnCalc_handle_if_true_3_30)]
#       if tdcd9 == t13c5 then 'RpnCalc_handle_if_true_3_30' else 'RpnCalc_handle_if_else_3_31' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
72 3f 0f 00 

# 00f3b JmpImm [Label24(RpnCalc_handle_if_else_3_31)]
#       if tdcd9 == t13c5 then 'RpnCalc_handle_if_true_3_30' else 'RpnCalc_handle_if_else_3_31' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
70 75 11 00 

# :RpnCalc_handle_if_true_3_30 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_3_30
# tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
# Ident("b")
# 00f3f Copy32 [Register(0x3c), Register(0x5c)]
#       tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
#       Ident("b")
21 3c 5c 

# t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
# Ident("a")
# 00f42 Copy32 [Register(0x38), Register(0x48)]
#       t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
#       Ident("a")
21 38 48 

# Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
# 00f45 Copy32 [Register(0x5c), Register(0x00)]
#       Arg0[a]=tace9 Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
21 5c 00 

# 00f48 Copy32 [Register(0x48), Register(0x04)]
#       Arg1[b]=t8792 Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
21 48 04 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107}
# Registers used by callee tree: {52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203}
# Registers to save: [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107]
# 00f4b Push8 [Register(0x6b)]
#       Saving reg0x6b before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 6b 

# 00f4d Push8 [Register(0x6a)]
#       Saving reg0x6a before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 6a 

# 00f4f Push8 [Register(0x69)]
#       Saving reg0x69 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 69 

# 00f51 Push8 [Register(0x68)]
#       Saving reg0x68 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 68 

# 00f53 Push8 [Register(0x64)]
#       Saving reg0x64 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 64 

# 00f55 Push8 [Register(0x63)]
#       Saving reg0x63 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 63 

# 00f57 Push8 [Register(0x62)]
#       Saving reg0x62 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 62 

# 00f59 Push8 [Register(0x61)]
#       Saving reg0x61 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 61 

# 00f5b Push8 [Register(0x60)]
#       Saving reg0x60 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 60 

# 00f5d Push8 [Register(0x5f)]
#       Saving reg0x5f before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 5f 

# 00f5f Push8 [Register(0x5e)]
#       Saving reg0x5e before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 5e 

# 00f61 Push8 [Register(0x5d)]
#       Saving reg0x5d before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 5d 

# 00f63 Push8 [Register(0x5c)]
#       Saving reg0x5c before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 5c 

# 00f65 Push8 [Register(0x59)]
#       Saving reg0x59 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 59 

# 00f67 Push8 [Register(0x58)]
#       Saving reg0x58 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 58 

# 00f69 Push8 [Register(0x57)]
#       Saving reg0x57 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 57 

# 00f6b Push8 [Register(0x56)]
#       Saving reg0x56 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 56 

# 00f6d Push8 [Register(0x55)]
#       Saving reg0x55 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 55 

# 00f6f Push8 [Register(0x54)]
#       Saving reg0x54 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 54 

# 00f71 Push8 [Register(0x53)]
#       Saving reg0x53 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 53 

# 00f73 Push8 [Register(0x52)]
#       Saving reg0x52 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 52 

# 00f75 Push8 [Register(0x51)]
#       Saving reg0x51 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 51 

# 00f77 Push8 [Register(0x50)]
#       Saving reg0x50 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 50 

# 00f79 Push8 [Register(0x4f)]
#       Saving reg0x4f before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 4f 

# 00f7b Push8 [Register(0x4e)]
#       Saving reg0x4e before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 4e 

# 00f7d Push8 [Register(0x4d)]
#       Saving reg0x4d before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 4d 

# 00f7f Push8 [Register(0x4c)]
#       Saving reg0x4c before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 4c 

# 00f81 Push8 [Register(0x4b)]
#       Saving reg0x4b before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 4b 

# 00f83 Push8 [Register(0x4a)]
#       Saving reg0x4a before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 4a 

# 00f85 Push8 [Register(0x49)]
#       Saving reg0x49 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 49 

# 00f87 Push8 [Register(0x48)]
#       Saving reg0x48 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 48 

# 00f89 Push8 [Register(0x45)]
#       Saving reg0x45 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 45 

# 00f8b Push8 [Register(0x44)]
#       Saving reg0x44 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 44 

# 00f8d Push8 [Register(0x43)]
#       Saving reg0x43 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 43 

# 00f8f Push8 [Register(0x42)]
#       Saving reg0x42 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 42 

# 00f91 Push8 [Register(0x41)]
#       Saving reg0x41 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 41 

# 00f93 Push8 [Register(0x40)]
#       Saving reg0x40 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 40 

# 00f95 Push8 [Register(0x3f)]
#       Saving reg0x3f before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 3f 

# 00f97 Push8 [Register(0x3e)]
#       Saving reg0x3e before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 3e 

# 00f99 Push8 [Register(0x3d)]
#       Saving reg0x3d before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 3d 

# 00f9b Push8 [Register(0x3c)]
#       Saving reg0x3c before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 3c 

# 00f9d Push8 [Register(0x3b)]
#       Saving reg0x3b before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 3b 

# 00f9f Push8 [Register(0x3a)]
#       Saving reg0x3a before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 3a 

# 00fa1 Push8 [Register(0x39)]
#       Saving reg0x39 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 39 

# 00fa3 Push8 [Register(0x38)]
#       Saving reg0x38 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 38 

# 00fa5 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:div32))
32 0c fc ff ff ff 

# 00fab StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:div32))
25 0c b5 0f 00 00 

# 00fb1 JmpImm [Label24(:div32)]
#       PseudoCall(Label24(:div32))
70 03 18 00 

# 00fb5 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:div32))
32 0c 04 00 00 00 

# 00fbb Pop8 [Register(0x38)]
#       Restoring reg0x38 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 38 

# 00fbd Pop8 [Register(0x39)]
#       Restoring reg0x39 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 39 

# 00fbf Pop8 [Register(0x3a)]
#       Restoring reg0x3a after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 3a 

# 00fc1 Pop8 [Register(0x3b)]
#       Restoring reg0x3b after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 3b 

# 00fc3 Pop8 [Register(0x3c)]
#       Restoring reg0x3c after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 3c 

# 00fc5 Pop8 [Register(0x3d)]
#       Restoring reg0x3d after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 3d 

# 00fc7 Pop8 [Register(0x3e)]
#       Restoring reg0x3e after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 3e 

# 00fc9 Pop8 [Register(0x3f)]
#       Restoring reg0x3f after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 3f 

# 00fcb Pop8 [Register(0x40)]
#       Restoring reg0x40 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 40 

# 00fcd Pop8 [Register(0x41)]
#       Restoring reg0x41 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 41 

# 00fcf Pop8 [Register(0x42)]
#       Restoring reg0x42 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 42 

# 00fd1 Pop8 [Register(0x43)]
#       Restoring reg0x43 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 43 

# 00fd3 Pop8 [Register(0x44)]
#       Restoring reg0x44 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 44 

# 00fd5 Pop8 [Register(0x45)]
#       Restoring reg0x45 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 45 

# 00fd7 Pop8 [Register(0x48)]
#       Restoring reg0x48 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 48 

# 00fd9 Pop8 [Register(0x49)]
#       Restoring reg0x49 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 49 

# 00fdb Pop8 [Register(0x4a)]
#       Restoring reg0x4a after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 4a 

# 00fdd Pop8 [Register(0x4b)]
#       Restoring reg0x4b after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 4b 

# 00fdf Pop8 [Register(0x4c)]
#       Restoring reg0x4c after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 4c 

# 00fe1 Pop8 [Register(0x4d)]
#       Restoring reg0x4d after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 4d 

# 00fe3 Pop8 [Register(0x4e)]
#       Restoring reg0x4e after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 4e 

# 00fe5 Pop8 [Register(0x4f)]
#       Restoring reg0x4f after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 4f 

# 00fe7 Pop8 [Register(0x50)]
#       Restoring reg0x50 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 50 

# 00fe9 Pop8 [Register(0x51)]
#       Restoring reg0x51 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 51 

# 00feb Pop8 [Register(0x52)]
#       Restoring reg0x52 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 52 

# 00fed Pop8 [Register(0x53)]
#       Restoring reg0x53 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 53 

# 00fef Pop8 [Register(0x54)]
#       Restoring reg0x54 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 54 

# 00ff1 Pop8 [Register(0x55)]
#       Restoring reg0x55 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 55 

# 00ff3 Pop8 [Register(0x56)]
#       Restoring reg0x56 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 56 

# 00ff5 Pop8 [Register(0x57)]
#       Restoring reg0x57 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 57 

# 00ff7 Pop8 [Register(0x58)]
#       Restoring reg0x58 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 58 

# 00ff9 Pop8 [Register(0x59)]
#       Restoring reg0x59 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 59 

# 00ffb Pop8 [Register(0x5c)]
#       Restoring reg0x5c after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 5c 

# 00ffd Pop8 [Register(0x5d)]
#       Restoring reg0x5d after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 5d 

# 00fff Pop8 [Register(0x5e)]
#       Restoring reg0x5e after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 5e 

# 01001 Pop8 [Register(0x5f)]
#       Restoring reg0x5f after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 5f 

# 01003 Pop8 [Register(0x60)]
#       Restoring reg0x60 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 60 

# 01005 Pop8 [Register(0x61)]
#       Restoring reg0x61 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 61 

# 01007 Pop8 [Register(0x62)]
#       Restoring reg0x62 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 62 

# 01009 Pop8 [Register(0x63)]
#       Restoring reg0x63 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 63 

# 0100b Pop8 [Register(0x64)]
#       Restoring reg0x64 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 64 

# 0100d Pop8 [Register(0x68)]
#       Restoring reg0x68 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 68 

# 0100f Pop8 [Register(0x69)]
#       Restoring reg0x69 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 69 

# 01011 Pop8 [Register(0x6a)]
#       Restoring reg0x6a after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 6a 

# 01013 Pop8 [Register(0x6b)]
#       Restoring reg0x6b after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 6b 

# 01015 Copy32 [Register(0x00), Register(0x5c)]
#       Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
21 00 5c 

# t1ba9 <- quotient U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
# Ident("quotient")
# 01018 Copy32 [Register(0x5c), Register(0x38)]
#       t1ba9 <- quotient U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
#       Ident("quotient")
21 5c 38 

# None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
# 0101b Copy32 [Register(0x38), Register(0x00)]
#       Arg0[a]=t1ba9 None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
21 38 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 204, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252}
# Registers to save: [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107]
# 0101e Push8 [Register(0x6b)]
#       Saving reg0x6b before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 6b 

# 01020 Push8 [Register(0x6a)]
#       Saving reg0x6a before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 6a 

# 01022 Push8 [Register(0x69)]
#       Saving reg0x69 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 69 

# 01024 Push8 [Register(0x68)]
#       Saving reg0x68 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 68 

# 01026 Push8 [Register(0x64)]
#       Saving reg0x64 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 64 

# 01028 Push8 [Register(0x63)]
#       Saving reg0x63 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 63 

# 0102a Push8 [Register(0x62)]
#       Saving reg0x62 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 62 

# 0102c Push8 [Register(0x61)]
#       Saving reg0x61 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 61 

# 0102e Push8 [Register(0x60)]
#       Saving reg0x60 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 60 

# 01030 Push8 [Register(0x5f)]
#       Saving reg0x5f before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 5f 

# 01032 Push8 [Register(0x5e)]
#       Saving reg0x5e before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 5e 

# 01034 Push8 [Register(0x5d)]
#       Saving reg0x5d before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 5d 

# 01036 Push8 [Register(0x5c)]
#       Saving reg0x5c before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 5c 

# 01038 Push8 [Register(0x59)]
#       Saving reg0x59 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 59 

# 0103a Push8 [Register(0x58)]
#       Saving reg0x58 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 58 

# 0103c Push8 [Register(0x57)]
#       Saving reg0x57 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 57 

# 0103e Push8 [Register(0x56)]
#       Saving reg0x56 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 56 

# 01040 Push8 [Register(0x55)]
#       Saving reg0x55 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 55 

# 01042 Push8 [Register(0x54)]
#       Saving reg0x54 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 54 

# 01044 Push8 [Register(0x53)]
#       Saving reg0x53 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 53 

# 01046 Push8 [Register(0x52)]
#       Saving reg0x52 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 52 

# 01048 Push8 [Register(0x51)]
#       Saving reg0x51 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 51 

# 0104a Push8 [Register(0x50)]
#       Saving reg0x50 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 50 

# 0104c Push8 [Register(0x4f)]
#       Saving reg0x4f before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 4f 

# 0104e Push8 [Register(0x4e)]
#       Saving reg0x4e before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 4e 

# 01050 Push8 [Register(0x4d)]
#       Saving reg0x4d before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 4d 

# 01052 Push8 [Register(0x4c)]
#       Saving reg0x4c before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 4c 

# 01054 Push8 [Register(0x4b)]
#       Saving reg0x4b before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 4b 

# 01056 Push8 [Register(0x4a)]
#       Saving reg0x4a before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 4a 

# 01058 Push8 [Register(0x49)]
#       Saving reg0x49 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 49 

# 0105a Push8 [Register(0x48)]
#       Saving reg0x48 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 48 

# 0105c Push8 [Register(0x45)]
#       Saving reg0x45 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 45 

# 0105e Push8 [Register(0x44)]
#       Saving reg0x44 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 44 

# 01060 Push8 [Register(0x43)]
#       Saving reg0x43 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 43 

# 01062 Push8 [Register(0x42)]
#       Saving reg0x42 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 42 

# 01064 Push8 [Register(0x41)]
#       Saving reg0x41 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 41 

# 01066 Push8 [Register(0x40)]
#       Saving reg0x40 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 40 

# 01068 Push8 [Register(0x3f)]
#       Saving reg0x3f before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 3f 

# 0106a Push8 [Register(0x3e)]
#       Saving reg0x3e before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 3e 

# 0106c Push8 [Register(0x3d)]
#       Saving reg0x3d before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 3d 

# 0106e Push8 [Register(0x3c)]
#       Saving reg0x3c before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 3c 

# 01070 Push8 [Register(0x3b)]
#       Saving reg0x3b before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 3b 

# 01072 Push8 [Register(0x3a)]
#       Saving reg0x3a before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 3a 

# 01074 Push8 [Register(0x39)]
#       Saving reg0x39 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 39 

# 01076 Push8 [Register(0x38)]
#       Saving reg0x38 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 38 

# 01078 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec32))
32 0c fc ff ff ff 

# 0107e StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec32))
25 0c 88 10 00 00 

# 01084 JmpImm [Label24(:print_dec32)]
#       PseudoCall(Label24(:print_dec32))
70 6b 27 00 

# 01088 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec32))
32 0c 04 00 00 00 

# 0108e Pop8 [Register(0x38)]
#       Restoring reg0x38 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 38 

# 01090 Pop8 [Register(0x39)]
#       Restoring reg0x39 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 39 

# 01092 Pop8 [Register(0x3a)]
#       Restoring reg0x3a after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 3a 

# 01094 Pop8 [Register(0x3b)]
#       Restoring reg0x3b after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 3b 

# 01096 Pop8 [Register(0x3c)]
#       Restoring reg0x3c after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 3c 

# 01098 Pop8 [Register(0x3d)]
#       Restoring reg0x3d after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 3d 

# 0109a Pop8 [Register(0x3e)]
#       Restoring reg0x3e after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 3e 

# 0109c Pop8 [Register(0x3f)]
#       Restoring reg0x3f after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 3f 

# 0109e Pop8 [Register(0x40)]
#       Restoring reg0x40 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 40 

# 010a0 Pop8 [Register(0x41)]
#       Restoring reg0x41 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 41 

# 010a2 Pop8 [Register(0x42)]
#       Restoring reg0x42 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 42 

# 010a4 Pop8 [Register(0x43)]
#       Restoring reg0x43 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 43 

# 010a6 Pop8 [Register(0x44)]
#       Restoring reg0x44 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 44 

# 010a8 Pop8 [Register(0x45)]
#       Restoring reg0x45 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 45 

# 010aa Pop8 [Register(0x48)]
#       Restoring reg0x48 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 48 

# 010ac Pop8 [Register(0x49)]
#       Restoring reg0x49 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 49 

# 010ae Pop8 [Register(0x4a)]
#       Restoring reg0x4a after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 4a 

# 010b0 Pop8 [Register(0x4b)]
#       Restoring reg0x4b after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 4b 

# 010b2 Pop8 [Register(0x4c)]
#       Restoring reg0x4c after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 4c 

# 010b4 Pop8 [Register(0x4d)]
#       Restoring reg0x4d after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 4d 

# 010b6 Pop8 [Register(0x4e)]
#       Restoring reg0x4e after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 4e 

# 010b8 Pop8 [Register(0x4f)]
#       Restoring reg0x4f after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 4f 

# 010ba Pop8 [Register(0x50)]
#       Restoring reg0x50 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 50 

# 010bc Pop8 [Register(0x51)]
#       Restoring reg0x51 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 51 

# 010be Pop8 [Register(0x52)]
#       Restoring reg0x52 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 52 

# 010c0 Pop8 [Register(0x53)]
#       Restoring reg0x53 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 53 

# 010c2 Pop8 [Register(0x54)]
#       Restoring reg0x54 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 54 

# 010c4 Pop8 [Register(0x55)]
#       Restoring reg0x55 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 55 

# 010c6 Pop8 [Register(0x56)]
#       Restoring reg0x56 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 56 

# 010c8 Pop8 [Register(0x57)]
#       Restoring reg0x57 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 57 

# 010ca Pop8 [Register(0x58)]
#       Restoring reg0x58 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 58 

# 010cc Pop8 [Register(0x59)]
#       Restoring reg0x59 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 59 

# 010ce Pop8 [Register(0x5c)]
#       Restoring reg0x5c after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 5c 

# 010d0 Pop8 [Register(0x5d)]
#       Restoring reg0x5d after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 5d 

# 010d2 Pop8 [Register(0x5e)]
#       Restoring reg0x5e after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 5e 

# 010d4 Pop8 [Register(0x5f)]
#       Restoring reg0x5f after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 5f 

# 010d6 Pop8 [Register(0x60)]
#       Restoring reg0x60 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 60 

# 010d8 Pop8 [Register(0x61)]
#       Restoring reg0x61 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 61 

# 010da Pop8 [Register(0x62)]
#       Restoring reg0x62 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 62 

# 010dc Pop8 [Register(0x63)]
#       Restoring reg0x63 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 63 

# 010de Pop8 [Register(0x64)]
#       Restoring reg0x64 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 64 

# 010e0 Pop8 [Register(0x68)]
#       Restoring reg0x68 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 68 

# 010e2 Pop8 [Register(0x69)]
#       Restoring reg0x69 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 69 

# 010e4 Pop8 [Register(0x6a)]
#       Restoring reg0x6a after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 6a 

# 010e6 Pop8 [Register(0x6b)]
#       Restoring reg0x6b after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 6b 

# t25ee <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }
# Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] })
# Number(0n10/0x0au8)
# 010e8 LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       t25ee <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }
#       Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] })
#       Number(0n10/0x0au8)
04 60 0a 

# inline_RpnCalc_handle_putc_22_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_22_tac13 <- inline_RpnCalc_handle_putc_22_c U8` with constant `inline_RpnCalc_handle_putc_22_tac13 <- 0n10/0x0au8 `.
# 010eb LoadImm8 [Register(0x45), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_22_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_22_tac13 <- inline_RpnCalc_handle_putc_22_c U8` with constant `inline_RpnCalc_handle_putc_22_tac13 <- 0n10/0x0au8 `.
04 45 0a 

# None <= call io_write0(inline_RpnCalc_handle_putc_22_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 010ee Out0 [Register(0x45)]
#       IoWrite0
68 45 

# inline_RpnCalc_handle_putc_22_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 010f0 LoadImm32 [Register(0x38), Constant32(0x000f105c=987228)]
#       inline_RpnCalc_handle_putc_22_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
20 38 5c 10 0f 00 

# inline_RpnCalc_handle_putc_22_t76c7 <- mem[inline_RpnCalc_handle_putc_22_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 010f6 Load8 [Register(0x38), Register(0x45)]
#       inline_RpnCalc_handle_putc_22_t76c7 <- mem[inline_RpnCalc_handle_putc_22_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
05 38 45 

# inline_RpnCalc_handle_putc_22_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 010f9 LoadImm8 [Register(0x60), Constant8(0x00=0)]
#       inline_RpnCalc_handle_putc_22_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 60 00 

# if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_putc_22_ta97f then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# 010fc Cmp8 [Register(0x45), Register(0x60)]
#       if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_putc_22_ta97f then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
15 45 60 

# 010ff JzImm [Label24(inline_RpnCalc_handle_putc_22_putc_if_else_0_2)]
#       if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_putc_22_ta97f then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
72 23 11 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_putc_22_ta97f then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_22_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_22_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_22_putc_if_true_0_1
# inline_RpnCalc_handle_putc_22_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_22_tac13 <- inline_RpnCalc_handle_putc_22_c U8` with constant `inline_RpnCalc_handle_putc_22_tac13 <- 0n10/0x0au8 `.
# 01103 LoadImm8 [Register(0x45), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_22_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_22_tac13 <- inline_RpnCalc_handle_putc_22_c U8` with constant `inline_RpnCalc_handle_putc_22_tac13 <- 0n10/0x0au8 `.
04 45 0a 

# None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 01106 Copy8 [Register(0x45), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_22_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 45 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 140, 141, 142, 143, 144, 145, 146, 147, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252}
# Registers to save: []
# 01109 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 0110f StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 19 11 00 00 

# 01115 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 67 1f 00 

# 01119 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_RpnCalc_handle_putc_22_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 0111f JmpImm [Label24(inline_RpnCalc_handle_putc_22_putc_if_end_0)]
#       goto inline_RpnCalc_handle_putc_22_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 23 11 00 

# :inline_RpnCalc_handle_putc_22_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_22_putc_if_else_0_2
# :inline_RpnCalc_handle_putc_22_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_22_putc_if_end_0
# goto inline_RpnCalc_handle_putc_22_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_22_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_22_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_22_function_end_putc None
# inline_RpnCalc_handle_putc_22_function_end_putc
# tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })
# Ident("stack")
# optimized away noop copy Instruction { source: "tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] })\nIdent(\"stack\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# t1ba9 <- quotient U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })
# Ident("quotient")
# 01123 Copy32 [Register(0x5c), Register(0x38)]
#       t1ba9 <- quotient U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })
#       Ident("quotient")
21 5c 38 

# inline_RpnCalc_handle_stack_push_57_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })
# 01126 Copy32 [Register(0x40), Register(0x3c)]
#       inline_RpnCalc_handle_stack_push_57_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })
21 40 3c 

# inline_RpnCalc_handle_stack_push_57_n <- t1ba9 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_57_n <- t1ba9 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] })\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 01129 Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 0112c AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_57_t14ab <- mem[inline_RpnCalc_handle_stack_push_57_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# 01132 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_57_t14ab <- mem[inline_RpnCalc_handle_stack_push_57_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_stack_push_57_tf659 <- inline_RpnCalc_handle_stack_push_57_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# 01135 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_push_57_tf659 <- inline_RpnCalc_handle_stack_push_57_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
20 00 04 00 00 00 

# 0113b Mul8_16 [Register(0x40), Register(0x00), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_57_tf659 <- inline_RpnCalc_handle_stack_push_57_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
11 40 00 40 

# 0113f LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_57_tf659 <- inline_RpnCalc_handle_stack_push_57_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 42 00 

# 01142 LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_57_tf659 <- inline_RpnCalc_handle_stack_push_57_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 43 00 

# inline_RpnCalc_handle_stack_push_57_t100e <- inline_RpnCalc_handle_stack_push_57_s Add Var(inline_RpnCalc_handle_stack_push_57_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# 01145 ClearCarry []
#       inline_RpnCalc_handle_stack_push_57_t100e <- inline_RpnCalc_handle_stack_push_57_s Add Var(inline_RpnCalc_handle_stack_push_57_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
03 

# 01146 AddCarry32_1 [Register(0x3c), Register(0x40), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_57_t100e <- inline_RpnCalc_handle_stack_push_57_s Add Var(inline_RpnCalc_handle_stack_push_57_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
30 3c 40 40 

# 0114a AddCarry32_2 []
#       inline_RpnCalc_handle_stack_push_57_t100e <- inline_RpnCalc_handle_stack_push_57_s Add Var(inline_RpnCalc_handle_stack_push_57_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
31 

# mem[inline_RpnCalc_handle_stack_push_57_t100e] <- inline_RpnCalc_handle_stack_push_57_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 0114b Store32_1 [Register(0x38), Register(0x40)]
#       mem[inline_RpnCalc_handle_stack_push_57_t100e] <- inline_RpnCalc_handle_stack_push_57_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 38 40 

# 0114e Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_57_t100e] <- inline_RpnCalc_handle_stack_push_57_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 0114f Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 01152 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 01158 Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 0115b AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_57_t14ab <- mem[inline_RpnCalc_handle_stack_push_57_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# 01161 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_57_t14ab <- mem[inline_RpnCalc_handle_stack_push_57_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_stack_push_57_t8f43 <- inline_RpnCalc_handle_stack_push_57_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# 01164 Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_stack_push_57_t8f43 <- inline_RpnCalc_handle_stack_push_57_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
21 40 38 

# 01167 AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_stack_push_57_t8f43 <- inline_RpnCalc_handle_stack_push_57_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
32 38 01 00 00 00 

# mem[inline_RpnCalc_handle_stack_push_57_tc957] <- inline_RpnCalc_handle_stack_push_57_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# 0116d Store32_1 [Register(0x38), Register(0x5c)]
#       mem[inline_RpnCalc_handle_stack_push_57_tc957] <- inline_RpnCalc_handle_stack_push_57_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
23 38 5c 

# 01170 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_57_tc957] <- inline_RpnCalc_handle_stack_push_57_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
24 

# goto inline_RpnCalc_handle_stack_push_57_function_end_stack_push None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_push_57_function_end_stack_push None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_push_57_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_stack_push_57_function_end_stack_push None
# inline_RpnCalc_handle_stack_push_57_function_end_stack_push
# goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 01171 JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 24 16 00 

# :RpnCalc_handle_if_else_3_31 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_3_31
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n115/0x73u8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# tcdcd <- 0n115/0x73u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
# Number(0n115/0x73u8)
# 01175 LoadImm8 [Register(0x63), Constant8(0x73=115)]
#       tcdcd <- 0n115/0x73u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
#       Number(0n115/0x73u8)
04 63 73 

# if tdcd9 == tcdcd then 'RpnCalc_handle_if_true_4_32' else 'RpnCalc_handle_if_else_4_33' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
# 01178 Cmp8 [Register(0x44), Register(0x63)]
#       if tdcd9 == tcdcd then 'RpnCalc_handle_if_true_4_32' else 'RpnCalc_handle_if_else_4_33' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
15 44 63 

# 0117b JzImm [Label24(RpnCalc_handle_if_true_4_32)]
#       if tdcd9 == tcdcd then 'RpnCalc_handle_if_true_4_32' else 'RpnCalc_handle_if_else_4_33' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
72 83 11 00 

# 0117f JmpImm [Label24(RpnCalc_handle_if_else_4_33)]
#       if tdcd9 == tcdcd then 'RpnCalc_handle_if_true_4_32' else 'RpnCalc_handle_if_else_4_33' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
70 29 12 00 

# :RpnCalc_handle_if_true_4_32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_4_32
# tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
# Ident("stack")
# optimized away noop copy Instruction { source: "tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] })\nIdent(\"stack\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
# Ident("a")
# 01183 Copy32 [Register(0x38), Register(0x48)]
#       t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
#       Ident("a")
21 38 48 

# inline_RpnCalc_handle_stack_push_58_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
# 01186 Copy32 [Register(0x40), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_58_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
21 40 5c 

# inline_RpnCalc_handle_stack_push_58_n <- t8792 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
# 01189 Copy32 [Register(0x48), Register(0x38)]
#       inline_RpnCalc_handle_stack_push_58_n <- t8792 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
21 48 38 

# inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 0118c Copy32 [Register(0x5c), Register(0x4c)]
#       inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 5c 4c 

# 0118f AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_58_t14ab <- mem[inline_RpnCalc_handle_stack_push_58_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# 01195 Load32 [Register(0x4c), Register(0x48)]
#       inline_RpnCalc_handle_stack_push_58_t14ab <- mem[inline_RpnCalc_handle_stack_push_58_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
22 4c 48 

# inline_RpnCalc_handle_stack_push_58_tf659 <- inline_RpnCalc_handle_stack_push_58_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# 01198 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_push_58_tf659 <- inline_RpnCalc_handle_stack_push_58_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
20 00 04 00 00 00 

# 0119e Mul8_16 [Register(0x48), Register(0x00), Register(0x48)]
#       inline_RpnCalc_handle_stack_push_58_tf659 <- inline_RpnCalc_handle_stack_push_58_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
11 48 00 48 

# 011a2 LoadImm8 [Register(0x4a), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_58_tf659 <- inline_RpnCalc_handle_stack_push_58_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 4a 00 

# 011a5 LoadImm8 [Register(0x4b), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_58_tf659 <- inline_RpnCalc_handle_stack_push_58_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 4b 00 

# inline_RpnCalc_handle_stack_push_58_t100e <- inline_RpnCalc_handle_stack_push_58_s Add Var(inline_RpnCalc_handle_stack_push_58_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# 011a8 ClearCarry []
#       inline_RpnCalc_handle_stack_push_58_t100e <- inline_RpnCalc_handle_stack_push_58_s Add Var(inline_RpnCalc_handle_stack_push_58_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
03 

# 011a9 AddCarry32_1 [Register(0x5c), Register(0x48), Register(0x48)]
#       inline_RpnCalc_handle_stack_push_58_t100e <- inline_RpnCalc_handle_stack_push_58_s Add Var(inline_RpnCalc_handle_stack_push_58_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
30 5c 48 48 

# 011ad AddCarry32_2 []
#       inline_RpnCalc_handle_stack_push_58_t100e <- inline_RpnCalc_handle_stack_push_58_s Add Var(inline_RpnCalc_handle_stack_push_58_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
31 

# mem[inline_RpnCalc_handle_stack_push_58_t100e] <- inline_RpnCalc_handle_stack_push_58_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 011ae Store32_1 [Register(0x38), Register(0x48)]
#       mem[inline_RpnCalc_handle_stack_push_58_t100e] <- inline_RpnCalc_handle_stack_push_58_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 38 48 

# 011b1 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_58_t100e] <- inline_RpnCalc_handle_stack_push_58_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 011b2 Copy32 [Register(0x5c), Register(0x4c)]
#       inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 5c 4c 

# 011b5 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 011bb Copy32 [Register(0x5c), Register(0x4c)]
#       inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 5c 4c 

# 011be AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_58_t14ab <- mem[inline_RpnCalc_handle_stack_push_58_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# 011c4 Load32 [Register(0x4c), Register(0x48)]
#       inline_RpnCalc_handle_stack_push_58_t14ab <- mem[inline_RpnCalc_handle_stack_push_58_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
22 4c 48 

# inline_RpnCalc_handle_stack_push_58_t8f43 <- inline_RpnCalc_handle_stack_push_58_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# 011c7 Copy32 [Register(0x48), Register(0x38)]
#       inline_RpnCalc_handle_stack_push_58_t8f43 <- inline_RpnCalc_handle_stack_push_58_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
21 48 38 

# 011ca AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_stack_push_58_t8f43 <- inline_RpnCalc_handle_stack_push_58_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
32 38 01 00 00 00 

# mem[inline_RpnCalc_handle_stack_push_58_tc957] <- inline_RpnCalc_handle_stack_push_58_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# 011d0 Store32_1 [Register(0x38), Register(0x4c)]
#       mem[inline_RpnCalc_handle_stack_push_58_tc957] <- inline_RpnCalc_handle_stack_push_58_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
23 38 4c 

# 011d3 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_58_tc957] <- inline_RpnCalc_handle_stack_push_58_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
24 

# goto inline_RpnCalc_handle_stack_push_58_function_end_stack_push None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_push_58_function_end_stack_push None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_push_58_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_stack_push_58_function_end_stack_push None
# inline_RpnCalc_handle_stack_push_58_function_end_stack_push
# tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
# Ident("stack")
# optimized away noop copy Instruction { source: "tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] })\nIdent(\"stack\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
# Ident("b")
# 011d4 Copy32 [Register(0x3c), Register(0x5c)]
#       tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
#       Ident("b")
21 3c 5c 

# inline_RpnCalc_handle_stack_push_59_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
# 011d7 Copy32 [Register(0x40), Register(0x3c)]
#       inline_RpnCalc_handle_stack_push_59_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
21 40 3c 

# inline_RpnCalc_handle_stack_push_59_n <- tace9 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
# 011da Copy32 [Register(0x5c), Register(0x38)]
#       inline_RpnCalc_handle_stack_push_59_n <- tace9 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
21 5c 38 

# inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 011dd Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 011e0 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_59_t14ab <- mem[inline_RpnCalc_handle_stack_push_59_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# 011e6 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_59_t14ab <- mem[inline_RpnCalc_handle_stack_push_59_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_stack_push_59_tf659 <- inline_RpnCalc_handle_stack_push_59_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# 011e9 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_push_59_tf659 <- inline_RpnCalc_handle_stack_push_59_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
20 00 04 00 00 00 

# 011ef Mul8_16 [Register(0x40), Register(0x00), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_59_tf659 <- inline_RpnCalc_handle_stack_push_59_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
11 40 00 40 

# 011f3 LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_59_tf659 <- inline_RpnCalc_handle_stack_push_59_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 42 00 

# 011f6 LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_59_tf659 <- inline_RpnCalc_handle_stack_push_59_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 43 00 

# inline_RpnCalc_handle_stack_push_59_t100e <- inline_RpnCalc_handle_stack_push_59_s Add Var(inline_RpnCalc_handle_stack_push_59_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# 011f9 ClearCarry []
#       inline_RpnCalc_handle_stack_push_59_t100e <- inline_RpnCalc_handle_stack_push_59_s Add Var(inline_RpnCalc_handle_stack_push_59_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
03 

# 011fa AddCarry32_1 [Register(0x3c), Register(0x40), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_59_t100e <- inline_RpnCalc_handle_stack_push_59_s Add Var(inline_RpnCalc_handle_stack_push_59_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
30 3c 40 40 

# 011fe AddCarry32_2 []
#       inline_RpnCalc_handle_stack_push_59_t100e <- inline_RpnCalc_handle_stack_push_59_s Add Var(inline_RpnCalc_handle_stack_push_59_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
31 

# mem[inline_RpnCalc_handle_stack_push_59_t100e] <- inline_RpnCalc_handle_stack_push_59_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 011ff Store32_1 [Register(0x38), Register(0x40)]
#       mem[inline_RpnCalc_handle_stack_push_59_t100e] <- inline_RpnCalc_handle_stack_push_59_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 38 40 

# 01202 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_59_t100e] <- inline_RpnCalc_handle_stack_push_59_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 01203 Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 01206 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 0120c Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 0120f AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_59_t14ab <- mem[inline_RpnCalc_handle_stack_push_59_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# 01215 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_59_t14ab <- mem[inline_RpnCalc_handle_stack_push_59_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_stack_push_59_t8f43 <- inline_RpnCalc_handle_stack_push_59_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# 01218 Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_stack_push_59_t8f43 <- inline_RpnCalc_handle_stack_push_59_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
21 40 38 

# 0121b AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_stack_push_59_t8f43 <- inline_RpnCalc_handle_stack_push_59_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
32 38 01 00 00 00 

# mem[inline_RpnCalc_handle_stack_push_59_tc957] <- inline_RpnCalc_handle_stack_push_59_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# 01221 Store32_1 [Register(0x38), Register(0x5c)]
#       mem[inline_RpnCalc_handle_stack_push_59_tc957] <- inline_RpnCalc_handle_stack_push_59_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
23 38 5c 

# 01224 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_59_tc957] <- inline_RpnCalc_handle_stack_push_59_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
24 

# goto inline_RpnCalc_handle_stack_push_59_function_end_stack_push None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_push_59_function_end_stack_push None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_push_59_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_stack_push_59_function_end_stack_push None
# inline_RpnCalc_handle_stack_push_59_function_end_stack_push
# goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 01225 JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 24 16 00 

# :RpnCalc_handle_if_else_4_33 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_4_33
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n113/0x71u8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# tdf6e <- 0n113/0x71u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }
# Number(0n113/0x71u8)
# 01229 LoadImm8 [Register(0x45), Constant8(0x71=113)]
#       tdf6e <- 0n113/0x71u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }
#       Number(0n113/0x71u8)
04 45 71 

# if tdcd9 == tdf6e then 'RpnCalc_handle_if_true_5_34' else 'RpnCalc_handle_if_else_5_35' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }
# 0122c Cmp8 [Register(0x44), Register(0x45)]
#       if tdcd9 == tdf6e then 'RpnCalc_handle_if_true_5_34' else 'RpnCalc_handle_if_else_5_35' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }
15 44 45 

# 0122f JzImm [Label24(RpnCalc_handle_if_true_5_34)]
#       if tdcd9 == tdf6e then 'RpnCalc_handle_if_true_5_34' else 'RpnCalc_handle_if_else_5_35' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }
72 37 12 00 

# 01233 JmpImm [Label24(RpnCalc_handle_if_else_5_35)]
#       if tdcd9 == tdf6e then 'RpnCalc_handle_if_true_5_34' else 'RpnCalc_handle_if_else_5_35' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }
70 43 12 00 

# :RpnCalc_handle_if_true_5_34 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_5_34
# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Return { value: Some(Number(0n0/0x00u8)) }
# Number(0n0/0x00u8)
# 01237 LoadImm8 [Register(0x58), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Return { value: Some(Number(0n0/0x00u8)) }
#       Number(0n0/0x00u8)
04 58 00 

# return Some(ta97f) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Return { value: Some(Number(0n0/0x00u8)) }
# 0123a Copy8 [Register(0x58), Register(0x00)]
#       return Some(ta97f) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Return { value: Some(Number(0n0/0x00u8)) }
0b 58 00 

# 0123d JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 0123f JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 24 16 00 

# :RpnCalc_handle_if_else_5_35 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_5_35
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n10/0x0au8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t25ee <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
# Number(0n10/0x0au8)
# 01243 LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       t25ee <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
#       Number(0n10/0x0au8)
04 60 0a 

# if tdcd9 == t25ee then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
# 01246 Cmp8 [Register(0x44), Register(0x60)]
#       if tdcd9 == t25ee then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
15 44 60 

# 01249 JzImm [Label24(RpnCalc_handle_if_true_6_36)]
#       if tdcd9 == t25ee then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
72 51 12 00 

# 0124d JmpImm [Label24(RpnCalc_handle_if_else_6_37)]
#       if tdcd9 == t25ee then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
70 f1 12 00 

# :RpnCalc_handle_if_true_6_36 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_6_36
# tac13 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_c <- tac13 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
# 01251 Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_c <- tac13 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
#       Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
21 40 38 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# PtrFieldDeref("c", "have_num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }\nComparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(0n0/0x00u8) }\nPtrFieldDeref(\"c\", \"have_num\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n72/0x00000048u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n72/0x00000048u32))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# PtrFieldDeref("c", "have_num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# 01254 Copy32 [Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       PtrFieldDeref("c", "have_num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
21 38 3c 

# 01257 AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000048=72)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       PtrFieldDeref("c", "have_num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
32 3c 48 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# PtrFieldDeref("c", "have_num")
# 0125d Load8 [Register(0x3c), Register(0x60)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       PtrFieldDeref("c", "have_num")
05 3c 60 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 01260 LoadImm8 [Register(0x61), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 61 00 

# if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# 01263 Cmp8 [Register(0x60), Register(0x61)]
#       if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
15 60 61 

# 01266 JzImm [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2)]
#       if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
72 ed 12 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }\nComparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1
# inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\nPtrFieldDeref(\"c\", \"num\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n68/0x00000044u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n68/0x00000044u32))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# 0126a Copy32 [Register(0x38), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
21 38 40 

# 0126d AddImm32IgnoreCarry [Register(0x40), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
32 40 44 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# 01273 Load32 [Register(0x40), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
22 40 3c 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_62_td60 U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_62_td60 U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# 01276 Copy32 [Register(0x38), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
#       Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
#       Ident("s")
21 38 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 01279 Copy32 [Register(0x40), Register(0x5c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 40 5c 

# 0127c AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# 01282 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# 01285 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
20 00 04 00 00 00 

# 0128b Mul8_16 [Register(0x40), Register(0x00), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
11 40 00 40 

# 0128f LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 42 00 

# 01292 LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 43 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# 01295 ClearCarry []
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
03 

# 01296 AddCarry32_1 [Register(0x38), Register(0x40), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
30 38 40 40 

# 0129a AddCarry32_2 []
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
31 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 0129b Store32_1 [Register(0x3c), Register(0x40)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 3c 40 

# 0129e Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# 0129f Copy32 [Register(0x38), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
#       Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
#       Ident("s")
21 38 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 012a2 Copy32 [Register(0x40), Register(0x5c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 40 5c 

# 012a5 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# 012ab Copy32 [Register(0x38), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
#       Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
#       Ident("s")
21 38 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 012ae Copy32 [Register(0x40), Register(0x5c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 40 5c 

# 012b1 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# 012b7 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t8f43 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# 012ba Copy32 [Register(0x40), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t8f43 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
21 40 3c 

# 012bd AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t8f43 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
32 3c 01 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# 012c3 Store32_1 [Register(0x3c), Register(0x5c)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
23 3c 5c 

# 012c6 Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
24 

# goto inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push None
# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push
# inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nAssign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(0n0/0x00000000u32) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n68/0x00000044u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n68/0x00000044u32))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# 012c7 Copy32 [Register(0x38), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
21 38 40 

# 012ca AddImm32IgnoreCarry [Register(0x40), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
32 40 44 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 012d0 LoadImm32 [Register(0x3c), Constant32(0x00000000=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 3c 00 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# 012d6 Store32_1 [Register(0x3c), Register(0x40)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
23 3c 40 

# 012d9 Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
24 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nAssign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(0n0/0x00u8) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n72/0x00000048u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n72/0x00000048u32))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# 012da Copy32 [Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
21 38 3c 

# 012dd AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000048=72)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
32 3c 48 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 012e3 LoadImm8 [Register(0x61), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 61 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
# 012e6 Store8 [Register(0x61), Register(0x3c)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
06 61 3c 

# goto inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 012e9 JmpImm [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0)]
#       goto inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
70 ed 12 00 

# :inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2
# :inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0
# goto inline_RpnCalc_handle_RpnCalc_push_pending_62_function_end_RpnCalc_push_pending None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_62_function_end_RpnCalc_push_pending None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_62_function_end_RpnCalc_push_pending)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_62_function_end_RpnCalc_push_pending None
# inline_RpnCalc_handle_RpnCalc_push_pending_62_function_end_RpnCalc_push_pending
# goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 012ed JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 24 16 00 

# :RpnCalc_handle_if_else_6_37 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_6_37
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n32/0x20u8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }
# Number(0n32/0x20u8)
# 012f1 LoadImm8 [Register(0x45), Constant8(0x20=32)]
#       tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }
#       Number(0n32/0x20u8)
04 45 20 

# if tdcd9 == tdf3b then 'RpnCalc_handle_if_true_7_38' else 'RpnCalc_handle_if_else_7_39' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }
# 012f4 Cmp8 [Register(0x44), Register(0x45)]
#       if tdcd9 == tdf3b then 'RpnCalc_handle_if_true_7_38' else 'RpnCalc_handle_if_else_7_39' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }
15 44 45 

# 012f7 JzImm [Label24(RpnCalc_handle_if_true_7_38)]
#       if tdcd9 == tdf3b then 'RpnCalc_handle_if_true_7_38' else 'RpnCalc_handle_if_else_7_39' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }
72 ff 12 00 

# 012fb JmpImm [Label24(RpnCalc_handle_if_else_7_39)]
#       if tdcd9 == tdf3b then 'RpnCalc_handle_if_true_7_38' else 'RpnCalc_handle_if_else_7_39' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }
70 9f 13 00 

# :RpnCalc_handle_if_true_7_38 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_7_38
# tac13 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_c <- tac13 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
# 012ff Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_c <- tac13 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
#       Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
21 40 38 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# PtrFieldDeref("c", "have_num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }\nComparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(0n0/0x00u8) }\nPtrFieldDeref(\"c\", \"have_num\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n72/0x00000048u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n72/0x00000048u32))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# PtrFieldDeref("c", "have_num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# 01302 Copy32 [Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       PtrFieldDeref("c", "have_num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
21 38 3c 

# 01305 AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000048=72)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       PtrFieldDeref("c", "have_num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
32 3c 48 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# PtrFieldDeref("c", "have_num")
# 0130b Load8 [Register(0x3c), Register(0x60)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       PtrFieldDeref("c", "have_num")
05 3c 60 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 0130e LoadImm8 [Register(0x61), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 61 00 

# if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# 01311 Cmp8 [Register(0x60), Register(0x61)]
#       if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
15 60 61 

# 01314 JzImm [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2)]
#       if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
72 9b 13 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }\nComparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1
# inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\nPtrFieldDeref(\"c\", \"num\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n68/0x00000044u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n68/0x00000044u32))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# 01318 Copy32 [Register(0x38), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
21 38 40 

# 0131b AddImm32IgnoreCarry [Register(0x40), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
32 40 44 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# 01321 Load32 [Register(0x40), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
22 40 3c 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_63_td60 U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_63_td60 U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# 01324 Copy32 [Register(0x38), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
#       Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
#       Ident("s")
21 38 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 01327 Copy32 [Register(0x40), Register(0x5c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 40 5c 

# 0132a AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# 01330 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# 01333 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
20 00 04 00 00 00 

# 01339 Mul8_16 [Register(0x40), Register(0x00), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
11 40 00 40 

# 0133d LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 42 00 

# 01340 LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 43 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# 01343 ClearCarry []
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
03 

# 01344 AddCarry32_1 [Register(0x38), Register(0x40), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
30 38 40 40 

# 01348 AddCarry32_2 []
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
31 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 01349 Store32_1 [Register(0x3c), Register(0x40)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 3c 40 

# 0134c Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# 0134d Copy32 [Register(0x38), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
#       Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
#       Ident("s")
21 38 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 01350 Copy32 [Register(0x40), Register(0x5c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 40 5c 

# 01353 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# 01359 Copy32 [Register(0x38), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
#       Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
#       Ident("s")
21 38 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 0135c Copy32 [Register(0x40), Register(0x5c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 40 5c 

# 0135f AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# 01365 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t8f43 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# 01368 Copy32 [Register(0x40), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t8f43 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
21 40 3c 

# 0136b AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t8f43 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
32 3c 01 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# 01371 Store32_1 [Register(0x3c), Register(0x5c)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
23 3c 5c 

# 01374 Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
24 

# goto inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push None
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push
# inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nAssign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(0n0/0x00000000u32) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n68/0x00000044u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n68/0x00000044u32))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# 01375 Copy32 [Register(0x38), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
21 38 40 

# 01378 AddImm32IgnoreCarry [Register(0x40), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
32 40 44 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 0137e LoadImm32 [Register(0x3c), Constant32(0x00000000=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 3c 00 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# 01384 Store32_1 [Register(0x3c), Register(0x40)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
23 3c 40 

# 01387 Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
24 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nAssign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(0n0/0x00u8) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n72/0x00000048u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n72/0x00000048u32))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# 01388 Copy32 [Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
21 38 3c 

# 0138b AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000048=72)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
32 3c 48 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 01391 LoadImm8 [Register(0x61), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 61 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
# 01394 Store8 [Register(0x61), Register(0x3c)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
06 61 3c 

# goto inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 01397 JmpImm [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0)]
#       goto inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
70 9b 13 00 

# :inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2
# :inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0
# goto inline_RpnCalc_handle_RpnCalc_push_pending_63_function_end_RpnCalc_push_pending None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_63_function_end_RpnCalc_push_pending None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_63_function_end_RpnCalc_push_pending)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_63_function_end_RpnCalc_push_pending None
# inline_RpnCalc_handle_RpnCalc_push_pending_63_function_end_RpnCalc_push_pending
# goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 0139b JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 24 16 00 

# :RpnCalc_handle_if_else_7_39 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_7_39
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n99/0x63u8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t47ec <- 0n99/0x63u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }
# Number(0n99/0x63u8)
# 0139f LoadImm8 [Register(0x45), Constant8(0x63=99)]
#       t47ec <- 0n99/0x63u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }
#       Number(0n99/0x63u8)
04 45 63 

# if tdcd9 == t47ec then 'RpnCalc_handle_if_true_8_40' else 'RpnCalc_handle_if_else_8_41' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }
# 013a2 Cmp8 [Register(0x44), Register(0x45)]
#       if tdcd9 == t47ec then 'RpnCalc_handle_if_true_8_40' else 'RpnCalc_handle_if_else_8_41' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }
15 44 45 

# 013a5 JzImm [Label24(RpnCalc_handle_if_true_8_40)]
#       if tdcd9 == t47ec then 'RpnCalc_handle_if_true_8_40' else 'RpnCalc_handle_if_else_8_41' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }
72 ad 13 00 

# 013a9 JmpImm [Label24(RpnCalc_handle_if_else_8_41)]
#       if tdcd9 == t47ec then 'RpnCalc_handle_if_true_8_40' else 'RpnCalc_handle_if_else_8_41' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }
70 da 13 00 

# :RpnCalc_handle_if_true_8_40 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_8_40
# tac13 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_init_50_c <- tac13 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] })
# 013ad Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_RpnCalc_init_50_c <- tac13 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }
#       Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] })
21 40 38 

# inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s <- inline_RpnCalc_handle_RpnCalc_init_50_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(15,5))
# VoidExpression { expression: Call(Call { function: "stack_init", parameters: [Ident("s")] }) }
# Call(Call { function: "stack_init", parameters: [Ident("s")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s <- inline_RpnCalc_handle_RpnCalc_init_50_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(15,5))\nVoidExpression { expression: Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] }) }\nCall(Call { function: \"stack_init\", parameters: [Ident(\"s\")] })\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957 <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(7,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 013b0 Copy32 [Register(0x38), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957 <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 38 40 

# 013b3 AddImm32IgnoreCarry [Register(0x40), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957 <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 40 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/Stack.j':(7,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 013b9 LoadImm32 [Register(0x3c), Constant32(0x00000000=0)]
#       inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 3c 00 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/Stack.j':(7,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
# 013bf Store32_1 [Register(0x3c), Register(0x40)]
#       mem[inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
23 3c 40 

# 013c2 Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
24 

# goto inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_function_end_stack_init None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_function_end_stack_init None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_function_end_stack_init)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_function_end_stack_init None
# inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_function_end_stack_init
# inline_RpnCalc_handle_RpnCalc_init_50_t6e8e <- inline_RpnCalc_handle_RpnCalc_init_50_c Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# 013c3 Copy32 [Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_init_50_t6e8e <- inline_RpnCalc_handle_RpnCalc_init_50_c Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
21 38 3c 

# 013c6 AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_init_50_t6e8e <- inline_RpnCalc_handle_RpnCalc_init_50_c Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
32 3c 44 00 00 00 

# inline_RpnCalc_handle_RpnCalc_init_50_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 013cc LoadImm32 [Register(0x38), Constant32(0x00000000=0)]
#       inline_RpnCalc_handle_RpnCalc_init_50_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 38 00 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_init_50_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# 013d2 Store32_1 [Register(0x38), Register(0x3c)]
#       mem[inline_RpnCalc_handle_RpnCalc_init_50_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
23 38 3c 

# 013d5 Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_init_50_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
24 

# goto inline_RpnCalc_handle_RpnCalc_init_50_function_end_RpnCalc_init None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_init_50_function_end_RpnCalc_init None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_init_50_function_end_RpnCalc_init)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_init_50_function_end_RpnCalc_init None
# inline_RpnCalc_handle_RpnCalc_init_50_function_end_RpnCalc_init
# goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 013d6 JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 24 16 00 

# :RpnCalc_handle_if_else_8_41 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_8_41
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n100/0x64u8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# tcc42 <- 0n100/0x64u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }
# Number(0n100/0x64u8)
# 013da LoadImm8 [Register(0x45), Constant8(0x64=100)]
#       tcc42 <- 0n100/0x64u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }
#       Number(0n100/0x64u8)
04 45 64 

# if tdcd9 == tcc42 then 'RpnCalc_handle_if_true_9_42' else 'RpnCalc_handle_if_else_9_43' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }
# 013dd Cmp8 [Register(0x44), Register(0x45)]
#       if tdcd9 == tcc42 then 'RpnCalc_handle_if_true_9_42' else 'RpnCalc_handle_if_else_9_43' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }
15 44 45 

# 013e0 JzImm [Label24(RpnCalc_handle_if_true_9_42)]
#       if tdcd9 == tcc42 then 'RpnCalc_handle_if_true_9_42' else 'RpnCalc_handle_if_else_9_43' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }
72 e8 13 00 

# 013e4 JmpImm [Label24(RpnCalc_handle_if_else_9_43)]
#       if tdcd9 == tcc42 then 'RpnCalc_handle_if_true_9_42' else 'RpnCalc_handle_if_else_9_43' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }
70 82 15 00 

# :RpnCalc_handle_if_true_9_42 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_9_42
# i <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 013e8 LoadImm8 [Register(0x45), Constant8(0x00=0)]
#       i <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 45 00 

# :RpnCalc_handle_while_predicate_44 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# RpnCalc_handle_while_predicate_44
# td0f3 <- i U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x45), Register(0x45)], resolved: None }
# t6001 <- stack_count U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }
# Ident("stack_count")
# 013eb Copy8 [Register(0x59), Register(0x58)]
#       t6001 <- stack_count U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }
#       Ident("stack_count")
0b 59 58 

# if td0f3 < t6001 then 'RpnCalc_handle_while_body_45' else 'RpnCalc_handle_while_end_46' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }
# 013ee Cmp8 [Register(0x58), Register(0x45)]
#       if td0f3 < t6001 then 'RpnCalc_handle_while_body_45' else 'RpnCalc_handle_while_end_46' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }
15 58 45 

# 013f1 JcImm [Label24(RpnCalc_handle_while_end_46)]
#       if td0f3 < t6001 then 'RpnCalc_handle_while_body_45' else 'RpnCalc_handle_while_end_46' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }
71 7e 15 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if td0f3 < t6001 then 'RpnCalc_handle_while_body_45' else 'RpnCalc_handle_while_end_46' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }\n", opcode: JmpImm, args: [Label24(RpnCalc_handle_while_body_45)], resolved: None }
# :RpnCalc_handle_while_body_45 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# RpnCalc_handle_while_body_45
# td0f3 <- i U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }
# Call(Call { function: "print_dec8", parameters: [Ident("i")] })
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }\nCall(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] })\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x45), Register(0x45)], resolved: None }
# None <= call print_dec8(td0f3,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }
# Call(Call { function: "print_dec8", parameters: [Ident("i")] })
# 013f5 Copy8 [Register(0x45), Register(0x00)]
#       Arg0[a]=td0f3 None <= call print_dec8(td0f3,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("i")] })
0b 45 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 204, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252}
# Registers to save: []
# 013f8 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec8))
32 0c fc ff ff ff 

# 013fe StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec8))
25 0c 08 14 00 00 

# 01404 JmpImm [Label24(:print_dec8)]
#       PseudoCall(Label24(:print_dec8))
70 62 29 00 

# 01408 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec8))
32 0c 04 00 00 00 

# inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_23_tac13 <- inline_RpnCalc_handle_putc_23_c U8` with constant `inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8 `.
# 0140e LoadImm8 [Register(0x60), Constant8(0x3a=58)]
#       inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_23_tac13 <- inline_RpnCalc_handle_putc_23_c U8` with constant `inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8 `.
04 60 3a 

# None <= call io_write0(inline_RpnCalc_handle_putc_23_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 01411 Out0 [Register(0x60)]
#       IoWrite0
68 60 

# inline_RpnCalc_handle_putc_23_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 01413 LoadImm32 [Register(0x3c), Constant32(0x000f105c=987228)]
#       inline_RpnCalc_handle_putc_23_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
20 3c 5c 10 0f 00 

# inline_RpnCalc_handle_putc_23_t76c7 <- mem[inline_RpnCalc_handle_putc_23_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 01419 Load8 [Register(0x3c), Register(0x60)]
#       inline_RpnCalc_handle_putc_23_t76c7 <- mem[inline_RpnCalc_handle_putc_23_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
05 3c 60 

# inline_RpnCalc_handle_putc_23_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 0141c LoadImm8 [Register(0x44), Constant8(0x00=0)]
#       inline_RpnCalc_handle_putc_23_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 44 00 

# if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_putc_23_ta97f then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# 0141f Cmp8 [Register(0x60), Register(0x44)]
#       if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_putc_23_ta97f then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
15 60 44 

# 01422 JzImm [Label24(inline_RpnCalc_handle_putc_23_putc_if_else_0_2)]
#       if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_putc_23_ta97f then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
72 46 14 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_putc_23_ta97f then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_23_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_23_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_23_putc_if_true_0_1
# inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_23_tac13 <- inline_RpnCalc_handle_putc_23_c U8` with constant `inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8 `.
# 01426 LoadImm8 [Register(0x60), Constant8(0x3a=58)]
#       inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_23_tac13 <- inline_RpnCalc_handle_putc_23_c U8` with constant `inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8 `.
04 60 3a 

# None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 01429 Copy8 [Register(0x60), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_23_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 60 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 140, 141, 142, 143, 144, 145, 146, 147, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252}
# Registers to save: []
# 0142c AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 01432 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 3c 14 00 00 

# 01438 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 67 1f 00 

# 0143c AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_RpnCalc_handle_putc_23_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 01442 JmpImm [Label24(inline_RpnCalc_handle_putc_23_putc_if_end_0)]
#       goto inline_RpnCalc_handle_putc_23_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 46 14 00 

# :inline_RpnCalc_handle_putc_23_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_23_putc_if_else_0_2
# :inline_RpnCalc_handle_putc_23_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_23_putc_if_end_0
# goto inline_RpnCalc_handle_putc_23_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_23_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_23_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_23_function_end_putc None
# inline_RpnCalc_handle_putc_23_function_end_putc
# tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
# Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
# Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })
# Ident("stack")
# optimized away noop copy Instruction { source: "tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }] })] }) }\nCall(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }] })] })\nCall(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }] })\nIdent(\"stack\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# td0f3 <- i U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
# Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
# Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })
# Cast { old_type: None, new_type: Number(U32), value: Ident("i") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }] })] }) }\nCall(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }] })] })\nCall(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }] })\nCast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x45), Register(0x45)], resolved: None }
# t4376 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
# Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
# Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })
# Cast { old_type: None, new_type: Number(U32), value: Ident("i") }
# 01446 LoadImm32 [Register(0x3c), Constant32(0x00000000=0)]
#       Zero-pad for t4376 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
#       Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })
#       Cast { old_type: None, new_type: Number(U32), value: Ident("i") }
20 3c 00 00 00 00 

# 0144c Copy8 [Register(0x45), Register(0x3c)]
#       t4376 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
#       Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })
#       Cast { old_type: None, new_type: Number(U32), value: Ident("i") }
0b 45 3c 

# inline_RpnCalc_handle_stack_get_48_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
# Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
# Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })
# 0144f Copy32 [Register(0x40), Register(0x5c)]
#       inline_RpnCalc_handle_stack_get_48_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
#       Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })
21 40 5c 

# inline_RpnCalc_handle_stack_get_48_n <- t4376 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
# Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
# Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_get_48_n <- t4376 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }] })] }) }\nCall(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }] })] })\nCall(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }] })\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_get_48_td38d <- inline_RpnCalc_handle_stack_get_48_n Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(24,5))
# Return { value: Some(Index("values", Ident("n"))) }
# Index("values", Ident("n"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))
# 01452 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_get_48_td38d <- inline_RpnCalc_handle_stack_get_48_n Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))
20 00 04 00 00 00 

# 01458 Mul8_16 [Register(0x3c), Register(0x00), Register(0x3c)]
#       inline_RpnCalc_handle_stack_get_48_td38d <- inline_RpnCalc_handle_stack_get_48_n Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))
11 3c 00 3c 

# 0145c LoadImm8 [Register(0x3e), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_get_48_td38d <- inline_RpnCalc_handle_stack_get_48_n Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))
04 3e 00 

# 0145f LoadImm8 [Register(0x3f), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_get_48_td38d <- inline_RpnCalc_handle_stack_get_48_n Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))
04 3f 00 

# inline_RpnCalc_handle_stack_get_48_t5abb <- inline_RpnCalc_handle_stack_get_48_s Add Var(inline_RpnCalc_handle_stack_get_48_td38d) Some('/lutcomp/programs/lib/Stack.j':(24,5))
# Return { value: Some(Index("values", Ident("n"))) }
# Index("values", Ident("n"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32)))
# 01462 ClearCarry []
#       inline_RpnCalc_handle_stack_get_48_t5abb <- inline_RpnCalc_handle_stack_get_48_s Add Var(inline_RpnCalc_handle_stack_get_48_td38d) Some('/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32)))
03 

# 01463 AddCarry32_1 [Register(0x5c), Register(0x3c), Register(0x3c)]
#       inline_RpnCalc_handle_stack_get_48_t5abb <- inline_RpnCalc_handle_stack_get_48_s Add Var(inline_RpnCalc_handle_stack_get_48_td38d) Some('/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32)))
30 5c 3c 3c 

# 01467 AddCarry32_2 []
#       inline_RpnCalc_handle_stack_get_48_t5abb <- inline_RpnCalc_handle_stack_get_48_s Add Var(inline_RpnCalc_handle_stack_get_48_td38d) Some('/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32)))
31 

# inline_RpnCalc_handle_stack_get_48_t2db0 <- mem[inline_RpnCalc_handle_stack_get_48_t5abb] U32 Some('/lutcomp/programs/lib/Stack.j':(24,5))
# Return { value: Some(Index("values", Ident("n"))) }
# Index("values", Ident("n"))
# 01468 Load32 [Register(0x3c), Register(0x3c)]
#       inline_RpnCalc_handle_stack_get_48_t2db0 <- mem[inline_RpnCalc_handle_stack_get_48_t5abb] U32 Some('/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
22 3c 3c 

# tb336 <- inline_RpnCalc_handle_stack_get_48_t2db0 U32 Some('/lutcomp/programs/lib/Stack.j':(24,5))
# Return { value: Some(Index("values", Ident("n"))) }
# optimized away noop copy Instruction { source: "tb336 <- inline_RpnCalc_handle_stack_get_48_t2db0 U32 Some('/lutcomp/programs/lib/Stack.j':(24,5))\nReturn { value: Some(Index(\"values\", Ident(\"n\"))) }\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# goto inline_RpnCalc_handle_stack_get_48_function_end_stack_get Some('/lutcomp/programs/lib/Stack.j':(24,5))
# Return { value: Some(Index("values", Ident("n"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_get_48_function_end_stack_get Some('/lutcomp/programs/lib/Stack.j':(24,5))\nReturn { value: Some(Index(\"values\", Ident(\"n\"))) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_get_48_function_end_stack_get)], resolved: None }
# :inline_RpnCalc_handle_stack_get_48_function_end_stack_get None
# inline_RpnCalc_handle_stack_get_48_function_end_stack_get
# None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
# Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
# 0146b Copy32 [Register(0x3c), Register(0x00)]
#       Arg0[a]=tb336 None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
21 3c 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 204, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252}
# Registers to save: [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107]
# 0146e Push8 [Register(0x6b)]
#       Saving reg0x6b before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 6b 

# 01470 Push8 [Register(0x6a)]
#       Saving reg0x6a before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 6a 

# 01472 Push8 [Register(0x69)]
#       Saving reg0x69 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 69 

# 01474 Push8 [Register(0x68)]
#       Saving reg0x68 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 68 

# 01476 Push8 [Register(0x64)]
#       Saving reg0x64 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 64 

# 01478 Push8 [Register(0x63)]
#       Saving reg0x63 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 63 

# 0147a Push8 [Register(0x62)]
#       Saving reg0x62 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 62 

# 0147c Push8 [Register(0x61)]
#       Saving reg0x61 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 61 

# 0147e Push8 [Register(0x60)]
#       Saving reg0x60 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 60 

# 01480 Push8 [Register(0x5f)]
#       Saving reg0x5f before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 5f 

# 01482 Push8 [Register(0x5e)]
#       Saving reg0x5e before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 5e 

# 01484 Push8 [Register(0x5d)]
#       Saving reg0x5d before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 5d 

# 01486 Push8 [Register(0x5c)]
#       Saving reg0x5c before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 5c 

# 01488 Push8 [Register(0x59)]
#       Saving reg0x59 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 59 

# 0148a Push8 [Register(0x58)]
#       Saving reg0x58 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 58 

# 0148c Push8 [Register(0x57)]
#       Saving reg0x57 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 57 

# 0148e Push8 [Register(0x56)]
#       Saving reg0x56 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 56 

# 01490 Push8 [Register(0x55)]
#       Saving reg0x55 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 55 

# 01492 Push8 [Register(0x54)]
#       Saving reg0x54 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 54 

# 01494 Push8 [Register(0x53)]
#       Saving reg0x53 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 53 

# 01496 Push8 [Register(0x52)]
#       Saving reg0x52 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 52 

# 01498 Push8 [Register(0x51)]
#       Saving reg0x51 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 51 

# 0149a Push8 [Register(0x50)]
#       Saving reg0x50 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 50 

# 0149c Push8 [Register(0x4f)]
#       Saving reg0x4f before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 4f 

# 0149e Push8 [Register(0x4e)]
#       Saving reg0x4e before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 4e 

# 014a0 Push8 [Register(0x4d)]
#       Saving reg0x4d before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 4d 

# 014a2 Push8 [Register(0x4c)]
#       Saving reg0x4c before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 4c 

# 014a4 Push8 [Register(0x4b)]
#       Saving reg0x4b before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 4b 

# 014a6 Push8 [Register(0x4a)]
#       Saving reg0x4a before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 4a 

# 014a8 Push8 [Register(0x49)]
#       Saving reg0x49 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 49 

# 014aa Push8 [Register(0x48)]
#       Saving reg0x48 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 48 

# 014ac Push8 [Register(0x45)]
#       Saving reg0x45 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 45 

# 014ae Push8 [Register(0x44)]
#       Saving reg0x44 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 44 

# 014b0 Push8 [Register(0x43)]
#       Saving reg0x43 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 43 

# 014b2 Push8 [Register(0x42)]
#       Saving reg0x42 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 42 

# 014b4 Push8 [Register(0x41)]
#       Saving reg0x41 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 41 

# 014b6 Push8 [Register(0x40)]
#       Saving reg0x40 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 40 

# 014b8 Push8 [Register(0x3f)]
#       Saving reg0x3f before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 3f 

# 014ba Push8 [Register(0x3e)]
#       Saving reg0x3e before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 3e 

# 014bc Push8 [Register(0x3d)]
#       Saving reg0x3d before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 3d 

# 014be Push8 [Register(0x3c)]
#       Saving reg0x3c before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 3c 

# 014c0 Push8 [Register(0x3b)]
#       Saving reg0x3b before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 3b 

# 014c2 Push8 [Register(0x3a)]
#       Saving reg0x3a before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 3a 

# 014c4 Push8 [Register(0x39)]
#       Saving reg0x39 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 39 

# 014c6 Push8 [Register(0x38)]
#       Saving reg0x38 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 38 

# 014c8 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec32))
32 0c fc ff ff ff 

# 014ce StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec32))
25 0c d8 14 00 00 

# 014d4 JmpImm [Label24(:print_dec32)]
#       PseudoCall(Label24(:print_dec32))
70 6b 27 00 

# 014d8 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec32))
32 0c 04 00 00 00 

# 014de Pop8 [Register(0x38)]
#       Restoring reg0x38 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 38 

# 014e0 Pop8 [Register(0x39)]
#       Restoring reg0x39 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 39 

# 014e2 Pop8 [Register(0x3a)]
#       Restoring reg0x3a after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 3a 

# 014e4 Pop8 [Register(0x3b)]
#       Restoring reg0x3b after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 3b 

# 014e6 Pop8 [Register(0x3c)]
#       Restoring reg0x3c after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 3c 

# 014e8 Pop8 [Register(0x3d)]
#       Restoring reg0x3d after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 3d 

# 014ea Pop8 [Register(0x3e)]
#       Restoring reg0x3e after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 3e 

# 014ec Pop8 [Register(0x3f)]
#       Restoring reg0x3f after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 3f 

# 014ee Pop8 [Register(0x40)]
#       Restoring reg0x40 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 40 

# 014f0 Pop8 [Register(0x41)]
#       Restoring reg0x41 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 41 

# 014f2 Pop8 [Register(0x42)]
#       Restoring reg0x42 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 42 

# 014f4 Pop8 [Register(0x43)]
#       Restoring reg0x43 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 43 

# 014f6 Pop8 [Register(0x44)]
#       Restoring reg0x44 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 44 

# 014f8 Pop8 [Register(0x45)]
#       Restoring reg0x45 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 45 

# 014fa Pop8 [Register(0x48)]
#       Restoring reg0x48 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 48 

# 014fc Pop8 [Register(0x49)]
#       Restoring reg0x49 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 49 

# 014fe Pop8 [Register(0x4a)]
#       Restoring reg0x4a after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 4a 

# 01500 Pop8 [Register(0x4b)]
#       Restoring reg0x4b after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 4b 

# 01502 Pop8 [Register(0x4c)]
#       Restoring reg0x4c after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 4c 

# 01504 Pop8 [Register(0x4d)]
#       Restoring reg0x4d after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 4d 

# 01506 Pop8 [Register(0x4e)]
#       Restoring reg0x4e after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 4e 

# 01508 Pop8 [Register(0x4f)]
#       Restoring reg0x4f after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 4f 

# 0150a Pop8 [Register(0x50)]
#       Restoring reg0x50 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 50 

# 0150c Pop8 [Register(0x51)]
#       Restoring reg0x51 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 51 

# 0150e Pop8 [Register(0x52)]
#       Restoring reg0x52 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 52 

# 01510 Pop8 [Register(0x53)]
#       Restoring reg0x53 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 53 

# 01512 Pop8 [Register(0x54)]
#       Restoring reg0x54 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 54 

# 01514 Pop8 [Register(0x55)]
#       Restoring reg0x55 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 55 

# 01516 Pop8 [Register(0x56)]
#       Restoring reg0x56 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 56 

# 01518 Pop8 [Register(0x57)]
#       Restoring reg0x57 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 57 

# 0151a Pop8 [Register(0x58)]
#       Restoring reg0x58 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 58 

# 0151c Pop8 [Register(0x59)]
#       Restoring reg0x59 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 59 

# 0151e Pop8 [Register(0x5c)]
#       Restoring reg0x5c after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 5c 

# 01520 Pop8 [Register(0x5d)]
#       Restoring reg0x5d after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 5d 

# 01522 Pop8 [Register(0x5e)]
#       Restoring reg0x5e after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 5e 

# 01524 Pop8 [Register(0x5f)]
#       Restoring reg0x5f after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 5f 

# 01526 Pop8 [Register(0x60)]
#       Restoring reg0x60 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 60 

# 01528 Pop8 [Register(0x61)]
#       Restoring reg0x61 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 61 

# 0152a Pop8 [Register(0x62)]
#       Restoring reg0x62 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 62 

# 0152c Pop8 [Register(0x63)]
#       Restoring reg0x63 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 63 

# 0152e Pop8 [Register(0x64)]
#       Restoring reg0x64 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 64 

# 01530 Pop8 [Register(0x68)]
#       Restoring reg0x68 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 68 

# 01532 Pop8 [Register(0x69)]
#       Restoring reg0x69 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 69 

# 01534 Pop8 [Register(0x6a)]
#       Restoring reg0x6a after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 6a 

# 01536 Pop8 [Register(0x6b)]
#       Restoring reg0x6b after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 6b 

# t25ee <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }
# Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] })
# Number(0n10/0x0au8)
# 01538 LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       t25ee <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }
#       Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] })
#       Number(0n10/0x0au8)
04 60 0a 

# inline_RpnCalc_handle_putc_24_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_24_tac13 <- inline_RpnCalc_handle_putc_24_c U8` with constant `inline_RpnCalc_handle_putc_24_tac13 <- 0n10/0x0au8 `.
# 0153b LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_24_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_24_tac13 <- inline_RpnCalc_handle_putc_24_c U8` with constant `inline_RpnCalc_handle_putc_24_tac13 <- 0n10/0x0au8 `.
04 60 0a 

# None <= call io_write0(inline_RpnCalc_handle_putc_24_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 0153e Out0 [Register(0x60)]
#       IoWrite0
68 60 

# inline_RpnCalc_handle_putc_24_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 01540 LoadImm32 [Register(0x3c), Constant32(0x000f105c=987228)]
#       inline_RpnCalc_handle_putc_24_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
20 3c 5c 10 0f 00 

# inline_RpnCalc_handle_putc_24_t76c7 <- mem[inline_RpnCalc_handle_putc_24_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 01546 Load8 [Register(0x3c), Register(0x60)]
#       inline_RpnCalc_handle_putc_24_t76c7 <- mem[inline_RpnCalc_handle_putc_24_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
05 3c 60 

# inline_RpnCalc_handle_putc_24_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 01549 LoadImm8 [Register(0x44), Constant8(0x00=0)]
#       inline_RpnCalc_handle_putc_24_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 44 00 

# if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_putc_24_ta97f then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# 0154c Cmp8 [Register(0x60), Register(0x44)]
#       if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_putc_24_ta97f then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
15 60 44 

# 0154f JzImm [Label24(inline_RpnCalc_handle_putc_24_putc_if_else_0_2)]
#       if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_putc_24_ta97f then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
72 73 15 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_putc_24_ta97f then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_24_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_24_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_24_putc_if_true_0_1
# inline_RpnCalc_handle_putc_24_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_24_tac13 <- inline_RpnCalc_handle_putc_24_c U8` with constant `inline_RpnCalc_handle_putc_24_tac13 <- 0n10/0x0au8 `.
# 01553 LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_24_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_24_tac13 <- inline_RpnCalc_handle_putc_24_c U8` with constant `inline_RpnCalc_handle_putc_24_tac13 <- 0n10/0x0au8 `.
04 60 0a 

# None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 01556 Copy8 [Register(0x60), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_24_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 60 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 140, 141, 142, 143, 144, 145, 146, 147, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252}
# Registers to save: []
# 01559 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 0155f StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 69 15 00 00 

# 01565 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 67 1f 00 

# 01569 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_RpnCalc_handle_putc_24_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 0156f JmpImm [Label24(inline_RpnCalc_handle_putc_24_putc_if_end_0)]
#       goto inline_RpnCalc_handle_putc_24_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 73 15 00 

# :inline_RpnCalc_handle_putc_24_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_24_putc_if_else_0_2
# :inline_RpnCalc_handle_putc_24_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_24_putc_if_end_0
# goto inline_RpnCalc_handle_putc_24_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_24_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_24_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_24_function_end_putc None
# inline_RpnCalc_handle_putc_24_function_end_putc
# td0f3 <- i U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nAssign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }\nArithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x45), Register(0x45)], resolved: None }
# i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
# 01573 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
04 00 01 

# 01576 Add8NoCarryIn [Register(0x45), Register(0x00), Register(0x45)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
14 45 00 45 

# goto RpnCalc_handle_while_predicate_44 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 0157a JmpImm [Label24(RpnCalc_handle_while_predicate_44)]
#       goto RpnCalc_handle_while_predicate_44 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 eb 13 00 

# :RpnCalc_handle_while_end_46 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_while_end_46
# goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 0157e JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 24 16 00 

# :RpnCalc_handle_if_else_9_43 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_9_43
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(0n57/0x39u8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# teed8 <- 0n57/0x39u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }
# Number(0n57/0x39u8)
# 01582 LoadImm8 [Register(0x45), Constant8(0x39=57)]
#       teed8 <- 0n57/0x39u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }
#       Number(0n57/0x39u8)
04 45 39 

# if tdcd9 <= teed8 then 'RpnCalc_handle_if_true_10_47' else 'RpnCalc_handle_if_else_10_48' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }
# 01585 Cmp8 [Register(0x44), Register(0x45)]
#       if tdcd9 <= teed8 then 'RpnCalc_handle_if_true_10_47' else 'RpnCalc_handle_if_else_10_48' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }
15 44 45 

# 01588 JcImm [Label24(RpnCalc_handle_if_true_10_47)]
#       if tdcd9 <= teed8 then 'RpnCalc_handle_if_true_10_47' else 'RpnCalc_handle_if_else_10_48' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }
71 90 15 00 

# 0158c JmpImm [Label24(RpnCalc_handle_if_else_10_48)]
#       if tdcd9 <= teed8 then 'RpnCalc_handle_if_true_10_47' else 'RpnCalc_handle_if_else_10_48' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }
70 24 16 00 

# :RpnCalc_handle_if_true_10_47 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_10_47
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident(\"ch\"), Number(0n48/0x30u8)) }) }])], else_block: [] }\nComparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(0n48/0x30u8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# tdcb0 <- 0n48/0x30u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }
# Number(0n48/0x30u8)
# 01590 LoadImm8 [Register(0x45), Constant8(0x30=48)]
#       tdcb0 <- 0n48/0x30u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }
#       Number(0n48/0x30u8)
04 45 30 

# if tdcd9 >= tdcb0 then 'RpnCalc_handle_if_true_0_50' else 'RpnCalc_handle_if_else_0_51' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }
# 01593 Cmp8 [Register(0x45), Register(0x44)]
#       if tdcd9 >= tdcb0 then 'RpnCalc_handle_if_true_0_50' else 'RpnCalc_handle_if_else_0_51' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }
15 45 44 

# 01596 JcImm [Label24(RpnCalc_handle_if_true_0_50)]
#       if tdcd9 >= tdcb0 then 'RpnCalc_handle_if_true_0_50' else 'RpnCalc_handle_if_else_0_51' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }
71 9e 15 00 

# 0159a JmpImm [Label24(RpnCalc_handle_if_else_0_51)]
#       if tdcd9 >= tdcb0 then 'RpnCalc_handle_if_true_0_50' else 'RpnCalc_handle_if_else_0_51' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }
70 20 16 00 

# :RpnCalc_handle_if_true_0_50 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }
# RpnCalc_handle_if_true_0_50
# tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# 0159e Copy32 [Register(0x40), Register(0x38)]
#       tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
#       Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
#       Ident("c")
21 40 38 

# tfdb7 <- tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# 015a1 AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000048=72)]
#       tfdb7 <- tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
32 38 48 00 00 00 

# ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }
# Number(0n1/0x01u8)
# 015a7 LoadImm8 [Register(0x58), Constant8(0x01=1)]
#       ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }
#       Number(0n1/0x01u8)
04 58 01 

# mem[tfdb7] <- ta11a U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }
# 015aa Store8 [Register(0x58), Register(0x38)]
#       mem[tfdb7] <- ta11a U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }
06 58 38 

# tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# 015ad Copy32 [Register(0x40), Register(0x38)]
#       tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
#       Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
#       Ident("c")
21 40 38 

# t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# 015b0 Copy32 [Register(0x38), Register(0x48)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
21 38 48 

# 015b3 AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000044=68)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
32 48 44 00 00 00 

# tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# 015b9 Copy32 [Register(0x40), Register(0x38)]
#       tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
#       Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
#       Ident("c")
21 40 38 

# t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# 015bc Copy32 [Register(0x38), Register(0x48)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
21 38 48 

# 015bf AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000044=68)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
32 48 44 00 00 00 

# td60 <- mem[t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# 015c5 Load32 [Register(0x48), Register(0x3c)]
#       td60 <- mem[t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
22 48 3c 

# inline_RpnCalc_handle_mul32_by10_13_a <- td60 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
# 015c8 Copy32 [Register(0x3c), Register(0x38)]
#       inline_RpnCalc_handle_mul32_by10_13_a <- td60 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
21 3c 38 

# inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(49,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(49,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(49,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(49,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_a <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(49,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# 015cb ClearCarry []
#       inline_RpnCalc_handle_mul32_by10_13_a <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(49,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
03 

# 015cc AddCarry32_1 [Register(0x38), Register(0x38), Register(0x38)]
#       inline_RpnCalc_handle_mul32_by10_13_a <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(49,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
30 38 38 38 

# 015d0 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_by10_13_a <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(49,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
31 

# inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(50,5))
# Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(50,5))\nAssign { target: Ident(\"b\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(50,5))
# Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(50,5))\nAssign { target: Ident(\"b\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(50,5))
# Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# 015d1 ClearCarry []
#       inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(50,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
03 

# 015d2 AddCarry32_1 [Register(0x38), Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(50,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
30 38 38 3c 

# 015d6 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(50,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
31 

# inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 Some('/lutcomp/programs/lib/mul.j':(51,5))
# Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
# Arithmetic(Add, Ident("b"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 Some('/lutcomp/programs/lib/mul.j':(51,5))\nAssign { target: Ident(\"b\"), var_type: None, value: Arithmetic(Add, Ident(\"b\"), Ident(\"b\")) }\nArithmetic(Add, Ident(\"b\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 Some('/lutcomp/programs/lib/mul.j':(51,5))
# Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
# Arithmetic(Add, Ident("b"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 Some('/lutcomp/programs/lib/mul.j':(51,5))\nAssign { target: Ident(\"b\"), var_type: None, value: Arithmetic(Add, Ident(\"b\"), Ident(\"b\")) }\nArithmetic(Add, Ident(\"b\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_tace9) Some('/lutcomp/programs/lib/mul.j':(51,5))
# Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
# Arithmetic(Add, Ident("b"), Ident("b"))
# 015d7 ClearCarry []
#       inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_tace9) Some('/lutcomp/programs/lib/mul.j':(51,5))
#       Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
#       Arithmetic(Add, Ident("b"), Ident("b"))
03 

# 015d8 AddCarry32_1 [Register(0x3c), Register(0x3c), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_tace9) Some('/lutcomp/programs/lib/mul.j':(51,5))
#       Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
#       Arithmetic(Add, Ident("b"), Ident("b"))
30 3c 3c 3c 

# 015dc AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_tace9) Some('/lutcomp/programs/lib/mul.j':(51,5))
#       Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
#       Arithmetic(Add, Ident("b"), Ident("b"))
31 

# inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 Some('/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 Some('/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\nArithmetic(Add, Ident(\"b\"), Ident(\"a\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\nArithmetic(Add, Ident(\"b\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_t7eaf <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# 015dd ClearCarry []
#       inline_RpnCalc_handle_mul32_by10_13_t7eaf <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(52,5))
#       Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
03 

# 015de AddCarry32_1 [Register(0x3c), Register(0x38), Register(0x38)]
#       inline_RpnCalc_handle_mul32_by10_13_t7eaf <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(52,5))
#       Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
30 3c 38 38 

# 015e2 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_by10_13_t7eaf <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(52,5))
#       Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
31 

# tadd <- inline_RpnCalc_handle_mul32_by10_13_t7eaf U32 Some('/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# optimized away noop copy Instruction { source: "tadd <- inline_RpnCalc_handle_mul32_by10_13_t7eaf U32 Some('/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# goto inline_RpnCalc_handle_mul32_by10_13_function_end_mul32_by10 Some('/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_mul32_by10_13_function_end_mul32_by10 Some('/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_mul32_by10_13_function_end_mul32_by10)], resolved: None }
# :inline_RpnCalc_handle_mul32_by10_13_function_end_mul32_by10 None
# inline_RpnCalc_handle_mul32_by10_13_function_end_mul32_by10
# mem[t6e8e] <- tadd U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# 015e3 Store32_1 [Register(0x38), Register(0x48)]
#       mem[t6e8e] <- tadd U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
23 38 48 

# 015e6 Store32_2 []
#       mem[t6e8e] <- tadd U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
24 

# tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# 015e7 Copy32 [Register(0x40), Register(0x38)]
#       tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
#       Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
#       Ident("c")
21 40 38 

# t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# 015ea Copy32 [Register(0x38), Register(0x48)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
21 38 48 

# 015ed AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000044=68)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
32 48 44 00 00 00 

# tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# 015f3 Copy32 [Register(0x40), Register(0x38)]
#       tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
#       Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
#       Ident("c")
21 40 38 

# t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# 015f6 Copy32 [Register(0x38), Register(0x48)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
21 38 48 

# 015f9 AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000044=68)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
32 48 44 00 00 00 

# td60 <- mem[t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
# PtrFieldDeref("c", "num")
# 015ff Load32 [Register(0x48), Register(0x3c)]
#       td60 <- mem[t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
#       PtrFieldDeref("c", "num")
22 48 3c 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }
# Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8))
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nAssign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident(\"ch\"), Number(0n48/0x30u8)) }) }\nArithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident(\"ch\"), Number(0n48/0x30u8)) })\nCast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident(\"ch\"), Number(0n48/0x30u8)) }\nArithmetic(Subtract, Ident(\"ch\"), Number(0n48/0x30u8))\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t9dae <- tdcd9 Subtract Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }
# Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8))
# 01602 LoadImm8 [Register(0x00), Constant8(0xd0=208)]
#       t9dae <- tdcd9 Subtract Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }
#       Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8))
04 00 d0 

# 01605 Add8NoCarryIn [Register(0x44), Register(0x00), Register(0x45)]
#       t9dae <- tdcd9 Subtract Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }
#       Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8))
14 44 00 45 

# tdc11 U32 <- t9dae U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }
# 01609 LoadImm32 [Register(0x38), Constant32(0x00000000=0)]
#       Zero-pad for tdc11 U32 <- t9dae U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }
20 38 00 00 00 00 

# 0160f Copy8 [Register(0x45), Register(0x38)]
#       tdc11 U32 <- t9dae U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }
0b 45 38 

# tbdb5 <- td60 Add Var(tdc11) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
# 01612 ClearCarry []
#       tbdb5 <- td60 Add Var(tdc11) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
03 

# 01613 AddCarry32_1 [Register(0x3c), Register(0x38), Register(0x38)]
#       tbdb5 <- td60 Add Var(tdc11) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
30 3c 38 38 

# 01617 AddCarry32_2 []
#       tbdb5 <- td60 Add Var(tdc11) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
31 

# mem[t6e8e] <- tbdb5 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
# 01618 Store32_1 [Register(0x38), Register(0x48)]
#       mem[t6e8e] <- tbdb5 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
23 38 48 

# 0161b Store32_2 []
#       mem[t6e8e] <- tbdb5 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
24 

# goto RpnCalc_handle_if_end_49 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 0161c JmpImm [Label24(RpnCalc_handle_if_end_49)]
#       goto RpnCalc_handle_if_end_49 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 20 16 00 

# :RpnCalc_handle_if_else_0_51 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_0_51
# :RpnCalc_handle_if_end_49 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_end_49
# goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 01620 JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 24 16 00 

# :RpnCalc_handle_if_else_10_48 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_10_48
# :RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_end_23
# ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/rpnlib.j':(118,5))
# Return { value: Some(Number(0n1/0x01u8)) }
# Number(0n1/0x01u8)
# 01624 LoadImm8 [Register(0x58), Constant8(0x01=1)]
#       ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/rpnlib.j':(118,5))
#       Return { value: Some(Number(0n1/0x01u8)) }
#       Number(0n1/0x01u8)
04 58 01 

# return Some(ta11a) Some('/lutcomp/programs/lib/rpnlib.j':(118,5))
# Return { value: Some(Number(0n1/0x01u8)) }
# 01627 Copy8 [Register(0x58), Register(0x00)]
#       return Some(ta11a) Some('/lutcomp/programs/lib/rpnlib.j':(118,5))
#       Return { value: Some(Number(0n1/0x01u8)) }
0b 58 00 

# 0162a JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_RpnCalc_handle None
# function_end_RpnCalc_handle
# Unreachable None
# 0162c Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :RpnCalc_run
# Ret Some(U8)
# Arg0=calc
# Var calc (Arg0 calc Ptr(Struct("RpnCalc"))) Reg(U32) Some([108, 109, 110, 111])
# Var ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([112])
# Var inline_RpnCalc_run_getchar_39_ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([112])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([116, 117, 118, 119]) Number(0n987392/0x000f1100u32)
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee (t3ee PtrFieldDeref("s", "last")) Reg(U8) Some([120])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t44ed (t44ed Ident("value")) Reg(U8) Some([112])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([112]) Number(0n0/0x00u8)
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11 (tae11 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }) Reg(U32) Some([116, 117, 118, 119])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469 (tb469 Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) Reg(U32) Some([124, 125, 126, 127])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd (tb6dd PtrFieldDeref("s", "first")) Reg(U8) Some([128])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 (tb702 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }) Reg(U32) Some([124, 125, 126, 127]) Number(0n987648/0x000f1200u32)
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff (tc1ff Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }) Reg(U32) Some([124, 125, 126, 127]) Number(0n987652/0x000f1204u32)
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_te468 (te468 Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))) Reg(U8) Some([112])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_value (Local value Number(U8) Reg(U8)) Reg(U8) Some([129])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_n (Arg1 n Number(U8)) Reg(U8) Some([112])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([124, 125, 126, 127]) Number(0n987392/0x000f1100u32)
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 (t2187 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }) Reg(U32) Some([124, 125, 126, 127])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee (t3ee PtrFieldDeref("s", "last")) Reg(U8) Some([128])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7 (t5bb7 Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) Reg(U32) Some([132, 133, 134, 135])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff (tc1ff Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }) Reg(U32) Some([136, 137, 138, 139]) Number(0n987652/0x000f1204u32)
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tf3c4 (tf3c4 Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))) Reg(U8) Some([112])
# Var inline_RpnCalc_run_getchar_39_t0 (static "keyboard_enable" addr) Reg(U32) Some([116, 117, 118, 119]) Number(0n987144/0x000f1008u32)
# Var inline_RpnCalc_run_getchar_39_t861f (t861f Call(Call { function: "io_ready_to_read", parameters: [] })) Reg(U8) Some([112])
# Var inline_RpnCalc_run_getchar_39_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([120]) Number(0n0/0x00u8)
# Var inline_RpnCalc_run_getchar_39_tb816 (tb816 TtyIn) Reg(U8) Some([112])
# Var inline_RpnCalc_run_getchar_39_tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([112])
# Var inline_RpnCalc_run_getchar_39_te3c4 (te3c4 Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8))) Reg(U8) Some([112])
# Var inline_RpnCalc_run_getchar_39_teb6e (teb6e Ident("keyboard_enable")) Reg(U8) Some([112])
# Var result (Local result Number(U8) Reg(U8)) Reg(U8) Some([112])
# Var t57fd (t57fd Ident("result")) Reg(U8) Some([112])
# Var ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([120]) Number(0n0/0x00u8)
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([112])
# 01631 Copy32 [Register(0x00), Register(0x6c)]
#       Save function parameter 'calc' registers [0, 1, 2, 3] to locals [108, 109, 110, 111].
21 00 6c 

# :RpnCalc_run_while_predicate_0 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }] }
# RpnCalc_run_while_predicate_0
# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }] }
# Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 01634 LoadImm8 [Register(0x78), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }] }
#       Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 78 00 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }] }
# Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 01637 LoadImm8 [Register(0x78), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }] }
#       Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 78 00 

# if ta97f == ta97f then 'RpnCalc_run_while_body_1' else 'RpnCalc_run_while_end_2' Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }] }
# Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }
# 0163a Cmp8 [Register(0x78), Register(0x78)]
#       if ta97f == ta97f then 'RpnCalc_run_while_body_1' else 'RpnCalc_run_while_end_2' Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }] }
#       Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }
15 78 78 

# 0163d JzImm [Label24(RpnCalc_run_while_body_1)]
#       if ta97f == ta97f then 'RpnCalc_run_while_body_1' else 'RpnCalc_run_while_end_2' Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }] }
#       Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }
72 45 16 00 

# 01641 JmpImm [Label24(RpnCalc_run_while_end_2)]
#       if ta97f == ta97f then 'RpnCalc_run_while_body_1' else 'RpnCalc_run_while_end_2' Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }] }
#       Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }
70 d4 17 00 

# :RpnCalc_run_while_body_1 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }] }
# RpnCalc_run_while_body_1
# inline_RpnCalc_run_getchar_39_ch <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(19,5))
# Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 01645 LoadImm8 [Register(0x70), Constant8(0x00=0)]
#       inline_RpnCalc_run_getchar_39_ch <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(19,5))
#       Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 70 00 

# :inline_RpnCalc_run_getchar_39_getchar_while_predicate_0 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
# inline_RpnCalc_run_getchar_39_getchar_while_predicate_0
# inline_RpnCalc_run_getchar_39_tdcd9 <- inline_RpnCalc_run_getchar_39_ch U8 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_tdcd9 <- inline_RpnCalc_run_getchar_39_ch U8 Some('/lutcomp/programs/lib/stdio.j':(21,5))\nWhile { predicate: Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n0/0x00u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident(\"keyboard_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"Keyboard_poll\", parameters: [] }) }])], else_block: [] }, Assign { target: Ident(\"ch\"), var_type: None, value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"stdin\"))] }) }] }\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n0/0x00u8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x70), Register(0x70)], resolved: None }
# inline_RpnCalc_run_getchar_39_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(21,5))
# While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 01648 LoadImm8 [Register(0x78), Constant8(0x00=0)]
#       inline_RpnCalc_run_getchar_39_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 78 00 

# if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2' Some('/lutcomp/programs/lib/stdio.j':(21,5))
# While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }
# 0164b Cmp8 [Register(0x70), Register(0x78)]
#       if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }
15 70 78 

# 0164e JzImm [Label24(inline_RpnCalc_run_getchar_39_getchar_while_body_1)]
#       if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }
72 56 16 00 

# 01652 JmpImm [Label24(inline_RpnCalc_run_getchar_39_getchar_while_end_2)]
#       if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }
70 3f 17 00 

# :inline_RpnCalc_run_getchar_39_getchar_while_body_1 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
# inline_RpnCalc_run_getchar_39_getchar_while_body_1
# Some(inline_RpnCalc_run_getchar_39_t861f) <= call io_ready_to_read() Some('/lutcomp/programs/lib/stdio.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
# Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8))
# Call(Call { function: "io_ready_to_read", parameters: [] })
# 01656 IoReadyToRead [Register(0x70)]
#       ReadyToRead
79 70 

# inline_RpnCalc_run_getchar_39_te3c4 <- inline_RpnCalc_run_getchar_39_t861f BitwiseAnd Number(0n1/0x01u8) Some('/lutcomp/programs/lib/stdio.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
# Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8))
# 01658 AndImm8 [Register(0x70), Constant8(0x01=1)]
#       inline_RpnCalc_run_getchar_39_te3c4 <- inline_RpnCalc_run_getchar_39_t861f BitwiseAnd Number(0n1/0x01u8) Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
#       Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8))
18 70 01 

# inline_RpnCalc_run_getchar_39_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 0165b LoadImm8 [Register(0x78), Constant8(0x00=0)]
#       inline_RpnCalc_run_getchar_39_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 78 00 

# if inline_RpnCalc_run_getchar_39_te3c4 != inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5' Some('/lutcomp/programs/lib/stdio.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
# 0165e Cmp8 [Register(0x70), Register(0x78)]
#       if inline_RpnCalc_run_getchar_39_te3c4 != inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
15 70 78 

# 01661 JzImm [Label24(inline_RpnCalc_run_getchar_39_getchar_if_else_0_5)]
#       if inline_RpnCalc_run_getchar_39_te3c4 != inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
72 a5 16 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_run_getchar_39_te3c4 != inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5' Some('/lutcomp/programs/lib/stdio.j':(21,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident(\"keyboard_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"Keyboard_poll\", parameters: [] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_run_getchar_39_getchar_if_true_0_4)], resolved: None }
# :inline_RpnCalc_run_getchar_39_getchar_if_true_0_4 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
# inline_RpnCalc_run_getchar_39_getchar_if_true_0_4
# inline_RpnCalc_run_getchar_39_tb816 <- ttyin Some('/lutcomp/programs/lib/stdio.j':(21,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
# TtyIn
# 01665 In0 [Register(0x70)]
#       inline_RpnCalc_run_getchar_39_tb816 <- ttyin Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
#       Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
#       TtyIn
60 70 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s <- 0n987392/0x000f1100u32  Some('/lutcomp/programs/lib/stdio.j':(21,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
# # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s <- inline_RpnCalc_run_getchar_39_tfff6 U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s <- 0n987392/0x000f1100u32 `.
# 01667 LoadImm32 [Register(0x7c), Constant32(0x000f1100=987392)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s <- 0n987392/0x000f1100u32  Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
#       Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
#       # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s <- inline_RpnCalc_run_getchar_39_tfff6 U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s <- 0n987392/0x000f1100u32 `.
20 7c 00 11 0f 00 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_n <- inline_RpnCalc_run_getchar_39_tb816 U8 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_n <- inline_RpnCalc_run_getchar_39_tb816 U8 Some('/lutcomp/programs/lib/stdio.j':(21,5))\nVoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }\nCall(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] })\n", opcode: Copy8, args: [Register(0x70), Register(0x70)], resolved: None }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
# # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32 `.
# 0166d LoadImm32 [Register(0x88), Constant32(0x000f1204=987652)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
#       # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32 `.
20 88 04 12 0f 00 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# 01673 Load8 [Register(0x88), Register(0x80)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
05 88 80 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
# 01676 LoadImm32 [Register(0x84), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
20 84 00 00 00 00 

# 0167c Copy8 [Register(0x80), Register(0x84)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
0b 80 84 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# 0167f ClearCarry []
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
03 

# 01680 AddCarry32_1 [Register(0x7c), Register(0x84), Register(0x7c)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
30 7c 84 7c 

# 01684 AddCarry32_2 []
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
31 

# mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_n U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# 01685 Store8 [Register(0x70), Register(0x7c)]
#       mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_n U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
06 70 7c 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
# # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32 `.
# 01688 LoadImm32 [Register(0x88), Constant32(0x000f1204=987652)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
#       # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32 `.
20 88 04 12 0f 00 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
# # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32 `.
# 0168e LoadImm32 [Register(0x88), Constant32(0x000f1204=987652)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
#       # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32 `.
20 88 04 12 0f 00 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "last")
# 01694 Load8 [Register(0x88), Register(0x80)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "last")
05 88 80 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tf3c4 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
# 01697 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tf3c4 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
04 00 01 

# 0169a Add8NoCarryIn [Register(0x80), Register(0x00), Register(0x70)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tf3c4 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
14 80 00 70 

# mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tf3c4 U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
# 0169e Store8 [Register(0x70), Register(0x88)]
#       mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tf3c4 U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
06 70 88 

# goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_function_end_queue_push None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_function_end_queue_push None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_function_end_queue_push)], resolved: None }
# :inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_function_end_queue_push None
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_function_end_queue_push
# goto inline_RpnCalc_run_getchar_39_getchar_if_end_3 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 016a1 JmpImm [Label24(inline_RpnCalc_run_getchar_39_getchar_if_end_3)]
#       goto inline_RpnCalc_run_getchar_39_getchar_if_end_3 Some('/lutcomp/programs/lib/stdio.j':(21,5))
70 d2 16 00 

# :inline_RpnCalc_run_getchar_39_getchar_if_else_0_5 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# inline_RpnCalc_run_getchar_39_getchar_if_else_0_5
# inline_RpnCalc_run_getchar_39_t0 <- 0n987144/0x000f1008u32  Some('/lutcomp/programs/lib/stdio.j':(21,5))
# Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }
# Ident("keyboard_enable")
# 016a5 LoadImm32 [Register(0x74), Constant32(0x000f1008=987144)]
#       inline_RpnCalc_run_getchar_39_t0 <- 0n987144/0x000f1008u32  Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }
#       Ident("keyboard_enable")
20 74 08 10 0f 00 

# inline_RpnCalc_run_getchar_39_teb6e <- mem[inline_RpnCalc_run_getchar_39_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }
# Ident("keyboard_enable")
# 016ab Load8 [Register(0x74), Register(0x70)]
#       inline_RpnCalc_run_getchar_39_teb6e <- mem[inline_RpnCalc_run_getchar_39_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }
#       Ident("keyboard_enable")
05 74 70 

# inline_RpnCalc_run_getchar_39_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(21,5))
# Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 016ae LoadImm8 [Register(0x78), Constant8(0x00=0)]
#       inline_RpnCalc_run_getchar_39_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 78 00 

# if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_1_7' Some('/lutcomp/programs/lib/stdio.j':(21,5))
# Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }
# 016b1 Cmp8 [Register(0x70), Register(0x78)]
#       if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_1_7' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }
15 70 78 

# 016b4 JzImm [Label24(inline_RpnCalc_run_getchar_39_getchar_if_else_1_7)]
#       if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_1_7' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }
72 d2 16 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_1_7' Some('/lutcomp/programs/lib/stdio.j':(21,5))\nComparison { op: NotEquals, left: Ident(\"keyboard_enable\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_run_getchar_39_getchar_if_true_1_6)], resolved: None }
# :inline_RpnCalc_run_getchar_39_getchar_if_true_1_6 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# inline_RpnCalc_run_getchar_39_getchar_if_true_1_6
# None <= call Keyboard_poll() Some('/lutcomp/programs/lib/stdio.j':(21,5))
# VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }
# Call(Call { function: "Keyboard_poll", parameters: [] })
# Registers used by this function: {108, 109, 110, 111, 112, 116, 117, 118, 119, 120, 124, 125, 126, 127, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139}
# Registers used by callee tree: {24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52}
# Registers to save: []
# 016b8 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:Keyboard_poll))
32 0c fc ff ff ff 

# 016be StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:Keyboard_poll))
25 0c c8 16 00 00 

# 016c4 JmpImm [Label24(:Keyboard_poll)]
#       PseudoCall(Label24(:Keyboard_poll))
70 46 04 00 

# 016c8 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:Keyboard_poll))
32 0c 04 00 00 00 

# goto inline_RpnCalc_run_getchar_39_getchar_if_end_3 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 016ce JmpImm [Label24(inline_RpnCalc_run_getchar_39_getchar_if_end_3)]
#       goto inline_RpnCalc_run_getchar_39_getchar_if_end_3 Some('/lutcomp/programs/lib/stdio.j':(21,5))
70 d2 16 00 

# :inline_RpnCalc_run_getchar_39_getchar_if_else_1_7 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# inline_RpnCalc_run_getchar_39_getchar_if_else_1_7
# :inline_RpnCalc_run_getchar_39_getchar_if_end_3 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# inline_RpnCalc_run_getchar_39_getchar_if_end_3
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- 0n987392/0x000f1100u32  Some('/lutcomp/programs/lib/stdio.j':(21,5))
# Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }
# Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] })
# # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- inline_RpnCalc_run_getchar_39_tfff6 U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- 0n987392/0x000f1100u32 `.
# 016d2 LoadImm32 [Register(0x74), Constant32(0x000f1100=987392)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- 0n987392/0x000f1100u32  Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }
#       Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] })
#       # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- inline_RpnCalc_run_getchar_39_tfff6 U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- 0n987392/0x000f1100u32 `.
20 74 00 11 0f 00 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32  Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
# # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32 `.
# 016d8 LoadImm32 [Register(0x7c), Constant32(0x000f1200=987648)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32  Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
#       # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32 `.
20 7c 00 12 0f 00 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "first")
# 016de Load8 [Register(0x7c), Register(0x80)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "first")
05 7c 80 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
# # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- 0n987652/0x000f1204u32 `.
# 016e1 LoadImm32 [Register(0x7c), Constant32(0x000f1204=987652)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
#       # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- 0n987652/0x000f1204u32 `.
20 7c 04 12 0f 00 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# 016e7 Load8 [Register(0x7c), Register(0x78)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
05 7c 78 

# if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee then 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1' else 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_else_0_2' Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# 016ea Cmp8 [Register(0x80), Register(0x78)]
#       if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee then 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1' else 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_else_0_2' Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
15 80 78 

# 016ed JzImm [Label24(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1)]
#       if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee then 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1' else 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_else_0_2' Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
72 f5 16 00 

# 016f1 JmpImm [Label24(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_else_0_2)]
#       if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee then 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1' else 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_else_0_2' Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
70 00 17 00 

# :inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(13,5))
# Return { value: Some(Number(0n0/0x00u8)) }
# Number(0n0/0x00u8)
# 016f5 LoadImm8 [Register(0x70), Constant8(0x00=0)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       Return { value: Some(Number(0n0/0x00u8)) }
#       Number(0n0/0x00u8)
04 70 00 

# inline_RpnCalc_run_getchar_39_ch <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# Return { value: Some(Number(0n0/0x00u8)) }
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_ch <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))\nReturn { value: Some(Number(0n0/0x00u8)) }\n", opcode: Copy8, args: [Register(0x70), Register(0x70)], resolved: None }
# goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop Some('/lutcomp/programs/lib/Queue.j':(13,5))
# Return { value: Some(Number(0n0/0x00u8)) }
# 016f8 JmpImm [Label24(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop)]
#       goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       Return { value: Some(Number(0n0/0x00u8)) }
70 3b 17 00 

# goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_end_0 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# 016fc JmpImm [Label24(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_end_0)]
#       goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_end_0 Some('/lutcomp/programs/lib/Queue.j':(13,5))
70 00 17 00 

# :inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_else_0_2 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_else_0_2
# :inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_end_0 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_end_0
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32  Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
# # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32 `.
# 01700 LoadImm32 [Register(0x7c), Constant32(0x000f1200=987648)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32  Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
#       # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32 `.
20 7c 00 12 0f 00 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
# PtrFieldDeref("s", "first")
# 01706 Load8 [Register(0x7c), Register(0x80)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
#       PtrFieldDeref("s", "first")
05 7c 80 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
# 01709 LoadImm32 [Register(0x7c), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
20 7c 00 00 00 00 

# 0170f Copy8 [Register(0x80), Register(0x7c)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
0b 80 7c 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
# 01712 ClearCarry []
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
03 

# 01713 AddCarry32_1 [Register(0x74), Register(0x7c), Register(0x74)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
30 74 7c 74 

# 01717 AddCarry32_2 []
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
31 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_value <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# 01718 Load8 [Register(0x74), Register(0x81)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_value <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
05 74 81 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32  Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
# # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32 `.
# 0171b LoadImm32 [Register(0x7c), Constant32(0x000f1200=987648)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32  Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
#       # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32 `.
20 7c 00 12 0f 00 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32  Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
# # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32 `.
# 01721 LoadImm32 [Register(0x7c), Constant32(0x000f1200=987648)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32  Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
#       # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32 `.
20 7c 00 12 0f 00 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first")
# 01727 Load8 [Register(0x7c), Register(0x80)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first")
05 7c 80 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_te468 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))
# 0172a LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_te468 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))
04 00 01 

# 0172d Add8NoCarryIn [Register(0x80), Register(0x00), Register(0x70)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_te468 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))
14 80 00 70 

# mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_te468 U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
# 01731 Store8 [Register(0x70), Register(0x7c)]
#       mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_te468 U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
06 70 7c 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t44ed <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_value U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))
# Return { value: Some(Ident("value")) }
# Ident("value")
# 01734 Copy8 [Register(0x81), Register(0x70)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t44ed <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_value U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))
#       Return { value: Some(Ident("value")) }
#       Ident("value")
0b 81 70 

# inline_RpnCalc_run_getchar_39_ch <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t44ed U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))
# Return { value: Some(Ident("value")) }
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_ch <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t44ed U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))\nReturn { value: Some(Ident(\"value\")) }\n", opcode: Copy8, args: [Register(0x70), Register(0x70)], resolved: None }
# goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop Some('/lutcomp/programs/lib/Queue.j':(20,5))
# Return { value: Some(Ident("value")) }
# 01737 JmpImm [Label24(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop)]
#       goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop Some('/lutcomp/programs/lib/Queue.j':(20,5))
#       Return { value: Some(Ident("value")) }
70 3b 17 00 

# :inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop None
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop
# goto inline_RpnCalc_run_getchar_39_getchar_while_predicate_0 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 0173b JmpImm [Label24(inline_RpnCalc_run_getchar_39_getchar_while_predicate_0)]
#       goto inline_RpnCalc_run_getchar_39_getchar_while_predicate_0 Some('/lutcomp/programs/lib/stdio.j':(21,5))
70 48 16 00 

# :inline_RpnCalc_run_getchar_39_getchar_while_end_2 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# inline_RpnCalc_run_getchar_39_getchar_while_end_2
# inline_RpnCalc_run_getchar_39_tdcd9 <- inline_RpnCalc_run_getchar_39_ch U8 Some('/lutcomp/programs/lib/stdio.j':(31,5))
# Return { value: Some(Ident("ch")) }
# Ident("ch")
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_tdcd9 <- inline_RpnCalc_run_getchar_39_ch U8 Some('/lutcomp/programs/lib/stdio.j':(31,5))\nReturn { value: Some(Ident(\"ch\")) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x70), Register(0x70)], resolved: None }
# ch <- inline_RpnCalc_run_getchar_39_tdcd9 U8 Some('/lutcomp/programs/lib/stdio.j':(31,5))
# Return { value: Some(Ident("ch")) }
# optimized away noop copy Instruction { source: "ch <- inline_RpnCalc_run_getchar_39_tdcd9 U8 Some('/lutcomp/programs/lib/stdio.j':(31,5))\nReturn { value: Some(Ident(\"ch\")) }\n", opcode: Copy8, args: [Register(0x70), Register(0x70)], resolved: None }
# goto inline_RpnCalc_run_getchar_39_function_end_getchar Some('/lutcomp/programs/lib/stdio.j':(31,5))
# Return { value: Some(Ident("ch")) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_run_getchar_39_function_end_getchar Some('/lutcomp/programs/lib/stdio.j':(31,5))\nReturn { value: Some(Ident(\"ch\")) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_run_getchar_39_function_end_getchar)], resolved: None }
# :inline_RpnCalc_run_getchar_39_function_end_getchar None
# inline_RpnCalc_run_getchar_39_function_end_getchar
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
# Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))\nAssign { target: Ident(\"result\"), var_type: Some(Number(U8)), value: Call(Call { function: \"RpnCalc_handle\", parameters: [Ident(\"calc\"), Ident(\"ch\")] }) }\nCall(Call { function: \"RpnCalc_handle\", parameters: [Ident(\"calc\"), Ident(\"ch\")] })\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x70), Register(0x70)], resolved: None }
# Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
# Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
# 0173f Copy32 [Register(0x6c), Register(0x00)]
#       Arg0[c]=calc Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
21 6c 00 

# 01742 Copy8 [Register(0x70), Register(0x04)]
#       Arg1[ch]=tdcd9 Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0b 70 04 

# Registers used by this function: {108, 109, 110, 111, 112, 116, 117, 118, 119, 120, 124, 125, 126, 127, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252}
# Registers to save: [108, 109, 110, 111, 112, 116, 117, 118, 119, 120, 124, 125, 126, 128, 129, 132, 133, 134, 135, 136, 137, 138]
# 01745 Push8 [Register(0x8a)]
#       Saving reg0x8a before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 8a 

# 01747 Push8 [Register(0x89)]
#       Saving reg0x89 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 89 

# 01749 Push8 [Register(0x88)]
#       Saving reg0x88 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 88 

# 0174b Push8 [Register(0x87)]
#       Saving reg0x87 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 87 

# 0174d Push8 [Register(0x86)]
#       Saving reg0x86 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 86 

# 0174f Push8 [Register(0x85)]
#       Saving reg0x85 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 85 

# 01751 Push8 [Register(0x84)]
#       Saving reg0x84 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 84 

# 01753 Push8 [Register(0x81)]
#       Saving reg0x81 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 81 

# 01755 Push8 [Register(0x80)]
#       Saving reg0x80 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 80 

# 01757 Push8 [Register(0x7e)]
#       Saving reg0x7e before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 7e 

# 01759 Push8 [Register(0x7d)]
#       Saving reg0x7d before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 7d 

# 0175b Push8 [Register(0x7c)]
#       Saving reg0x7c before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 7c 

# 0175d Push8 [Register(0x78)]
#       Saving reg0x78 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 78 

# 0175f Push8 [Register(0x77)]
#       Saving reg0x77 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 77 

# 01761 Push8 [Register(0x76)]
#       Saving reg0x76 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 76 

# 01763 Push8 [Register(0x75)]
#       Saving reg0x75 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 75 

# 01765 Push8 [Register(0x74)]
#       Saving reg0x74 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 74 

# 01767 Push8 [Register(0x70)]
#       Saving reg0x70 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 70 

# 01769 Push8 [Register(0x6f)]
#       Saving reg0x6f before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 6f 

# 0176b Push8 [Register(0x6e)]
#       Saving reg0x6e before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 6e 

# 0176d Push8 [Register(0x6d)]
#       Saving reg0x6d before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 6d 

# 0176f Push8 [Register(0x6c)]
#       Saving reg0x6c before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 6c 

# 01771 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:RpnCalc_handle))
32 0c fc ff ff ff 

# 01777 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:RpnCalc_handle))
25 0c 81 17 00 00 

# 0177d JmpImm [Label24(:RpnCalc_handle)]
#       PseudoCall(Label24(:RpnCalc_handle))
70 a4 05 00 

# 01781 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:RpnCalc_handle))
32 0c 04 00 00 00 

# 01787 Pop8 [Register(0x6c)]
#       Restoring reg0x6c after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 6c 

# 01789 Pop8 [Register(0x6d)]
#       Restoring reg0x6d after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 6d 

# 0178b Pop8 [Register(0x6e)]
#       Restoring reg0x6e after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 6e 

# 0178d Pop8 [Register(0x6f)]
#       Restoring reg0x6f after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 6f 

# 0178f Pop8 [Register(0x70)]
#       Restoring reg0x70 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 70 

# 01791 Pop8 [Register(0x74)]
#       Restoring reg0x74 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 74 

# 01793 Pop8 [Register(0x75)]
#       Restoring reg0x75 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 75 

# 01795 Pop8 [Register(0x76)]
#       Restoring reg0x76 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 76 

# 01797 Pop8 [Register(0x77)]
#       Restoring reg0x77 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 77 

# 01799 Pop8 [Register(0x78)]
#       Restoring reg0x78 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 78 

# 0179b Pop8 [Register(0x7c)]
#       Restoring reg0x7c after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 7c 

# 0179d Pop8 [Register(0x7d)]
#       Restoring reg0x7d after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 7d 

# 0179f Pop8 [Register(0x7e)]
#       Restoring reg0x7e after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 7e 

# 017a1 Pop8 [Register(0x80)]
#       Restoring reg0x80 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 80 

# 017a3 Pop8 [Register(0x81)]
#       Restoring reg0x81 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 81 

# 017a5 Pop8 [Register(0x84)]
#       Restoring reg0x84 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 84 

# 017a7 Pop8 [Register(0x85)]
#       Restoring reg0x85 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 85 

# 017a9 Pop8 [Register(0x86)]
#       Restoring reg0x86 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 86 

# 017ab Pop8 [Register(0x87)]
#       Restoring reg0x87 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 87 

# 017ad Pop8 [Register(0x88)]
#       Restoring reg0x88 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 88 

# 017af Pop8 [Register(0x89)]
#       Restoring reg0x89 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 89 

# 017b1 Pop8 [Register(0x8a)]
#       Restoring reg0x8a after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 8a 

# 017b3 Copy8 [Register(0x00), Register(0x70)]
#       Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0b 00 70 

# t57fd <- result U8 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }
# Ident("result")
# optimized away noop copy Instruction { source: "t57fd <- result U8 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"result\"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }\nComparison { op: Equals, left: Ident(\"result\"), right: Number(0n0/0x00u8) }\nIdent(\"result\")\n", opcode: Copy8, args: [Register(0x70), Register(0x70)], resolved: None }
# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 017b6 LoadImm8 [Register(0x78), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 78 00 

# if t57fd == ta97f then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_else_0_5' Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }
# 017b9 Cmp8 [Register(0x70), Register(0x78)]
#       if t57fd == ta97f then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_else_0_5' Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }
15 70 78 

# 017bc JzImm [Label24(RpnCalc_run_if_true_0_4)]
#       if t57fd == ta97f then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_else_0_5' Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }
72 c4 17 00 

# 017c0 JmpImm [Label24(RpnCalc_run_if_else_0_5)]
#       if t57fd == ta97f then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_else_0_5' Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }
70 d0 17 00 

# :RpnCalc_run_if_true_0_4 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# RpnCalc_run_if_true_0_4
# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# Return { value: Some(Number(0n0/0x00u8)) }
# Number(0n0/0x00u8)
# 017c4 LoadImm8 [Register(0x78), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Return { value: Some(Number(0n0/0x00u8)) }
#       Number(0n0/0x00u8)
04 78 00 

# return Some(ta97f) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# Return { value: Some(Number(0n0/0x00u8)) }
# 017c7 Copy8 [Register(0x78), Register(0x00)]
#       return Some(ta97f) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Return { value: Some(Number(0n0/0x00u8)) }
0b 78 00 

# 017ca JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto RpnCalc_run_if_end_3 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# 017cc JmpImm [Label24(RpnCalc_run_if_end_3)]
#       goto RpnCalc_run_if_end_3 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
70 d0 17 00 

# :RpnCalc_run_if_else_0_5 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# RpnCalc_run_if_else_0_5
# :RpnCalc_run_if_end_3 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# RpnCalc_run_if_end_3
# goto RpnCalc_run_while_predicate_0 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# 017d0 JmpImm [Label24(RpnCalc_run_while_predicate_0)]
#       goto RpnCalc_run_while_predicate_0 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
70 34 16 00 

# :RpnCalc_run_while_end_2 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# RpnCalc_run_while_end_2
# :function_end_RpnCalc_run None
# function_end_RpnCalc_run
# Unreachable None
# 017d4 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :delay
# Ret None
# Arg0=x
# Var t60ec (t60ec Number(0n0/0x00000000u32)) Reg(U32) Some([140, 141, 142, 143]) Number(0n0/0x00000000u32)
# Var tad57 (tad57 Ident("x")) Reg(U32) Some([144, 145, 146, 147])
# Var x (Arg0 x Number(U32)) Reg(U32) Some([144, 145, 146, 147])
# 017d9 Copy32 [Register(0x00), Register(0x90)]
#       Save function parameter 'x' registers [0, 1, 2, 3] to locals [144, 145, 146, 147].
21 00 90 

# :delay_while_predicate_0 Some('/lutcomp/programs/lib/delay.j':(2,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
# delay_while_predicate_0
# tad57 <- x U32 Some('/lutcomp/programs/lib/delay.j':(2,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
# Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
# Ident("x")
# optimized away noop copy Instruction { source: "tad57 <- x U32 Some('/lutcomp/programs/lib/delay.j':(2,5))\nWhile { predicate: Comparison { op: NotEquals, left: Ident(\"x\"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident(\"x\"), var_type: None, value: Arithmetic(Subtract, Ident(\"x\"), Number(0n1/0x00000001u32)) }] }\nComparison { op: NotEquals, left: Ident(\"x\"), right: Number(0n0/0x00000000u32) }\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0x90), Register(0x90)], resolved: None }
# t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/delay.j':(2,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
# Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 017dc LoadImm32 [Register(0x8c), Constant32(0x00000000=0)]
#       t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 8c 00 00 00 00 

# if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
# Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
# 017e2 Cmp8 [Register(0x93), Register(0x8f)]
#       if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
15 93 8f 

# 017e5 Cmp8IfZero [Register(0x92), Register(0x8e)]
#       if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
16 92 8e 

# 017e8 Cmp8IfZero [Register(0x91), Register(0x8d)]
#       if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
16 91 8d 

# 017eb Cmp8IfZero [Register(0x90), Register(0x8c)]
#       if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
16 90 8c 

# 017ee JzImm [Label24(delay_while_end_2)]
#       if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
72 fc 17 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))\nWhile { predicate: Comparison { op: NotEquals, left: Ident(\"x\"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident(\"x\"), var_type: None, value: Arithmetic(Subtract, Ident(\"x\"), Number(0n1/0x00000001u32)) }] }\nComparison { op: NotEquals, left: Ident(\"x\"), right: Number(0n0/0x00000000u32) }\n", opcode: JmpImm, args: [Label24(delay_while_body_1)], resolved: None }
# :delay_while_body_1 Some('/lutcomp/programs/lib/delay.j':(2,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
# delay_while_body_1
# tad57 <- x U32 Some('/lutcomp/programs/lib/delay.j':(2,5))
# Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }
# Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32))
# Ident("x")
# optimized away noop copy Instruction { source: "tad57 <- x U32 Some('/lutcomp/programs/lib/delay.j':(2,5))\nAssign { target: Ident(\"x\"), var_type: None, value: Arithmetic(Subtract, Ident(\"x\"), Number(0n1/0x00000001u32)) }\nArithmetic(Subtract, Ident(\"x\"), Number(0n1/0x00000001u32))\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0x90), Register(0x90)], resolved: None }
# x <- tad57 Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/delay.j':(2,5))
# Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }
# Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32))
# 017f2 AddImm32IgnoreCarry [Register(0x90), Constant32(0xffffffff=4294967295)]
#       x <- tad57 Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/delay.j':(2,5))
#       Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }
#       Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32))
32 90 ff ff ff ff 

# goto delay_while_predicate_0 Some('/lutcomp/programs/lib/delay.j':(2,5))
# 017f8 JmpImm [Label24(delay_while_predicate_0)]
#       goto delay_while_predicate_0 Some('/lutcomp/programs/lib/delay.j':(2,5))
70 dc 17 00 

# :delay_while_end_2 Some('/lutcomp/programs/lib/delay.j':(2,5))
# delay_while_end_2
# return None None
# Return { value: None }
# 017fc JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_delay None
# function_end_delay
# Unreachable None
# 017fe Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :div32
# Ret Some(U32)
# Arg0=a
# Arg1=b
# Var __frame_pointer (__frame_pointer) Reg(U32) Some([12, 13, 14, 15])
# Var a (Arg0 a Number(U32)) Reg(U32) Some([148, 149, 150, 151])
# Var b (Arg1 b Number(U32)) Reg(U32) Some([152, 153, 154, 155])
# Var hi (Local hi Number(U32) Reg(U32)) Reg(U32) Some([156, 157, 158, 159])
# Var inline_div32_div16_43_a (Arg0 a Number(U32)) Reg(U32) Some([148, 149, 150, 151])
# Var inline_div32_div16_43_b (Arg1 b Number(U32)) Reg(U32) Some([152, 153, 154, 155])
# Var inline_div32_div16_43_hi (Local hi Number(U32) Reg(U32)) Reg(U32) Some([156, 157, 158, 159])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_a (Arg0 a Number(U32)) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_b (Arg1 b Number(U32)) Reg(U32) Some([164, 165, 166, 167])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_c (Local c Number(U32) Reg(U32)) Reg(U32) Some([168, 169, 170, 171])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_d (Local d Number(U32) Reg(U32)) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_e (Local e Number(U32) Reg(U32)) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_f (Local f Number(U32) Reg(U32)) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t3009 (t3009 Index("a", Number(0n1/0x01u8))) Reg(U8) Some([176])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t30b9 (t30b9 Index("d", Number(0n0/0x00u8))) Reg(U8) Some([176])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t34f7 (t34f7 Index("d", Number(0n1/0x01u8))) Reg(U8) Some([176])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t3585 (t3585 Ident("e")) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 (t45f5 Ident("d")) Reg(U32) Some([164, 165, 166, 167])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9 (t6ca9 Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t6ec2 (t6ec2 Index("f", Number(0n1/0x01u8))) Reg(U8) Some([177])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t8575 (t8575 Index("d", Number(0n2/0x02u8))) Reg(U8) Some([176])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t8792 (t8792 Ident("a")) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t9922 (t9922 Index("f", Number(0n0/0x00u8))) Reg(U8) Some([177])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([178]) Number(0n0/0x00u8)
# Var inline_div32_div16_43_inline_div16_mul16_32_4_tac13 (tac13 Ident("c")) Reg(U32) Some([168, 169, 170, 171])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_tace9 (tace9 Ident("b")) Reg(U32) Some([164, 165, 166, 167])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 (tb9f0 Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }) Reg(U32) Some([180, 181, 182, 183])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_te47a (te47a Index("b", Number(0n1/0x01u8))) Reg(U8) Some([184])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_a (Arg0 a Number(U32)) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t17d0 (t17d0 Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) Reg(U8) Some([184])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t1aa2 (t1aa2 Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))) Reg(U8) Some([184])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t3009 (t3009 Index("a", Number(0n1/0x01u8))) Reg(U8) Some([176])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t32ea (t32ea Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))) Reg(U8) Some([184])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t3404 (t3404 Index("a", Number(0n0/0x00u8))) Reg(U8) Some([184])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 (t3b02 Index("a", Number(0n2/0x02u8))) Reg(U8) Some([185])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t4954 (t4954 Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))) Reg(U8) Some([184])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t837a (t837a Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))) Reg(U8) Some([184])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t878b (t878b Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))) Reg(U8) Some([184])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t8792 (t8792 Ident("a")) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t9170 (t9170 Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) Reg(U8) Some([185])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t94df (t94df Index("a", Number(0n3/0x03u8))) Reg(U8) Some([176])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t965c (t965c Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))) Reg(U8) Some([184])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_tafc1 (tafc1 Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))) Reg(U8) Some([184])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_tbe (tbe Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))) Reg(U8) Some([184])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_tdb4c (tdb4c Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) Reg(U8) Some([184])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_tdbbe (tdbbe Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))) Reg(U8) Some([184])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_tdc9f (tdc9f Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))) Reg(U8) Some([184])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_tf435 (tf435 Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))) Reg(U8) Some([184])
# Var inline_div32_div16_43_lo (Local lo Number(U32) Reg(U32)) Reg(U32) Some([188, 189, 190, 191])
# Var inline_div32_div16_43_mid (Local mid Number(U32) Reg(U32)) Reg(U32) Some([192, 193, 194, 195])
# Var inline_div32_div16_43_r (Local r Number(U32) Reg(U32)) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_43_t1506 (t1506 Ident("lo")) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_43_t3404 (t3404 Index("a", Number(0n0/0x00u8))) Reg(U8) Some([196])
# Var inline_div32_div16_43_t4299 (t4299 Index("x", Number(0n3/0x03u8))) Reg(U8) Some([176])
# Var inline_div32_div16_43_t5508 (t5508 Ident("hi")) Reg(U32) Some([156, 157, 158, 159])
# Var inline_div32_div16_43_t5be0 (t5be0 Index("b", Number(0n0/0x00u8))) Reg(U8) Some([197])
# Var inline_div32_div16_43_t60ec (t60ec Number(0n0/0x00000000u32)) Reg(U32) Some([148, 149, 150, 151]) Number(0n0/0x00000000u32)
# Var inline_div32_div16_43_t8792 (t8792 Ident("a")) Reg(U32) Some([148, 149, 150, 151])
# Var inline_div32_div16_43_t9c15 (t9c15 Number(0n256/0x00000100u32)) Reg(U32) Some([156, 157, 158, 159]) Number(0n256/0x00000100u32)
# Var inline_div32_div16_43_ta670 (ta670 Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8)))) Reg(U8) Some([196])
# Var inline_div32_div16_43_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([184]) Number(0n0/0x00u8)
# Var inline_div32_div16_43_tace9 (tace9 Ident("b")) Reg(U32) Some([152, 153, 154, 155])
# Var inline_div32_div16_43_tad57 (tad57 Ident("x")) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_43_taee0 (taee0 Ident("r")) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_43_tb0ef (tb0ef Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) Reg(U32) Some([148, 149, 150, 151])
# Var inline_div32_div16_43_tcd34 (tcd34 Index("x", Number(0n2/0x02u8))) Reg(U8) Some([176])
# Var inline_div32_div16_43_tf1d1 (tf1d1 Arithmetic(Add, Ident("lo"), Ident("hi"))) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_43_tfd7e (tfd7e Ident("mid")) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_43_x (Local x Number(U32) Reg(U32)) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_shiftright1_44_a (Arg0 a Number(U32)) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_shiftright1_44_t17d0 (t17d0 Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_44_t1aa2 (t1aa2 Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_44_t3009 (t3009 Index("a", Number(0n1/0x01u8))) Reg(U8) Some([176])
# Var inline_div32_shiftright1_44_t32ea (t32ea Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_44_t3404 (t3404 Index("a", Number(0n0/0x00u8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_44_t3b02 (t3b02 Index("a", Number(0n2/0x02u8))) Reg(U8) Some([185])
# Var inline_div32_shiftright1_44_t4954 (t4954 Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_44_t837a (t837a Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_44_t878b (t878b Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_44_t8792 (t8792 Ident("a")) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_shiftright1_44_t9170 (t9170 Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) Reg(U8) Some([185])
# Var inline_div32_shiftright1_44_t94df (t94df Index("a", Number(0n3/0x03u8))) Reg(U8) Some([176])
# Var inline_div32_shiftright1_44_t965c (t965c Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_44_tafc1 (tafc1 Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_44_tbe (tbe Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_44_tdb4c (tdb4c Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_44_tdbbe (tdbbe Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_44_tdc9f (tdc9f Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_44_tf435 (tf435 Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_45_a (Arg0 a Number(U32)) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_shiftright1_45_t17d0 (t17d0 Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_45_t1aa2 (t1aa2 Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_45_t3009 (t3009 Index("a", Number(0n1/0x01u8))) Reg(U8) Some([176])
# Var inline_div32_shiftright1_45_t32ea (t32ea Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_45_t3404 (t3404 Index("a", Number(0n0/0x00u8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_45_t3b02 (t3b02 Index("a", Number(0n2/0x02u8))) Reg(U8) Some([185])
# Var inline_div32_shiftright1_45_t4954 (t4954 Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_45_t837a (t837a Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_45_t878b (t878b Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_45_t8792 (t8792 Ident("a")) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_shiftright1_45_t9170 (t9170 Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) Reg(U8) Some([185])
# Var inline_div32_shiftright1_45_t94df (t94df Index("a", Number(0n3/0x03u8))) Reg(U8) Some([176])
# Var inline_div32_shiftright1_45_t965c (t965c Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_45_tafc1 (tafc1 Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_45_tbe (tbe Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_45_tdb4c (tdb4c Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_45_tdbbe (tdbbe Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_45_tdc9f (tdc9f Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_45_tf435 (tf435 Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))) Reg(U8) Some([184])
# Var lo (Local lo Number(U32) Reg(U32)) Reg(U32) Some([172, 173, 174, 175])
# Var mid (Local mid Number(U32) Reg(U32)) Reg(U32) Some([160, 161, 162, 163])
# Var r (Local r Number(U32) Reg(U32)) Reg(U32) Some([164, 165, 166, 167])
# Var t1506 (t1506 Ident("lo")) Reg(U32) Some([160, 161, 162, 163])
# Var t3803 (t3803 Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) Reg(U32) Some([160, 161, 162, 163])
# Var t3f2a (t3f2a Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }) Reg(U32) Some([164, 165, 166, 167])
# Var t4917 (t4917 Number(0n65536/0x00010000u32)) Reg(U32) Some([156, 157, 158, 159]) Number(0n65536/0x00010000u32)
# Var t5508 (t5508 Ident("hi")) Reg(U32) Some([156, 157, 158, 159])
# Var t60ec (t60ec Number(0n0/0x00000000u32)) Reg(U32) Some([164, 165, 166, 167]) Number(0n0/0x00000000u32)
# Var t8792 (t8792 Ident("a")) Reg(U32) Some([148, 149, 150, 151])
# Var t9599 (t9599 Call(Call { function: "shiftright1", parameters: [Ident("lo")] })) Reg(U32) Some([180, 181, 182, 183])
# Var tace9 (tace9 Ident("b")) Reg(U32) Some([152, 153, 154, 155])
# Var tad57 (tad57 Ident("x")) Reg(U32) Some([164, 165, 166, 167])
# Var taee0 (taee0 Ident("r")) Reg(U32) Some([164, 165, 166, 167])
# Var tb608 (tb608 AddressOf(Ident("x64"))) Reg(U32) Some([164, 165, 166, 167])
# Var tb973 (tb973 LocalFieldDeref("x64", "hi")) Reg(U32) Some([168, 169, 170, 171])
# Var te546 (te546 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Ident("__frame_pointer") }) Reg(U32) Some([200, 201, 202, 203])
# Var te81f (te81f Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) Reg(U32) Some([148, 149, 150, 151])
# Var te825 (te825 Ident("__frame_pointer")) Reg(U32) Some([200, 201, 202, 203])
# Var tfd7e (tfd7e Ident("mid")) Reg(U32) Some([160, 161, 162, 163])
# Var x (Local x Number(U32) Reg(U32)) Reg(U32) Some([164, 165, 166, 167])
# 01803 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffff8=4294967288)]
#       reserve 8 bytes of stack space for locals
32 0c f8 ff ff ff 

# 01809 Copy32 [Register(0x00), Register(0x94)]
#       Save function parameter 'a' registers [0, 1, 2, 3] to locals [148, 149, 150, 151].
21 00 94 

# 0180c Copy32 [Register(0x04), Register(0x98)]
#       Save function parameter 'b' registers [4, 5, 6, 7] to locals [152, 153, 154, 155].
21 04 98 

# __frame_pointer <- __frame_pointer Add Number(0xfffffff8u32) None
# 0180f AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffff8=4294967288)]
#       __frame_pointer <- __frame_pointer Add Number(0xfffffff8u32) None
32 0c f8 ff ff ff 

# t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(67,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(67,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# tace9 <- b U32 Some('/lutcomp/programs/lib/div.j':(67,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/lutcomp/programs/lib/div.j':(67,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(67,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
# 01815 Cmp8 [Register(0x9b), Register(0x97)]
#       if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(67,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
15 9b 97 

# 01818 Cmp8IfZero [Register(0x9a), Register(0x96)]
#       if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(67,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
16 9a 96 

# 0181b Cmp8IfZero [Register(0x99), Register(0x95)]
#       if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(67,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
16 99 95 

# 0181e Cmp8IfZero [Register(0x98), Register(0x94)]
#       if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(67,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
16 98 94 

# 01821 JcImm [Label24(div32_if_else_0_2)]
#       if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(67,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
71 40 18 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(67,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }\n", opcode: JmpImm, args: [Label24(div32_if_true_0_1)], resolved: None }
# :div32_if_true_0_1 Some('/lutcomp/programs/lib/div.j':(67,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
# div32_if_true_0_1
# t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(67,5))
# Return { value: Some(Number(0n0/0x00000000u32)) }
# Number(0n0/0x00000000u32)
# 01825 LoadImm32 [Register(0xa4), Constant32(0x00000000=0)]
#       t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(67,5))
#       Return { value: Some(Number(0n0/0x00000000u32)) }
#       Number(0n0/0x00000000u32)
20 a4 00 00 00 00 

# __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(67,5))
# Return { value: Some(Number(0n0/0x00000000u32)) }
# 0182b AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(67,5))
#       Return { value: Some(Number(0n0/0x00000000u32)) }
32 0c 08 00 00 00 

# return Some(t60ec) Some('/lutcomp/programs/lib/div.j':(67,5))
# Return { value: Some(Number(0n0/0x00000000u32)) }
# 01831 Copy32 [Register(0xa4), Register(0x00)]
#       return Some(t60ec) Some('/lutcomp/programs/lib/div.j':(67,5))
#       Return { value: Some(Number(0n0/0x00000000u32)) }
21 a4 00 

# 01834 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       Dealloc 8 bytes from stack
32 0c 08 00 00 00 

# 0183a JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto div32_if_end_0 Some('/lutcomp/programs/lib/div.j':(67,5))
# 0183c JmpImm [Label24(div32_if_end_0)]
#       goto div32_if_end_0 Some('/lutcomp/programs/lib/div.j':(67,5))
70 40 18 00 

# :div32_if_else_0_2 Some('/lutcomp/programs/lib/div.j':(67,5))
# div32_if_else_0_2
# :div32_if_end_0 Some('/lutcomp/programs/lib/div.j':(67,5))
# div32_if_end_0
# t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(71,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(71,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(0n65536/0x00010000u32) }, [Return { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(0n65536/0x00010000u32) }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# t4917 <- 0n65536/0x00010000u32  Some('/lutcomp/programs/lib/div.j':(71,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }
# Number(0n65536/0x00010000u32)
# 01840 LoadImm32 [Register(0x9c), Constant32(0x00010000=65536)]
#       t4917 <- 0n65536/0x00010000u32  Some('/lutcomp/programs/lib/div.j':(71,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }
#       Number(0n65536/0x00010000u32)
20 9c 00 00 01 00 

# if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(71,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }
# 01846 Cmp8 [Register(0x9f), Register(0x97)]
#       if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(71,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }
15 9f 97 

# 01849 Cmp8IfZero [Register(0x9e), Register(0x96)]
#       if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(71,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }
16 9e 96 

# 0184c Cmp8IfZero [Register(0x9d), Register(0x95)]
#       if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(71,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }
16 9d 95 

# 0184f Cmp8IfZero [Register(0x9c), Register(0x94)]
#       if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(71,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }
16 9c 94 

# 01852 JcImm [Label24(div32_if_else_0_5)]
#       if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(71,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }
71 00 1b 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(71,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(0n65536/0x00010000u32) }, [Return { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(0n65536/0x00010000u32) }\n", opcode: JmpImm, args: [Label24(div32_if_true_0_4)], resolved: None }
# :div32_if_true_0_4 Some('/lutcomp/programs/lib/div.j':(71,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
# div32_if_true_0_4
# t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(71,5))
# Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
# Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(71,5))\nReturn { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }\nCall(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# tace9 <- b U32 Some('/lutcomp/programs/lib/div.j':(71,5))
# Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
# Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/lutcomp/programs/lib/div.j':(71,5))\nReturn { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }\nCall(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# inline_div32_div16_43_a <- t8792 U32 Some('/lutcomp/programs/lib/div.j':(71,5))
# Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
# Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_div32_div16_43_a <- t8792 U32 Some('/lutcomp/programs/lib/div.j':(71,5))\nReturn { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }\nCall(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# inline_div32_div16_43_b <- tace9 U32 Some('/lutcomp/programs/lib/div.j':(71,5))
# Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
# Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_div32_div16_43_b <- tace9 U32 Some('/lutcomp/programs/lib/div.j':(71,5))\nReturn { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }\nCall(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(21,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 Some('/lutcomp/programs/lib/div.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
# Ident("b")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 Some('/lutcomp/programs/lib/div.j':(21,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
# 01856 Cmp8 [Register(0x9b), Register(0x97)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
15 9b 97 

# 01859 Cmp8IfZero [Register(0x9a), Register(0x96)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
16 9a 96 

# 0185c Cmp8IfZero [Register(0x99), Register(0x95)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
16 99 95 

# 0185f Cmp8IfZero [Register(0x98), Register(0x94)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
16 98 94 

# 01862 JcImm [Label24(inline_div32_div16_43_div16_if_else_0_2)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
71 74 18 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(21,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_if_true_0_1)], resolved: None }
# :inline_div32_div16_43_div16_if_true_0_1 Some('/lutcomp/programs/lib/div.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
# inline_div32_div16_43_div16_if_true_0_1
# inline_div32_div16_43_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(21,5))
# Return { value: Some(Number(0n0/0x00000000u32)) }
# Number(0n0/0x00000000u32)
# 01866 LoadImm32 [Register(0x94), Constant32(0x00000000=0)]
#       inline_div32_div16_43_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(21,5))
#       Return { value: Some(Number(0n0/0x00000000u32)) }
#       Number(0n0/0x00000000u32)
20 94 00 00 00 00 

# te81f <- inline_div32_div16_43_t60ec U32 Some('/lutcomp/programs/lib/div.j':(21,5))
# Return { value: Some(Number(0n0/0x00000000u32)) }
# optimized away noop copy Instruction { source: "te81f <- inline_div32_div16_43_t60ec U32 Some('/lutcomp/programs/lib/div.j':(21,5))\nReturn { value: Some(Number(0n0/0x00000000u32)) }\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# goto inline_div32_div16_43_function_end_div16 Some('/lutcomp/programs/lib/div.j':(21,5))
# Return { value: Some(Number(0n0/0x00000000u32)) }
# 0186c JmpImm [Label24(inline_div32_div16_43_function_end_div16)]
#       goto inline_div32_div16_43_function_end_div16 Some('/lutcomp/programs/lib/div.j':(21,5))
#       Return { value: Some(Number(0n0/0x00000000u32)) }
70 eb 1a 00 

# goto inline_div32_div16_43_div16_if_end_0 Some('/lutcomp/programs/lib/div.j':(21,5))
# 01870 JmpImm [Label24(inline_div32_div16_43_div16_if_end_0)]
#       goto inline_div32_div16_43_div16_if_end_0 Some('/lutcomp/programs/lib/div.j':(21,5))
70 74 18 00 

# :inline_div32_div16_43_div16_if_else_0_2 Some('/lutcomp/programs/lib/div.j':(21,5))
# inline_div32_div16_43_div16_if_else_0_2
# :inline_div32_div16_43_div16_if_end_0 Some('/lutcomp/programs/lib/div.j':(21,5))
# inline_div32_div16_43_div16_if_end_0
# inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(25,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(0n256/0x00000100u32) }, [Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index(\"a\", Number(0n0/0x00u8)), Index(\"b\", Number(0n0/0x00u8))) }) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(0n256/0x00000100u32) }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# inline_div32_div16_43_t9c15 <- 0n256/0x00000100u32  Some('/lutcomp/programs/lib/div.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
# Number(0n256/0x00000100u32)
# 01874 LoadImm32 [Register(0x9c), Constant32(0x00000100=256)]
#       inline_div32_div16_43_t9c15 <- 0n256/0x00000100u32  Some('/lutcomp/programs/lib/div.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
#       Number(0n256/0x00000100u32)
20 9c 00 01 00 00 

# if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
# 0187a Cmp8 [Register(0x9f), Register(0x97)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
15 9f 97 

# 0187d Cmp8IfZero [Register(0x9e), Register(0x96)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
16 9e 96 

# 01880 Cmp8IfZero [Register(0x9d), Register(0x95)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
16 9d 95 

# 01883 Cmp8IfZero [Register(0x9c), Register(0x94)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
16 9c 94 

# 01886 JcImm [Label24(inline_div32_div16_43_div16_if_else_0_5)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
71 a5 18 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(25,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(0n256/0x00000100u32) }, [Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index(\"a\", Number(0n0/0x00u8)), Index(\"b\", Number(0n0/0x00u8))) }) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(0n256/0x00000100u32) }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_if_true_0_4)], resolved: None }
# :inline_div32_div16_43_div16_if_true_0_4 Some('/lutcomp/programs/lib/div.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }])], else_block: [] }
# inline_div32_div16_43_div16_if_true_0_4
# inline_div32_div16_43_t3404 <- inline_div32_div16_43_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(25,5))
# Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }
# Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }
# Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8)))
# Index("a", Number(0n0/0x00u8))
# 0188a Copy8 [Register(0x94), Register(0xc4)]
#       inline_div32_div16_43_t3404 <- inline_div32_div16_43_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(25,5))
#       Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }
#       Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }
#       Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8)))
#       Index("a", Number(0n0/0x00u8))
0b 94 c4 

# inline_div32_div16_43_t5be0 <- inline_div32_div16_43_b[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(25,5))
# Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }
# Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }
# Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8)))
# Index("b", Number(0n0/0x00u8))
# 0188d Copy8 [Register(0x98), Register(0xc5)]
#       inline_div32_div16_43_t5be0 <- inline_div32_div16_43_b[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(25,5))
#       Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }
#       Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }
#       Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8)))
#       Index("b", Number(0n0/0x00u8))
0b 98 c5 

# inline_div32_div16_43_ta670 <- inline_div32_div16_43_t3404 Divide Var(inline_div32_div16_43_t5be0) Some('/lutcomp/programs/lib/div.j':(25,5))
# Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }
# Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }
# Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8)))
# 01890 Divide8 [Register(0xc4), Register(0xc5), Register(0xc4)]
#       inline_div32_div16_43_ta670 <- inline_div32_div16_43_t3404 Divide Var(inline_div32_div16_43_t5be0) Some('/lutcomp/programs/lib/div.j':(25,5))
#       Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }
#       Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }
#       Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8)))
17 c4 c5 c4 

# inline_div32_div16_43_tb0ef U32 <- inline_div32_div16_43_ta670 U8 Some('/lutcomp/programs/lib/div.j':(25,5))
# Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }
# Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }
# 01894 LoadImm32 [Register(0x94), Constant32(0x00000000=0)]
#       Zero-pad for inline_div32_div16_43_tb0ef U32 <- inline_div32_div16_43_ta670 U8 Some('/lutcomp/programs/lib/div.j':(25,5))
#       Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }
#       Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }
20 94 00 00 00 00 

# 0189a Copy8 [Register(0xc4), Register(0x94)]
#       inline_div32_div16_43_tb0ef U32 <- inline_div32_div16_43_ta670 U8 Some('/lutcomp/programs/lib/div.j':(25,5))
#       Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }
#       Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }
0b c4 94 

# te81f <- inline_div32_div16_43_tb0ef U32 Some('/lutcomp/programs/lib/div.j':(25,5))
# Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }
# optimized away noop copy Instruction { source: "te81f <- inline_div32_div16_43_tb0ef U32 Some('/lutcomp/programs/lib/div.j':(25,5))\nReturn { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index(\"a\", Number(0n0/0x00u8)), Index(\"b\", Number(0n0/0x00u8))) }) }\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# goto inline_div32_div16_43_function_end_div16 Some('/lutcomp/programs/lib/div.j':(25,5))
# Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }
# 0189d JmpImm [Label24(inline_div32_div16_43_function_end_div16)]
#       goto inline_div32_div16_43_function_end_div16 Some('/lutcomp/programs/lib/div.j':(25,5))
#       Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }
70 eb 1a 00 

# goto inline_div32_div16_43_div16_if_end_3 Some('/lutcomp/programs/lib/div.j':(25,5))
# 018a1 JmpImm [Label24(inline_div32_div16_43_div16_if_end_3)]
#       goto inline_div32_div16_43_div16_if_end_3 Some('/lutcomp/programs/lib/div.j':(25,5))
70 a5 18 00 

# :inline_div32_div16_43_div16_if_else_0_5 Some('/lutcomp/programs/lib/div.j':(25,5))
# inline_div32_div16_43_div16_if_else_0_5
# :inline_div32_div16_43_div16_if_end_3 Some('/lutcomp/programs/lib/div.j':(25,5))
# inline_div32_div16_43_div16_if_end_3
# inline_div32_div16_43_lo <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(29,5))
# Assign { target: Ident("lo"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 018a5 LoadImm32 [Register(0xbc), Constant32(0x00000000=0)]
#       inline_div32_div16_43_lo <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(29,5))
#       Assign { target: Ident("lo"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 bc 00 00 00 00 

# inline_div32_div16_43_hi <- 0n65535/0x0000ffffu32  Some('/lutcomp/programs/lib/div.j':(30,5))
# Assign { target: Ident("hi"), var_type: Some(Number(U32)), value: Number(0n65535/0x0000ffffu32) }
# Number(0n65535/0x0000ffffu32)
# 018ab LoadImm32 [Register(0x9c), Constant32(0x0000ffff=65535)]
#       inline_div32_div16_43_hi <- 0n65535/0x0000ffffu32  Some('/lutcomp/programs/lib/div.j':(30,5))
#       Assign { target: Ident("hi"), var_type: Some(Number(U32)), value: Number(0n65535/0x0000ffffu32) }
#       Number(0n65535/0x0000ffffu32)
20 9c ff ff 00 00 

# :inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
# inline_div32_div16_43_div16_while_predicate_6
# inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
# Ident("lo")
# 018b1 Copy32 [Register(0xbc), Register(0xa0)]
#       inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
#       Ident("lo")
21 bc a0 

# inline_div32_div16_43_t5508 <- inline_div32_div16_43_hi U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
# Ident("hi")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t5508 <- inline_div32_div16_43_hi U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(U32)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }, Assign { target: Ident(\"x\"), var_type: Some(Number(U32)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }\nIdent(\"hi\")\n", opcode: Copy32, args: [Register(0x9c), Register(0x9c)], resolved: None }
# if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8' Some('/lutcomp/programs/lib/div.j':(32,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
# 018b4 Cmp8 [Register(0x9f), Register(0xa3)]
#       if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8' Some('/lutcomp/programs/lib/div.j':(32,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
15 9f a3 

# 018b7 Cmp8IfZero [Register(0x9e), Register(0xa2)]
#       if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8' Some('/lutcomp/programs/lib/div.j':(32,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
16 9e a2 

# 018ba Cmp8IfZero [Register(0x9d), Register(0xa1)]
#       if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8' Some('/lutcomp/programs/lib/div.j':(32,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
16 9d a1 

# 018bd Cmp8IfZero [Register(0x9c), Register(0xa0)]
#       if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8' Some('/lutcomp/programs/lib/div.j':(32,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
16 9c a0 

# 018c0 JcImm [Label24(inline_div32_div16_43_div16_while_end_8)]
#       if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8' Some('/lutcomp/programs/lib/div.j':(32,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
71 e1 1a 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8' Some('/lutcomp/programs/lib/div.j':(32,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(U32)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }, Assign { target: Ident(\"x\"), var_type: Some(Number(U32)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_while_body_7)], resolved: None }
# :inline_div32_div16_43_div16_while_body_7 Some('/lutcomp/programs/lib/div.j':(32,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
# inline_div32_div16_43_div16_while_body_7
# inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
# Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
# Arithmetic(Add, Ident("lo"), Ident("hi"))
# Ident("lo")
# 018c4 Copy32 [Register(0xbc), Register(0xa0)]
#       inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
#       Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
#       Arithmetic(Add, Ident("lo"), Ident("hi"))
#       Ident("lo")
21 bc a0 

# inline_div32_div16_43_t5508 <- inline_div32_div16_43_hi U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
# Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
# Arithmetic(Add, Ident("lo"), Ident("hi"))
# Ident("hi")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t5508 <- inline_div32_div16_43_hi U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nAssign { target: Ident(\"mid\"), var_type: Some(Number(U32)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }\nCall(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] })\nArithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))\nIdent(\"hi\")\n", opcode: Copy32, args: [Register(0x9c), Register(0x9c)], resolved: None }
# inline_div32_div16_43_tf1d1 <- inline_div32_div16_43_t1506 Add Var(inline_div32_div16_43_t5508) Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
# Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
# Arithmetic(Add, Ident("lo"), Ident("hi"))
# 018c7 ClearCarry []
#       inline_div32_div16_43_tf1d1 <- inline_div32_div16_43_t1506 Add Var(inline_div32_div16_43_t5508) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
#       Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
#       Arithmetic(Add, Ident("lo"), Ident("hi"))
03 

# 018c8 AddCarry32_1 [Register(0xa0), Register(0x9c), Register(0xa0)]
#       inline_div32_div16_43_tf1d1 <- inline_div32_div16_43_t1506 Add Var(inline_div32_div16_43_t5508) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
#       Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
#       Arithmetic(Add, Ident("lo"), Ident("hi"))
30 a0 9c a0 

# 018cc AddCarry32_2 []
#       inline_div32_div16_43_tf1d1 <- inline_div32_div16_43_t1506 Add Var(inline_div32_div16_43_t5508) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
#       Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
#       Arithmetic(Add, Ident("lo"), Ident("hi"))
31 

# inline_div32_div16_43_inline_div16_shiftright1_42_a <- inline_div32_div16_43_tf1d1 U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
# Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_a <- inline_div32_div16_43_tf1d1 U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nAssign { target: Ident(\"mid\"), var_type: Some(Number(U32)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }\nCall(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] })\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_div32_div16_43_inline_div16_shiftright1_42_t3404 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
# Index("a", Number(0n0/0x00u8))
# 018cd Copy8 [Register(0xa0), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t3404 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
#       Index("a", Number(0n0/0x00u8))
0b a0 b8 

# inline_div32_div16_43_inline_div16_shiftright1_42_tf435 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3404 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
# 018d0 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tf435 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3404 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
04 00 01 

# 018d3 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb8), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tf435 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3404 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
1e 04 00 b8 b8 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_tf435 U8 Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
# 018d8 Copy8 [Register(0xb8), Register(0xa0)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_tf435 U8 Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
0b b8 a0 

# inline_div32_div16_43_inline_div16_shiftright1_42_t3009 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
# Index("a", Number(0n1/0x01u8))
# 018db Copy8 [Register(0xa1), Register(0xb0)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t3009 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
#       Index("a", Number(0n1/0x01u8))
0b a1 b0 

# inline_div32_div16_43_inline_div16_shiftright1_42_t1aa2 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
# 018de LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t1aa2 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
04 00 01 

# 018e1 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb0), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t1aa2 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
1e 04 00 b0 b8 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_t1aa2 U8 Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
# 018e6 Copy8 [Register(0xb8), Register(0xa1)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_t1aa2 U8 Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
0b b8 a1 

# inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
# Index("a", Number(0n2/0x02u8))
# 018e9 Copy8 [Register(0xa2), Register(0xb9)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
#       Index("a", Number(0n2/0x02u8))
0b a2 b9 

# inline_div32_div16_43_inline_div16_shiftright1_42_t878b <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
# 018ec LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t878b <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
04 00 01 

# 018ef Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb9), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t878b <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
1e 04 00 b9 b8 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t878b U8 Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
# 018f4 Copy8 [Register(0xb8), Register(0xa2)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t878b U8 Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
0b b8 a2 

# inline_div32_div16_43_inline_div16_shiftright1_42_t94df <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
# Index("a", Number(0n3/0x03u8))
# 018f7 Copy8 [Register(0xa3), Register(0xb0)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t94df <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
#       Index("a", Number(0n3/0x03u8))
0b a3 b0 

# inline_div32_div16_43_inline_div16_shiftright1_42_t32ea <- inline_div32_div16_43_inline_div16_shiftright1_42_t94df RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
# 018fa LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t32ea <- inline_div32_div16_43_inline_div16_shiftright1_42_t94df RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
04 00 01 

# 018fd Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb0), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t32ea <- inline_div32_div16_43_inline_div16_shiftright1_42_t94df RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
1e 04 00 b0 b8 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] <- inline_div32_div16_43_inline_div16_shiftright1_42_t32ea U8 Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
# 01902 Copy8 [Register(0xb8), Register(0xa3)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] <- inline_div32_div16_43_inline_div16_shiftright1_42_t32ea U8 Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
0b b8 a3 

# inline_div32_div16_43_inline_div16_shiftright1_42_t3404 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))
# Index("a", Number(0n0/0x00u8))
# 01905 Copy8 [Register(0xa0), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t3404 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))
#       Index("a", Number(0n0/0x00u8))
0b a0 b8 

# inline_div32_div16_43_inline_div16_shiftright1_42_tbe <- inline_div32_div16_43_inline_div16_shiftright1_42_t3404 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))
# 01908 AndImm8 [Register(0xb8), Constant8(0x7f=127)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tbe <- inline_div32_div16_43_inline_div16_shiftright1_42_t3404 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))
18 b8 7f 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_tbe U8 Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
# 0190b Copy8 [Register(0xb8), Register(0xa0)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_tbe U8 Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
0b b8 a0 

# inline_div32_div16_43_inline_div16_shiftright1_42_t3404 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
# Index("a", Number(0n0/0x00u8))
# 0190e Copy8 [Register(0xa0), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t3404 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
#       Index("a", Number(0n0/0x00u8))
0b a0 b8 

# inline_div32_div16_43_inline_div16_shiftright1_42_t3009 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
# Index("a", Number(0n1/0x01u8))
# 01911 Copy8 [Register(0xa1), Register(0xb0)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t3009 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
#       Index("a", Number(0n1/0x01u8))
0b a1 b0 

# inline_div32_div16_43_inline_div16_shiftright1_42_t9170 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
# 01914 Copy8 [Register(0xb0), Register(0xb9)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t9170 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
0b b0 b9 

# 01917 AndImm8 [Register(0xb9), Constant8(0x80=128)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t9170 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
18 b9 80 

# inline_div32_div16_43_inline_div16_shiftright1_42_tafc1 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3404 BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_t9170) Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
# 0191a Or8 [Register(0xb8), Register(0xb9), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tafc1 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3404 BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_t9170) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
1c b8 b9 b8 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_tafc1 U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# 0191e Copy8 [Register(0xb8), Register(0xa0)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_tafc1 U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
0b b8 a0 

# inline_div32_div16_43_inline_div16_shiftright1_42_t3009 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
# Index("a", Number(0n1/0x01u8))
# 01921 Copy8 [Register(0xa1), Register(0xb0)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t3009 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
#       Index("a", Number(0n1/0x01u8))
0b a1 b0 

# inline_div32_div16_43_inline_div16_shiftright1_42_tdc9f <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
# 01924 Copy8 [Register(0xb0), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tdc9f <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
0b b0 b8 

# 01927 AndImm8 [Register(0xb8), Constant8(0x7f=127)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tdc9f <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
18 b8 7f 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_tdc9f U8 Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
# 0192a Copy8 [Register(0xb8), Register(0xa1)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_tdc9f U8 Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
0b b8 a1 

# inline_div32_div16_43_inline_div16_shiftright1_42_t3009 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
# Index("a", Number(0n1/0x01u8))
# 0192d Copy8 [Register(0xa1), Register(0xb0)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t3009 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
#       Index("a", Number(0n1/0x01u8))
0b a1 b0 

# inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
# Index("a", Number(0n2/0x02u8))
# 01930 Copy8 [Register(0xa2), Register(0xb9)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
#       Index("a", Number(0n2/0x02u8))
0b a2 b9 

# inline_div32_div16_43_inline_div16_shiftright1_42_tdb4c <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
# 01933 Copy8 [Register(0xb9), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tdb4c <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
0b b9 b8 

# 01936 AndImm8 [Register(0xb8), Constant8(0x80=128)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tdb4c <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
18 b8 80 

# inline_div32_div16_43_inline_div16_shiftright1_42_tdbbe <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_tdb4c) Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
# 01939 Or8 [Register(0xb0), Register(0xb8), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tdbbe <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_tdb4c) Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
1c b0 b8 b8 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_tdbbe U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# 0193d Copy8 [Register(0xb8), Register(0xa1)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_tdbbe U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
0b b8 a1 

# inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
# Index("a", Number(0n2/0x02u8))
# 01940 Copy8 [Register(0xa2), Register(0xb9)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
#       Index("a", Number(0n2/0x02u8))
0b a2 b9 

# inline_div32_div16_43_inline_div16_shiftright1_42_t4954 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
# 01943 Copy8 [Register(0xb9), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t4954 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
0b b9 b8 

# 01946 AndImm8 [Register(0xb8), Constant8(0x7f=127)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t4954 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
18 b8 7f 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t4954 U8 Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
# 01949 Copy8 [Register(0xb8), Register(0xa2)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t4954 U8 Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
0b b8 a2 

# inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
# Index("a", Number(0n2/0x02u8))
# 0194c Copy8 [Register(0xa2), Register(0xb9)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
#       Index("a", Number(0n2/0x02u8))
0b a2 b9 

# inline_div32_div16_43_inline_div16_shiftright1_42_t94df <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
# Index("a", Number(0n3/0x03u8))
# 0194f Copy8 [Register(0xa3), Register(0xb0)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t94df <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
#       Index("a", Number(0n3/0x03u8))
0b a3 b0 

# inline_div32_div16_43_inline_div16_shiftright1_42_t17d0 <- inline_div32_div16_43_inline_div16_shiftright1_42_t94df BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
# 01952 Copy8 [Register(0xb0), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t17d0 <- inline_div32_div16_43_inline_div16_shiftright1_42_t94df BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
0b b0 b8 

# 01955 AndImm8 [Register(0xb8), Constant8(0x80=128)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t17d0 <- inline_div32_div16_43_inline_div16_shiftright1_42_t94df BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
18 b8 80 

# inline_div32_div16_43_inline_div16_shiftright1_42_t837a <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_t17d0) Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
# 01958 Or8 [Register(0xb9), Register(0xb8), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t837a <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_t17d0) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
1c b9 b8 b8 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t837a U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# 0195c Copy8 [Register(0xb8), Register(0xa2)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t837a U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
0b b8 a2 

# inline_div32_div16_43_inline_div16_shiftright1_42_t94df <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
# Index("a", Number(0n3/0x03u8))
# 0195f Copy8 [Register(0xa3), Register(0xb0)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t94df <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
#       Index("a", Number(0n3/0x03u8))
0b a3 b0 

# inline_div32_div16_43_inline_div16_shiftright1_42_t965c <- inline_div32_div16_43_inline_div16_shiftright1_42_t94df BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
# 01962 Copy8 [Register(0xb0), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t965c <- inline_div32_div16_43_inline_div16_shiftright1_42_t94df BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
0b b0 b8 

# 01965 AndImm8 [Register(0xb8), Constant8(0x7f=127)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t965c <- inline_div32_div16_43_inline_div16_shiftright1_42_t94df BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
18 b8 7f 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] <- inline_div32_div16_43_inline_div16_shiftright1_42_t965c U8 Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
# 01968 Copy8 [Register(0xb8), Register(0xa3)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] <- inline_div32_div16_43_inline_div16_shiftright1_42_t965c U8 Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
0b b8 a3 

# inline_div32_div16_43_inline_div16_shiftright1_42_t8792 <- inline_div32_div16_43_inline_div16_shiftright1_42_a U32 Some('/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_t8792 <- inline_div32_div16_43_inline_div16_shiftright1_42_a U32 Some('/lutcomp/programs/lib/div.j':(17,5))\nReturn { value: Some(Ident(\"a\")) }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_div32_div16_43_mid <- inline_div32_div16_43_inline_div16_shiftright1_42_t8792 U32 Some('/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# 0196b Copy32 [Register(0xa0), Register(0xc0)]
#       inline_div32_div16_43_mid <- inline_div32_div16_43_inline_div16_shiftright1_42_t8792 U32 Some('/lutcomp/programs/lib/div.j':(17,5))
#       Return { value: Some(Ident("a")) }
21 a0 c0 

# goto inline_div32_div16_43_inline_div16_shiftright1_42_function_end_shiftright1 Some('/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_div32_div16_43_inline_div16_shiftright1_42_function_end_shiftright1 Some('/lutcomp/programs/lib/div.j':(17,5))\nReturn { value: Some(Ident(\"a\")) }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_inline_div16_shiftright1_42_function_end_shiftright1)], resolved: None }
# :inline_div32_div16_43_inline_div16_shiftright1_42_function_end_shiftright1 None
# inline_div32_div16_43_inline_div16_shiftright1_42_function_end_shiftright1
# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] })
# Ident("mid")
# 0196e Copy32 [Register(0xc0), Register(0xa0)]
#       inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] })
#       Ident("mid")
21 c0 a0 

# inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nAssign { target: Ident(\"x\"), var_type: Some(Number(U32)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_a <- inline_div32_div16_43_tfd7e U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_a <- inline_div32_div16_43_tfd7e U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nAssign { target: Ident(\"x\"), var_type: Some(Number(U32)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_b <- inline_div32_div16_43_tace9 U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] })
# 01971 Copy32 [Register(0x98), Register(0xa4)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_b <- inline_div32_div16_43_tace9 U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] })
21 98 a4 

# inline_div32_div16_43_inline_div16_mul16_32_4_t8792 <- inline_div32_div16_43_inline_div16_mul16_32_4_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_t8792 <- inline_div32_div16_43_inline_div16_mul16_32_4_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_tace9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_tace9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 01974 Mul8_16 [Register(0xa0), Register(0xa4), Register(0xa8)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 a0 a4 a8 

# 01978 LoadImm8 [Register(0xaa), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 aa 00 

# 0197b LoadImm8 [Register(0xab), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 ab 00 

# inline_div32_div16_43_inline_div16_mul16_32_4_t3009 <- inline_div32_div16_43_inline_div16_mul16_32_4_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 0197e Copy8 [Register(0xa1), Register(0xb0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t3009 <- inline_div32_div16_43_inline_div16_mul16_32_4_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b a1 b0 

# inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 01981 LoadImm32 [Register(0xb4), Constant32(0x00000000=0)]
#       Zero-pad for inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 b4 00 00 00 00 

# 01987 Copy8 [Register(0xb0), Register(0xb4)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b b0 b4 

# inline_div32_div16_43_inline_div16_mul16_32_4_te47a <- inline_div32_div16_43_inline_div16_mul16_32_4_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 0198a Copy8 [Register(0xa5), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_te47a <- inline_div32_div16_43_inline_div16_mul16_32_4_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b a5 b8 

# inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 0198d LoadImm32 [Register(0xac), Constant32(0x00000000=0)]
#       Zero-pad for inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 ac 00 00 00 00 

# 01993 Copy8 [Register(0xb8), Register(0xac)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b b8 ac 

# inline_div32_div16_43_inline_div16_mul16_32_4_f <- inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 01996 Mul8_16 [Register(0xb4), Register(0xac), Register(0xac)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_f <- inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 b4 ac ac 

# 0199a LoadImm8 [Register(0xae), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_f <- inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 ae 00 

# 0199d LoadImm8 [Register(0xaf), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_f <- inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 af 00 

# inline_div32_div16_43_inline_div16_mul16_32_4_t6ec2 <- inline_div32_div16_43_inline_div16_mul16_32_4_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# Index("f", Number(0n1/0x01u8))
# 019a0 Copy8 [Register(0xad), Register(0xb1)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t6ec2 <- inline_div32_div16_43_inline_div16_mul16_32_4_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
#       Index("f", Number(0n1/0x01u8))
0b ad b1 

# inline_div32_div16_43_inline_div16_mul16_32_4_f[0x03..0x04] <- inline_div32_div16_43_inline_div16_mul16_32_4_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# 019a3 Copy8 [Register(0xb1), Register(0xaf)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_f[0x03..0x04] <- inline_div32_div16_43_inline_div16_mul16_32_4_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
0b b1 af 

# inline_div32_div16_43_inline_div16_mul16_32_4_t9922 <- inline_div32_div16_43_inline_div16_mul16_32_4_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# Index("f", Number(0n0/0x00u8))
# 019a6 Copy8 [Register(0xac), Register(0xb1)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t9922 <- inline_div32_div16_43_inline_div16_mul16_32_4_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
#       Index("f", Number(0n0/0x00u8))
0b ac b1 

# inline_div32_div16_43_inline_div16_mul16_32_4_f[0x02..0x03] <- inline_div32_div16_43_inline_div16_mul16_32_4_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# 019a9 Copy8 [Register(0xb1), Register(0xae)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_f[0x02..0x03] <- inline_div32_div16_43_inline_div16_mul16_32_4_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
0b b1 ae 

# inline_div32_div16_43_inline_div16_mul16_32_4_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 019ac LoadImm8 [Register(0xb2), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 b2 00 

# inline_div32_div16_43_inline_div16_mul16_32_4_f[0x01..0x02] <- inline_div32_div16_43_inline_div16_mul16_32_4_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# 019af Copy8 [Register(0xb2), Register(0xad)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_f[0x01..0x02] <- inline_div32_div16_43_inline_div16_mul16_32_4_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
0b b2 ad 

# inline_div32_div16_43_inline_div16_mul16_32_4_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 019b2 LoadImm8 [Register(0xb2), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 b2 00 

# inline_div32_div16_43_inline_div16_mul16_32_4_f[0x00..0x01] <- inline_div32_div16_43_inline_div16_mul16_32_4_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# 019b5 Copy8 [Register(0xb2), Register(0xac)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_f[0x00..0x01] <- inline_div32_div16_43_inline_div16_mul16_32_4_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
0b b2 ac 

# inline_div32_div16_43_inline_div16_mul16_32_4_tac13 <- inline_div32_div16_43_inline_div16_mul16_32_4_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_tac13 <- inline_div32_div16_43_inline_div16_mul16_32_4_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4 <- inline_div32_div16_43_inline_div16_mul16_32_4_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4 <- inline_div32_div16_43_inline_div16_mul16_32_4_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 019b8 ClearCarry []
#       inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 019b9 AddCarry32_1 [Register(0xa8), Register(0xac), Register(0xa8)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 a8 ac a8 

# 019bd AddCarry32_2 []
#       inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_div32_div16_43_inline_div16_mul16_32_4_t8792 <- inline_div32_div16_43_inline_div16_mul16_32_4_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_t8792 <- inline_div32_div16_43_inline_div16_mul16_32_4_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_te47a <- inline_div32_div16_43_inline_div16_mul16_32_4_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 019be Copy8 [Register(0xa5), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_te47a <- inline_div32_div16_43_inline_div16_mul16_32_4_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b a5 b8 

# inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 019c1 LoadImm32 [Register(0xac), Constant32(0x00000000=0)]
#       Zero-pad for inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 ac 00 00 00 00 

# 019c7 Copy8 [Register(0xb8), Register(0xac)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b b8 ac 

# inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 019ca Mul8_16 [Register(0xa0), Register(0xac), Register(0xac)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 a0 ac ac 

# 019ce LoadImm8 [Register(0xae), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 ae 00 

# 019d1 LoadImm8 [Register(0xaf), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 af 00 

# inline_div32_div16_43_inline_div16_mul16_32_4_t3009 <- inline_div32_div16_43_inline_div16_mul16_32_4_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 019d4 Copy8 [Register(0xa1), Register(0xb0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t3009 <- inline_div32_div16_43_inline_div16_mul16_32_4_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b a1 b0 

# inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 019d7 LoadImm32 [Register(0xb4), Constant32(0x00000000=0)]
#       Zero-pad for inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 b4 00 00 00 00 

# 019dd Copy8 [Register(0xb0), Register(0xb4)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b b0 b4 

# inline_div32_div16_43_inline_div16_mul16_32_4_tace9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_tace9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_e <- inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# 019e0 Mul8_16 [Register(0xb4), Register(0xa4), Register(0xa0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_e <- inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
11 b4 a4 a0 

# 019e4 LoadImm8 [Register(0xa2), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_e <- inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 a2 00 

# 019e7 LoadImm8 [Register(0xa3), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_e <- inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 a3 00 

# inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 <- inline_div32_div16_43_inline_div16_mul16_32_4_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 019ea Copy32 [Register(0xac), Register(0xa4)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 <- inline_div32_div16_43_inline_div16_mul16_32_4_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 ac a4 

# inline_div32_div16_43_inline_div16_mul16_32_4_t3585 <- inline_div32_div16_43_inline_div16_mul16_32_4_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_t3585 <- inline_div32_div16_43_inline_div16_mul16_32_4_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 019ed ClearCarry []
#       inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 019ee AddCarry32_1 [Register(0xa4), Register(0xa0), Register(0xac)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 a4 a0 ac 

# 019f2 AddCarry32_2 []
#       inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_div32_div16_43_inline_div16_mul16_32_4_t8575 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# Index("d", Number(0n2/0x02u8))
# 019f3 Copy8 [Register(0xae), Register(0xb0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t8575 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
#       Index("d", Number(0n2/0x02u8))
0b ae b0 

# inline_div32_div16_43_inline_div16_mul16_32_4_d[0x03..0x04] <- inline_div32_div16_43_inline_div16_mul16_32_4_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# 019f6 Copy8 [Register(0xb0), Register(0xaf)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d[0x03..0x04] <- inline_div32_div16_43_inline_div16_mul16_32_4_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
0b b0 af 

# inline_div32_div16_43_inline_div16_mul16_32_4_t34f7 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# Index("d", Number(0n1/0x01u8))
# 019f9 Copy8 [Register(0xad), Register(0xb0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t34f7 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
#       Index("d", Number(0n1/0x01u8))
0b ad b0 

# inline_div32_div16_43_inline_div16_mul16_32_4_d[0x02..0x03] <- inline_div32_div16_43_inline_div16_mul16_32_4_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# 019fc Copy8 [Register(0xb0), Register(0xae)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d[0x02..0x03] <- inline_div32_div16_43_inline_div16_mul16_32_4_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
0b b0 ae 

# inline_div32_div16_43_inline_div16_mul16_32_4_t30b9 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# Index("d", Number(0n0/0x00u8))
# 019ff Copy8 [Register(0xac), Register(0xb0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t30b9 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
#       Index("d", Number(0n0/0x00u8))
0b ac b0 

# inline_div32_div16_43_inline_div16_mul16_32_4_d[0x01..0x02] <- inline_div32_div16_43_inline_div16_mul16_32_4_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# 01a02 Copy8 [Register(0xb0), Register(0xad)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d[0x01..0x02] <- inline_div32_div16_43_inline_div16_mul16_32_4_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
0b b0 ad 

# inline_div32_div16_43_inline_div16_mul16_32_4_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 01a05 LoadImm8 [Register(0xb2), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 b2 00 

# inline_div32_div16_43_inline_div16_mul16_32_4_d[0x00..0x01] <- inline_div32_div16_43_inline_div16_mul16_32_4_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# 01a08 Copy8 [Register(0xb2), Register(0xac)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d[0x00..0x01] <- inline_div32_div16_43_inline_div16_mul16_32_4_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
0b b2 ac 

# inline_div32_div16_43_inline_div16_mul16_32_4_tac13 <- inline_div32_div16_43_inline_div16_mul16_32_4_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_tac13 <- inline_div32_div16_43_inline_div16_mul16_32_4_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 <- inline_div32_div16_43_inline_div16_mul16_32_4_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 01a0b Copy32 [Register(0xac), Register(0xa4)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 <- inline_div32_div16_43_inline_div16_mul16_32_4_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 ac a4 

# inline_div32_div16_43_inline_div16_mul16_32_4_ta65d <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 01a0e ClearCarry []
#       inline_div32_div16_43_inline_div16_mul16_32_4_ta65d <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 01a0f AddCarry32_1 [Register(0xa8), Register(0xa4), Register(0xa0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_ta65d <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 a8 a4 a0 

# 01a13 AddCarry32_2 []
#       inline_div32_div16_43_inline_div16_mul16_32_4_ta65d <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# inline_div32_div16_43_x <- inline_div32_div16_43_inline_div16_mul16_32_4_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# optimized away noop copy Instruction { source: "inline_div32_div16_43_x <- inline_div32_div16_43_inline_div16_mul16_32_4_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# goto inline_div32_div16_43_inline_div16_mul16_32_4_function_end_mul16_32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_div32_div16_43_inline_div16_mul16_32_4_function_end_mul16_32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_inline_div16_mul16_32_4_function_end_mul16_32)], resolved: None }
# :inline_div32_div16_43_inline_div16_mul16_32_4_function_end_mul16_32 None
# inline_div32_div16_43_inline_div16_mul16_32_4_function_end_mul16_32
# inline_div32_div16_43_tcd34 <- inline_div32_div16_43_x[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }
# Index("x", Number(0n2/0x02u8))
# 01a14 Copy8 [Register(0xa2), Register(0xb0)]
#       inline_div32_div16_43_tcd34 <- inline_div32_div16_43_x[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }
#       Index("x", Number(0n2/0x02u8))
0b a2 b0 

# inline_div32_div16_43_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 01a17 LoadImm8 [Register(0xb8), Constant8(0x00=0)]
#       inline_div32_div16_43_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 b8 00 

# if inline_div32_div16_43_tcd34 > inline_div32_div16_43_ta97f then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_else_0_11' Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }
# 01a1a Cmp8 [Register(0xb0), Register(0xb8)]
#       if inline_div32_div16_43_tcd34 > inline_div32_div16_43_ta97f then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_else_0_11' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }
15 b0 b8 

# 01a1d JcImm [Label24(inline_div32_div16_43_div16_if_else_0_11)]
#       if inline_div32_div16_43_tcd34 > inline_div32_div16_43_ta97f then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_else_0_11' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }
71 35 1a 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_tcd34 > inline_div32_div16_43_ta97f then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_else_0_11' Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Index(\"x\", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_if_true_0_10)], resolved: None }
# :inline_div32_div16_43_div16_if_true_0_10 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# inline_div32_div16_43_div16_if_true_0_10
# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
# Ident("mid")
# 01a21 Copy32 [Register(0xc0), Register(0xa0)]
#       inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
#       Ident("mid")
21 c0 a0 

# inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
# 01a24 Copy32 [Register(0xa0), Register(0x9c)]
#       inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
21 a0 9c 

# 01a27 AddImm32IgnoreCarry [Register(0x9c), Constant32(0xffffffff=4294967295)]
#       inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
32 9c ff ff ff ff 

# goto inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
# Continue
# 01a2d JmpImm [Label24(inline_div32_div16_43_div16_while_predicate_6)]
#       goto inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Continue
70 b1 18 00 

# goto inline_div32_div16_43_div16_if_end_9 Some('/lutcomp/programs/lib/div.j':(32,5))
# 01a31 JmpImm [Label24(inline_div32_div16_43_div16_if_end_9)]
#       goto inline_div32_div16_43_div16_if_end_9 Some('/lutcomp/programs/lib/div.j':(32,5))
70 35 1a 00 

# :inline_div32_div16_43_div16_if_else_0_11 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_else_0_11
# :inline_div32_div16_43_div16_if_end_9 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_end_9
# inline_div32_div16_43_t4299 <- inline_div32_div16_43_x[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }
# Index("x", Number(0n3/0x03u8))
# 01a35 Copy8 [Register(0xa3), Register(0xb0)]
#       inline_div32_div16_43_t4299 <- inline_div32_div16_43_x[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }
#       Index("x", Number(0n3/0x03u8))
0b a3 b0 

# inline_div32_div16_43_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 01a38 LoadImm8 [Register(0xb8), Constant8(0x00=0)]
#       inline_div32_div16_43_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 b8 00 

# if inline_div32_div16_43_t4299 > inline_div32_div16_43_ta97f then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_else_0_14' Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }
# 01a3b Cmp8 [Register(0xb0), Register(0xb8)]
#       if inline_div32_div16_43_t4299 > inline_div32_div16_43_ta97f then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_else_0_14' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }
15 b0 b8 

# 01a3e JcImm [Label24(inline_div32_div16_43_div16_if_else_0_14)]
#       if inline_div32_div16_43_t4299 > inline_div32_div16_43_ta97f then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_else_0_14' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }
71 56 1a 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_t4299 > inline_div32_div16_43_ta97f then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_else_0_14' Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Index(\"x\", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_if_true_0_13)], resolved: None }
# :inline_div32_div16_43_div16_if_true_0_13 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# inline_div32_div16_43_div16_if_true_0_13
# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
# Ident("mid")
# 01a42 Copy32 [Register(0xc0), Register(0xa0)]
#       inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
#       Ident("mid")
21 c0 a0 

# inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
# 01a45 Copy32 [Register(0xa0), Register(0x9c)]
#       inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
21 a0 9c 

# 01a48 AddImm32IgnoreCarry [Register(0x9c), Constant32(0xffffffff=4294967295)]
#       inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
32 9c ff ff ff ff 

# goto inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
# Continue
# 01a4e JmpImm [Label24(inline_div32_div16_43_div16_while_predicate_6)]
#       goto inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Continue
70 b1 18 00 

# goto inline_div32_div16_43_div16_if_end_12 Some('/lutcomp/programs/lib/div.j':(32,5))
# 01a52 JmpImm [Label24(inline_div32_div16_43_div16_if_end_12)]
#       goto inline_div32_div16_43_div16_if_end_12 Some('/lutcomp/programs/lib/div.j':(32,5))
70 56 1a 00 

# :inline_div32_div16_43_div16_if_else_0_14 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_else_0_14
# :inline_div32_div16_43_div16_if_end_12 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_end_12
# inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
# Ident("x")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
# 01a56 Cmp8 [Register(0xa3), Register(0x97)]
#       if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
15 a3 97 

# 01a59 Cmp8IfZero [Register(0xa2), Register(0x96)]
#       if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
16 a2 96 

# 01a5c Cmp8IfZero [Register(0xa1), Register(0x95)]
#       if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
16 a1 95 

# 01a5f Cmp8IfZero [Register(0xa0), Register(0x94)]
#       if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
16 a0 94 

# 01a62 JcImm [Label24(inline_div32_div16_43_div16_if_else_0_17)]
#       if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
71 7a 1a 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_if_true_0_16)], resolved: None }
# :inline_div32_div16_43_div16_if_true_0_16 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# inline_div32_div16_43_div16_if_true_0_16
# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
# Ident("mid")
# 01a66 Copy32 [Register(0xc0), Register(0xa0)]
#       inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
#       Ident("mid")
21 c0 a0 

# inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
# 01a69 Copy32 [Register(0xa0), Register(0x9c)]
#       inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
21 a0 9c 

# 01a6c AddImm32IgnoreCarry [Register(0x9c), Constant32(0xffffffff=4294967295)]
#       inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
32 9c ff ff ff ff 

# goto inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
# Continue
# 01a72 JmpImm [Label24(inline_div32_div16_43_div16_while_predicate_6)]
#       goto inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Continue
70 b1 18 00 

# goto inline_div32_div16_43_div16_if_end_15 Some('/lutcomp/programs/lib/div.j':(32,5))
# 01a76 JmpImm [Label24(inline_div32_div16_43_div16_if_end_15)]
#       goto inline_div32_div16_43_div16_if_end_15 Some('/lutcomp/programs/lib/div.j':(32,5))
70 7a 1a 00 

# :inline_div32_div16_43_div16_if_else_0_17 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_else_0_17
# :inline_div32_div16_43_div16_if_end_15 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_end_15
# inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
# Ident("x")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
# 01a7a Cmp8 [Register(0xa3), Register(0x97)]
#       if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
15 a3 97 

# 01a7d Cmp8IfZero [Register(0xa2), Register(0x96)]
#       if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
16 a2 96 

# 01a80 Cmp8IfZero [Register(0xa1), Register(0x95)]
#       if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
16 a1 95 

# 01a83 Cmp8IfZero [Register(0xa0), Register(0x94)]
#       if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
16 a0 94 

# 01a86 JzImm [Label24(inline_div32_div16_43_div16_if_true_0_19)]
#       if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
72 8e 1a 00 

# 01a8a JmpImm [Label24(inline_div32_div16_43_div16_if_else_0_20)]
#       if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
70 9c 1a 00 

# :inline_div32_div16_43_div16_if_true_0_19 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# inline_div32_div16_43_div16_if_true_0_19
# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Return { value: Some(Ident("mid")) }
# Ident("mid")
# 01a8e Copy32 [Register(0xc0), Register(0xa0)]
#       inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Return { value: Some(Ident("mid")) }
#       Ident("mid")
21 c0 a0 

# te81f <- inline_div32_div16_43_tfd7e U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Return { value: Some(Ident("mid")) }
# 01a91 Copy32 [Register(0xa0), Register(0x94)]
#       te81f <- inline_div32_div16_43_tfd7e U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Return { value: Some(Ident("mid")) }
21 a0 94 

# goto inline_div32_div16_43_function_end_div16 Some('/lutcomp/programs/lib/div.j':(32,5))
# Return { value: Some(Ident("mid")) }
# 01a94 JmpImm [Label24(inline_div32_div16_43_function_end_div16)]
#       goto inline_div32_div16_43_function_end_div16 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Return { value: Some(Ident("mid")) }
70 eb 1a 00 

# goto inline_div32_div16_43_div16_if_end_18 Some('/lutcomp/programs/lib/div.j':(32,5))
# 01a98 JmpImm [Label24(inline_div32_div16_43_div16_if_end_18)]
#       goto inline_div32_div16_43_div16_if_end_18 Some('/lutcomp/programs/lib/div.j':(32,5))
70 9c 1a 00 

# :inline_div32_div16_43_div16_if_else_0_20 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_else_0_20
# :inline_div32_div16_43_div16_if_end_18 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_end_18
# inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
# Arithmetic(Subtract, Ident("a"), Ident("x"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nAssign { target: Ident(\"r\"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }\nArithmetic(Subtract, Ident(\"a\"), Ident(\"x\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
# Arithmetic(Subtract, Ident("a"), Ident("x"))
# Ident("x")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nAssign { target: Ident(\"r\"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }\nArithmetic(Subtract, Ident(\"a\"), Ident(\"x\"))\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
# Arithmetic(Subtract, Ident("a"), Ident("x"))
# 01a9c Copy32 [Register(0xa0), Register(0x00)]
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
21 a0 00 

# 01a9f Invert8 [Register(0x00)]
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 00 

# 01aa1 Invert8 [Register(0x01)]
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 01 

# 01aa3 Invert8 [Register(0x02)]
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 02 

# 01aa5 Invert8 [Register(0x03)]
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 03 

# 01aa7 AddImm32IgnoreCarry [Register(0x00), Constant32(0x00000001=1)]
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
32 00 01 00 00 00 

# 01aad ClearCarry []
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
03 

# 01aae AddCarry32_1 [Register(0x94), Register(0x00), Register(0xa0)]
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
30 94 00 a0 

# 01ab2 AddCarry32_2 []
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
31 

# inline_div32_div16_43_taee0 <- inline_div32_div16_43_r U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
# Ident("r")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_taee0 <- inline_div32_div16_43_r U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }\nIdent(\"r\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
# Ident("b")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_else_0_23' Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
# 01ab3 Cmp8 [Register(0x9b), Register(0xa3)]
#       if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_else_0_23' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
15 9b a3 

# 01ab6 Cmp8IfZero [Register(0x9a), Register(0xa2)]
#       if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_else_0_23' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
16 9a a2 

# 01ab9 Cmp8IfZero [Register(0x99), Register(0xa1)]
#       if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_else_0_23' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
16 99 a1 

# 01abc Cmp8IfZero [Register(0x98), Register(0xa0)]
#       if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_else_0_23' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
16 98 a0 

# 01abf JcImm [Label24(inline_div32_div16_43_div16_if_else_0_23)]
#       if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_else_0_23' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
71 d1 1a 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_else_0_23' Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_if_true_0_22)], resolved: None }
# :inline_div32_div16_43_div16_if_true_0_22 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# inline_div32_div16_43_div16_if_true_0_22
# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Return { value: Some(Ident("mid")) }
# Ident("mid")
# 01ac3 Copy32 [Register(0xc0), Register(0xa0)]
#       inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Return { value: Some(Ident("mid")) }
#       Ident("mid")
21 c0 a0 

# te81f <- inline_div32_div16_43_tfd7e U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Return { value: Some(Ident("mid")) }
# 01ac6 Copy32 [Register(0xa0), Register(0x94)]
#       te81f <- inline_div32_div16_43_tfd7e U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Return { value: Some(Ident("mid")) }
21 a0 94 

# goto inline_div32_div16_43_function_end_div16 Some('/lutcomp/programs/lib/div.j':(32,5))
# Return { value: Some(Ident("mid")) }
# 01ac9 JmpImm [Label24(inline_div32_div16_43_function_end_div16)]
#       goto inline_div32_div16_43_function_end_div16 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Return { value: Some(Ident("mid")) }
70 eb 1a 00 

# goto inline_div32_div16_43_div16_if_end_21 Some('/lutcomp/programs/lib/div.j':(32,5))
# 01acd JmpImm [Label24(inline_div32_div16_43_div16_if_end_21)]
#       goto inline_div32_div16_43_div16_if_end_21 Some('/lutcomp/programs/lib/div.j':(32,5))
70 d1 1a 00 

# :inline_div32_div16_43_div16_if_else_0_23 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_else_0_23
# :inline_div32_div16_43_div16_if_end_21 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_end_21
# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8))
# Ident("mid")
# 01ad1 Copy32 [Register(0xc0), Register(0xa0)]
#       inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8))
#       Ident("mid")
21 c0 a0 

# inline_div32_div16_43_lo <- inline_div32_div16_43_tfd7e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8))
# 01ad4 Copy32 [Register(0xa0), Register(0xbc)]
#       inline_div32_div16_43_lo <- inline_div32_div16_43_tfd7e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8))
21 a0 bc 

# 01ad7 AddImm32IgnoreCarry [Register(0xbc), Constant32(0x00000001=1)]
#       inline_div32_div16_43_lo <- inline_div32_div16_43_tfd7e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8))
32 bc 01 00 00 00 

# goto inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
# 01add JmpImm [Label24(inline_div32_div16_43_div16_while_predicate_6)]
#       goto inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
70 b1 18 00 

# :inline_div32_div16_43_div16_while_end_8 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_while_end_8
# inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 Some('/lutcomp/programs/lib/div.j':(63,5))
# Return { value: Some(Ident("lo")) }
# Ident("lo")
# 01ae1 Copy32 [Register(0xbc), Register(0xa0)]
#       inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 Some('/lutcomp/programs/lib/div.j':(63,5))
#       Return { value: Some(Ident("lo")) }
#       Ident("lo")
21 bc a0 

# te81f <- inline_div32_div16_43_t1506 U32 Some('/lutcomp/programs/lib/div.j':(63,5))
# Return { value: Some(Ident("lo")) }
# 01ae4 Copy32 [Register(0xa0), Register(0x94)]
#       te81f <- inline_div32_div16_43_t1506 U32 Some('/lutcomp/programs/lib/div.j':(63,5))
#       Return { value: Some(Ident("lo")) }
21 a0 94 

# goto inline_div32_div16_43_function_end_div16 Some('/lutcomp/programs/lib/div.j':(63,5))
# Return { value: Some(Ident("lo")) }
# 01ae7 JmpImm [Label24(inline_div32_div16_43_function_end_div16)]
#       goto inline_div32_div16_43_function_end_div16 Some('/lutcomp/programs/lib/div.j':(63,5))
#       Return { value: Some(Ident("lo")) }
70 eb 1a 00 

# :inline_div32_div16_43_function_end_div16 None
# inline_div32_div16_43_function_end_div16
# __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(71,5))
# Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
# 01aeb AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(71,5))
#       Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
32 0c 08 00 00 00 

# return Some(te81f) Some('/lutcomp/programs/lib/div.j':(71,5))
# Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
# 01af1 Copy32 [Register(0x94), Register(0x00)]
#       return Some(te81f) Some('/lutcomp/programs/lib/div.j':(71,5))
#       Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
21 94 00 

# 01af4 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       Dealloc 8 bytes from stack
32 0c 08 00 00 00 

# 01afa JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto div32_if_end_3 Some('/lutcomp/programs/lib/div.j':(71,5))
# 01afc JmpImm [Label24(div32_if_end_3)]
#       goto div32_if_end_3 Some('/lutcomp/programs/lib/div.j':(71,5))
70 00 1b 00 

# :div32_if_else_0_5 Some('/lutcomp/programs/lib/div.j':(71,5))
# div32_if_else_0_5
# :div32_if_end_3 Some('/lutcomp/programs/lib/div.j':(71,5))
# div32_if_end_3
# lo <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(75,5))
# Assign { target: Ident("lo"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 01b00 LoadImm32 [Register(0xac), Constant32(0x00000000=0)]
#       lo <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(75,5))
#       Assign { target: Ident("lo"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 ac 00 00 00 00 

# hi <- 0xffffffffu32  Some('/lutcomp/programs/lib/div.j':(76,5))
# Assign { target: Ident("hi"), var_type: Some(Number(U32)), value: Number(0xffffffffu32) }
# Number(0xffffffffu32)
# 01b06 LoadImm32 [Register(0x9c), Constant32(0xffffffff=4294967295)]
#       hi <- 0xffffffffu32  Some('/lutcomp/programs/lib/div.j':(76,5))
#       Assign { target: Ident("hi"), var_type: Some(Number(U32)), value: Number(0xffffffffu32) }
#       Number(0xffffffffu32)
20 9c ff ff ff ff 

# :div32_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(78,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
# div32_while_predicate_6
# t1506 <- lo U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
# Ident("lo")
# 01b0c Copy32 [Register(0xac), Register(0xa0)]
#       t1506 <- lo U32 Some('/lutcomp/programs/lib/div.j':(78,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
#       Ident("lo")
21 ac a0 

# t5508 <- hi U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
# Ident("hi")
# optimized away noop copy Instruction { source: "t5508 <- hi U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }, Declare { scope: Local, name: \"x64\", var_type: Struct(\"U64\") }, VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident(\"x\"), var_type: Some(Number(U32)), value: LocalFieldDeref(\"x64\", \"lo\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }\nIdent(\"hi\")\n", opcode: Copy32, args: [Register(0x9c), Register(0x9c)], resolved: None }
# if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/lutcomp/programs/lib/div.j':(78,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
# 01b0f Cmp8 [Register(0x9f), Register(0xa3)]
#       if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/lutcomp/programs/lib/div.j':(78,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
15 9f a3 

# 01b12 Cmp8IfZero [Register(0x9e), Register(0xa2)]
#       if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/lutcomp/programs/lib/div.j':(78,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
16 9e a2 

# 01b15 Cmp8IfZero [Register(0x9d), Register(0xa1)]
#       if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/lutcomp/programs/lib/div.j':(78,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
16 9d a1 

# 01b18 Cmp8IfZero [Register(0x9c), Register(0xa0)]
#       if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/lutcomp/programs/lib/div.j':(78,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
16 9c a0 

# 01b1b JcImm [Label24(div32_while_end_8)]
#       if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/lutcomp/programs/lib/div.j':(78,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
71 5e 1d 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/lutcomp/programs/lib/div.j':(78,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }, Declare { scope: Local, name: \"x64\", var_type: Struct(\"U64\") }, VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident(\"x\"), var_type: Some(Number(U32)), value: LocalFieldDeref(\"x64\", \"lo\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }\n", opcode: JmpImm, args: [Label24(div32_while_body_7)], resolved: None }
# :div32_while_body_7 Some('/lutcomp/programs/lib/div.j':(78,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
# div32_while_body_7
# t1506 <- lo U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
# Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
# Call(Call { function: "shiftright1", parameters: [Ident("lo")] })
# Ident("lo")
# 01b1f Copy32 [Register(0xac), Register(0xa0)]
#       t1506 <- lo U32 Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
#       Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
#       Call(Call { function: "shiftright1", parameters: [Ident("lo")] })
#       Ident("lo")
21 ac a0 

# inline_div32_shiftright1_44_a <- t1506 U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
# Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
# Call(Call { function: "shiftright1", parameters: [Ident("lo")] })
# optimized away noop copy Instruction { source: "inline_div32_shiftright1_44_a <- t1506 U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"mid\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }\nArithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] }))\nCall(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] })\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_div32_shiftright1_44_t3404 <- inline_div32_shiftright1_44_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
# Index("a", Number(0n0/0x00u8))
# 01b22 Copy8 [Register(0xa0), Register(0xb8)]
#       inline_div32_shiftright1_44_t3404 <- inline_div32_shiftright1_44_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
#       Index("a", Number(0n0/0x00u8))
0b a0 b8 

# inline_div32_shiftright1_44_tf435 <- inline_div32_shiftright1_44_t3404 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
# 01b25 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_44_tf435 <- inline_div32_shiftright1_44_t3404 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
04 00 01 

# 01b28 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb8), Register(0xb8)]
#       inline_div32_shiftright1_44_tf435 <- inline_div32_shiftright1_44_t3404 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
1e 04 00 b8 b8 

# inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_tf435 U8 Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
# 01b2d Copy8 [Register(0xb8), Register(0xa0)]
#       inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_tf435 U8 Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
0b b8 a0 

# inline_div32_shiftright1_44_t3009 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
# Index("a", Number(0n1/0x01u8))
# 01b30 Copy8 [Register(0xa1), Register(0xb0)]
#       inline_div32_shiftright1_44_t3009 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
#       Index("a", Number(0n1/0x01u8))
0b a1 b0 

# inline_div32_shiftright1_44_t1aa2 <- inline_div32_shiftright1_44_t3009 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
# 01b33 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_44_t1aa2 <- inline_div32_shiftright1_44_t3009 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
04 00 01 

# 01b36 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb0), Register(0xb8)]
#       inline_div32_shiftright1_44_t1aa2 <- inline_div32_shiftright1_44_t3009 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
1e 04 00 b0 b8 

# inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_t1aa2 U8 Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
# 01b3b Copy8 [Register(0xb8), Register(0xa1)]
#       inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_t1aa2 U8 Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
0b b8 a1 

# inline_div32_shiftright1_44_t3b02 <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
# Index("a", Number(0n2/0x02u8))
# 01b3e Copy8 [Register(0xa2), Register(0xb9)]
#       inline_div32_shiftright1_44_t3b02 <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
#       Index("a", Number(0n2/0x02u8))
0b a2 b9 

# inline_div32_shiftright1_44_t878b <- inline_div32_shiftright1_44_t3b02 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
# 01b41 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_44_t878b <- inline_div32_shiftright1_44_t3b02 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
04 00 01 

# 01b44 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb9), Register(0xb8)]
#       inline_div32_shiftright1_44_t878b <- inline_div32_shiftright1_44_t3b02 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
1e 04 00 b9 b8 

# inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t878b U8 Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
# 01b49 Copy8 [Register(0xb8), Register(0xa2)]
#       inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t878b U8 Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
0b b8 a2 

# inline_div32_shiftright1_44_t94df <- inline_div32_shiftright1_44_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
# Index("a", Number(0n3/0x03u8))
# 01b4c Copy8 [Register(0xa3), Register(0xb0)]
#       inline_div32_shiftright1_44_t94df <- inline_div32_shiftright1_44_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
#       Index("a", Number(0n3/0x03u8))
0b a3 b0 

# inline_div32_shiftright1_44_t32ea <- inline_div32_shiftright1_44_t94df RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
# 01b4f LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_44_t32ea <- inline_div32_shiftright1_44_t94df RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
04 00 01 

# 01b52 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb0), Register(0xb8)]
#       inline_div32_shiftright1_44_t32ea <- inline_div32_shiftright1_44_t94df RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
1e 04 00 b0 b8 

# inline_div32_shiftright1_44_a[0x03..0x04] <- inline_div32_shiftright1_44_t32ea U8 Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
# 01b57 Copy8 [Register(0xb8), Register(0xa3)]
#       inline_div32_shiftright1_44_a[0x03..0x04] <- inline_div32_shiftright1_44_t32ea U8 Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
0b b8 a3 

# inline_div32_shiftright1_44_t3404 <- inline_div32_shiftright1_44_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))
# Index("a", Number(0n0/0x00u8))
# 01b5a Copy8 [Register(0xa0), Register(0xb8)]
#       inline_div32_shiftright1_44_t3404 <- inline_div32_shiftright1_44_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))
#       Index("a", Number(0n0/0x00u8))
0b a0 b8 

# inline_div32_shiftright1_44_tbe <- inline_div32_shiftright1_44_t3404 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))
# 01b5d AndImm8 [Register(0xb8), Constant8(0x7f=127)]
#       inline_div32_shiftright1_44_tbe <- inline_div32_shiftright1_44_t3404 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))
18 b8 7f 

# inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_tbe U8 Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
# 01b60 Copy8 [Register(0xb8), Register(0xa0)]
#       inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_tbe U8 Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
0b b8 a0 

# inline_div32_shiftright1_44_t3404 <- inline_div32_shiftright1_44_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
# Index("a", Number(0n0/0x00u8))
# 01b63 Copy8 [Register(0xa0), Register(0xb8)]
#       inline_div32_shiftright1_44_t3404 <- inline_div32_shiftright1_44_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
#       Index("a", Number(0n0/0x00u8))
0b a0 b8 

# inline_div32_shiftright1_44_t3009 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
# Index("a", Number(0n1/0x01u8))
# 01b66 Copy8 [Register(0xa1), Register(0xb0)]
#       inline_div32_shiftright1_44_t3009 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
#       Index("a", Number(0n1/0x01u8))
0b a1 b0 

# inline_div32_shiftright1_44_t9170 <- inline_div32_shiftright1_44_t3009 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
# 01b69 Copy8 [Register(0xb0), Register(0xb9)]
#       inline_div32_shiftright1_44_t9170 <- inline_div32_shiftright1_44_t3009 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
0b b0 b9 

# 01b6c AndImm8 [Register(0xb9), Constant8(0x80=128)]
#       inline_div32_shiftright1_44_t9170 <- inline_div32_shiftright1_44_t3009 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
18 b9 80 

# inline_div32_shiftright1_44_tafc1 <- inline_div32_shiftright1_44_t3404 BitwiseOr Var(inline_div32_shiftright1_44_t9170) Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
# 01b6f Or8 [Register(0xb8), Register(0xb9), Register(0xb8)]
#       inline_div32_shiftright1_44_tafc1 <- inline_div32_shiftright1_44_t3404 BitwiseOr Var(inline_div32_shiftright1_44_t9170) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
1c b8 b9 b8 

# inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_tafc1 U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# 01b73 Copy8 [Register(0xb8), Register(0xa0)]
#       inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_tafc1 U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
0b b8 a0 

# inline_div32_shiftright1_44_t3009 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
# Index("a", Number(0n1/0x01u8))
# 01b76 Copy8 [Register(0xa1), Register(0xb0)]
#       inline_div32_shiftright1_44_t3009 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
#       Index("a", Number(0n1/0x01u8))
0b a1 b0 

# inline_div32_shiftright1_44_tdc9f <- inline_div32_shiftright1_44_t3009 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
# 01b79 Copy8 [Register(0xb0), Register(0xb8)]
#       inline_div32_shiftright1_44_tdc9f <- inline_div32_shiftright1_44_t3009 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
0b b0 b8 

# 01b7c AndImm8 [Register(0xb8), Constant8(0x7f=127)]
#       inline_div32_shiftright1_44_tdc9f <- inline_div32_shiftright1_44_t3009 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
18 b8 7f 

# inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_tdc9f U8 Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
# 01b7f Copy8 [Register(0xb8), Register(0xa1)]
#       inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_tdc9f U8 Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
0b b8 a1 

# inline_div32_shiftright1_44_t3009 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
# Index("a", Number(0n1/0x01u8))
# 01b82 Copy8 [Register(0xa1), Register(0xb0)]
#       inline_div32_shiftright1_44_t3009 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
#       Index("a", Number(0n1/0x01u8))
0b a1 b0 

# inline_div32_shiftright1_44_t3b02 <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
# Index("a", Number(0n2/0x02u8))
# 01b85 Copy8 [Register(0xa2), Register(0xb9)]
#       inline_div32_shiftright1_44_t3b02 <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
#       Index("a", Number(0n2/0x02u8))
0b a2 b9 

# inline_div32_shiftright1_44_tdb4c <- inline_div32_shiftright1_44_t3b02 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
# 01b88 Copy8 [Register(0xb9), Register(0xb8)]
#       inline_div32_shiftright1_44_tdb4c <- inline_div32_shiftright1_44_t3b02 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
0b b9 b8 

# 01b8b AndImm8 [Register(0xb8), Constant8(0x80=128)]
#       inline_div32_shiftright1_44_tdb4c <- inline_div32_shiftright1_44_t3b02 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
18 b8 80 

# inline_div32_shiftright1_44_tdbbe <- inline_div32_shiftright1_44_t3009 BitwiseOr Var(inline_div32_shiftright1_44_tdb4c) Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
# 01b8e Or8 [Register(0xb0), Register(0xb8), Register(0xb8)]
#       inline_div32_shiftright1_44_tdbbe <- inline_div32_shiftright1_44_t3009 BitwiseOr Var(inline_div32_shiftright1_44_tdb4c) Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
1c b0 b8 b8 

# inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_tdbbe U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# 01b92 Copy8 [Register(0xb8), Register(0xa1)]
#       inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_tdbbe U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
0b b8 a1 

# inline_div32_shiftright1_44_t3b02 <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
# Index("a", Number(0n2/0x02u8))
# 01b95 Copy8 [Register(0xa2), Register(0xb9)]
#       inline_div32_shiftright1_44_t3b02 <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
#       Index("a", Number(0n2/0x02u8))
0b a2 b9 

# inline_div32_shiftright1_44_t4954 <- inline_div32_shiftright1_44_t3b02 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
# 01b98 Copy8 [Register(0xb9), Register(0xb8)]
#       inline_div32_shiftright1_44_t4954 <- inline_div32_shiftright1_44_t3b02 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
0b b9 b8 

# 01b9b AndImm8 [Register(0xb8), Constant8(0x7f=127)]
#       inline_div32_shiftright1_44_t4954 <- inline_div32_shiftright1_44_t3b02 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
18 b8 7f 

# inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t4954 U8 Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
# 01b9e Copy8 [Register(0xb8), Register(0xa2)]
#       inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t4954 U8 Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
0b b8 a2 

# inline_div32_shiftright1_44_t3b02 <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
# Index("a", Number(0n2/0x02u8))
# 01ba1 Copy8 [Register(0xa2), Register(0xb9)]
#       inline_div32_shiftright1_44_t3b02 <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
#       Index("a", Number(0n2/0x02u8))
0b a2 b9 

# inline_div32_shiftright1_44_t94df <- inline_div32_shiftright1_44_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
# Index("a", Number(0n3/0x03u8))
# 01ba4 Copy8 [Register(0xa3), Register(0xb0)]
#       inline_div32_shiftright1_44_t94df <- inline_div32_shiftright1_44_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
#       Index("a", Number(0n3/0x03u8))
0b a3 b0 

# inline_div32_shiftright1_44_t17d0 <- inline_div32_shiftright1_44_t94df BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
# 01ba7 Copy8 [Register(0xb0), Register(0xb8)]
#       inline_div32_shiftright1_44_t17d0 <- inline_div32_shiftright1_44_t94df BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
0b b0 b8 

# 01baa AndImm8 [Register(0xb8), Constant8(0x80=128)]
#       inline_div32_shiftright1_44_t17d0 <- inline_div32_shiftright1_44_t94df BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
18 b8 80 

# inline_div32_shiftright1_44_t837a <- inline_div32_shiftright1_44_t3b02 BitwiseOr Var(inline_div32_shiftright1_44_t17d0) Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
# 01bad Or8 [Register(0xb9), Register(0xb8), Register(0xb8)]
#       inline_div32_shiftright1_44_t837a <- inline_div32_shiftright1_44_t3b02 BitwiseOr Var(inline_div32_shiftright1_44_t17d0) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
1c b9 b8 b8 

# inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t837a U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# 01bb1 Copy8 [Register(0xb8), Register(0xa2)]
#       inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t837a U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
0b b8 a2 

# inline_div32_shiftright1_44_t94df <- inline_div32_shiftright1_44_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
# Index("a", Number(0n3/0x03u8))
# 01bb4 Copy8 [Register(0xa3), Register(0xb0)]
#       inline_div32_shiftright1_44_t94df <- inline_div32_shiftright1_44_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
#       Index("a", Number(0n3/0x03u8))
0b a3 b0 

# inline_div32_shiftright1_44_t965c <- inline_div32_shiftright1_44_t94df BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
# 01bb7 Copy8 [Register(0xb0), Register(0xb8)]
#       inline_div32_shiftright1_44_t965c <- inline_div32_shiftright1_44_t94df BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
0b b0 b8 

# 01bba AndImm8 [Register(0xb8), Constant8(0x7f=127)]
#       inline_div32_shiftright1_44_t965c <- inline_div32_shiftright1_44_t94df BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
18 b8 7f 

# inline_div32_shiftright1_44_a[0x03..0x04] <- inline_div32_shiftright1_44_t965c U8 Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
# 01bbd Copy8 [Register(0xb8), Register(0xa3)]
#       inline_div32_shiftright1_44_a[0x03..0x04] <- inline_div32_shiftright1_44_t965c U8 Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
0b b8 a3 

# inline_div32_shiftright1_44_t8792 <- inline_div32_shiftright1_44_a U32 Some('/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_shiftright1_44_t8792 <- inline_div32_shiftright1_44_a U32 Some('/lutcomp/programs/lib/div.j':(17,5))\nReturn { value: Some(Ident(\"a\")) }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# t9599 <- inline_div32_shiftright1_44_t8792 U32 Some('/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# 01bc0 Copy32 [Register(0xa0), Register(0xb4)]
#       t9599 <- inline_div32_shiftright1_44_t8792 U32 Some('/lutcomp/programs/lib/div.j':(17,5))
#       Return { value: Some(Ident("a")) }
21 a0 b4 

# goto inline_div32_shiftright1_44_function_end_shiftright1 Some('/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_div32_shiftright1_44_function_end_shiftright1 Some('/lutcomp/programs/lib/div.j':(17,5))\nReturn { value: Some(Ident(\"a\")) }\n", opcode: JmpImm, args: [Label24(inline_div32_shiftright1_44_function_end_shiftright1)], resolved: None }
# :inline_div32_shiftright1_44_function_end_shiftright1 None
# inline_div32_shiftright1_44_function_end_shiftright1
# t5508 <- hi U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
# Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
# Call(Call { function: "shiftright1", parameters: [Ident("hi")] })
# Ident("hi")
# optimized away noop copy Instruction { source: "t5508 <- hi U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"mid\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }\nArithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] }))\nCall(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })\nIdent(\"hi\")\n", opcode: Copy32, args: [Register(0x9c), Register(0x9c)], resolved: None }
# inline_div32_shiftright1_45_a <- t5508 U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
# Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
# Call(Call { function: "shiftright1", parameters: [Ident("hi")] })
# 01bc3 Copy32 [Register(0x9c), Register(0xa0)]
#       inline_div32_shiftright1_45_a <- t5508 U32 Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
#       Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
#       Call(Call { function: "shiftright1", parameters: [Ident("hi")] })
21 9c a0 

# inline_div32_shiftright1_45_t3404 <- inline_div32_shiftright1_45_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
# Index("a", Number(0n0/0x00u8))
# 01bc6 Copy8 [Register(0xa0), Register(0xb8)]
#       inline_div32_shiftright1_45_t3404 <- inline_div32_shiftright1_45_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
#       Index("a", Number(0n0/0x00u8))
0b a0 b8 

# inline_div32_shiftright1_45_tf435 <- inline_div32_shiftright1_45_t3404 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
# 01bc9 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_45_tf435 <- inline_div32_shiftright1_45_t3404 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
04 00 01 

# 01bcc Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb8), Register(0xb8)]
#       inline_div32_shiftright1_45_tf435 <- inline_div32_shiftright1_45_t3404 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
1e 04 00 b8 b8 

# inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_tf435 U8 Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
# 01bd1 Copy8 [Register(0xb8), Register(0xa0)]
#       inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_tf435 U8 Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
0b b8 a0 

# inline_div32_shiftright1_45_t3009 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
# Index("a", Number(0n1/0x01u8))
# 01bd4 Copy8 [Register(0xa1), Register(0xb0)]
#       inline_div32_shiftright1_45_t3009 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
#       Index("a", Number(0n1/0x01u8))
0b a1 b0 

# inline_div32_shiftright1_45_t1aa2 <- inline_div32_shiftright1_45_t3009 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
# 01bd7 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_45_t1aa2 <- inline_div32_shiftright1_45_t3009 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
04 00 01 

# 01bda Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb0), Register(0xb8)]
#       inline_div32_shiftright1_45_t1aa2 <- inline_div32_shiftright1_45_t3009 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
1e 04 00 b0 b8 

# inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_t1aa2 U8 Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
# 01bdf Copy8 [Register(0xb8), Register(0xa1)]
#       inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_t1aa2 U8 Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
0b b8 a1 

# inline_div32_shiftright1_45_t3b02 <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
# Index("a", Number(0n2/0x02u8))
# 01be2 Copy8 [Register(0xa2), Register(0xb9)]
#       inline_div32_shiftright1_45_t3b02 <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
#       Index("a", Number(0n2/0x02u8))
0b a2 b9 

# inline_div32_shiftright1_45_t878b <- inline_div32_shiftright1_45_t3b02 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
# 01be5 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_45_t878b <- inline_div32_shiftright1_45_t3b02 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
04 00 01 

# 01be8 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb9), Register(0xb8)]
#       inline_div32_shiftright1_45_t878b <- inline_div32_shiftright1_45_t3b02 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
1e 04 00 b9 b8 

# inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t878b U8 Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
# 01bed Copy8 [Register(0xb8), Register(0xa2)]
#       inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t878b U8 Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
0b b8 a2 

# inline_div32_shiftright1_45_t94df <- inline_div32_shiftright1_45_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
# Index("a", Number(0n3/0x03u8))
# 01bf0 Copy8 [Register(0xa3), Register(0xb0)]
#       inline_div32_shiftright1_45_t94df <- inline_div32_shiftright1_45_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
#       Index("a", Number(0n3/0x03u8))
0b a3 b0 

# inline_div32_shiftright1_45_t32ea <- inline_div32_shiftright1_45_t94df RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
# 01bf3 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_45_t32ea <- inline_div32_shiftright1_45_t94df RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
04 00 01 

# 01bf6 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb0), Register(0xb8)]
#       inline_div32_shiftright1_45_t32ea <- inline_div32_shiftright1_45_t94df RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
1e 04 00 b0 b8 

# inline_div32_shiftright1_45_a[0x03..0x04] <- inline_div32_shiftright1_45_t32ea U8 Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
# 01bfb Copy8 [Register(0xb8), Register(0xa3)]
#       inline_div32_shiftright1_45_a[0x03..0x04] <- inline_div32_shiftright1_45_t32ea U8 Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
0b b8 a3 

# inline_div32_shiftright1_45_t3404 <- inline_div32_shiftright1_45_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))
# Index("a", Number(0n0/0x00u8))
# 01bfe Copy8 [Register(0xa0), Register(0xb8)]
#       inline_div32_shiftright1_45_t3404 <- inline_div32_shiftright1_45_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))
#       Index("a", Number(0n0/0x00u8))
0b a0 b8 

# inline_div32_shiftright1_45_tbe <- inline_div32_shiftright1_45_t3404 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))
# 01c01 AndImm8 [Register(0xb8), Constant8(0x7f=127)]
#       inline_div32_shiftright1_45_tbe <- inline_div32_shiftright1_45_t3404 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))
18 b8 7f 

# inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_tbe U8 Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
# 01c04 Copy8 [Register(0xb8), Register(0xa0)]
#       inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_tbe U8 Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
0b b8 a0 

# inline_div32_shiftright1_45_t3404 <- inline_div32_shiftright1_45_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
# Index("a", Number(0n0/0x00u8))
# 01c07 Copy8 [Register(0xa0), Register(0xb8)]
#       inline_div32_shiftright1_45_t3404 <- inline_div32_shiftright1_45_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
#       Index("a", Number(0n0/0x00u8))
0b a0 b8 

# inline_div32_shiftright1_45_t3009 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
# Index("a", Number(0n1/0x01u8))
# 01c0a Copy8 [Register(0xa1), Register(0xb0)]
#       inline_div32_shiftright1_45_t3009 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
#       Index("a", Number(0n1/0x01u8))
0b a1 b0 

# inline_div32_shiftright1_45_t9170 <- inline_div32_shiftright1_45_t3009 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
# 01c0d Copy8 [Register(0xb0), Register(0xb9)]
#       inline_div32_shiftright1_45_t9170 <- inline_div32_shiftright1_45_t3009 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
0b b0 b9 

# 01c10 AndImm8 [Register(0xb9), Constant8(0x80=128)]
#       inline_div32_shiftright1_45_t9170 <- inline_div32_shiftright1_45_t3009 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
18 b9 80 

# inline_div32_shiftright1_45_tafc1 <- inline_div32_shiftright1_45_t3404 BitwiseOr Var(inline_div32_shiftright1_45_t9170) Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
# 01c13 Or8 [Register(0xb8), Register(0xb9), Register(0xb8)]
#       inline_div32_shiftright1_45_tafc1 <- inline_div32_shiftright1_45_t3404 BitwiseOr Var(inline_div32_shiftright1_45_t9170) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
1c b8 b9 b8 

# inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_tafc1 U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# 01c17 Copy8 [Register(0xb8), Register(0xa0)]
#       inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_tafc1 U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
0b b8 a0 

# inline_div32_shiftright1_45_t3009 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
# Index("a", Number(0n1/0x01u8))
# 01c1a Copy8 [Register(0xa1), Register(0xb0)]
#       inline_div32_shiftright1_45_t3009 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
#       Index("a", Number(0n1/0x01u8))
0b a1 b0 

# inline_div32_shiftright1_45_tdc9f <- inline_div32_shiftright1_45_t3009 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
# 01c1d Copy8 [Register(0xb0), Register(0xb8)]
#       inline_div32_shiftright1_45_tdc9f <- inline_div32_shiftright1_45_t3009 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
0b b0 b8 

# 01c20 AndImm8 [Register(0xb8), Constant8(0x7f=127)]
#       inline_div32_shiftright1_45_tdc9f <- inline_div32_shiftright1_45_t3009 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
18 b8 7f 

# inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_tdc9f U8 Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
# 01c23 Copy8 [Register(0xb8), Register(0xa1)]
#       inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_tdc9f U8 Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
0b b8 a1 

# inline_div32_shiftright1_45_t3009 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
# Index("a", Number(0n1/0x01u8))
# 01c26 Copy8 [Register(0xa1), Register(0xb0)]
#       inline_div32_shiftright1_45_t3009 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
#       Index("a", Number(0n1/0x01u8))
0b a1 b0 

# inline_div32_shiftright1_45_t3b02 <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
# Index("a", Number(0n2/0x02u8))
# 01c29 Copy8 [Register(0xa2), Register(0xb9)]
#       inline_div32_shiftright1_45_t3b02 <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
#       Index("a", Number(0n2/0x02u8))
0b a2 b9 

# inline_div32_shiftright1_45_tdb4c <- inline_div32_shiftright1_45_t3b02 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
# 01c2c Copy8 [Register(0xb9), Register(0xb8)]
#       inline_div32_shiftright1_45_tdb4c <- inline_div32_shiftright1_45_t3b02 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
0b b9 b8 

# 01c2f AndImm8 [Register(0xb8), Constant8(0x80=128)]
#       inline_div32_shiftright1_45_tdb4c <- inline_div32_shiftright1_45_t3b02 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
18 b8 80 

# inline_div32_shiftright1_45_tdbbe <- inline_div32_shiftright1_45_t3009 BitwiseOr Var(inline_div32_shiftright1_45_tdb4c) Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
# 01c32 Or8 [Register(0xb0), Register(0xb8), Register(0xb8)]
#       inline_div32_shiftright1_45_tdbbe <- inline_div32_shiftright1_45_t3009 BitwiseOr Var(inline_div32_shiftright1_45_tdb4c) Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
1c b0 b8 b8 

# inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_tdbbe U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# 01c36 Copy8 [Register(0xb8), Register(0xa1)]
#       inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_tdbbe U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
0b b8 a1 

# inline_div32_shiftright1_45_t3b02 <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
# Index("a", Number(0n2/0x02u8))
# 01c39 Copy8 [Register(0xa2), Register(0xb9)]
#       inline_div32_shiftright1_45_t3b02 <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
#       Index("a", Number(0n2/0x02u8))
0b a2 b9 

# inline_div32_shiftright1_45_t4954 <- inline_div32_shiftright1_45_t3b02 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
# 01c3c Copy8 [Register(0xb9), Register(0xb8)]
#       inline_div32_shiftright1_45_t4954 <- inline_div32_shiftright1_45_t3b02 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
0b b9 b8 

# 01c3f AndImm8 [Register(0xb8), Constant8(0x7f=127)]
#       inline_div32_shiftright1_45_t4954 <- inline_div32_shiftright1_45_t3b02 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
18 b8 7f 

# inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t4954 U8 Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
# 01c42 Copy8 [Register(0xb8), Register(0xa2)]
#       inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t4954 U8 Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
0b b8 a2 

# inline_div32_shiftright1_45_t3b02 <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
# Index("a", Number(0n2/0x02u8))
# 01c45 Copy8 [Register(0xa2), Register(0xb9)]
#       inline_div32_shiftright1_45_t3b02 <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
#       Index("a", Number(0n2/0x02u8))
0b a2 b9 

# inline_div32_shiftright1_45_t94df <- inline_div32_shiftright1_45_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
# Index("a", Number(0n3/0x03u8))
# 01c48 Copy8 [Register(0xa3), Register(0xb0)]
#       inline_div32_shiftright1_45_t94df <- inline_div32_shiftright1_45_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
#       Index("a", Number(0n3/0x03u8))
0b a3 b0 

# inline_div32_shiftright1_45_t17d0 <- inline_div32_shiftright1_45_t94df BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
# 01c4b Copy8 [Register(0xb0), Register(0xb8)]
#       inline_div32_shiftright1_45_t17d0 <- inline_div32_shiftright1_45_t94df BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
0b b0 b8 

# 01c4e AndImm8 [Register(0xb8), Constant8(0x80=128)]
#       inline_div32_shiftright1_45_t17d0 <- inline_div32_shiftright1_45_t94df BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
18 b8 80 

# inline_div32_shiftright1_45_t837a <- inline_div32_shiftright1_45_t3b02 BitwiseOr Var(inline_div32_shiftright1_45_t17d0) Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
# 01c51 Or8 [Register(0xb9), Register(0xb8), Register(0xb8)]
#       inline_div32_shiftright1_45_t837a <- inline_div32_shiftright1_45_t3b02 BitwiseOr Var(inline_div32_shiftright1_45_t17d0) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
1c b9 b8 b8 

# inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t837a U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# 01c55 Copy8 [Register(0xb8), Register(0xa2)]
#       inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t837a U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
0b b8 a2 

# inline_div32_shiftright1_45_t94df <- inline_div32_shiftright1_45_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
# Index("a", Number(0n3/0x03u8))
# 01c58 Copy8 [Register(0xa3), Register(0xb0)]
#       inline_div32_shiftright1_45_t94df <- inline_div32_shiftright1_45_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
#       Index("a", Number(0n3/0x03u8))
0b a3 b0 

# inline_div32_shiftright1_45_t965c <- inline_div32_shiftright1_45_t94df BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
# 01c5b Copy8 [Register(0xb0), Register(0xb8)]
#       inline_div32_shiftright1_45_t965c <- inline_div32_shiftright1_45_t94df BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
0b b0 b8 

# 01c5e AndImm8 [Register(0xb8), Constant8(0x7f=127)]
#       inline_div32_shiftright1_45_t965c <- inline_div32_shiftright1_45_t94df BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
18 b8 7f 

# inline_div32_shiftright1_45_a[0x03..0x04] <- inline_div32_shiftright1_45_t965c U8 Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
# 01c61 Copy8 [Register(0xb8), Register(0xa3)]
#       inline_div32_shiftright1_45_a[0x03..0x04] <- inline_div32_shiftright1_45_t965c U8 Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
0b b8 a3 

# inline_div32_shiftright1_45_t8792 <- inline_div32_shiftright1_45_a U32 Some('/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_shiftright1_45_t8792 <- inline_div32_shiftright1_45_a U32 Some('/lutcomp/programs/lib/div.j':(17,5))\nReturn { value: Some(Ident(\"a\")) }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# t3803 <- inline_div32_shiftright1_45_t8792 U32 Some('/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# optimized away noop copy Instruction { source: "t3803 <- inline_div32_shiftright1_45_t8792 U32 Some('/lutcomp/programs/lib/div.j':(17,5))\nReturn { value: Some(Ident(\"a\")) }\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# goto inline_div32_shiftright1_45_function_end_shiftright1 Some('/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_div32_shiftright1_45_function_end_shiftright1 Some('/lutcomp/programs/lib/div.j':(17,5))\nReturn { value: Some(Ident(\"a\")) }\n", opcode: JmpImm, args: [Label24(inline_div32_shiftright1_45_function_end_shiftright1)], resolved: None }
# :inline_div32_shiftright1_45_function_end_shiftright1 None
# inline_div32_shiftright1_45_function_end_shiftright1
# mid <- t9599 Add Var(t3803) Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
# Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
# 01c64 ClearCarry []
#       mid <- t9599 Add Var(t3803) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
#       Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
03 

# 01c65 AddCarry32_1 [Register(0xb4), Register(0xa0), Register(0xa0)]
#       mid <- t9599 Add Var(t3803) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
#       Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
30 b4 a0 a0 

# 01c69 AddCarry32_2 []
#       mid <- t9599 Add Var(t3803) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
#       Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
31 

# tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
# Ident("mid")
# optimized away noop copy Instruction { source: "tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nVoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }\nCall(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })\nIdent(\"mid\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# tace9 <- b U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nVoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }\nCall(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
# AddressOf(Ident("x64"))
# Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))
# Ident("__frame_pointer")
# 01c6a Copy32 [Register(0x0c), Register(0xc8)]
#       te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/div.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
#       AddressOf(Ident("x64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))
#       Ident("__frame_pointer")
21 0c c8 

# tb608 <- te825 U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
# AddressOf(Ident("x64"))
# 01c6d Copy32 [Register(0xc8), Register(0xa4)]
#       tb608 <- te825 U32 Some('/lutcomp/programs/lib/div.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
#       AddressOf(Ident("x64"))
21 c8 a4 

# None <= call mul32_64(tfd7e,tace9,tb608,) Some('/lutcomp/programs/lib/div.j':(78,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
# 01c70 Copy32 [Register(0xa0), Register(0x00)]
#       Arg0[a]=tfd7e None <= call mul32_64(tfd7e,tace9,tb608,) Some('/lutcomp/programs/lib/div.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
21 a0 00 

# 01c73 Copy32 [Register(0x98), Register(0x04)]
#       Arg1[b]=tace9 None <= call mul32_64(tfd7e,tace9,tb608,) Some('/lutcomp/programs/lib/div.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
21 98 04 

# 01c76 Copy32 [Register(0xa4), Register(0x08)]
#       Arg2[c]=tb608 None <= call mul32_64(tfd7e,tace9,tb608,) Some('/lutcomp/programs/lib/div.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
21 a4 08 

# Registers used by this function: {148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203}
# Registers used by callee tree: {52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115}
# Registers to save: []
# 01c79 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:mul32_64))
32 0c fc ff ff ff 

# 01c7f StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:mul32_64))
25 0c 89 1c 00 00 

# 01c85 JmpImm [Label24(:mul32_64)]
#       PseudoCall(Label24(:mul32_64))
70 eb 22 00 

# 01c89 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:mul32_64))
32 0c 04 00 00 00 

# te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
# LocalFieldDeref("x64", "hi")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
# Ident("__frame_pointer")
# 01c8f Copy32 [Register(0x0c), Register(0xc8)]
#       te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
#       LocalFieldDeref("x64", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
#       Ident("__frame_pointer")
21 0c c8 

# t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
# LocalFieldDeref("x64", "hi")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
# 01c92 Copy32 [Register(0xc8), Register(0xa4)]
#       t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
#       LocalFieldDeref("x64", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
21 c8 a4 

# 01c95 AddImm32IgnoreCarry [Register(0xa4), Constant32(0x00000004=4)]
#       t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
#       LocalFieldDeref("x64", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
32 a4 04 00 00 00 

# tb973 <- mem[t3f2a] U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
# LocalFieldDeref("x64", "hi")
# 01c9b Load32 [Register(0xa4), Register(0xa8)]
#       tb973 <- mem[t3f2a] U32 Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
#       LocalFieldDeref("x64", "hi")
22 a4 a8 

# t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 01c9e LoadImm32 [Register(0xa4), Constant32(0x00000000=0)]
#       t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 a4 00 00 00 00 

# if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11' Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
# 01ca4 Cmp8 [Register(0xab), Register(0xa7)]
#       if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
15 ab a7 

# 01ca7 Cmp8IfZero [Register(0xaa), Register(0xa6)]
#       if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
16 aa a6 

# 01caa Cmp8IfZero [Register(0xa9), Register(0xa5)]
#       if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
16 a9 a5 

# 01cad Cmp8IfZero [Register(0xa8), Register(0xa4)]
#       if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
16 a8 a4 

# 01cb0 JcImm [Label24(div32_if_else_0_11)]
#       if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
71 c5 1c 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11' Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(0n0/0x00000000u32) }\n", opcode: JmpImm, args: [Label24(div32_if_true_0_10)], resolved: None }
# :div32_if_true_0_10 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# div32_if_true_0_10
# tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
# Ident("mid")
# optimized away noop copy Instruction { source: "tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }\nArithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8))\nIdent(\"mid\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# hi <- tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
# 01cb4 Copy32 [Register(0xa0), Register(0x9c)]
#       hi <- tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
21 a0 9c 

# 01cb7 AddImm32IgnoreCarry [Register(0x9c), Constant32(0xffffffff=4294967295)]
#       hi <- tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
32 9c ff ff ff ff 

# goto div32_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(78,5))
# Continue
# 01cbd JmpImm [Label24(div32_while_predicate_6)]
#       goto div32_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(78,5))
#       Continue
70 0c 1b 00 

# goto div32_if_end_9 Some('/lutcomp/programs/lib/div.j':(78,5))
# 01cc1 JmpImm [Label24(div32_if_end_9)]
#       goto div32_if_end_9 Some('/lutcomp/programs/lib/div.j':(78,5))
70 c5 1c 00 

# :div32_if_else_0_11 Some('/lutcomp/programs/lib/div.j':(78,5))
# div32_if_else_0_11
# :div32_if_end_9 Some('/lutcomp/programs/lib/div.j':(78,5))
# div32_if_end_9
# te546 <- __frame_pointer U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }
# LocalFieldDeref("x64", "lo")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Ident("__frame_pointer") }
# Ident("__frame_pointer")
# 01cc5 Copy32 [Register(0x0c), Register(0xc8)]
#       te546 <- __frame_pointer U32 Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }
#       LocalFieldDeref("x64", "lo")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Ident("__frame_pointer") }
#       Ident("__frame_pointer")
21 0c c8 

# x <- mem[te546] U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }
# LocalFieldDeref("x64", "lo")
# 01cc8 Load32 [Register(0xc8), Register(0xa4)]
#       x <- mem[te546] U32 Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }
#       LocalFieldDeref("x64", "lo")
22 c8 a4 

# tad57 <- x U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
# Ident("x")
# optimized away noop copy Instruction { source: "tad57 <- x U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_else_0_14' Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
# 01ccb Cmp8 [Register(0xa7), Register(0x97)]
#       if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_else_0_14' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
15 a7 97 

# 01cce Cmp8IfZero [Register(0xa6), Register(0x96)]
#       if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_else_0_14' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
16 a6 96 

# 01cd1 Cmp8IfZero [Register(0xa5), Register(0x95)]
#       if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_else_0_14' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
16 a5 95 

# 01cd4 Cmp8IfZero [Register(0xa4), Register(0x94)]
#       if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_else_0_14' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
16 a4 94 

# 01cd7 JcImm [Label24(div32_if_else_0_14)]
#       if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_else_0_14' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
71 ec 1c 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_else_0_14' Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }\n", opcode: JmpImm, args: [Label24(div32_if_true_0_13)], resolved: None }
# :div32_if_true_0_13 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# div32_if_true_0_13
# tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
# Ident("mid")
# optimized away noop copy Instruction { source: "tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }\nArithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8))\nIdent(\"mid\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# hi <- tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
# 01cdb Copy32 [Register(0xa0), Register(0x9c)]
#       hi <- tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
21 a0 9c 

# 01cde AddImm32IgnoreCarry [Register(0x9c), Constant32(0xffffffff=4294967295)]
#       hi <- tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
32 9c ff ff ff ff 

# goto div32_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(78,5))
# Continue
# 01ce4 JmpImm [Label24(div32_while_predicate_6)]
#       goto div32_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(78,5))
#       Continue
70 0c 1b 00 

# goto div32_if_end_12 Some('/lutcomp/programs/lib/div.j':(78,5))
# 01ce8 JmpImm [Label24(div32_if_end_12)]
#       goto div32_if_end_12 Some('/lutcomp/programs/lib/div.j':(78,5))
70 ec 1c 00 

# :div32_if_else_0_14 Some('/lutcomp/programs/lib/div.j':(78,5))
# div32_if_else_0_14
# :div32_if_end_12 Some('/lutcomp/programs/lib/div.j':(78,5))
# div32_if_end_12
# tad57 <- x U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
# Ident("x")
# optimized away noop copy Instruction { source: "tad57 <- x U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
# 01cec Cmp8 [Register(0xa7), Register(0x97)]
#       if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
15 a7 97 

# 01cef Cmp8IfZero [Register(0xa6), Register(0x96)]
#       if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
16 a6 96 

# 01cf2 Cmp8IfZero [Register(0xa5), Register(0x95)]
#       if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
16 a5 95 

# 01cf5 Cmp8IfZero [Register(0xa4), Register(0x94)]
#       if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
16 a4 94 

# 01cf8 JzImm [Label24(div32_if_true_0_16)]
#       if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
72 00 1d 00 

# 01cfc JmpImm [Label24(div32_if_else_0_17)]
#       if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
70 15 1d 00 

# :div32_if_true_0_16 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# div32_if_true_0_16
# tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Return { value: Some(Ident("mid")) }
# Ident("mid")
# optimized away noop copy Instruction { source: "tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nReturn { value: Some(Ident(\"mid\")) }\nIdent(\"mid\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(78,5))
# Return { value: Some(Ident("mid")) }
# 01d00 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Return { value: Some(Ident("mid")) }
32 0c 08 00 00 00 

# return Some(tfd7e) Some('/lutcomp/programs/lib/div.j':(78,5))
# Return { value: Some(Ident("mid")) }
# 01d06 Copy32 [Register(0xa0), Register(0x00)]
#       return Some(tfd7e) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Return { value: Some(Ident("mid")) }
21 a0 00 

# 01d09 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       Dealloc 8 bytes from stack
32 0c 08 00 00 00 

# 01d0f JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto div32_if_end_15 Some('/lutcomp/programs/lib/div.j':(78,5))
# 01d11 JmpImm [Label24(div32_if_end_15)]
#       goto div32_if_end_15 Some('/lutcomp/programs/lib/div.j':(78,5))
70 15 1d 00 

# :div32_if_else_0_17 Some('/lutcomp/programs/lib/div.j':(78,5))
# div32_if_else_0_17
# :div32_if_end_15 Some('/lutcomp/programs/lib/div.j':(78,5))
# div32_if_end_15
# t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
# Arithmetic(Subtract, Ident("a"), Ident("x"))
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"r\"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }\nArithmetic(Subtract, Ident(\"a\"), Ident(\"x\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# tad57 <- x U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
# Arithmetic(Subtract, Ident("a"), Ident("x"))
# Ident("x")
# optimized away noop copy Instruction { source: "tad57 <- x U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"r\"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }\nArithmetic(Subtract, Ident(\"a\"), Ident(\"x\"))\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
# Arithmetic(Subtract, Ident("a"), Ident("x"))
# 01d15 Copy32 [Register(0xa4), Register(0x00)]
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
21 a4 00 

# 01d18 Invert8 [Register(0x00)]
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 00 

# 01d1a Invert8 [Register(0x01)]
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 01 

# 01d1c Invert8 [Register(0x02)]
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 02 

# 01d1e Invert8 [Register(0x03)]
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 03 

# 01d20 AddImm32IgnoreCarry [Register(0x00), Constant32(0x00000001=1)]
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
32 00 01 00 00 00 

# 01d26 ClearCarry []
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
03 

# 01d27 AddCarry32_1 [Register(0x94), Register(0x00), Register(0xa4)]
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
30 94 00 a4 

# 01d2b AddCarry32_2 []
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
31 

# taee0 <- r U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
# Ident("r")
# optimized away noop copy Instruction { source: "taee0 <- r U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }\nIdent(\"r\")\n", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# tace9 <- b U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
# 01d2c Cmp8 [Register(0x9b), Register(0xa7)]
#       if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
15 9b a7 

# 01d2f Cmp8IfZero [Register(0x9a), Register(0xa6)]
#       if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
16 9a a6 

# 01d32 Cmp8IfZero [Register(0x99), Register(0xa5)]
#       if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
16 99 a5 

# 01d35 Cmp8IfZero [Register(0x98), Register(0xa4)]
#       if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
16 98 a4 

# 01d38 JcImm [Label24(div32_if_else_0_20)]
#       if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
71 51 1d 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }\n", opcode: JmpImm, args: [Label24(div32_if_true_0_19)], resolved: None }
# :div32_if_true_0_19 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# div32_if_true_0_19
# tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Return { value: Some(Ident("mid")) }
# Ident("mid")
# optimized away noop copy Instruction { source: "tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nReturn { value: Some(Ident(\"mid\")) }\nIdent(\"mid\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(78,5))
# Return { value: Some(Ident("mid")) }
# 01d3c AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Return { value: Some(Ident("mid")) }
32 0c 08 00 00 00 

# return Some(tfd7e) Some('/lutcomp/programs/lib/div.j':(78,5))
# Return { value: Some(Ident("mid")) }
# 01d42 Copy32 [Register(0xa0), Register(0x00)]
#       return Some(tfd7e) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Return { value: Some(Ident("mid")) }
21 a0 00 

# 01d45 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       Dealloc 8 bytes from stack
32 0c 08 00 00 00 

# 01d4b JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto div32_if_end_18 Some('/lutcomp/programs/lib/div.j':(78,5))
# 01d4d JmpImm [Label24(div32_if_end_18)]
#       goto div32_if_end_18 Some('/lutcomp/programs/lib/div.j':(78,5))
70 51 1d 00 

# :div32_if_else_0_20 Some('/lutcomp/programs/lib/div.j':(78,5))
# div32_if_else_0_20
# :div32_if_end_18 Some('/lutcomp/programs/lib/div.j':(78,5))
# div32_if_end_18
# tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8))
# Ident("mid")
# optimized away noop copy Instruction { source: "tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(0n1/0x01u8)) }\nArithmetic(Add, Ident(\"mid\"), Number(0n1/0x01u8))\nIdent(\"mid\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# lo <- tfd7e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8))
# 01d51 Copy32 [Register(0xa0), Register(0xac)]
#       lo <- tfd7e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8))
21 a0 ac 

# 01d54 AddImm32IgnoreCarry [Register(0xac), Constant32(0x00000001=1)]
#       lo <- tfd7e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8))
32 ac 01 00 00 00 

# goto div32_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(78,5))
# 01d5a JmpImm [Label24(div32_while_predicate_6)]
#       goto div32_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(78,5))
70 0c 1b 00 

# :div32_while_end_8 Some('/lutcomp/programs/lib/div.j':(78,5))
# div32_while_end_8
# t1506 <- lo U32 Some('/lutcomp/programs/lib/div.j':(108,5))
# Return { value: Some(Ident("lo")) }
# Ident("lo")
# 01d5e Copy32 [Register(0xac), Register(0xa0)]
#       t1506 <- lo U32 Some('/lutcomp/programs/lib/div.j':(108,5))
#       Return { value: Some(Ident("lo")) }
#       Ident("lo")
21 ac a0 

# __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(108,5))
# Return { value: Some(Ident("lo")) }
# 01d61 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(108,5))
#       Return { value: Some(Ident("lo")) }
32 0c 08 00 00 00 

# return Some(t1506) Some('/lutcomp/programs/lib/div.j':(108,5))
# Return { value: Some(Ident("lo")) }
# 01d67 Copy32 [Register(0xa0), Register(0x00)]
#       return Some(t1506) Some('/lutcomp/programs/lib/div.j':(108,5))
#       Return { value: Some(Ident("lo")) }
21 a0 00 

# 01d6a AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       Dealloc 8 bytes from stack
32 0c 08 00 00 00 

# 01d70 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_div32 None
# function_end_div32
# Unreachable None
# 01d72 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :lcd_draw_char
# Ret None
# Arg0=i
# Arg1=ch
# Var ch (Arg1 ch Number(U8)) Reg(U8) Some([206])
# Var i (Arg0 i Number(U8)) Reg(U8) Some([207])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_col (Local col Number(U8) Reg(U8)) Reg(U8) Some([207])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_row (Local row Number(U8) Reg(U8)) Reg(U8) Some([208])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_t1acd (t1acd Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) Reg(U8) Some([207])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_t2f80 (t2f80 Index("lcd_row_start", Ident("row"))) Reg(U8) Some([208])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd (t50bd Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) Reg(U32) Some([212, 213, 214, 215])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf (t9eaf Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }) Reg(U32) Some([212, 213, 214, 215])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 (tb1b6 Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }) Reg(U32) Some([216, 217, 218, 219])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_td007 (td007 Ident("row")) Reg(U8) Some([208])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 (td0f3 Ident("i")) Reg(U8) Some([207])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_tf14 (tf14 Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) Reg(U8) Some([220])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_tfee9 (tfee9 Ident("col")) Reg(U8) Some([207])
# Var pos (Local pos Number(U8) Reg(U8)) Reg(U8) Some([207])
# Var t136d (t136d Ident("pos")) Reg(U8) Some([207])
# Var t1730 (t1730 Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8))) Reg(U8) Some([208])
# Var t2176 (t2176 Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))) Reg(U8) Some([208])
# Var t3e8f (t3e8f Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))) Reg(U8) Some([207])
# Var t4028 (t4028 Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8))) Reg(U8) Some([207])
# Var t6611 (t6611 Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8))) Reg(U8) Some([206])
# Var t791e (t791e Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))) Reg(U8) Some([207])
# Var t9498 (t9498 Number(0n2/0x00000002u32)) Reg(U32) Some([224, 225, 226, 227]) Number(0n2/0x00000002u32)
# Var tb5dc (tb5dc Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))) Reg(U8) Some([206])
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([206])
# 01d77 Copy8 [Register(0x00), Register(0xcf)]
#       Save function parameter 'i' registers [0] to locals [207].
0b 00 cf 

# 01d7a Copy8 [Register(0x04), Register(0xce)]
#       Save function parameter 'ch' registers [4] to locals [206].
0b 04 ce 

# inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(9,5))
# Assign { target: Ident("row"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("i"), Number(0n20/0x14u8)) }
# Arithmetic(Divide, Ident("i"), Number(0n20/0x14u8))
# Ident("i")
# optimized away noop copy Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(9,5))\nAssign { target: Ident(\"row\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"i\"), Number(0n20/0x14u8)) }\nArithmetic(Divide, Ident(\"i\"), Number(0n20/0x14u8))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0xcf), Register(0xcf)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_3_row <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Divide Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(9,5))
# Assign { target: Ident("row"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("i"), Number(0n20/0x14u8)) }
# Arithmetic(Divide, Ident("i"), Number(0n20/0x14u8))
# 01d7d LoadImm8 [Register(0x00), Constant8(0x14=20)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_row <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Divide Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(9,5))
#       Assign { target: Ident("row"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("i"), Number(0n20/0x14u8)) }
#       Arithmetic(Divide, Ident("i"), Number(0n20/0x14u8))
04 00 14 

# 01d80 Divide8 [Register(0xcf), Register(0x00), Register(0xd0)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_row <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Divide Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(9,5))
#       Assign { target: Ident("row"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("i"), Number(0n20/0x14u8)) }
#       Arithmetic(Divide, Ident("i"), Number(0n20/0x14u8))
17 cf 00 d0 

# inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(10,5))
# Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
# Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
# Ident("i")
# optimized away noop copy Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(10,5))\nAssign { target: Ident(\"col\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(0n20/0x14u8))) }\nArithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(0n20/0x14u8)))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0xcf), Register(0xcf)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_3_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_3_row U8 Some('/lutcomp/programs/lib/lcd.j':(10,5))
# Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
# Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
# Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))
# Ident("row")
# optimized away noop copy Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_3_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_3_row U8 Some('/lutcomp/programs/lib/lcd.j':(10,5))\nAssign { target: Ident(\"col\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(0n20/0x14u8))) }\nArithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(0n20/0x14u8)))\nArithmetic(Multiply, Ident(\"row\"), Number(0n20/0x14u8))\nIdent(\"row\")\n", opcode: Copy8, args: [Register(0xd0), Register(0xd0)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_3_tf14 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 Multiply Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(10,5))
# Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
# Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
# Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))
# 01d84 LoadImm8 [Register(0x00), Constant8(0x14=20)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_tf14 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 Multiply Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(10,5))
#       Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
#       Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
#       Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))
04 00 14 

# 01d87 Mul8_8 [Register(0xd0), Register(0x00), Register(0xdc)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_tf14 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 Multiply Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(10,5))
#       Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
#       Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
#       Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))
10 d0 00 dc 

# inline_lcd_draw_char_lcd_logical_to_physical_3_col <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Subtract Var(inline_lcd_draw_char_lcd_logical_to_physical_3_tf14) Some('/lutcomp/programs/lib/lcd.j':(10,5))
# Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
# Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
# 01d8b Copy8 [Register(0xdc), Register(0x00)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_col <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Subtract Var(inline_lcd_draw_char_lcd_logical_to_physical_3_tf14) Some('/lutcomp/programs/lib/lcd.j':(10,5))
#       Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
#       Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
0b dc 00 

# 01d8e Negate8 [Register(0x00)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_col <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Subtract Var(inline_lcd_draw_char_lcd_logical_to_physical_3_tf14) Some('/lutcomp/programs/lib/lcd.j':(10,5))
#       Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
#       Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
02 00 

# 01d90 Add8NoCarryIn [Register(0xcf), Register(0x00), Register(0xcf)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_col <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Subtract Var(inline_lcd_draw_char_lcd_logical_to_physical_3_tf14) Some('/lutcomp/programs/lib/lcd.j':(10,5))
#       Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
#       Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
14 cf 00 cf 

# inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 <- const &lcd_row_start Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Index("lcd_row_start", Ident("row"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }
# Ident("lcd_row_start")
# 01d94 LoadImm32 [Register(0xd8), Label32(:lcd_row_start)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 <- const &lcd_row_start Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }
#       Ident("lcd_row_start")
20 d8 23 04 00 00 

# inline_lcd_draw_char_lcd_logical_to_physical_3_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_3_row U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Index("lcd_row_start", Ident("row"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }
# Ident("row")
# optimized away noop copy Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_3_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_3_row U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))\nReturn { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }\nArithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))\nIndex(\"lcd_row_start\", Ident(\"row\"))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"row\") }) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"row\") })\nCast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"row\") }\nIdent(\"row\")\n", opcode: Copy8, args: [Register(0xd0), Register(0xd0)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd U32 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Index("lcd_row_start", Ident("row"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }
# 01d9a LoadImm32 [Register(0xd4), Constant32(0x00000000=0)]
#       Zero-pad for inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd U32 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }
20 d4 00 00 00 00 

# 01da0 Copy8 [Register(0xd0), Register(0xd4)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd U32 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }
0b d0 d4 

# inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf <- inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd) Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Index("lcd_row_start", Ident("row"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
# 01da3 ClearCarry []
#       inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf <- inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd) Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
03 

# 01da4 AddCarry32_1 [Register(0xd8), Register(0xd4), Register(0xd4)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf <- inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd) Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
30 d8 d4 d4 

# 01da8 AddCarry32_2 []
#       inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf <- inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd) Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
31 

# inline_lcd_draw_char_lcd_logical_to_physical_3_t2f80 <- mem[inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf] U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Index("lcd_row_start", Ident("row"))
# 01da9 Load8 [Register(0xd4), Register(0xd0)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_t2f80 <- mem[inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf] U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
05 d4 d0 

# inline_lcd_draw_char_lcd_logical_to_physical_3_tfee9 <- inline_lcd_draw_char_lcd_logical_to_physical_3_col U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Ident("col")
# optimized away noop copy Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_3_tfee9 <- inline_lcd_draw_char_lcd_logical_to_physical_3_col U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))\nReturn { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }\nArithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))\nIdent(\"col\")\n", opcode: Copy8, args: [Register(0xcf), Register(0xcf)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_3_t1acd <- inline_lcd_draw_char_lcd_logical_to_physical_3_t2f80 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_tfee9) Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# 01dac Add8NoCarryIn [Register(0xd0), Register(0xcf), Register(0xcf)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_t1acd <- inline_lcd_draw_char_lcd_logical_to_physical_3_t2f80 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_tfee9) Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
14 d0 cf cf 

# pos <- inline_lcd_draw_char_lcd_logical_to_physical_3_t1acd U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# optimized away noop copy Instruction { source: "pos <- inline_lcd_draw_char_lcd_logical_to_physical_3_t1acd U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))\nReturn { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }\n", opcode: Copy8, args: [Register(0xcf), Register(0xcf)], resolved: None }
# goto inline_lcd_draw_char_lcd_logical_to_physical_3_function_end_lcd_logical_to_physical Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_lcd_draw_char_lcd_logical_to_physical_3_function_end_lcd_logical_to_physical Some('/lutcomp/programs/lib/lcd.j':(11,5))\nReturn { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }\n", opcode: JmpImm, args: [Label24(inline_lcd_draw_char_lcd_logical_to_physical_3_function_end_lcd_logical_to_physical)], resolved: None }
# :inline_lcd_draw_char_lcd_logical_to_physical_3_function_end_lcd_logical_to_physical None
# inline_lcd_draw_char_lcd_logical_to_physical_3_function_end_lcd_logical_to_physical
# t136d <- pos U8 Some('/lutcomp/programs/lib/lcd.j':(17,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] })
# Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))
# Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8))
# Ident("pos")
# optimized away noop copy Instruction { source: "t136d <- pos U8 Some('/lutcomp/programs/lib/lcd.j':(17,5))\nVoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(0n4/0x04u8)))] }) }\nCall(Call { function: \"io_write1\", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(0n4/0x04u8)))] })\nArithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(0n4/0x04u8)))\nArithmetic(ShiftRight, Ident(\"pos\"), Number(0n4/0x04u8))\nIdent(\"pos\")\n", opcode: Copy8, args: [Register(0xcf), Register(0xcf)], resolved: None }
# t1730 <- t136d ShiftRight Number(0n4/0x04u8) Some('/lutcomp/programs/lib/lcd.j':(17,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] })
# Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))
# Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8))
# 01db0 LoadImm8 [Register(0x00), Constant8(0x04=4)]
#       t1730 <- t136d ShiftRight Number(0n4/0x04u8) Some('/lutcomp/programs/lib/lcd.j':(17,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] })
#       Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))
#       Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8))
04 00 04 

# 01db3 Shift8 [Constant8(0x05=5), Register(0x00), Register(0xcf), Register(0xd0)]
#       t1730 <- t136d ShiftRight Number(0n4/0x04u8) Some('/lutcomp/programs/lib/lcd.j':(17,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] })
#       Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))
#       Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8))
1e 05 00 cf d0 

# t2176 <- t1730 BitwiseOr Number(0n8/0x08u8) Some('/lutcomp/programs/lib/lcd.j':(17,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] })
# Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))
# 01db8 OrImm8 [Register(0xd0), Constant8(0x08=8)]
#       t2176 <- t1730 BitwiseOr Number(0n8/0x08u8) Some('/lutcomp/programs/lib/lcd.j':(17,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] })
#       Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))
19 d0 08 

# None <= call io_write1(t2176,) Some('/lutcomp/programs/lib/lcd.j':(17,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] })
# 01dbb Out1 [Register(0xd0)]
#       IoWrite1
69 d0 

# t136d <- pos U8 Some('/lutcomp/programs/lib/lcd.j':(18,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))] })
# Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))
# Ident("pos")
# optimized away noop copy Instruction { source: "t136d <- pos U8 Some('/lutcomp/programs/lib/lcd.j':(18,5))\nVoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(BitwiseAnd, Ident(\"pos\"), Number(0n15/0x0fu8))] }) }\nCall(Call { function: \"io_write1\", parameters: [Arithmetic(BitwiseAnd, Ident(\"pos\"), Number(0n15/0x0fu8))] })\nArithmetic(BitwiseAnd, Ident(\"pos\"), Number(0n15/0x0fu8))\nIdent(\"pos\")\n", opcode: Copy8, args: [Register(0xcf), Register(0xcf)], resolved: None }
# t791e <- t136d BitwiseAnd Number(0n15/0x0fu8) Some('/lutcomp/programs/lib/lcd.j':(18,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))] })
# Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))
# 01dbd AndImm8 [Register(0xcf), Constant8(0x0f=15)]
#       t791e <- t136d BitwiseAnd Number(0n15/0x0fu8) Some('/lutcomp/programs/lib/lcd.j':(18,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))] })
#       Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))
18 cf 0f 

# None <= call io_write1(t791e,) Some('/lutcomp/programs/lib/lcd.j':(18,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))] })
# 01dc0 Out1 [Register(0xcf)]
#       IoWrite1
69 cf 

# t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(19,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# Number(0n2/0x00000002u32)
# 01dc2 LoadImm32 [Register(0xe0), Constant32(0x00000002=2)]
#       t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(19,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
#       Number(0n2/0x00000002u32)
20 e0 02 00 00 00 

# None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(19,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# 01dc8 Copy32 [Register(0xe0), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(19,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
21 e0 00 

# Registers used by this function: {206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227}
# Registers used by callee tree: {140, 141, 142, 143, 144, 145, 146, 147}
# Registers to save: []
# 01dcb AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 01dd1 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c db 1d 00 00 

# 01dd7 JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 d9 17 00 

# 01ddb AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(21,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] })
# Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))
# Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8))
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(21,5))\nVoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident(\"ch\"), Number(0n4/0x04u8)))] }) }\nCall(Call { function: \"io_write1\", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident(\"ch\"), Number(0n4/0x04u8)))] })\nArithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident(\"ch\"), Number(0n4/0x04u8)))\nArithmetic(ShiftRight, Ident(\"ch\"), Number(0n4/0x04u8))\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0xce), Register(0xce)], resolved: None }
# t4028 <- tdcd9 ShiftRight Number(0n4/0x04u8) Some('/lutcomp/programs/lib/lcd.j':(21,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] })
# Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))
# Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8))
# 01de1 LoadImm8 [Register(0x00), Constant8(0x04=4)]
#       t4028 <- tdcd9 ShiftRight Number(0n4/0x04u8) Some('/lutcomp/programs/lib/lcd.j':(21,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] })
#       Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))
#       Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8))
04 00 04 

# 01de4 Shift8 [Constant8(0x05=5), Register(0x00), Register(0xce), Register(0xcf)]
#       t4028 <- tdcd9 ShiftRight Number(0n4/0x04u8) Some('/lutcomp/programs/lib/lcd.j':(21,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] })
#       Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))
#       Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8))
1e 05 00 ce cf 

# t3e8f <- t4028 BitwiseOr Number(0n128/0x80u8) Some('/lutcomp/programs/lib/lcd.j':(21,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] })
# Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))
# 01de9 OrImm8 [Register(0xcf), Constant8(0x80=128)]
#       t3e8f <- t4028 BitwiseOr Number(0n128/0x80u8) Some('/lutcomp/programs/lib/lcd.j':(21,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] })
#       Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))
19 cf 80 

# None <= call io_write1(t3e8f,) Some('/lutcomp/programs/lib/lcd.j':(21,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] })
# 01dec Out1 [Register(0xcf)]
#       IoWrite1
69 cf 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(22,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] })
# Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))
# Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8))
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(22,5))\nVoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident(\"ch\"), Number(0n15/0x0fu8)))] }) }\nCall(Call { function: \"io_write1\", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident(\"ch\"), Number(0n15/0x0fu8)))] })\nArithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident(\"ch\"), Number(0n15/0x0fu8)))\nArithmetic(BitwiseAnd, Ident(\"ch\"), Number(0n15/0x0fu8))\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0xce), Register(0xce)], resolved: None }
# t6611 <- tdcd9 BitwiseAnd Number(0n15/0x0fu8) Some('/lutcomp/programs/lib/lcd.j':(22,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] })
# Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))
# Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8))
# 01dee AndImm8 [Register(0xce), Constant8(0x0f=15)]
#       t6611 <- tdcd9 BitwiseAnd Number(0n15/0x0fu8) Some('/lutcomp/programs/lib/lcd.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] })
#       Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))
#       Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8))
18 ce 0f 

# tb5dc <- t6611 BitwiseOr Number(0n128/0x80u8) Some('/lutcomp/programs/lib/lcd.j':(22,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] })
# Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))
# 01df1 OrImm8 [Register(0xce), Constant8(0x80=128)]
#       tb5dc <- t6611 BitwiseOr Number(0n128/0x80u8) Some('/lutcomp/programs/lib/lcd.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] })
#       Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))
19 ce 80 

# None <= call io_write1(tb5dc,) Some('/lutcomp/programs/lib/lcd.j':(22,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] })
# 01df4 Out1 [Register(0xce)]
#       IoWrite1
69 ce 

# t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(23,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# Number(0n2/0x00000002u32)
# 01df6 LoadImm32 [Register(0xe0), Constant32(0x00000002=2)]
#       t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(23,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
#       Number(0n2/0x00000002u32)
20 e0 02 00 00 00 

# None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(23,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# 01dfc Copy32 [Register(0xe0), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(23,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
21 e0 00 

# Registers used by this function: {206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227}
# Registers used by callee tree: {140, 141, 142, 143, 144, 145, 146, 147}
# Registers to save: []
# 01dff AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 01e05 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c 0f 1e 00 00 

# 01e0b JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 d9 17 00 

# 01e0f AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# return None None
# Return { value: None }
# 01e15 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_lcd_draw_char None
# function_end_lcd_draw_char
# Unreachable None
# 01e17 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :lcd_init
# Ret None
# Var i (Local i Number(U8) Reg(U8)) Reg(U8) Some([228])
# Var t0 (static "lcd_current" addr) Reg(U32) Some([232, 233, 234, 235]) Number(0n987145/0x000f1009u32)
# Var t385d (t385d Number(0n1/0x00000001u32)) Reg(U32) Some([232, 233, 234, 235]) Number(0n1/0x00000001u32)
# Var t3d69 (t3d69 Number(0n3/0x03u8)) Reg(U8) Some([228]) Number(0n3/0x03u8)
# Var t477 (t477 Number(0n8/0x08u8)) Reg(U8) Some([228]) Number(0n8/0x08u8)
# Var t9498 (t9498 Number(0n2/0x00000002u32)) Reg(U32) Some([232, 233, 234, 235]) Number(0n2/0x00000002u32)
# Var t9725 (t9725 Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) Reg(U32) Some([236, 237, 238, 239])
# Var t9e70 (t9e70 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }) Reg(U32) Some([236, 237, 238, 239])
# Var t9f48 (t9f48 Number(0n2/0x02u8)) Reg(U8) Some([228]) Number(0n2/0x02u8)
# Var ta11a (ta11a Number(0n1/0x01u8)) Reg(U8) Some([228]) Number(0n1/0x01u8)
# Var ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([240]) Number(0n0/0x00u8)
# Var td0f3 (td0f3 Ident("i")) Reg(U8) Some([228])
# Var td749 (td749 Number(0n80/0x50u8)) Reg(U8) Some([240]) Number(0n80/0x50u8)
# Var tdf3b (tdf3b Number(0n32/0x20u8)) Reg(U8) Some([241]) Number(0n32/0x20u8)
# Var tec13 (tec13 Number(0n12/0x0cu8)) Reg(U8) Some([228]) Number(0n12/0x0cu8)
# t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(69,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Number(0n0/0x00u8) }
# 01e1c LoadImm32 [Register(0xe8), Constant32(0x000f1009=987145)]
#       t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(69,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Number(0n0/0x00u8) }
20 e8 09 10 0f 00 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(69,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 01e22 LoadImm8 [Register(0xf0), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(69,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 f0 00 

# mem[t0] <- ta97f U8 Some('/lutcomp/programs/lib/lcd.j':(69,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Number(0n0/0x00u8) }
# 01e25 Store8 [Register(0xf0), Register(0xe8)]
#       mem[t0] <- ta97f U8 Some('/lutcomp/programs/lib/lcd.j':(69,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Number(0n0/0x00u8) }
06 f0 e8 

# i <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(72,5))
# Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 01e28 LoadImm8 [Register(0xe4), Constant8(0x00=0)]
#       i <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(72,5))
#       Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 e4 00 

# :lcd_init_while_predicate_0 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# lcd_init_while_predicate_0
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(0n80/0x50u8) }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0xe4), Register(0xe4)], resolved: None }
# td749 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/lcd.j':(73,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
# Number(0n80/0x50u8)
# 01e2b LoadImm8 [Register(0xf0), Constant8(0x50=80)]
#       td749 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
#       Number(0n80/0x50u8)
04 f0 50 

# if td0f3 < td749 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(73,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
# 01e2e Cmp8 [Register(0xf0), Register(0xe4)]
#       if td0f3 < td749 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
15 f0 e4 

# 01e31 JcImm [Label24(lcd_init_while_end_2)]
#       if td0f3 < td749 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
71 55 1e 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if td0f3 < td749 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(73,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(0n80/0x50u8) }\n", opcode: JmpImm, args: [Label24(lcd_init_while_body_1)], resolved: None }
# :lcd_init_while_body_1 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# lcd_init_while_body_1
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))\nAssign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(0n32/0x20u8) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }) }\nArithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") })\nCast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0xe4), Register(0xe4)], resolved: None }
# t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# 01e35 LoadImm32 [Register(0xec), Constant32(0x00000000=0)]
#       Zero-pad for t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
20 ec 00 00 00 00 

# 01e3b Copy8 [Register(0xe4), Register(0xec)]
#       t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
0b e4 ec 

# t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(73,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# 01e3e AddImm32IgnoreCarry [Register(0xec), Constant32(0x000f100c=987148)]
#       t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
32 ec 0c 10 0f 00 

# tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(73,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# Number(0n32/0x20u8)
# 01e44 LoadImm8 [Register(0xf1), Constant8(0x20=32)]
#       tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
#       Number(0n32/0x20u8)
04 f1 20 

# mem[t9e70] <- tdf3b U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# 01e47 Store8 [Register(0xf1), Register(0xec)]
#       mem[t9e70] <- tdf3b U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
06 f1 ec 

# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))\nAssign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }\nArithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0xe4), Register(0xe4)], resolved: None }
# i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(73,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
# 01e4a LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
04 00 01 

# 01e4d Add8NoCarryIn [Register(0xe4), Register(0x00), Register(0xe4)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
14 e4 00 e4 

# goto lcd_init_while_predicate_0 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 01e51 JmpImm [Label24(lcd_init_while_predicate_0)]
#       goto lcd_init_while_predicate_0 Some('/lutcomp/programs/lib/lcd.j':(73,5))
70 2b 1e 00 

# :lcd_init_while_end_2 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# lcd_init_while_end_2
# t3d69 <- 0n3/0x03u8  Some('/lutcomp/programs/lib/lcd.j':(78,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] })
# Number(0n3/0x03u8)
# 01e55 LoadImm8 [Register(0xe4), Constant8(0x03=3)]
#       t3d69 <- 0n3/0x03u8  Some('/lutcomp/programs/lib/lcd.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] })
#       Number(0n3/0x03u8)
04 e4 03 

# None <= call io_write1(t3d69,) Some('/lutcomp/programs/lib/lcd.j':(78,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] })
# 01e58 Out1 [Register(0xe4)]
#       IoWrite1
69 e4 

# t385d <- 0n1/0x00000001u32  Some('/lutcomp/programs/lib/lcd.j':(79,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
# Number(0n1/0x00000001u32)
# 01e5a LoadImm32 [Register(0xe8), Constant32(0x00000001=1)]
#       t385d <- 0n1/0x00000001u32  Some('/lutcomp/programs/lib/lcd.j':(79,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
#       Number(0n1/0x00000001u32)
20 e8 01 00 00 00 

# None <= call delay(t385d,) Some('/lutcomp/programs/lib/lcd.j':(79,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
# 01e60 Copy32 [Register(0xe8), Register(0x00)]
#       Arg0[x]=t385d None <= call delay(t385d,) Some('/lutcomp/programs/lib/lcd.j':(79,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
21 e8 00 

# Registers used by this function: {228, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241}
# Registers used by callee tree: {140, 141, 142, 143, 144, 145, 146, 147}
# Registers to save: []
# 01e63 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 01e69 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c 73 1e 00 00 

# 01e6f JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 d9 17 00 

# 01e73 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# t3d69 <- 0n3/0x03u8  Some('/lutcomp/programs/lib/lcd.j':(80,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] })
# Number(0n3/0x03u8)
# 01e79 LoadImm8 [Register(0xe4), Constant8(0x03=3)]
#       t3d69 <- 0n3/0x03u8  Some('/lutcomp/programs/lib/lcd.j':(80,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] })
#       Number(0n3/0x03u8)
04 e4 03 

# None <= call io_write1(t3d69,) Some('/lutcomp/programs/lib/lcd.j':(80,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] })
# 01e7c Out1 [Register(0xe4)]
#       IoWrite1
69 e4 

# t385d <- 0n1/0x00000001u32  Some('/lutcomp/programs/lib/lcd.j':(81,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
# Number(0n1/0x00000001u32)
# 01e7e LoadImm32 [Register(0xe8), Constant32(0x00000001=1)]
#       t385d <- 0n1/0x00000001u32  Some('/lutcomp/programs/lib/lcd.j':(81,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
#       Number(0n1/0x00000001u32)
20 e8 01 00 00 00 

# None <= call delay(t385d,) Some('/lutcomp/programs/lib/lcd.j':(81,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
# 01e84 Copy32 [Register(0xe8), Register(0x00)]
#       Arg0[x]=t385d None <= call delay(t385d,) Some('/lutcomp/programs/lib/lcd.j':(81,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
21 e8 00 

# Registers used by this function: {228, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241}
# Registers used by callee tree: {140, 141, 142, 143, 144, 145, 146, 147}
# Registers to save: []
# 01e87 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 01e8d StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c 97 1e 00 00 

# 01e93 JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 d9 17 00 

# 01e97 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# t3d69 <- 0n3/0x03u8  Some('/lutcomp/programs/lib/lcd.j':(82,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] })
# Number(0n3/0x03u8)
# 01e9d LoadImm8 [Register(0xe4), Constant8(0x03=3)]
#       t3d69 <- 0n3/0x03u8  Some('/lutcomp/programs/lib/lcd.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] })
#       Number(0n3/0x03u8)
04 e4 03 

# None <= call io_write1(t3d69,) Some('/lutcomp/programs/lib/lcd.j':(82,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] })
# 01ea0 Out1 [Register(0xe4)]
#       IoWrite1
69 e4 

# t385d <- 0n1/0x00000001u32  Some('/lutcomp/programs/lib/lcd.j':(83,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
# Number(0n1/0x00000001u32)
# 01ea2 LoadImm32 [Register(0xe8), Constant32(0x00000001=1)]
#       t385d <- 0n1/0x00000001u32  Some('/lutcomp/programs/lib/lcd.j':(83,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
#       Number(0n1/0x00000001u32)
20 e8 01 00 00 00 

# None <= call delay(t385d,) Some('/lutcomp/programs/lib/lcd.j':(83,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
# 01ea8 Copy32 [Register(0xe8), Register(0x00)]
#       Arg0[x]=t385d None <= call delay(t385d,) Some('/lutcomp/programs/lib/lcd.j':(83,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
21 e8 00 

# Registers used by this function: {228, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241}
# Registers used by callee tree: {140, 141, 142, 143, 144, 145, 146, 147}
# Registers to save: []
# 01eab AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 01eb1 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c bb 1e 00 00 

# 01eb7 JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 d9 17 00 

# 01ebb AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# t9f48 <- 0n2/0x02u8  Some('/lutcomp/programs/lib/lcd.j':(85,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] })
# Number(0n2/0x02u8)
# 01ec1 LoadImm8 [Register(0xe4), Constant8(0x02=2)]
#       t9f48 <- 0n2/0x02u8  Some('/lutcomp/programs/lib/lcd.j':(85,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] })
#       Number(0n2/0x02u8)
04 e4 02 

# None <= call io_write1(t9f48,) Some('/lutcomp/programs/lib/lcd.j':(85,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] })
# 01ec4 Out1 [Register(0xe4)]
#       IoWrite1
69 e4 

# t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(86,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# Number(0n2/0x00000002u32)
# 01ec6 LoadImm32 [Register(0xe8), Constant32(0x00000002=2)]
#       t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(86,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
#       Number(0n2/0x00000002u32)
20 e8 02 00 00 00 

# None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(86,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# 01ecc Copy32 [Register(0xe8), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(86,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
21 e8 00 

# Registers used by this function: {228, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241}
# Registers used by callee tree: {140, 141, 142, 143, 144, 145, 146, 147}
# Registers to save: []
# 01ecf AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 01ed5 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c df 1e 00 00 

# 01edb JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 d9 17 00 

# 01edf AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# t9f48 <- 0n2/0x02u8  Some('/lutcomp/programs/lib/lcd.j':(88,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] })
# Number(0n2/0x02u8)
# 01ee5 LoadImm8 [Register(0xe4), Constant8(0x02=2)]
#       t9f48 <- 0n2/0x02u8  Some('/lutcomp/programs/lib/lcd.j':(88,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] })
#       Number(0n2/0x02u8)
04 e4 02 

# None <= call io_write1(t9f48,) Some('/lutcomp/programs/lib/lcd.j':(88,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] })
# 01ee8 Out1 [Register(0xe4)]
#       IoWrite1
69 e4 

# t477 <- 0n8/0x08u8  Some('/lutcomp/programs/lib/lcd.j':(89,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n8/0x08u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n8/0x08u8)] })
# Number(0n8/0x08u8)
# 01eea LoadImm8 [Register(0xe4), Constant8(0x08=8)]
#       t477 <- 0n8/0x08u8  Some('/lutcomp/programs/lib/lcd.j':(89,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n8/0x08u8)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(0n8/0x08u8)] })
#       Number(0n8/0x08u8)
04 e4 08 

# None <= call io_write1(t477,) Some('/lutcomp/programs/lib/lcd.j':(89,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n8/0x08u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n8/0x08u8)] })
# 01eed Out1 [Register(0xe4)]
#       IoWrite1
69 e4 

# t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(90,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# Number(0n2/0x00000002u32)
# 01eef LoadImm32 [Register(0xe8), Constant32(0x00000002=2)]
#       t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(90,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
#       Number(0n2/0x00000002u32)
20 e8 02 00 00 00 

# None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(90,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# 01ef5 Copy32 [Register(0xe8), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(90,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
21 e8 00 

# Registers used by this function: {228, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241}
# Registers used by callee tree: {140, 141, 142, 143, 144, 145, 146, 147}
# Registers to save: []
# 01ef8 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 01efe StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c 08 1f 00 00 

# 01f04 JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 d9 17 00 

# 01f08 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(92,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] })
# Number(0n0/0x00u8)
# 01f0e LoadImm8 [Register(0xf0), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] })
#       Number(0n0/0x00u8)
04 f0 00 

# None <= call io_write1(ta97f,) Some('/lutcomp/programs/lib/lcd.j':(92,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] })
# 01f11 Out1 [Register(0xf0)]
#       IoWrite1
69 f0 

# tec13 <- 0n12/0x0cu8  Some('/lutcomp/programs/lib/lcd.j':(93,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n12/0x0cu8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n12/0x0cu8)] })
# Number(0n12/0x0cu8)
# 01f13 LoadImm8 [Register(0xe4), Constant8(0x0c=12)]
#       tec13 <- 0n12/0x0cu8  Some('/lutcomp/programs/lib/lcd.j':(93,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n12/0x0cu8)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(0n12/0x0cu8)] })
#       Number(0n12/0x0cu8)
04 e4 0c 

# None <= call io_write1(tec13,) Some('/lutcomp/programs/lib/lcd.j':(93,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n12/0x0cu8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n12/0x0cu8)] })
# 01f16 Out1 [Register(0xe4)]
#       IoWrite1
69 e4 

# t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(94,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# Number(0n2/0x00000002u32)
# 01f18 LoadImm32 [Register(0xe8), Constant32(0x00000002=2)]
#       t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(94,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
#       Number(0n2/0x00000002u32)
20 e8 02 00 00 00 

# None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(94,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# 01f1e Copy32 [Register(0xe8), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(94,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
21 e8 00 

# Registers used by this function: {228, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241}
# Registers used by callee tree: {140, 141, 142, 143, 144, 145, 146, 147}
# Registers to save: []
# 01f21 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 01f27 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c 31 1f 00 00 

# 01f2d JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 d9 17 00 

# 01f31 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(96,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] })
# Number(0n0/0x00u8)
# 01f37 LoadImm8 [Register(0xf0), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(96,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] })
#       Number(0n0/0x00u8)
04 f0 00 

# None <= call io_write1(ta97f,) Some('/lutcomp/programs/lib/lcd.j':(96,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] })
# 01f3a Out1 [Register(0xf0)]
#       IoWrite1
69 f0 

# ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/lcd.j':(97,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n1/0x01u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n1/0x01u8)] })
# Number(0n1/0x01u8)
# 01f3c LoadImm8 [Register(0xe4), Constant8(0x01=1)]
#       ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/lcd.j':(97,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n1/0x01u8)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(0n1/0x01u8)] })
#       Number(0n1/0x01u8)
04 e4 01 

# None <= call io_write1(ta11a,) Some('/lutcomp/programs/lib/lcd.j':(97,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n1/0x01u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n1/0x01u8)] })
# 01f3f Out1 [Register(0xe4)]
#       IoWrite1
69 e4 

# t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(98,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# Number(0n2/0x00000002u32)
# 01f41 LoadImm32 [Register(0xe8), Constant32(0x00000002=2)]
#       t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(98,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
#       Number(0n2/0x00000002u32)
20 e8 02 00 00 00 

# None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(98,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# 01f47 Copy32 [Register(0xe8), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(98,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
21 e8 00 

# Registers used by this function: {228, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241}
# Registers used by callee tree: {140, 141, 142, 143, 144, 145, 146, 147}
# Registers to save: []
# 01f4a AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 01f50 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c 5a 1f 00 00 

# 01f56 JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 d9 17 00 

# 01f5a AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# return None None
# Return { value: None }
# 01f60 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_lcd_init None
# function_end_lcd_init
# Unreachable None
# 01f62 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :lcd_putc
# Ret None
# Arg0=ch
# Var ch (Arg0 ch Number(U8)) Reg(U8) Some([242])
# Var next (Local next Number(U8) Reg(U8)) Reg(U8) Some([242])
# Var t0 (static "lcd_current" addr) Reg(U32) Some([244, 245, 246, 247]) Number(0n987145/0x000f1009u32)
# Var t1 (static "lcd_current" addr) Reg(U32) Some([248, 249, 250, 251]) Number(0n987145/0x000f1009u32)
# Var t164d (t164d Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }) Reg(U32) Some([248, 249, 250, 251])
# Var t2 (static "lcd_current" addr) Reg(U32) Some([248, 249, 250, 251]) Number(0n987145/0x000f1009u32)
# Var t25ee (t25ee Number(0n10/0x0au8)) Reg(U8) Some([252]) Number(0n10/0x0au8)
# Var t3 (static "lcd_current" addr) Reg(U32) Some([248, 249, 250, 251]) Number(0n987145/0x000f1009u32)
# Var t4 (static "lcd_current" addr) Reg(U32) Some([16, 17, 18, 19]) Number(0n987145/0x000f1009u32)
# Var t5 (static "lcd_current" addr) Reg(U32) Some([248, 249, 250, 251]) Number(0n987145/0x000f1009u32)
# Var t5dda (t5dda Ident("lcd_current")) Reg(U8) Some([20])
# Var t6 (static "lcd_current" addr) Reg(U32) Some([248, 249, 250, 251]) Number(0n987145/0x000f1009u32)
# Var t7 (static "lcd_current" addr) Reg(U32) Some([244, 245, 246, 247]) Number(0n987145/0x000f1009u32)
# Var t78f0 (t78f0 Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8))) Reg(U8) Some([242])
# Var t8 (static "lcd_current" addr) Reg(U32) Some([248, 249, 250, 251]) Number(0n987145/0x000f1009u32)
# Var t9 (static "lcd_current" addr) Reg(U32) Some([244, 245, 246, 247]) Number(0n987145/0x000f1009u32)
# Var ta5ff (ta5ff Ident("next")) Reg(U8) Some([242])
# Var tad4e (tad4e Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) Reg(U32) Some([248, 249, 250, 251])
# Var td749 (td749 Number(0n80/0x50u8)) Reg(U8) Some([242]) Number(0n80/0x50u8)
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([242])
# Var tdf3b (tdf3b Number(0n32/0x20u8)) Reg(U8) Some([20]) Number(0n32/0x20u8)
# Var tefac (tefac Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))) Reg(U8) Some([20])
# Var tf5a3 (tf5a3 Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))) Reg(U8) Some([242])
# 01f67 Copy8 [Register(0x00), Register(0xf2)]
#       Save function parameter 'ch' registers [0] to locals [242].
0b 00 f2 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n10/0x0au8) }, [Assign { target: Ident(\"next\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] }) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(0n1/0x01u8)) }] }\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n10/0x0au8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0xf2), Register(0xf2)], resolved: None }
# t25ee <- 0n10/0x0au8  Some('/lutcomp/programs/lib/lcd.j':(51,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
# Number(0n10/0x0au8)
# 01f6a LoadImm8 [Register(0xfc), Constant8(0x0a=10)]
#       t25ee <- 0n10/0x0au8  Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
#       Number(0n10/0x0au8)
04 fc 0a 

# if tdcd9 == t25ee then 'lcd_putc_if_true_0_1' else 'lcd_putc_if_else_0_2' Some('/lutcomp/programs/lib/lcd.j':(51,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
# 01f6d Cmp8 [Register(0xf2), Register(0xfc)]
#       if tdcd9 == t25ee then 'lcd_putc_if_true_0_1' else 'lcd_putc_if_else_0_2' Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
15 f2 fc 

# 01f70 JzImm [Label24(lcd_putc_if_true_0_1)]
#       if tdcd9 == t25ee then 'lcd_putc_if_true_0_1' else 'lcd_putc_if_else_0_2' Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
72 78 1f 00 

# 01f74 JmpImm [Label24(lcd_putc_if_else_0_2)]
#       if tdcd9 == t25ee then 'lcd_putc_if_true_0_1' else 'lcd_putc_if_else_0_2' Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
70 e5 1f 00 

# :lcd_putc_if_true_0_1 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# lcd_putc_if_true_0_1
# t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
# Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
# Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
# Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8))
# Ident("lcd_current")
# 01f78 LoadImm32 [Register(0xf4), Constant32(0x000f1009=987145)]
#       t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
#       Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8))
#       Ident("lcd_current")
20 f4 09 10 0f 00 

# t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
# Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
# Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
# Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8))
# Ident("lcd_current")
# 01f7e Load8 [Register(0xf4), Register(0x14)]
#       t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
#       Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8))
#       Ident("lcd_current")
05 f4 14 

# t78f0 <- t5dda Divide Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
# Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
# Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
# Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8))
# 01f81 LoadImm8 [Register(0x00), Constant8(0x14=20)]
#       t78f0 <- t5dda Divide Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
#       Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8))
04 00 14 

# 01f84 Divide8 [Register(0x14), Register(0x00), Register(0xf2)]
#       t78f0 <- t5dda Divide Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
#       Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8))
17 14 00 f2 

# tf5a3 <- t78f0 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
# Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
# Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
# 01f88 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       tf5a3 <- t78f0 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
04 00 01 

# 01f8b Add8NoCarryIn [Register(0xf2), Register(0x00), Register(0xf2)]
#       tf5a3 <- t78f0 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
14 f2 00 f2 

# next <- tf5a3 Multiply Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
# Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
# 01f8f LoadImm8 [Register(0x00), Constant8(0x14=20)]
#       next <- tf5a3 Multiply Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
04 00 14 

# 01f92 Mul8_8 [Register(0xf2), Register(0x00), Register(0xf2)]
#       next <- tf5a3 Multiply Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
10 f2 00 f2 

# :lcd_putc_while_predicate_3 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# lcd_putc_while_predicate_3
# t1 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
# Ident("lcd_current")
# 01f96 LoadImm32 [Register(0xf8), Constant32(0x000f1009=987145)]
#       t1 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
#       Ident("lcd_current")
20 f8 09 10 0f 00 

# t5dda <- mem[t1] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
# Ident("lcd_current")
# 01f9c Load8 [Register(0xf8), Register(0x14)]
#       t5dda <- mem[t1] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
#       Ident("lcd_current")
05 f8 14 

# ta5ff <- next U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
# Ident("next")
# optimized away noop copy Instruction { source: "ta5ff <- next U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }\nIdent(\"next\")\n", opcode: Copy8, args: [Register(0xf2), Register(0xf2)], resolved: None }
# if t5dda < ta5ff then 'lcd_putc_while_body_4' else 'lcd_putc_while_end_5' Some('/lutcomp/programs/lib/lcd.j':(51,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
# 01f9f Cmp8 [Register(0xf2), Register(0x14)]
#       if t5dda < ta5ff then 'lcd_putc_while_body_4' else 'lcd_putc_while_end_5' Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
15 f2 14 

# 01fa2 JcImm [Label24(lcd_putc_while_end_5)]
#       if t5dda < ta5ff then 'lcd_putc_while_body_4' else 'lcd_putc_while_end_5' Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
71 e1 1f 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t5dda < ta5ff then 'lcd_putc_while_body_4' else 'lcd_putc_while_end_5' Some('/lutcomp/programs/lib/lcd.j':(51,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }\n", opcode: JmpImm, args: [Label24(lcd_putc_while_body_4)], resolved: None }
# :lcd_putc_while_body_4 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# lcd_putc_while_body_4
# t2 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
# Ident("lcd_current")
# 01fa6 LoadImm32 [Register(0xf8), Constant32(0x000f1009=987145)]
#       t2 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
#       Ident("lcd_current")
20 f8 09 10 0f 00 

# t5dda <- mem[t2] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
# Ident("lcd_current")
# 01fac Load8 [Register(0xf8), Register(0x14)]
#       t5dda <- mem[t2] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
#       Ident("lcd_current")
05 f8 14 

# tad4e U32 <- t5dda U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
# 01faf LoadImm32 [Register(0xf8), Constant32(0x00000000=0)]
#       Zero-pad for tad4e U32 <- t5dda U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
20 f8 00 00 00 00 

# 01fb5 Copy8 [Register(0x14), Register(0xf8)]
#       tad4e U32 <- t5dda U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
0b 14 f8 

# t164d <- tad4e Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
# 01fb8 AddImm32IgnoreCarry [Register(0xf8), Constant32(0x000f100c=987148)]
#       t164d <- tad4e Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
32 f8 0c 10 0f 00 

# tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
# Number(0n32/0x20u8)
# 01fbe LoadImm8 [Register(0x14), Constant8(0x20=32)]
#       tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
#       Number(0n32/0x20u8)
04 14 20 

# mem[t164d] <- tdf3b U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
# 01fc1 Store8 [Register(0x14), Register(0xf8)]
#       mem[t164d] <- tdf3b U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
06 14 f8 

# t3 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
# 01fc4 LoadImm32 [Register(0xf8), Constant32(0x000f1009=987145)]
#       t3 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
20 f8 09 10 0f 00 

# t4 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
# Ident("lcd_current")
# 01fca LoadImm32 [Register(0x10), Constant32(0x000f1009=987145)]
#       t4 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
#       Ident("lcd_current")
20 10 09 10 0f 00 

# t5dda <- mem[t4] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
# Ident("lcd_current")
# 01fd0 Load8 [Register(0x10), Register(0x14)]
#       t5dda <- mem[t4] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
#       Ident("lcd_current")
05 10 14 

# tefac <- t5dda Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
# 01fd3 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       tefac <- t5dda Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
04 00 01 

# 01fd6 Add8NoCarryIn [Register(0x14), Register(0x00), Register(0x14)]
#       tefac <- t5dda Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
14 14 00 14 

# mem[t3] <- tefac U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
# 01fda Store8 [Register(0x14), Register(0xf8)]
#       mem[t3] <- tefac U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
06 14 f8 

# goto lcd_putc_while_predicate_3 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 01fdd JmpImm [Label24(lcd_putc_while_predicate_3)]
#       goto lcd_putc_while_predicate_3 Some('/lutcomp/programs/lib/lcd.j':(51,5))
70 96 1f 00 

# :lcd_putc_while_end_5 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# lcd_putc_while_end_5
# goto lcd_putc_if_end_0 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 01fe1 JmpImm [Label24(lcd_putc_if_end_0)]
#       goto lcd_putc_if_end_0 Some('/lutcomp/programs/lib/lcd.j':(51,5))
70 3e 20 00 

# :lcd_putc_if_else_0_2 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# lcd_putc_if_else_0_2
# t5 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
# Ident("lcd_current")
# 01fe5 LoadImm32 [Register(0xf8), Constant32(0x000f1009=987145)]
#       t5 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
#       Ident("lcd_current")
20 f8 09 10 0f 00 

# t5dda <- mem[t5] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
# Ident("lcd_current")
# 01feb Load8 [Register(0xf8), Register(0x14)]
#       t5dda <- mem[t5] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
#       Ident("lcd_current")
05 f8 14 

# tad4e U32 <- t5dda U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
# 01fee LoadImm32 [Register(0xf8), Constant32(0x00000000=0)]
#       Zero-pad for tad4e U32 <- t5dda U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
20 f8 00 00 00 00 

# 01ff4 Copy8 [Register(0x14), Register(0xf8)]
#       tad4e U32 <- t5dda U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
0b 14 f8 

# t164d <- tad4e Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
# 01ff7 AddImm32IgnoreCarry [Register(0xf8), Constant32(0x000f100c=987148)]
#       t164d <- tad4e Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
32 f8 0c 10 0f 00 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))\nAssign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Ident(\"ch\") }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0xf2), Register(0xf2)], resolved: None }
# mem[t164d] <- tdcd9 U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# 01ffd Store8 [Register(0xf2), Register(0xf8)]
#       mem[t164d] <- tdcd9 U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
06 f2 f8 

# t6 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
# Ident("lcd_current")
# 02000 LoadImm32 [Register(0xf8), Constant32(0x000f1009=987145)]
#       t6 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
#       Ident("lcd_current")
20 f8 09 10 0f 00 

# t5dda <- mem[t6] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
# Ident("lcd_current")
# 02006 Load8 [Register(0xf8), Register(0x14)]
#       t5dda <- mem[t6] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
#       Ident("lcd_current")
05 f8 14 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))\nVoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] }) }\nCall(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] })\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0xf2), Register(0xf2)], resolved: None }
# None <= call lcd_draw_char(t5dda,tdcd9,) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
# 02009 Copy8 [Register(0x14), Register(0x00)]
#       Arg0[i]=t5dda None <= call lcd_draw_char(t5dda,tdcd9,) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
0b 14 00 

# 0200c Copy8 [Register(0xf2), Register(0x04)]
#       Arg1[ch]=tdcd9 None <= call lcd_draw_char(t5dda,tdcd9,) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
0b f2 04 

# Registers used by this function: {16, 17, 18, 19, 20, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252}
# Registers used by callee tree: {140, 141, 142, 143, 144, 145, 146, 147, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227}
# Registers to save: []
# 0200f AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c fc ff ff ff 

# 02015 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_draw_char))
25 0c 1f 20 00 00 

# 0201b JmpImm [Label24(:lcd_draw_char)]
#       PseudoCall(Label24(:lcd_draw_char))
70 77 1d 00 

# 0201f AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c 04 00 00 00 

# t7 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
# 02025 LoadImm32 [Register(0xf4), Constant32(0x000f1009=987145)]
#       t7 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
20 f4 09 10 0f 00 

# t8 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
# Ident("lcd_current")
# 0202b LoadImm32 [Register(0xf8), Constant32(0x000f1009=987145)]
#       t8 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
#       Ident("lcd_current")
20 f8 09 10 0f 00 

# t5dda <- mem[t8] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
# Ident("lcd_current")
# 02031 Load8 [Register(0xf8), Register(0x14)]
#       t5dda <- mem[t8] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
#       Ident("lcd_current")
05 f8 14 

# tefac <- t5dda Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
# 02034 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       tefac <- t5dda Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
04 00 01 

# 02037 Add8NoCarryIn [Register(0x14), Register(0x00), Register(0x14)]
#       tefac <- t5dda Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
14 14 00 14 

# mem[t7] <- tefac U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
# 0203b Store8 [Register(0x14), Register(0xf4)]
#       mem[t7] <- tefac U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
06 14 f4 

# :lcd_putc_if_end_0 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# lcd_putc_if_end_0
# t9 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
# Ident("lcd_current")
# 0203e LoadImm32 [Register(0xf4), Constant32(0x000f1009=987145)]
#       t9 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
#       Ident("lcd_current")
20 f4 09 10 0f 00 

# t5dda <- mem[t9] U8 Some('/lutcomp/programs/lib/lcd.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
# Ident("lcd_current")
# 02044 Load8 [Register(0xf4), Register(0x14)]
#       t5dda <- mem[t9] U8 Some('/lutcomp/programs/lib/lcd.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
#       Ident("lcd_current")
05 f4 14 

# td749 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/lcd.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
# Number(0n80/0x50u8)
# 02047 LoadImm8 [Register(0xf2), Constant8(0x50=80)]
#       td749 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/lcd.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
#       Number(0n80/0x50u8)
04 f2 50 

# if t5dda >= td749 then 'lcd_putc_if_true_0_7' else 'lcd_putc_if_else_0_8' Some('/lutcomp/programs/lib/lcd.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
# 0204a Cmp8 [Register(0xf2), Register(0x14)]
#       if t5dda >= td749 then 'lcd_putc_if_true_0_7' else 'lcd_putc_if_else_0_8' Some('/lutcomp/programs/lib/lcd.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
15 f2 14 

# 0204d JcImm [Label24(lcd_putc_if_true_0_7)]
#       if t5dda >= td749 then 'lcd_putc_if_true_0_7' else 'lcd_putc_if_else_0_8' Some('/lutcomp/programs/lib/lcd.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
71 55 20 00 

# 02051 JmpImm [Label24(lcd_putc_if_else_0_8)]
#       if t5dda >= td749 then 'lcd_putc_if_true_0_7' else 'lcd_putc_if_else_0_8' Some('/lutcomp/programs/lib/lcd.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
70 6f 20 00 

# :lcd_putc_if_true_0_7 Some('/lutcomp/programs/lib/lcd.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
# lcd_putc_if_true_0_7
# None <= call lcd_scroll_up() Some('/lutcomp/programs/lib/lcd.j':(63,5))
# VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }
# Call(Call { function: "lcd_scroll_up", parameters: [] })
# Registers used by this function: {16, 17, 18, 19, 20, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252}
# Registers used by callee tree: {21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 140, 141, 142, 143, 144, 145, 146, 147, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227}
# Registers to save: []
# 02055 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_scroll_up))
32 0c fc ff ff ff 

# 0205b StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_scroll_up))
25 0c 65 20 00 00 

# 02061 JmpImm [Label24(:lcd_scroll_up)]
#       PseudoCall(Label24(:lcd_scroll_up))
70 76 20 00 

# 02065 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_scroll_up))
32 0c 04 00 00 00 

# goto lcd_putc_if_end_6 Some('/lutcomp/programs/lib/lcd.j':(63,5))
# 0206b JmpImm [Label24(lcd_putc_if_end_6)]
#       goto lcd_putc_if_end_6 Some('/lutcomp/programs/lib/lcd.j':(63,5))
70 6f 20 00 

# :lcd_putc_if_else_0_8 Some('/lutcomp/programs/lib/lcd.j':(63,5))
# lcd_putc_if_else_0_8
# :lcd_putc_if_end_6 Some('/lutcomp/programs/lib/lcd.j':(63,5))
# lcd_putc_if_end_6
# return None None
# Return { value: None }
# 0206f JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_lcd_putc None
# function_end_lcd_putc
# Unreachable None
# 02071 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :lcd_scroll_up
# Ret None
# Var ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([21])
# Var i (Local i Number(U8) Reg(U8)) Reg(U8) Some([22])
# Var t0 (static "lcd_current" addr) Reg(U32) Some([24, 25, 26, 27]) Number(0n987145/0x000f1009u32)
# Var t1 (static "lcd_current" addr) Reg(U32) Some([28, 29, 30, 31]) Number(0n987145/0x000f1009u32)
# Var t54b2 (t54b2 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }) Reg(U32) Some([24, 25, 26, 27])
# Var t5dda (t5dda Ident("lcd_current")) Reg(U8) Some([22])
# Var t760c (t760c Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) Reg(U32) Some([24, 25, 26, 27])
# Var t81b5 (t81b5 Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8))) Reg(U8) Some([22])
# Var t9586 (t9586 Number(0n60/0x3cu8)) Reg(U8) Some([21]) Number(0n60/0x3cu8)
# Var t9725 (t9725 Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) Reg(U32) Some([32, 33, 34, 35])
# Var t9e70 (t9e70 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }) Reg(U32) Some([32, 33, 34, 35])
# Var ta094 (ta094 Index("lcd_display", Ident("i"))) Reg(U8) Some([36])
# Var td0f3 (td0f3 Ident("i")) Reg(U8) Some([22])
# Var td749 (td749 Number(0n80/0x50u8)) Reg(U8) Some([21]) Number(0n80/0x50u8)
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([21])
# Var tdf3b (tdf3b Number(0n32/0x20u8)) Reg(U8) Some([21]) Number(0n32/0x20u8)
# Var tfd89 (tfd89 Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) Reg(U8) Some([21])
# t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(27,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
# 02076 LoadImm32 [Register(0x18), Constant32(0x000f1009=987145)]
#       t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(27,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
20 18 09 10 0f 00 

# t1 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(27,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
# Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8))
# Ident("lcd_current")
# 0207c LoadImm32 [Register(0x1c), Constant32(0x000f1009=987145)]
#       t1 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(27,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
#       Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8))
#       Ident("lcd_current")
20 1c 09 10 0f 00 

# t5dda <- mem[t1] U8 Some('/lutcomp/programs/lib/lcd.j':(27,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
# Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8))
# Ident("lcd_current")
# 02082 Load8 [Register(0x1c), Register(0x16)]
#       t5dda <- mem[t1] U8 Some('/lutcomp/programs/lib/lcd.j':(27,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
#       Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8))
#       Ident("lcd_current")
05 1c 16 

# t81b5 <- t5dda Subtract Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(27,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
# Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8))
# 02085 LoadImm8 [Register(0x00), Constant8(0xec=236)]
#       t81b5 <- t5dda Subtract Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(27,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
#       Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8))
04 00 ec 

# 02088 Add8NoCarryIn [Register(0x16), Register(0x00), Register(0x16)]
#       t81b5 <- t5dda Subtract Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(27,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
#       Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8))
14 16 00 16 

# mem[t0] <- t81b5 U8 Some('/lutcomp/programs/lib/lcd.j':(27,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
# 0208c Store8 [Register(0x16), Register(0x18)]
#       mem[t0] <- t81b5 U8 Some('/lutcomp/programs/lib/lcd.j':(27,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
06 16 18 

# i <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(29,5))
# Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 0208f LoadImm8 [Register(0x16), Constant8(0x00=0)]
#       i <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(29,5))
#       Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 16 00 

# :lcd_scroll_up_while_predicate_0 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# lcd_scroll_up_while_predicate_0
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }])], else_block: [] }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(0n60/0x3cu8) }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x16), Register(0x16)], resolved: None }
# t9586 <- 0n60/0x3cu8  Some('/lutcomp/programs/lib/lcd.j':(31,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }
# Number(0n60/0x3cu8)
# 02092 LoadImm8 [Register(0x15), Constant8(0x3c=60)]
#       t9586 <- 0n60/0x3cu8  Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }
#       Number(0n60/0x3cu8)
04 15 3c 

# if td0f3 < t9586 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(31,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }
# 02095 Cmp8 [Register(0x15), Register(0x16)]
#       if td0f3 < t9586 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }
15 15 16 

# 02098 JcImm [Label24(lcd_scroll_up_while_end_2)]
#       if td0f3 < t9586 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }
71 0b 21 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if td0f3 < t9586 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(31,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }])], else_block: [] }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(0n60/0x3cu8) }\n", opcode: JmpImm, args: [Label24(lcd_scroll_up_while_body_1)], resolved: None }
# :lcd_scroll_up_while_body_1 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# lcd_scroll_up_while_body_1
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
# Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }
# Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nAssign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(0n20/0x14u8))) }\nIndex(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(0n20/0x14u8)))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident(\"i\"), Number(0n20/0x14u8)) }) }\nArithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident(\"i\"), Number(0n20/0x14u8)) })\nCast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident(\"i\"), Number(0n20/0x14u8)) }\nArithmetic(Add, Ident(\"i\"), Number(0n20/0x14u8))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x16), Register(0x16)], resolved: None }
# tfd89 <- td0f3 Add Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
# Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }
# Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))
# 0209c LoadImm8 [Register(0x00), Constant8(0x14=20)]
#       tfd89 <- td0f3 Add Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))
04 00 14 

# 0209f Add8NoCarryIn [Register(0x16), Register(0x00), Register(0x15)]
#       tfd89 <- td0f3 Add Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))
14 16 00 15 

# t760c U32 <- tfd89 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
# Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }
# 020a3 LoadImm32 [Register(0x18), Constant32(0x00000000=0)]
#       Zero-pad for t760c U32 <- tfd89 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }
20 18 00 00 00 00 

# 020a9 Copy8 [Register(0x15), Register(0x18)]
#       t760c U32 <- tfd89 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }
0b 15 18 

# t54b2 <- t760c Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
# Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
# 020ac AddImm32IgnoreCarry [Register(0x18), Constant32(0x000f100c=987148)]
#       t54b2 <- t760c Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
32 18 0c 10 0f 00 

# ch <- mem[t54b2] U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
# Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
# 020b2 Load8 [Register(0x18), Register(0x15)]
#       ch <- mem[t54b2] U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
05 18 15 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x15), Register(0x15)], resolved: None }
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
# Index("lcd_display", Ident("i"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }\nIndex(\"lcd_display\", Ident(\"i\"))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }) }\nArithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") })\nCast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x16), Register(0x16)], resolved: None }
# t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
# Index("lcd_display", Ident("i"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# 020b5 LoadImm32 [Register(0x20), Constant32(0x00000000=0)]
#       Zero-pad for t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
#       Index("lcd_display", Ident("i"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
20 20 00 00 00 00 

# 020bb Copy8 [Register(0x16), Register(0x20)]
#       t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
#       Index("lcd_display", Ident("i"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
0b 16 20 

# t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
# Index("lcd_display", Ident("i"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# 020be AddImm32IgnoreCarry [Register(0x20), Constant32(0x000f100c=987148)]
#       t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
#       Index("lcd_display", Ident("i"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
32 20 0c 10 0f 00 

# ta094 <- mem[t9e70] U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
# Index("lcd_display", Ident("i"))
# 020c4 Load8 [Register(0x20), Register(0x24)]
#       ta094 <- mem[t9e70] U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
#       Index("lcd_display", Ident("i"))
05 20 24 

# if tdcd9 != ta094 then 'lcd_scroll_up_if_true_0_4' else 'lcd_scroll_up_if_else_0_5' Some('/lutcomp/programs/lib/lcd.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
# 020c7 Cmp8 [Register(0x15), Register(0x24)]
#       if tdcd9 != ta094 then 'lcd_scroll_up_if_true_0_4' else 'lcd_scroll_up_if_else_0_5' Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
15 15 24 

# 020ca JzImm [Label24(lcd_scroll_up_if_else_0_5)]
#       if tdcd9 != ta094 then 'lcd_scroll_up_if_true_0_4' else 'lcd_scroll_up_if_else_0_5' Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
72 00 21 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if tdcd9 != ta094 then 'lcd_scroll_up_if_true_0_4' else 'lcd_scroll_up_if_else_0_5' Some('/lutcomp/programs/lib/lcd.j':(31,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }\n", opcode: JmpImm, args: [Label24(lcd_scroll_up_if_true_0_4)], resolved: None }
# :lcd_scroll_up_if_true_0_4 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
# lcd_scroll_up_if_true_0_4
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nAssign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }) }\nArithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") })\nCast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x16), Register(0x16)], resolved: None }
# t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# 020ce LoadImm32 [Register(0x20), Constant32(0x00000000=0)]
#       Zero-pad for t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
20 20 00 00 00 00 

# 020d4 Copy8 [Register(0x16), Register(0x20)]
#       t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
0b 16 20 

# t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# 020d7 AddImm32IgnoreCarry [Register(0x20), Constant32(0x000f100c=987148)]
#       t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
32 20 0c 10 0f 00 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nAssign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x15), Register(0x15)], resolved: None }
# mem[t9e70] <- tdcd9 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
# 020dd Store8 [Register(0x15), Register(0x20)]
#       mem[t9e70] <- tdcd9 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
06 15 20 

# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] })
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }\nCall(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] })\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x16), Register(0x16)], resolved: None }
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] })
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }\nCall(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] })\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x15), Register(0x15)], resolved: None }
# None <= call lcd_draw_char(td0f3,tdcd9,) Some('/lutcomp/programs/lib/lcd.j':(31,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] })
# 020e0 Copy8 [Register(0x16), Register(0x00)]
#       Arg0[i]=td0f3 None <= call lcd_draw_char(td0f3,tdcd9,) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] })
0b 16 00 

# 020e3 Copy8 [Register(0x15), Register(0x04)]
#       Arg1[ch]=tdcd9 None <= call lcd_draw_char(td0f3,tdcd9,) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] })
0b 15 04 

# Registers used by this function: {21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36}
# Registers used by callee tree: {140, 141, 142, 143, 144, 145, 146, 147, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227}
# Registers to save: []
# 020e6 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c fc ff ff ff 

# 020ec StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_draw_char))
25 0c f6 20 00 00 

# 020f2 JmpImm [Label24(:lcd_draw_char)]
#       PseudoCall(Label24(:lcd_draw_char))
70 77 1d 00 

# 020f6 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c 04 00 00 00 

# goto lcd_scroll_up_if_end_3 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 020fc JmpImm [Label24(lcd_scroll_up_if_end_3)]
#       goto lcd_scroll_up_if_end_3 Some('/lutcomp/programs/lib/lcd.j':(31,5))
70 00 21 00 

# :lcd_scroll_up_if_else_0_5 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# lcd_scroll_up_if_else_0_5
# :lcd_scroll_up_if_end_3 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# lcd_scroll_up_if_end_3
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nAssign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }\nArithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x16), Register(0x16)], resolved: None }
# i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
# 02100 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
04 00 01 

# 02103 Add8NoCarryIn [Register(0x16), Register(0x00), Register(0x16)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
14 16 00 16 

# goto lcd_scroll_up_while_predicate_0 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 02107 JmpImm [Label24(lcd_scroll_up_while_predicate_0)]
#       goto lcd_scroll_up_while_predicate_0 Some('/lutcomp/programs/lib/lcd.j':(31,5))
70 92 20 00 

# :lcd_scroll_up_while_end_2 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# lcd_scroll_up_while_end_2
# :lcd_scroll_up_while_predicate_6 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# lcd_scroll_up_while_predicate_6
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index(\"lcd_display\", Ident(\"i\")), right: Number(0n32/0x20u8) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(0n80/0x50u8) }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x16), Register(0x16)], resolved: None }
# td749 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/lcd.j':(41,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
# Number(0n80/0x50u8)
# 0210b LoadImm8 [Register(0x15), Constant8(0x50=80)]
#       td749 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
#       Number(0n80/0x50u8)
04 15 50 

# if td0f3 < td749 then 'lcd_scroll_up_while_body_7' else 'lcd_scroll_up_while_end_8' Some('/lutcomp/programs/lib/lcd.j':(41,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
# 0210e Cmp8 [Register(0x15), Register(0x16)]
#       if td0f3 < td749 then 'lcd_scroll_up_while_body_7' else 'lcd_scroll_up_while_end_8' Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
15 15 16 

# 02111 JcImm [Label24(lcd_scroll_up_while_end_8)]
#       if td0f3 < td749 then 'lcd_scroll_up_while_body_7' else 'lcd_scroll_up_while_end_8' Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
71 74 21 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if td0f3 < td749 then 'lcd_scroll_up_while_body_7' else 'lcd_scroll_up_while_end_8' Some('/lutcomp/programs/lib/lcd.j':(41,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index(\"lcd_display\", Ident(\"i\")), right: Number(0n32/0x20u8) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(0n80/0x50u8) }\n", opcode: JmpImm, args: [Label24(lcd_scroll_up_while_body_7)], resolved: None }
# :lcd_scroll_up_while_body_7 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# lcd_scroll_up_while_body_7
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
# Index("lcd_display", Ident("i"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Index(\"lcd_display\", Ident(\"i\")), right: Number(0n32/0x20u8) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(0n32/0x20u8)] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Index(\"lcd_display\", Ident(\"i\")), right: Number(0n32/0x20u8) }\nIndex(\"lcd_display\", Ident(\"i\"))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }) }\nArithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") })\nCast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x16), Register(0x16)], resolved: None }
# t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
# Index("lcd_display", Ident("i"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# 02115 LoadImm32 [Register(0x20), Constant32(0x00000000=0)]
#       Zero-pad for t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
#       Index("lcd_display", Ident("i"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
20 20 00 00 00 00 

# 0211b Copy8 [Register(0x16), Register(0x20)]
#       t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
#       Index("lcd_display", Ident("i"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
0b 16 20 

# t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(41,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
# Index("lcd_display", Ident("i"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# 0211e AddImm32IgnoreCarry [Register(0x20), Constant32(0x000f100c=987148)]
#       t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
#       Index("lcd_display", Ident("i"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
32 20 0c 10 0f 00 

# ta094 <- mem[t9e70] U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
# Index("lcd_display", Ident("i"))
# 02124 Load8 [Register(0x20), Register(0x24)]
#       ta094 <- mem[t9e70] U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
#       Index("lcd_display", Ident("i"))
05 20 24 

# tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(41,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
# Number(0n32/0x20u8)
# 02127 LoadImm8 [Register(0x15), Constant8(0x20=32)]
#       tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
#       Number(0n32/0x20u8)
04 15 20 

# if ta094 != tdf3b then 'lcd_scroll_up_if_true_0_10' else 'lcd_scroll_up_if_else_0_11' Some('/lutcomp/programs/lib/lcd.j':(41,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
# 0212a Cmp8 [Register(0x24), Register(0x15)]
#       if ta094 != tdf3b then 'lcd_scroll_up_if_true_0_10' else 'lcd_scroll_up_if_else_0_11' Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
15 24 15 

# 0212d JzImm [Label24(lcd_scroll_up_if_else_0_11)]
#       if ta094 != tdf3b then 'lcd_scroll_up_if_true_0_10' else 'lcd_scroll_up_if_else_0_11' Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
72 69 21 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if ta094 != tdf3b then 'lcd_scroll_up_if_true_0_10' else 'lcd_scroll_up_if_else_0_11' Some('/lutcomp/programs/lib/lcd.j':(41,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Index(\"lcd_display\", Ident(\"i\")), right: Number(0n32/0x20u8) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(0n32/0x20u8)] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Index(\"lcd_display\", Ident(\"i\")), right: Number(0n32/0x20u8) }\n", opcode: JmpImm, args: [Label24(lcd_scroll_up_if_true_0_10)], resolved: None }
# :lcd_scroll_up_if_true_0_10 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
# lcd_scroll_up_if_true_0_10
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))\nAssign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(0n32/0x20u8) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }) }\nArithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") })\nCast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x16), Register(0x16)], resolved: None }
# t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# 02131 LoadImm32 [Register(0x20), Constant32(0x00000000=0)]
#       Zero-pad for t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
20 20 00 00 00 00 

# 02137 Copy8 [Register(0x16), Register(0x20)]
#       t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
0b 16 20 

# t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(41,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# 0213a AddImm32IgnoreCarry [Register(0x20), Constant32(0x000f100c=987148)]
#       t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
32 20 0c 10 0f 00 

# tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(41,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# Number(0n32/0x20u8)
# 02140 LoadImm8 [Register(0x15), Constant8(0x20=32)]
#       tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
#       Number(0n32/0x20u8)
04 15 20 

# mem[t9e70] <- tdf3b U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# 02143 Store8 [Register(0x15), Register(0x20)]
#       mem[t9e70] <- tdf3b U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
06 15 20 

# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] })
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))\nVoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(0n32/0x20u8)] }) }\nCall(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(0n32/0x20u8)] })\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x16), Register(0x16)], resolved: None }
# tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(41,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] })
# Number(0n32/0x20u8)
# 02146 LoadImm8 [Register(0x15), Constant8(0x20=32)]
#       tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] })
#       Number(0n32/0x20u8)
04 15 20 

# None <= call lcd_draw_char(td0f3,tdf3b,) Some('/lutcomp/programs/lib/lcd.j':(41,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] })
# 02149 Copy8 [Register(0x16), Register(0x00)]
#       Arg0[i]=td0f3 None <= call lcd_draw_char(td0f3,tdf3b,) Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] })
0b 16 00 

# 0214c Copy8 [Register(0x15), Register(0x04)]
#       Arg1[ch]=tdf3b None <= call lcd_draw_char(td0f3,tdf3b,) Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] })
0b 15 04 

# Registers used by this function: {21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36}
# Registers used by callee tree: {140, 141, 142, 143, 144, 145, 146, 147, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227}
# Registers to save: []
# 0214f AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c fc ff ff ff 

# 02155 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_draw_char))
25 0c 5f 21 00 00 

# 0215b JmpImm [Label24(:lcd_draw_char)]
#       PseudoCall(Label24(:lcd_draw_char))
70 77 1d 00 

# 0215f AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c 04 00 00 00 

# goto lcd_scroll_up_if_end_9 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 02165 JmpImm [Label24(lcd_scroll_up_if_end_9)]
#       goto lcd_scroll_up_if_end_9 Some('/lutcomp/programs/lib/lcd.j':(41,5))
70 69 21 00 

# :lcd_scroll_up_if_else_0_11 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# lcd_scroll_up_if_else_0_11
# :lcd_scroll_up_if_end_9 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# lcd_scroll_up_if_end_9
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))\nAssign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }\nArithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x16), Register(0x16)], resolved: None }
# i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(41,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
# 02169 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
04 00 01 

# 0216c Add8NoCarryIn [Register(0x16), Register(0x00), Register(0x16)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
14 16 00 16 

# goto lcd_scroll_up_while_predicate_6 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 02170 JmpImm [Label24(lcd_scroll_up_while_predicate_6)]
#       goto lcd_scroll_up_while_predicate_6 Some('/lutcomp/programs/lib/lcd.j':(41,5))
70 0b 21 00 

# :lcd_scroll_up_while_end_8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# lcd_scroll_up_while_end_8
# return None None
# Return { value: None }
# 02174 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_lcd_scroll_up None
# function_end_lcd_scroll_up
# Unreachable None
# 02176 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :main
# Ret Some(U8)
# Var inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec (t60ec Number(0n0/0x00000000u32)) Reg(U32) Some([40, 41, 42, 43]) Number(0n0/0x00000000u32)
# Var inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([44, 45, 46, 47]) Number(0n987728/0x000f1250u32)
# Var inline_main_RpnCalc_init_51_t60ec (t60ec Number(0n0/0x00000000u32)) Reg(U32) Some([40, 41, 42, 43]) Number(0n0/0x00000000u32)
# Var inline_main_RpnCalc_init_51_t6e8e (t6e8e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }) Reg(U32) Some([44, 45, 46, 47]) Number(0n987732/0x000f1254u32)
# Var inline_main_putc_25_t0 (static "lcd_enable" addr) Reg(U32) Some([40, 41, 42, 43]) Number(0n987228/0x000f105cu32)
# Var inline_main_putc_25_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([48])
# Var inline_main_putc_25_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([49]) Number(0n0/0x00u8)
# Var inline_main_putc_25_tac13 (tac13 Ident("c")) Reg(U8) Some([48]) Number(0n82/0x52u8)
# Var inline_main_putc_26_t0 (static "lcd_enable" addr) Reg(U32) Some([40, 41, 42, 43]) Number(0n987228/0x000f105cu32)
# Var inline_main_putc_26_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([48])
# Var inline_main_putc_26_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([49]) Number(0n0/0x00u8)
# Var inline_main_putc_26_tac13 (tac13 Ident("c")) Reg(U8) Some([48]) Number(0n80/0x50u8)
# Var inline_main_putc_27_t0 (static "lcd_enable" addr) Reg(U32) Some([40, 41, 42, 43]) Number(0n987228/0x000f105cu32)
# Var inline_main_putc_27_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([48])
# Var inline_main_putc_27_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([49]) Number(0n0/0x00u8)
# Var inline_main_putc_27_tac13 (tac13 Ident("c")) Reg(U8) Some([48]) Number(0n78/0x4eu8)
# Var inline_main_putc_28_t0 (static "lcd_enable" addr) Reg(U32) Some([40, 41, 42, 43]) Number(0n987228/0x000f105cu32)
# Var inline_main_putc_28_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([48])
# Var inline_main_putc_28_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([49]) Number(0n0/0x00u8)
# Var inline_main_putc_28_tac13 (tac13 Ident("c")) Reg(U8) Some([48]) Number(0n10/0x0au8)
# Var t2a99 (t2a99 Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) Reg(U8) Some([48])
# Var tca8 (tca8 AddressOf(Ident("calc"))) Reg(U32) Some([40, 41, 42, 43]) Number(0n987664/0x000f1210u32)
# None <= call stdio_init() Some('programs/app/rpn.j':(4,5))
# VoidExpression { expression: Call(Call { function: "stdio_init", parameters: [] }) }
# Call(Call { function: "stdio_init", parameters: [] })
# Registers used by this function: {40, 41, 42, 43, 44, 45, 46, 47, 48, 49}
# Registers used by callee tree: {16, 20, 21, 22, 23, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 205, 228, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241}
# Registers to save: []
# 0217b AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:stdio_init))
32 0c fc ff ff ff 

# 02181 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:stdio_init))
25 0c 8b 21 00 00 

# 02187 JmpImm [Label24(:stdio_init)]
#       PseudoCall(Label24(:stdio_init))
70 17 2a 00 

# 0218b AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:stdio_init))
32 0c 04 00 00 00 

# inline_main_putc_25_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("main"), replacing `inline_main_putc_25_tac13 <- inline_main_putc_25_c U8` with constant `inline_main_putc_25_tac13 <- 0n82/0x52u8 `.
# 02191 LoadImm8 [Register(0x30), Constant8(0x52=82)]
#       inline_main_putc_25_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("main"), replacing `inline_main_putc_25_tac13 <- inline_main_putc_25_c U8` with constant `inline_main_putc_25_tac13 <- 0n82/0x52u8 `.
04 30 52 

# None <= call io_write0(inline_main_putc_25_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 02194 Out0 [Register(0x30)]
#       IoWrite0
68 30 

# inline_main_putc_25_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 02196 LoadImm32 [Register(0x28), Constant32(0x000f105c=987228)]
#       inline_main_putc_25_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
20 28 5c 10 0f 00 

# inline_main_putc_25_t76c7 <- mem[inline_main_putc_25_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 0219c Load8 [Register(0x28), Register(0x30)]
#       inline_main_putc_25_t76c7 <- mem[inline_main_putc_25_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
05 28 30 

# inline_main_putc_25_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 0219f LoadImm8 [Register(0x31), Constant8(0x00=0)]
#       inline_main_putc_25_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 31 00 

# if inline_main_putc_25_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_25_putc_if_true_0_1' else 'inline_main_putc_25_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# 021a2 Cmp8 [Register(0x30), Register(0x31)]
#       if inline_main_putc_25_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_25_putc_if_true_0_1' else 'inline_main_putc_25_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
15 30 31 

# 021a5 JzImm [Label24(inline_main_putc_25_putc_if_else_0_2)]
#       if inline_main_putc_25_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_25_putc_if_true_0_1' else 'inline_main_putc_25_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
72 c9 21 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_putc_25_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_25_putc_if_true_0_1' else 'inline_main_putc_25_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(inline_main_putc_25_putc_if_true_0_1)], resolved: None }
# :inline_main_putc_25_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_main_putc_25_putc_if_true_0_1
# inline_main_putc_25_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("main"), replacing `inline_main_putc_25_tac13 <- inline_main_putc_25_c U8` with constant `inline_main_putc_25_tac13 <- 0n82/0x52u8 `.
# 021a9 LoadImm8 [Register(0x30), Constant8(0x52=82)]
#       inline_main_putc_25_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("main"), replacing `inline_main_putc_25_tac13 <- inline_main_putc_25_c U8` with constant `inline_main_putc_25_tac13 <- 0n82/0x52u8 `.
04 30 52 

# None <= call lcd_putc(inline_main_putc_25_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 021ac Copy8 [Register(0x30), Register(0x00)]
#       Arg0[ch]=inline_main_putc_25_tac13 None <= call lcd_putc(inline_main_putc_25_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 30 00 

# Registers used by this function: {40, 41, 42, 43, 44, 45, 46, 47, 48, 49}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 140, 141, 142, 143, 144, 145, 146, 147, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252}
# Registers to save: []
# 021af AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 021b5 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c bf 21 00 00 

# 021bb JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 67 1f 00 

# 021bf AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_putc_25_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 021c5 JmpImm [Label24(inline_main_putc_25_putc_if_end_0)]
#       goto inline_main_putc_25_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 c9 21 00 

# :inline_main_putc_25_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_main_putc_25_putc_if_else_0_2
# :inline_main_putc_25_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_main_putc_25_putc_if_end_0
# goto inline_main_putc_25_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_putc_25_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_putc_25_function_end_putc)], resolved: None }
# :inline_main_putc_25_function_end_putc None
# inline_main_putc_25_function_end_putc
# inline_main_putc_26_tac13 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("main"), replacing `inline_main_putc_26_tac13 <- inline_main_putc_26_c U8` with constant `inline_main_putc_26_tac13 <- 0n80/0x50u8 `.
# 021c9 LoadImm8 [Register(0x30), Constant8(0x50=80)]
#       inline_main_putc_26_tac13 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("main"), replacing `inline_main_putc_26_tac13 <- inline_main_putc_26_c U8` with constant `inline_main_putc_26_tac13 <- 0n80/0x50u8 `.
04 30 50 

# None <= call io_write0(inline_main_putc_26_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 021cc Out0 [Register(0x30)]
#       IoWrite0
68 30 

# inline_main_putc_26_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 021ce LoadImm32 [Register(0x28), Constant32(0x000f105c=987228)]
#       inline_main_putc_26_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
20 28 5c 10 0f 00 

# inline_main_putc_26_t76c7 <- mem[inline_main_putc_26_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 021d4 Load8 [Register(0x28), Register(0x30)]
#       inline_main_putc_26_t76c7 <- mem[inline_main_putc_26_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
05 28 30 

# inline_main_putc_26_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 021d7 LoadImm8 [Register(0x31), Constant8(0x00=0)]
#       inline_main_putc_26_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 31 00 

# if inline_main_putc_26_t76c7 != inline_main_putc_26_ta97f then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# 021da Cmp8 [Register(0x30), Register(0x31)]
#       if inline_main_putc_26_t76c7 != inline_main_putc_26_ta97f then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
15 30 31 

# 021dd JzImm [Label24(inline_main_putc_26_putc_if_else_0_2)]
#       if inline_main_putc_26_t76c7 != inline_main_putc_26_ta97f then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
72 01 22 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_putc_26_t76c7 != inline_main_putc_26_ta97f then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(inline_main_putc_26_putc_if_true_0_1)], resolved: None }
# :inline_main_putc_26_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_main_putc_26_putc_if_true_0_1
# inline_main_putc_26_tac13 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("main"), replacing `inline_main_putc_26_tac13 <- inline_main_putc_26_c U8` with constant `inline_main_putc_26_tac13 <- 0n80/0x50u8 `.
# 021e1 LoadImm8 [Register(0x30), Constant8(0x50=80)]
#       inline_main_putc_26_tac13 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("main"), replacing `inline_main_putc_26_tac13 <- inline_main_putc_26_c U8` with constant `inline_main_putc_26_tac13 <- 0n80/0x50u8 `.
04 30 50 

# None <= call lcd_putc(inline_main_putc_26_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 021e4 Copy8 [Register(0x30), Register(0x00)]
#       Arg0[ch]=inline_main_putc_26_tac13 None <= call lcd_putc(inline_main_putc_26_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 30 00 

# Registers used by this function: {40, 41, 42, 43, 44, 45, 46, 47, 48, 49}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 140, 141, 142, 143, 144, 145, 146, 147, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252}
# Registers to save: []
# 021e7 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 021ed StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c f7 21 00 00 

# 021f3 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 67 1f 00 

# 021f7 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_putc_26_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 021fd JmpImm [Label24(inline_main_putc_26_putc_if_end_0)]
#       goto inline_main_putc_26_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 01 22 00 

# :inline_main_putc_26_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_main_putc_26_putc_if_else_0_2
# :inline_main_putc_26_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_main_putc_26_putc_if_end_0
# goto inline_main_putc_26_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_putc_26_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_putc_26_function_end_putc)], resolved: None }
# :inline_main_putc_26_function_end_putc None
# inline_main_putc_26_function_end_putc
# tca8 <- 0n987664/0x000f1210u32  Some('programs/app/rpn.j':(12,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] }) }
# Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] })
# AddressOf(Ident("calc"))
# Number(0n987664/0x000f1210u32)
# 02201 LoadImm32 [Register(0x28), Constant32(0x000f1210=987664)]
#       tca8 <- 0n987664/0x000f1210u32  Some('programs/app/rpn.j':(12,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] })
#       AddressOf(Ident("calc"))
#       Number(0n987664/0x000f1210u32)
20 28 10 12 0f 00 

# inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- 0n987728/0x000f1250u32  Some('/lutcomp/programs/lib/Stack.j':(7,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# # In IlFunctionId("main"), replacing `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s Add Number(0n64/0x00000040u32)` with constant `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- 0n987728/0x000f1250u32 `.
# 02207 LoadImm32 [Register(0x2c), Constant32(0x000f1250=987728)]
#       inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- 0n987728/0x000f1250u32  Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
#       # In IlFunctionId("main"), replacing `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s Add Number(0n64/0x00000040u32)` with constant `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- 0n987728/0x000f1250u32 `.
20 2c 50 12 0f 00 

# inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/Stack.j':(7,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 0220d LoadImm32 [Register(0x28), Constant32(0x00000000=0)]
#       inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 28 00 00 00 00 

# mem[inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957] <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/Stack.j':(7,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
# 02213 Store32_1 [Register(0x28), Register(0x2c)]
#       mem[inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957] <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
23 28 2c 

# 02216 Store32_2 []
#       mem[inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957] <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
24 

# goto inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_function_end_stack_init None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_function_end_stack_init None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_function_end_stack_init)], resolved: None }
# :inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_function_end_stack_init None
# inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_function_end_stack_init
# inline_main_RpnCalc_init_51_t6e8e <- 0n987732/0x000f1254u32  Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# # In IlFunctionId("main"), replacing `inline_main_RpnCalc_init_51_t6e8e <- inline_main_RpnCalc_init_51_c Add Number(0n68/0x00000044u32)` with constant `inline_main_RpnCalc_init_51_t6e8e <- 0n987732/0x000f1254u32 `.
# 02217 LoadImm32 [Register(0x2c), Constant32(0x000f1254=987732)]
#       inline_main_RpnCalc_init_51_t6e8e <- 0n987732/0x000f1254u32  Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
#       # In IlFunctionId("main"), replacing `inline_main_RpnCalc_init_51_t6e8e <- inline_main_RpnCalc_init_51_c Add Number(0n68/0x00000044u32)` with constant `inline_main_RpnCalc_init_51_t6e8e <- 0n987732/0x000f1254u32 `.
20 2c 54 12 0f 00 

# inline_main_RpnCalc_init_51_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 0221d LoadImm32 [Register(0x28), Constant32(0x00000000=0)]
#       inline_main_RpnCalc_init_51_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 28 00 00 00 00 

# mem[inline_main_RpnCalc_init_51_t6e8e] <- inline_main_RpnCalc_init_51_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# 02223 Store32_1 [Register(0x28), Register(0x2c)]
#       mem[inline_main_RpnCalc_init_51_t6e8e] <- inline_main_RpnCalc_init_51_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
23 28 2c 

# 02226 Store32_2 []
#       mem[inline_main_RpnCalc_init_51_t6e8e] <- inline_main_RpnCalc_init_51_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
24 

# goto inline_main_RpnCalc_init_51_function_end_RpnCalc_init None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_RpnCalc_init_51_function_end_RpnCalc_init None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_RpnCalc_init_51_function_end_RpnCalc_init)], resolved: None }
# :inline_main_RpnCalc_init_51_function_end_RpnCalc_init None
# inline_main_RpnCalc_init_51_function_end_RpnCalc_init
# inline_main_putc_27_tac13 <- 0n78/0x4eu8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("main"), replacing `inline_main_putc_27_tac13 <- inline_main_putc_27_c U8` with constant `inline_main_putc_27_tac13 <- 0n78/0x4eu8 `.
# 02227 LoadImm8 [Register(0x30), Constant8(0x4e=78)]
#       inline_main_putc_27_tac13 <- 0n78/0x4eu8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("main"), replacing `inline_main_putc_27_tac13 <- inline_main_putc_27_c U8` with constant `inline_main_putc_27_tac13 <- 0n78/0x4eu8 `.
04 30 4e 

# None <= call io_write0(inline_main_putc_27_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 0222a Out0 [Register(0x30)]
#       IoWrite0
68 30 

# inline_main_putc_27_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 0222c LoadImm32 [Register(0x28), Constant32(0x000f105c=987228)]
#       inline_main_putc_27_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
20 28 5c 10 0f 00 

# inline_main_putc_27_t76c7 <- mem[inline_main_putc_27_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 02232 Load8 [Register(0x28), Register(0x30)]
#       inline_main_putc_27_t76c7 <- mem[inline_main_putc_27_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
05 28 30 

# inline_main_putc_27_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 02235 LoadImm8 [Register(0x31), Constant8(0x00=0)]
#       inline_main_putc_27_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 31 00 

# if inline_main_putc_27_t76c7 != inline_main_putc_27_ta97f then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# 02238 Cmp8 [Register(0x30), Register(0x31)]
#       if inline_main_putc_27_t76c7 != inline_main_putc_27_ta97f then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
15 30 31 

# 0223b JzImm [Label24(inline_main_putc_27_putc_if_else_0_2)]
#       if inline_main_putc_27_t76c7 != inline_main_putc_27_ta97f then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
72 5f 22 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_putc_27_t76c7 != inline_main_putc_27_ta97f then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(inline_main_putc_27_putc_if_true_0_1)], resolved: None }
# :inline_main_putc_27_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_main_putc_27_putc_if_true_0_1
# inline_main_putc_27_tac13 <- 0n78/0x4eu8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("main"), replacing `inline_main_putc_27_tac13 <- inline_main_putc_27_c U8` with constant `inline_main_putc_27_tac13 <- 0n78/0x4eu8 `.
# 0223f LoadImm8 [Register(0x30), Constant8(0x4e=78)]
#       inline_main_putc_27_tac13 <- 0n78/0x4eu8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("main"), replacing `inline_main_putc_27_tac13 <- inline_main_putc_27_c U8` with constant `inline_main_putc_27_tac13 <- 0n78/0x4eu8 `.
04 30 4e 

# None <= call lcd_putc(inline_main_putc_27_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 02242 Copy8 [Register(0x30), Register(0x00)]
#       Arg0[ch]=inline_main_putc_27_tac13 None <= call lcd_putc(inline_main_putc_27_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 30 00 

# Registers used by this function: {40, 41, 42, 43, 44, 45, 46, 47, 48, 49}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 140, 141, 142, 143, 144, 145, 146, 147, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252}
# Registers to save: []
# 02245 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 0224b StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 55 22 00 00 

# 02251 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 67 1f 00 

# 02255 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_putc_27_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 0225b JmpImm [Label24(inline_main_putc_27_putc_if_end_0)]
#       goto inline_main_putc_27_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 5f 22 00 

# :inline_main_putc_27_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_main_putc_27_putc_if_else_0_2
# :inline_main_putc_27_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_main_putc_27_putc_if_end_0
# goto inline_main_putc_27_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_putc_27_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_putc_27_function_end_putc)], resolved: None }
# :inline_main_putc_27_function_end_putc None
# inline_main_putc_27_function_end_putc
# inline_main_putc_28_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("main"), replacing `inline_main_putc_28_tac13 <- inline_main_putc_28_c U8` with constant `inline_main_putc_28_tac13 <- 0n10/0x0au8 `.
# 0225f LoadImm8 [Register(0x30), Constant8(0x0a=10)]
#       inline_main_putc_28_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("main"), replacing `inline_main_putc_28_tac13 <- inline_main_putc_28_c U8` with constant `inline_main_putc_28_tac13 <- 0n10/0x0au8 `.
04 30 0a 

# None <= call io_write0(inline_main_putc_28_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 02262 Out0 [Register(0x30)]
#       IoWrite0
68 30 

# inline_main_putc_28_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 02264 LoadImm32 [Register(0x28), Constant32(0x000f105c=987228)]
#       inline_main_putc_28_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
20 28 5c 10 0f 00 

# inline_main_putc_28_t76c7 <- mem[inline_main_putc_28_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 0226a Load8 [Register(0x28), Register(0x30)]
#       inline_main_putc_28_t76c7 <- mem[inline_main_putc_28_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
05 28 30 

# inline_main_putc_28_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 0226d LoadImm8 [Register(0x31), Constant8(0x00=0)]
#       inline_main_putc_28_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 31 00 

# if inline_main_putc_28_t76c7 != inline_main_putc_28_ta97f then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# 02270 Cmp8 [Register(0x30), Register(0x31)]
#       if inline_main_putc_28_t76c7 != inline_main_putc_28_ta97f then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
15 30 31 

# 02273 JzImm [Label24(inline_main_putc_28_putc_if_else_0_2)]
#       if inline_main_putc_28_t76c7 != inline_main_putc_28_ta97f then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
72 97 22 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_putc_28_t76c7 != inline_main_putc_28_ta97f then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(inline_main_putc_28_putc_if_true_0_1)], resolved: None }
# :inline_main_putc_28_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_main_putc_28_putc_if_true_0_1
# inline_main_putc_28_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("main"), replacing `inline_main_putc_28_tac13 <- inline_main_putc_28_c U8` with constant `inline_main_putc_28_tac13 <- 0n10/0x0au8 `.
# 02277 LoadImm8 [Register(0x30), Constant8(0x0a=10)]
#       inline_main_putc_28_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("main"), replacing `inline_main_putc_28_tac13 <- inline_main_putc_28_c U8` with constant `inline_main_putc_28_tac13 <- 0n10/0x0au8 `.
04 30 0a 

# None <= call lcd_putc(inline_main_putc_28_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 0227a Copy8 [Register(0x30), Register(0x00)]
#       Arg0[ch]=inline_main_putc_28_tac13 None <= call lcd_putc(inline_main_putc_28_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 30 00 

# Registers used by this function: {40, 41, 42, 43, 44, 45, 46, 47, 48, 49}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 140, 141, 142, 143, 144, 145, 146, 147, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252}
# Registers to save: []
# 0227d AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 02283 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 8d 22 00 00 

# 02289 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 67 1f 00 

# 0228d AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_putc_28_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 02293 JmpImm [Label24(inline_main_putc_28_putc_if_end_0)]
#       goto inline_main_putc_28_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 97 22 00 

# :inline_main_putc_28_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_main_putc_28_putc_if_else_0_2
# :inline_main_putc_28_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_main_putc_28_putc_if_end_0
# goto inline_main_putc_28_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_putc_28_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_putc_28_function_end_putc)], resolved: None }
# :inline_main_putc_28_function_end_putc None
# inline_main_putc_28_function_end_putc
# tca8 <- 0n987664/0x000f1210u32  Some('programs/app/rpn.j':(17,5))
# Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
# Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
# AddressOf(Ident("calc"))
# Number(0n987664/0x000f1210u32)
# 02297 LoadImm32 [Register(0x28), Constant32(0x000f1210=987664)]
#       tca8 <- 0n987664/0x000f1210u32  Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
#       AddressOf(Ident("calc"))
#       Number(0n987664/0x000f1210u32)
20 28 10 12 0f 00 

# Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
# Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
# Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
# 0229d Copy32 [Register(0x28), Register(0x00)]
#       Arg0[calc]=tca8 Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
21 28 00 

# Registers used by this function: {40, 41, 42, 43, 44, 45, 46, 47, 48, 49}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252}
# Registers to save: [40, 41, 42, 43, 44, 45, 46, 47, 48, 49]
# 022a0 Push8 [Register(0x31)]
#       Saving reg0x31 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 31 

# 022a2 Push8 [Register(0x30)]
#       Saving reg0x30 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 30 

# 022a4 Push8 [Register(0x2f)]
#       Saving reg0x2f before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 2f 

# 022a6 Push8 [Register(0x2e)]
#       Saving reg0x2e before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 2e 

# 022a8 Push8 [Register(0x2d)]
#       Saving reg0x2d before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 2d 

# 022aa Push8 [Register(0x2c)]
#       Saving reg0x2c before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 2c 

# 022ac Push8 [Register(0x2b)]
#       Saving reg0x2b before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 2b 

# 022ae Push8 [Register(0x2a)]
#       Saving reg0x2a before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 2a 

# 022b0 Push8 [Register(0x29)]
#       Saving reg0x29 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 29 

# 022b2 Push8 [Register(0x28)]
#       Saving reg0x28 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 28 

# 022b4 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:RpnCalc_run))
32 0c fc ff ff ff 

# 022ba StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:RpnCalc_run))
25 0c c4 22 00 00 

# 022c0 JmpImm [Label24(:RpnCalc_run)]
#       PseudoCall(Label24(:RpnCalc_run))
70 31 16 00 

# 022c4 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:RpnCalc_run))
32 0c 04 00 00 00 

# 022ca Pop8 [Register(0x28)]
#       Restoring reg0x28 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 28 

# 022cc Pop8 [Register(0x29)]
#       Restoring reg0x29 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 29 

# 022ce Pop8 [Register(0x2a)]
#       Restoring reg0x2a after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 2a 

# 022d0 Pop8 [Register(0x2b)]
#       Restoring reg0x2b after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 2b 

# 022d2 Pop8 [Register(0x2c)]
#       Restoring reg0x2c after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 2c 

# 022d4 Pop8 [Register(0x2d)]
#       Restoring reg0x2d after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 2d 

# 022d6 Pop8 [Register(0x2e)]
#       Restoring reg0x2e after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 2e 

# 022d8 Pop8 [Register(0x2f)]
#       Restoring reg0x2f after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 2f 

# 022da Pop8 [Register(0x30)]
#       Restoring reg0x30 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 30 

# 022dc Pop8 [Register(0x31)]
#       Restoring reg0x31 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 31 

# 022de Copy8 [Register(0x00), Register(0x30)]
#       Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0b 00 30 

# return Some(t2a99) Some('programs/app/rpn.j':(17,5))
# Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
# 022e1 Copy8 [Register(0x30), Register(0x00)]
#       return Some(t2a99) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
0b 30 00 

# 022e4 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_main None
# function_end_main
# Unreachable None
# 022e6 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :mul32_64
# Ret None
# Arg0=a
# Arg1=b
# Arg2=c
# Var __frame_pointer (__frame_pointer) Reg(U32) Some([12, 13, 14, 15])
# Var a (Arg0 a Number(U32)) Reg(U32) Some([52, 53, 54, 55])
# Var a_hi (Local a_hi Number(U32) Reg(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var b (Arg1 b Number(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var b_hi (Local b_hi Number(U32) Reg(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var c (Arg2 c Ptr(Struct("U64"))) Reg(U32) Some([68, 69, 70, 71])
# Var inline_mul32_64_add_U64_0_a (Arg0 a Ptr(Struct("U64"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_add_U64_0_b (Arg1 b Ptr(Struct("U64"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_mul32_64_add_U64_0_c (Arg2 c Ptr(Struct("U64"))) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_add_U64_0_lo (Local lo Number(U32) Reg(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_add_U64_0_t1335 (t1335 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_add_U64_0_t144a (t144a Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32)) }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_add_U64_0_t1506 (t1506 Ident("lo")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_add_U64_0_t153d (t153d PtrFieldDeref("b", "hi")) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_add_U64_0_t2558 (t2558 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_add_U64_0_t6f1c (t6f1c Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_add_U64_0_t809 (t809 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32)) }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_add_U64_0_t8956 (t8956 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") } }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_add_U64_0_t90ac (t90ac PtrFieldDeref("c", "lo")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_mul32_64_add_U64_0_ta95f (ta95f Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_add_U64_0_tbeec (tbeec Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") } }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_add_U64_0_tcbd1 (tcbd1 Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_add_U64_0_td5bf (td5bf PtrFieldDeref("b", "lo")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_add_U64_0_td868 (td868 PtrFieldDeref("a", "lo")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_add_U64_0_te24c (te24c PtrFieldDeref("a", "hi")) Reg(U32) Some([88, 89, 90, 91])
# Var inline_mul32_64_add_U64_0_tf677 (tf677 PtrFieldDeref("c", "hi")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_add_U64_1_a (Arg0 a Ptr(Struct("U64"))) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_add_U64_1_b (Arg1 b Ptr(Struct("U64"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_add_U64_1_c (Arg2 c Ptr(Struct("U64"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_mul32_64_add_U64_1_lo (Local lo Number(U32) Reg(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_mul32_64_add_U64_1_t1335 (t1335 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_mul32_64_add_U64_1_t144a (t144a Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32)) }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_add_U64_1_t1506 (t1506 Ident("lo")) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_add_U64_1_t153d (t153d PtrFieldDeref("b", "hi")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_add_U64_1_t2558 (t2558 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_mul32_64_add_U64_1_t6f1c (t6f1c Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_add_U64_1_t809 (t809 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32)) }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_add_U64_1_t8956 (t8956 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") } }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_mul32_64_add_U64_1_t90ac (t90ac PtrFieldDeref("c", "lo")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_add_U64_1_ta95f (ta95f Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_add_U64_1_tbeec (tbeec Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") } }) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_add_U64_1_tcbd1 (tcbd1 Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_add_U64_1_td5bf (td5bf PtrFieldDeref("b", "lo")) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_add_U64_1_td868 (td868 PtrFieldDeref("a", "lo")) Reg(U32) Some([68, 69, 70, 71])
# Var inline_mul32_64_add_U64_1_te24c (te24c PtrFieldDeref("a", "hi")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_add_U64_1_tf677 (tf677 PtrFieldDeref("c", "hi")) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_mul16_32_10_a (Arg0 a Number(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_mul16_32_10_b (Arg1 b Number(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_mul32_64_mul16_32_10_c (Local c Number(U32) Reg(U32)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_10_d (Local d Number(U32) Reg(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_10_e (Local e Number(U32) Reg(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_mul16_32_10_f (Local f Number(U32) Reg(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_10_t3009 (t3009 Index("a", Number(0n1/0x01u8))) Reg(U8) Some([92])
# Var inline_mul32_64_mul16_32_10_t30b9 (t30b9 Index("d", Number(0n0/0x00u8))) Reg(U8) Some([92])
# Var inline_mul32_64_mul16_32_10_t34f7 (t34f7 Index("d", Number(0n1/0x01u8))) Reg(U8) Some([92])
# Var inline_mul32_64_mul16_32_10_t3585 (t3585 Ident("e")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_mul16_32_10_t45f5 (t45f5 Ident("d")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_mul32_64_mul16_32_10_t6ca9 (t6ca9 Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_10_t6ec2 (t6ec2 Index("f", Number(0n1/0x01u8))) Reg(U8) Some([93])
# Var inline_mul32_64_mul16_32_10_t8575 (t8575 Index("d", Number(0n2/0x02u8))) Reg(U8) Some([92])
# Var inline_mul32_64_mul16_32_10_t8792 (t8792 Ident("a")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_mul16_32_10_t9922 (t9922 Index("f", Number(0n0/0x00u8))) Reg(U8) Some([93])
# Var inline_mul32_64_mul16_32_10_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_mul16_32_10_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([94]) Number(0n0/0x00u8)
# Var inline_mul32_64_mul16_32_10_tac13 (tac13 Ident("c")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_10_tace9 (tace9 Ident("b")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_mul32_64_mul16_32_10_tb9f0 (tb9f0 Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_mul16_32_10_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_10_te47a (te47a Index("b", Number(0n1/0x01u8))) Reg(U8) Some([95])
# Var inline_mul32_64_mul16_32_11_a (Arg0 a Number(U32)) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_mul16_32_11_b (Arg1 b Number(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_mul16_32_11_c (Local c Number(U32) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_mul32_64_mul16_32_11_d (Local d Number(U32) Reg(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_mul32_64_mul16_32_11_e (Local e Number(U32) Reg(U32)) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_mul16_32_11_f (Local f Number(U32) Reg(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_mul32_64_mul16_32_11_t3009 (t3009 Index("a", Number(0n1/0x01u8))) Reg(U8) Some([96])
# Var inline_mul32_64_mul16_32_11_t30b9 (t30b9 Index("d", Number(0n0/0x00u8))) Reg(U8) Some([96])
# Var inline_mul32_64_mul16_32_11_t34f7 (t34f7 Index("d", Number(0n1/0x01u8))) Reg(U8) Some([96])
# Var inline_mul32_64_mul16_32_11_t3585 (t3585 Ident("e")) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_mul16_32_11_t45f5 (t45f5 Ident("d")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_mul16_32_11_t6ca9 (t6ca9 Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_mul32_64_mul16_32_11_t6ec2 (t6ec2 Index("f", Number(0n1/0x01u8))) Reg(U8) Some([97])
# Var inline_mul32_64_mul16_32_11_t8575 (t8575 Index("d", Number(0n2/0x02u8))) Reg(U8) Some([96])
# Var inline_mul32_64_mul16_32_11_t8792 (t8792 Ident("a")) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_mul16_32_11_t9922 (t9922 Index("f", Number(0n0/0x00u8))) Reg(U8) Some([97])
# Var inline_mul32_64_mul16_32_11_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_mul16_32_11_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([98]) Number(0n0/0x00u8)
# Var inline_mul32_64_mul16_32_11_tac13 (tac13 Ident("c")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_mul32_64_mul16_32_11_tace9 (tace9 Ident("b")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_mul16_32_11_tb9f0 (tb9f0 Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_11_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_mul32_64_mul16_32_11_te47a (te47a Index("b", Number(0n1/0x01u8))) Reg(U8) Some([92])
# Var inline_mul32_64_mul16_32_8_a (Arg0 a Number(U32)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_8_b (Arg1 b Number(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_8_c (Local c Number(U32) Reg(U32)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_mul16_32_8_d (Local d Number(U32) Reg(U32)) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_mul16_32_8_e (Local e Number(U32) Reg(U32)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_8_f (Local f Number(U32) Reg(U32)) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_mul16_32_8_t3009 (t3009 Index("a", Number(0n1/0x01u8))) Reg(U8) Some([98])
# Var inline_mul32_64_mul16_32_8_t30b9 (t30b9 Index("d", Number(0n0/0x00u8))) Reg(U8) Some([98])
# Var inline_mul32_64_mul16_32_8_t34f7 (t34f7 Index("d", Number(0n1/0x01u8))) Reg(U8) Some([98])
# Var inline_mul32_64_mul16_32_8_t3585 (t3585 Ident("e")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_8_t45f5 (t45f5 Ident("d")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_8_t6ca9 (t6ca9 Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_mul16_32_8_t6ec2 (t6ec2 Index("f", Number(0n1/0x01u8))) Reg(U8) Some([99])
# Var inline_mul32_64_mul16_32_8_t8575 (t8575 Index("d", Number(0n2/0x02u8))) Reg(U8) Some([98])
# Var inline_mul32_64_mul16_32_8_t8792 (t8792 Ident("a")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_8_t9922 (t9922 Index("f", Number(0n0/0x00u8))) Reg(U8) Some([99])
# Var inline_mul32_64_mul16_32_8_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_8_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([100]) Number(0n0/0x00u8)
# Var inline_mul32_64_mul16_32_8_tac13 (tac13 Ident("c")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_mul16_32_8_tace9 (tace9 Ident("b")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_8_tb9f0 (tb9f0 Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }) Reg(U32) Some([88, 89, 90, 91])
# Var inline_mul32_64_mul16_32_8_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_mul16_32_8_te47a (te47a Index("b", Number(0n1/0x01u8))) Reg(U8) Some([93])
# Var inline_mul32_64_mul16_32_9_a (Arg0 a Number(U32)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_9_b (Arg1 b Number(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_9_c (Local c Number(U32) Reg(U32)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_mul16_32_9_d (Local d Number(U32) Reg(U32)) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_mul16_32_9_e (Local e Number(U32) Reg(U32)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_9_f (Local f Number(U32) Reg(U32)) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_mul16_32_9_t3009 (t3009 Index("a", Number(0n1/0x01u8))) Reg(U8) Some([98])
# Var inline_mul32_64_mul16_32_9_t30b9 (t30b9 Index("d", Number(0n0/0x00u8))) Reg(U8) Some([98])
# Var inline_mul32_64_mul16_32_9_t34f7 (t34f7 Index("d", Number(0n1/0x01u8))) Reg(U8) Some([98])
# Var inline_mul32_64_mul16_32_9_t3585 (t3585 Ident("e")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_9_t45f5 (t45f5 Ident("d")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_9_t6ca9 (t6ca9 Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_mul16_32_9_t6ec2 (t6ec2 Index("f", Number(0n1/0x01u8))) Reg(U8) Some([99])
# Var inline_mul32_64_mul16_32_9_t8575 (t8575 Index("d", Number(0n2/0x02u8))) Reg(U8) Some([98])
# Var inline_mul32_64_mul16_32_9_t8792 (t8792 Ident("a")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_9_t9922 (t9922 Index("f", Number(0n0/0x00u8))) Reg(U8) Some([99])
# Var inline_mul32_64_mul16_32_9_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_9_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([100]) Number(0n0/0x00u8)
# Var inline_mul32_64_mul16_32_9_tac13 (tac13 Ident("c")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_mul16_32_9_tace9 (tace9 Ident("b")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_9_tb9f0 (tb9f0 Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }) Reg(U32) Some([88, 89, 90, 91])
# Var inline_mul32_64_mul16_32_9_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_mul16_32_9_te47a (te47a Index("b", Number(0n1/0x01u8))) Reg(U8) Some([93])
# Var t1335 (t1335 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }) Reg(U32) Some([104, 105, 106, 107])
# Var t3308 (t3308 Ident("temp_lo")) Reg(U32) Some([56, 57, 58, 59])
# Var t3970 (t3970 Index("temp", Number(0n2/0x02u8))) Reg(U8) Some([92])
# Var t3b02 (t3b02 Index("a", Number(0n2/0x02u8))) Reg(U8) Some([96])
# Var t3b80 (t3b80 Index("temp", Number(0n3/0x03u8))) Reg(U8) Some([92])
# Var t3d83 (t3d83 Index("temp", Number(0n1/0x01u8))) Reg(U8) Some([92])
# Var t3f2a (t3f2a Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }) Reg(U32) Some([56, 57, 58, 59])
# Var t41f5 (t41f5 Ident("temp_hi")) Reg(U32) Some([60, 61, 62, 63])
# Var t4a94 (t4a94 Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))) Reg(U32) Some([56, 57, 58, 59])
# Var t5a04 (t5a04 Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })) Reg(U32) Some([72, 73, 74, 75])
# Var t5cca (t5cca Ident("b_hi")) Reg(U32) Some([64, 65, 66, 67])
# Var t720d (t720d Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })) Reg(U32) Some([72, 73, 74, 75])
# Var t82cc (t82cc Index("b", Number(0n2/0x02u8))) Reg(U8) Some([95])
# Var t8792 (t8792 Ident("a")) Reg(U32) Some([52, 53, 54, 55])
# Var t8fbd (t8fbd Ident("a_hi")) Reg(U32) Some([56, 57, 58, 59])
# Var t9186 (t9186 Index("temp", Number(0n0/0x00u8))) Reg(U8) Some([92])
# Var t94df (t94df Index("a", Number(0n3/0x03u8))) Reg(U8) Some([96])
# Var ta5f7 (ta5f7 Index("b", Number(0n3/0x03u8))) Reg(U8) Some([95])
# Var tac13 (tac13 Ident("c")) Reg(U32) Some([68, 69, 70, 71])
# Var tace9 (tace9 Ident("b")) Reg(U32) Some([60, 61, 62, 63])
# Var te546 (te546 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Ident("__frame_pointer") }) Reg(U32) Some([108, 109, 110, 111])
# Var te825 (te825 Ident("__frame_pointer")) Reg(U32) Some([108, 109, 110, 111])
# Var temp (Local temp Number(U32) Reg(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var temp_hi (Local temp_hi Number(U32) Reg(U32)) Reg(U32) Some([104, 105, 106, 107])
# Var temp_lo (Local temp_lo Number(U32) Reg(U32)) Reg(U32) Some([112, 113, 114, 115])
# Var tf4b2 (tf4b2 AddressOf(Ident("temp64"))) Reg(U32) Some([60, 61, 62, 63])
# 022eb AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffff8=4294967288)]
#       reserve 8 bytes of stack space for locals
32 0c f8 ff ff ff 

# 022f1 Copy32 [Register(0x00), Register(0x34)]
#       Save function parameter 'a' registers [0, 1, 2, 3] to locals [52, 53, 54, 55].
21 00 34 

# 022f4 Copy32 [Register(0x04), Register(0x3c)]
#       Save function parameter 'b' registers [4, 5, 6, 7] to locals [60, 61, 62, 63].
21 04 3c 

# 022f7 Copy32 [Register(0x08), Register(0x44)]
#       Save function parameter 'c' registers [8, 9, 10, 11] to locals [68, 69, 70, 71].
21 08 44 

# __frame_pointer <- __frame_pointer Add Number(0xfffffff8u32) None
# 022fa AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffff8=4294967288)]
#       __frame_pointer <- __frame_pointer Add Number(0xfffffff8u32) None
32 0c f8 ff ff ff 

# a_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(58,5))
# Assign { target: Ident("a_hi"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 02300 LoadImm32 [Register(0x38), Constant32(0x00000000=0)]
#       a_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(58,5))
#       Assign { target: Ident("a_hi"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 38 00 00 00 00 

# t94df <- a[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(59,5))
# Assign { target: Index("a_hi", Number(0n1/0x01u8)), var_type: None, value: Index("a", Number(0n3/0x03u8)) }
# Index("a", Number(0n3/0x03u8))
# 02306 Copy8 [Register(0x37), Register(0x60)]
#       t94df <- a[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(59,5))
#       Assign { target: Index("a_hi", Number(0n1/0x01u8)), var_type: None, value: Index("a", Number(0n3/0x03u8)) }
#       Index("a", Number(0n3/0x03u8))
0b 37 60 

# a_hi[0x01..0x02] <- t94df U8 Some('/lutcomp/programs/lib/mul.j':(59,5))
# Assign { target: Index("a_hi", Number(0n1/0x01u8)), var_type: None, value: Index("a", Number(0n3/0x03u8)) }
# 02309 Copy8 [Register(0x60), Register(0x39)]
#       a_hi[0x01..0x02] <- t94df U8 Some('/lutcomp/programs/lib/mul.j':(59,5))
#       Assign { target: Index("a_hi", Number(0n1/0x01u8)), var_type: None, value: Index("a", Number(0n3/0x03u8)) }
0b 60 39 

# t3b02 <- a[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(60,5))
# Assign { target: Index("a_hi", Number(0n0/0x00u8)), var_type: None, value: Index("a", Number(0n2/0x02u8)) }
# Index("a", Number(0n2/0x02u8))
# 0230c Copy8 [Register(0x36), Register(0x60)]
#       t3b02 <- a[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(60,5))
#       Assign { target: Index("a_hi", Number(0n0/0x00u8)), var_type: None, value: Index("a", Number(0n2/0x02u8)) }
#       Index("a", Number(0n2/0x02u8))
0b 36 60 

# a_hi[0x00..0x01] <- t3b02 U8 Some('/lutcomp/programs/lib/mul.j':(60,5))
# Assign { target: Index("a_hi", Number(0n0/0x00u8)), var_type: None, value: Index("a", Number(0n2/0x02u8)) }
# 0230f Copy8 [Register(0x60), Register(0x38)]
#       a_hi[0x00..0x01] <- t3b02 U8 Some('/lutcomp/programs/lib/mul.j':(60,5))
#       Assign { target: Index("a_hi", Number(0n0/0x00u8)), var_type: None, value: Index("a", Number(0n2/0x02u8)) }
0b 60 38 

# b_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(62,5))
# Assign { target: Ident("b_hi"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 02312 LoadImm32 [Register(0x40), Constant32(0x00000000=0)]
#       b_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(62,5))
#       Assign { target: Ident("b_hi"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 40 00 00 00 00 

# ta5f7 <- b[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(63,5))
# Assign { target: Index("b_hi", Number(0n1/0x01u8)), var_type: None, value: Index("b", Number(0n3/0x03u8)) }
# Index("b", Number(0n3/0x03u8))
# 02318 Copy8 [Register(0x3f), Register(0x5f)]
#       ta5f7 <- b[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(63,5))
#       Assign { target: Index("b_hi", Number(0n1/0x01u8)), var_type: None, value: Index("b", Number(0n3/0x03u8)) }
#       Index("b", Number(0n3/0x03u8))
0b 3f 5f 

# b_hi[0x01..0x02] <- ta5f7 U8 Some('/lutcomp/programs/lib/mul.j':(63,5))
# Assign { target: Index("b_hi", Number(0n1/0x01u8)), var_type: None, value: Index("b", Number(0n3/0x03u8)) }
# 0231b Copy8 [Register(0x5f), Register(0x41)]
#       b_hi[0x01..0x02] <- ta5f7 U8 Some('/lutcomp/programs/lib/mul.j':(63,5))
#       Assign { target: Index("b_hi", Number(0n1/0x01u8)), var_type: None, value: Index("b", Number(0n3/0x03u8)) }
0b 5f 41 

# t82cc <- b[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(64,5))
# Assign { target: Index("b_hi", Number(0n0/0x00u8)), var_type: None, value: Index("b", Number(0n2/0x02u8)) }
# Index("b", Number(0n2/0x02u8))
# 0231e Copy8 [Register(0x3e), Register(0x5f)]
#       t82cc <- b[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(64,5))
#       Assign { target: Index("b_hi", Number(0n0/0x00u8)), var_type: None, value: Index("b", Number(0n2/0x02u8)) }
#       Index("b", Number(0n2/0x02u8))
0b 3e 5f 

# b_hi[0x00..0x01] <- t82cc U8 Some('/lutcomp/programs/lib/mul.j':(64,5))
# Assign { target: Index("b_hi", Number(0n0/0x00u8)), var_type: None, value: Index("b", Number(0n2/0x02u8)) }
# 02321 Copy8 [Register(0x5f), Register(0x40)]
#       b_hi[0x00..0x01] <- t82cc U8 Some('/lutcomp/programs/lib/mul.j':(64,5))
#       Assign { target: Index("b_hi", Number(0n0/0x00u8)), var_type: None, value: Index("b", Number(0n2/0x02u8)) }
0b 5f 40 

# t8792 <- a U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/lutcomp/programs/lib/mul.j':(66,5))\nAssign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x34), Register(0x34)], resolved: None }
# tace9 <- b U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/lutcomp/programs/lib/mul.j':(66,5))\nAssign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_mul32_64_mul16_32_8_a <- t8792 U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# 02324 Copy32 [Register(0x34), Register(0x48)]
#       inline_mul32_64_mul16_32_8_a <- t8792 U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
21 34 48 

# inline_mul32_64_mul16_32_8_b <- tace9 U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# 02327 Copy32 [Register(0x3c), Register(0x4c)]
#       inline_mul32_64_mul16_32_8_b <- tace9 U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
21 3c 4c 

# inline_mul32_64_mul16_32_8_t8792 <- inline_mul32_64_mul16_32_8_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_t8792 <- inline_mul32_64_mul16_32_8_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_mul32_64_mul16_32_8_tace9 <- inline_mul32_64_mul16_32_8_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_tace9 <- inline_mul32_64_mul16_32_8_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 0232a Mul8_16 [Register(0x48), Register(0x4c), Register(0x50)]
#       inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 48 4c 50 

# 0232e LoadImm8 [Register(0x52), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 52 00 

# 02331 LoadImm8 [Register(0x53), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 53 00 

# inline_mul32_64_mul16_32_8_t3009 <- inline_mul32_64_mul16_32_8_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 02334 Copy8 [Register(0x49), Register(0x62)]
#       inline_mul32_64_mul16_32_8_t3009 <- inline_mul32_64_mul16_32_8_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 49 62 

# inline_mul32_64_mul16_32_8_tb9f0 U32 <- inline_mul32_64_mul16_32_8_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 02337 LoadImm32 [Register(0x58), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_8_tb9f0 U32 <- inline_mul32_64_mul16_32_8_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 58 00 00 00 00 

# 0233d Copy8 [Register(0x62), Register(0x58)]
#       inline_mul32_64_mul16_32_8_tb9f0 U32 <- inline_mul32_64_mul16_32_8_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 62 58 

# inline_mul32_64_mul16_32_8_te47a <- inline_mul32_64_mul16_32_8_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 02340 Copy8 [Register(0x4d), Register(0x5d)]
#       inline_mul32_64_mul16_32_8_te47a <- inline_mul32_64_mul16_32_8_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 4d 5d 

# inline_mul32_64_mul16_32_8_t6ca9 U32 <- inline_mul32_64_mul16_32_8_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 02343 LoadImm32 [Register(0x54), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_8_t6ca9 U32 <- inline_mul32_64_mul16_32_8_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 54 00 00 00 00 

# 02349 Copy8 [Register(0x5d), Register(0x54)]
#       inline_mul32_64_mul16_32_8_t6ca9 U32 <- inline_mul32_64_mul16_32_8_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 5d 54 

# inline_mul32_64_mul16_32_8_f <- inline_mul32_64_mul16_32_8_tb9f0 Multiply Var(inline_mul32_64_mul16_32_8_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 0234c Mul8_16 [Register(0x58), Register(0x54), Register(0x54)]
#       inline_mul32_64_mul16_32_8_f <- inline_mul32_64_mul16_32_8_tb9f0 Multiply Var(inline_mul32_64_mul16_32_8_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 58 54 54 

# 02350 LoadImm8 [Register(0x56), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_f <- inline_mul32_64_mul16_32_8_tb9f0 Multiply Var(inline_mul32_64_mul16_32_8_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 56 00 

# 02353 LoadImm8 [Register(0x57), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_f <- inline_mul32_64_mul16_32_8_tb9f0 Multiply Var(inline_mul32_64_mul16_32_8_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 57 00 

# inline_mul32_64_mul16_32_8_t6ec2 <- inline_mul32_64_mul16_32_8_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# Index("f", Number(0n1/0x01u8))
# 02356 Copy8 [Register(0x55), Register(0x63)]
#       inline_mul32_64_mul16_32_8_t6ec2 <- inline_mul32_64_mul16_32_8_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
#       Index("f", Number(0n1/0x01u8))
0b 55 63 

# inline_mul32_64_mul16_32_8_f[0x03..0x04] <- inline_mul32_64_mul16_32_8_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# 02359 Copy8 [Register(0x63), Register(0x57)]
#       inline_mul32_64_mul16_32_8_f[0x03..0x04] <- inline_mul32_64_mul16_32_8_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
0b 63 57 

# inline_mul32_64_mul16_32_8_t9922 <- inline_mul32_64_mul16_32_8_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# Index("f", Number(0n0/0x00u8))
# 0235c Copy8 [Register(0x54), Register(0x63)]
#       inline_mul32_64_mul16_32_8_t9922 <- inline_mul32_64_mul16_32_8_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
#       Index("f", Number(0n0/0x00u8))
0b 54 63 

# inline_mul32_64_mul16_32_8_f[0x02..0x03] <- inline_mul32_64_mul16_32_8_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# 0235f Copy8 [Register(0x63), Register(0x56)]
#       inline_mul32_64_mul16_32_8_f[0x02..0x03] <- inline_mul32_64_mul16_32_8_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
0b 63 56 

# inline_mul32_64_mul16_32_8_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 02362 LoadImm8 [Register(0x64), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 64 00 

# inline_mul32_64_mul16_32_8_f[0x01..0x02] <- inline_mul32_64_mul16_32_8_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# 02365 Copy8 [Register(0x64), Register(0x55)]
#       inline_mul32_64_mul16_32_8_f[0x01..0x02] <- inline_mul32_64_mul16_32_8_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
0b 64 55 

# inline_mul32_64_mul16_32_8_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 02368 LoadImm8 [Register(0x64), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 64 00 

# inline_mul32_64_mul16_32_8_f[0x00..0x01] <- inline_mul32_64_mul16_32_8_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# 0236b Copy8 [Register(0x64), Register(0x54)]
#       inline_mul32_64_mul16_32_8_f[0x00..0x01] <- inline_mul32_64_mul16_32_8_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
0b 64 54 

# inline_mul32_64_mul16_32_8_tac13 <- inline_mul32_64_mul16_32_8_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_tac13 <- inline_mul32_64_mul16_32_8_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_mul32_64_mul16_32_8_tcbd4 <- inline_mul32_64_mul16_32_8_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_tcbd4 <- inline_mul32_64_mul16_32_8_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 0236e ClearCarry []
#       inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 0236f AddCarry32_1 [Register(0x50), Register(0x54), Register(0x50)]
#       inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 50 54 50 

# 02373 AddCarry32_2 []
#       inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_mul32_64_mul16_32_8_t8792 <- inline_mul32_64_mul16_32_8_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_t8792 <- inline_mul32_64_mul16_32_8_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_mul32_64_mul16_32_8_te47a <- inline_mul32_64_mul16_32_8_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 02374 Copy8 [Register(0x4d), Register(0x5d)]
#       inline_mul32_64_mul16_32_8_te47a <- inline_mul32_64_mul16_32_8_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 4d 5d 

# inline_mul32_64_mul16_32_8_t6ca9 U32 <- inline_mul32_64_mul16_32_8_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 02377 LoadImm32 [Register(0x54), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_8_t6ca9 U32 <- inline_mul32_64_mul16_32_8_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 54 00 00 00 00 

# 0237d Copy8 [Register(0x5d), Register(0x54)]
#       inline_mul32_64_mul16_32_8_t6ca9 U32 <- inline_mul32_64_mul16_32_8_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 5d 54 

# inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 02380 Mul8_16 [Register(0x48), Register(0x54), Register(0x54)]
#       inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 48 54 54 

# 02384 LoadImm8 [Register(0x56), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 56 00 

# 02387 LoadImm8 [Register(0x57), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 57 00 

# inline_mul32_64_mul16_32_8_t3009 <- inline_mul32_64_mul16_32_8_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 0238a Copy8 [Register(0x49), Register(0x62)]
#       inline_mul32_64_mul16_32_8_t3009 <- inline_mul32_64_mul16_32_8_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 49 62 

# inline_mul32_64_mul16_32_8_tb9f0 U32 <- inline_mul32_64_mul16_32_8_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 0238d LoadImm32 [Register(0x58), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_8_tb9f0 U32 <- inline_mul32_64_mul16_32_8_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 58 00 00 00 00 

# 02393 Copy8 [Register(0x62), Register(0x58)]
#       inline_mul32_64_mul16_32_8_tb9f0 U32 <- inline_mul32_64_mul16_32_8_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 62 58 

# inline_mul32_64_mul16_32_8_tace9 <- inline_mul32_64_mul16_32_8_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_tace9 <- inline_mul32_64_mul16_32_8_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_mul32_64_mul16_32_8_e <- inline_mul32_64_mul16_32_8_tb9f0 Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# 02396 Mul8_16 [Register(0x58), Register(0x4c), Register(0x48)]
#       inline_mul32_64_mul16_32_8_e <- inline_mul32_64_mul16_32_8_tb9f0 Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
11 58 4c 48 

# 0239a LoadImm8 [Register(0x4a), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_e <- inline_mul32_64_mul16_32_8_tb9f0 Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 4a 00 

# 0239d LoadImm8 [Register(0x4b), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_e <- inline_mul32_64_mul16_32_8_tb9f0 Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 4b 00 

# inline_mul32_64_mul16_32_8_t45f5 <- inline_mul32_64_mul16_32_8_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 023a0 Copy32 [Register(0x54), Register(0x4c)]
#       inline_mul32_64_mul16_32_8_t45f5 <- inline_mul32_64_mul16_32_8_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 54 4c 

# inline_mul32_64_mul16_32_8_t3585 <- inline_mul32_64_mul16_32_8_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_t3585 <- inline_mul32_64_mul16_32_8_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t45f5 Add Var(inline_mul32_64_mul16_32_8_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 023a3 ClearCarry []
#       inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t45f5 Add Var(inline_mul32_64_mul16_32_8_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 023a4 AddCarry32_1 [Register(0x4c), Register(0x48), Register(0x54)]
#       inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t45f5 Add Var(inline_mul32_64_mul16_32_8_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 4c 48 54 

# 023a8 AddCarry32_2 []
#       inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t45f5 Add Var(inline_mul32_64_mul16_32_8_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_mul32_64_mul16_32_8_t8575 <- inline_mul32_64_mul16_32_8_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# Index("d", Number(0n2/0x02u8))
# 023a9 Copy8 [Register(0x56), Register(0x62)]
#       inline_mul32_64_mul16_32_8_t8575 <- inline_mul32_64_mul16_32_8_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
#       Index("d", Number(0n2/0x02u8))
0b 56 62 

# inline_mul32_64_mul16_32_8_d[0x03..0x04] <- inline_mul32_64_mul16_32_8_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# 023ac Copy8 [Register(0x62), Register(0x57)]
#       inline_mul32_64_mul16_32_8_d[0x03..0x04] <- inline_mul32_64_mul16_32_8_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
0b 62 57 

# inline_mul32_64_mul16_32_8_t34f7 <- inline_mul32_64_mul16_32_8_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# Index("d", Number(0n1/0x01u8))
# 023af Copy8 [Register(0x55), Register(0x62)]
#       inline_mul32_64_mul16_32_8_t34f7 <- inline_mul32_64_mul16_32_8_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
#       Index("d", Number(0n1/0x01u8))
0b 55 62 

# inline_mul32_64_mul16_32_8_d[0x02..0x03] <- inline_mul32_64_mul16_32_8_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# 023b2 Copy8 [Register(0x62), Register(0x56)]
#       inline_mul32_64_mul16_32_8_d[0x02..0x03] <- inline_mul32_64_mul16_32_8_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
0b 62 56 

# inline_mul32_64_mul16_32_8_t30b9 <- inline_mul32_64_mul16_32_8_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# Index("d", Number(0n0/0x00u8))
# 023b5 Copy8 [Register(0x54), Register(0x62)]
#       inline_mul32_64_mul16_32_8_t30b9 <- inline_mul32_64_mul16_32_8_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
#       Index("d", Number(0n0/0x00u8))
0b 54 62 

# inline_mul32_64_mul16_32_8_d[0x01..0x02] <- inline_mul32_64_mul16_32_8_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# 023b8 Copy8 [Register(0x62), Register(0x55)]
#       inline_mul32_64_mul16_32_8_d[0x01..0x02] <- inline_mul32_64_mul16_32_8_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
0b 62 55 

# inline_mul32_64_mul16_32_8_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 023bb LoadImm8 [Register(0x64), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 64 00 

# inline_mul32_64_mul16_32_8_d[0x00..0x01] <- inline_mul32_64_mul16_32_8_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# 023be Copy8 [Register(0x64), Register(0x54)]
#       inline_mul32_64_mul16_32_8_d[0x00..0x01] <- inline_mul32_64_mul16_32_8_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
0b 64 54 

# inline_mul32_64_mul16_32_8_tac13 <- inline_mul32_64_mul16_32_8_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_tac13 <- inline_mul32_64_mul16_32_8_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_mul32_64_mul16_32_8_t45f5 <- inline_mul32_64_mul16_32_8_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 023c1 Copy32 [Register(0x54), Register(0x4c)]
#       inline_mul32_64_mul16_32_8_t45f5 <- inline_mul32_64_mul16_32_8_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 54 4c 

# inline_mul32_64_mul16_32_8_ta65d <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 023c4 ClearCarry []
#       inline_mul32_64_mul16_32_8_ta65d <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 023c5 AddCarry32_1 [Register(0x50), Register(0x4c), Register(0x48)]
#       inline_mul32_64_mul16_32_8_ta65d <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 50 4c 48 

# 023c9 AddCarry32_2 []
#       inline_mul32_64_mul16_32_8_ta65d <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# t720d <- inline_mul32_64_mul16_32_8_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# optimized away noop copy Instruction { source: "t720d <- inline_mul32_64_mul16_32_8_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# goto inline_mul32_64_mul16_32_8_function_end_mul16_32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_mul32_64_mul16_32_8_function_end_mul16_32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: JmpImm, args: [Label24(inline_mul32_64_mul16_32_8_function_end_mul16_32)], resolved: None }
# :inline_mul32_64_mul16_32_8_function_end_mul16_32 None
# inline_mul32_64_mul16_32_8_function_end_mul16_32
# mem[c] <- t720d U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# 023ca Store32_1 [Register(0x48), Register(0x44)]
#       mem[c] <- t720d U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
23 48 44 

# 023cd Store32_2 []
#       mem[c] <- t720d U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
24 

# t1335 <- c Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(67,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# 023ce Copy32 [Register(0x44), Register(0x68)]
#       t1335 <- c Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(67,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
21 44 68 

# 023d1 AddImm32IgnoreCarry [Register(0x68), Constant32(0x00000004=4)]
#       t1335 <- c Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(67,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
32 68 04 00 00 00 

# t8fbd <- a_hi U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })
# Ident("a_hi")
# optimized away noop copy Instruction { source: "t8fbd <- a_hi U32 Some('/lutcomp/programs/lib/mul.j':(67,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] })\nIdent(\"a_hi\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# t5cca <- b_hi U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })
# Ident("b_hi")
# optimized away noop copy Instruction { source: "t5cca <- b_hi U32 Some('/lutcomp/programs/lib/mul.j':(67,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] })\nIdent(\"b_hi\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_mul32_64_mul16_32_9_a <- t8fbd U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })
# 023d7 Copy32 [Register(0x38), Register(0x48)]
#       inline_mul32_64_mul16_32_9_a <- t8fbd U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })
21 38 48 

# inline_mul32_64_mul16_32_9_b <- t5cca U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })
# 023da Copy32 [Register(0x40), Register(0x4c)]
#       inline_mul32_64_mul16_32_9_b <- t5cca U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })
21 40 4c 

# inline_mul32_64_mul16_32_9_t8792 <- inline_mul32_64_mul16_32_9_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_t8792 <- inline_mul32_64_mul16_32_9_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_mul32_64_mul16_32_9_tace9 <- inline_mul32_64_mul16_32_9_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_tace9 <- inline_mul32_64_mul16_32_9_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 023dd Mul8_16 [Register(0x48), Register(0x4c), Register(0x50)]
#       inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 48 4c 50 

# 023e1 LoadImm8 [Register(0x52), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 52 00 

# 023e4 LoadImm8 [Register(0x53), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 53 00 

# inline_mul32_64_mul16_32_9_t3009 <- inline_mul32_64_mul16_32_9_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 023e7 Copy8 [Register(0x49), Register(0x62)]
#       inline_mul32_64_mul16_32_9_t3009 <- inline_mul32_64_mul16_32_9_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 49 62 

# inline_mul32_64_mul16_32_9_tb9f0 U32 <- inline_mul32_64_mul16_32_9_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 023ea LoadImm32 [Register(0x58), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_9_tb9f0 U32 <- inline_mul32_64_mul16_32_9_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 58 00 00 00 00 

# 023f0 Copy8 [Register(0x62), Register(0x58)]
#       inline_mul32_64_mul16_32_9_tb9f0 U32 <- inline_mul32_64_mul16_32_9_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 62 58 

# inline_mul32_64_mul16_32_9_te47a <- inline_mul32_64_mul16_32_9_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 023f3 Copy8 [Register(0x4d), Register(0x5d)]
#       inline_mul32_64_mul16_32_9_te47a <- inline_mul32_64_mul16_32_9_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 4d 5d 

# inline_mul32_64_mul16_32_9_t6ca9 U32 <- inline_mul32_64_mul16_32_9_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 023f6 LoadImm32 [Register(0x54), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_9_t6ca9 U32 <- inline_mul32_64_mul16_32_9_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 54 00 00 00 00 

# 023fc Copy8 [Register(0x5d), Register(0x54)]
#       inline_mul32_64_mul16_32_9_t6ca9 U32 <- inline_mul32_64_mul16_32_9_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 5d 54 

# inline_mul32_64_mul16_32_9_f <- inline_mul32_64_mul16_32_9_tb9f0 Multiply Var(inline_mul32_64_mul16_32_9_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 023ff Mul8_16 [Register(0x58), Register(0x54), Register(0x54)]
#       inline_mul32_64_mul16_32_9_f <- inline_mul32_64_mul16_32_9_tb9f0 Multiply Var(inline_mul32_64_mul16_32_9_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 58 54 54 

# 02403 LoadImm8 [Register(0x56), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_f <- inline_mul32_64_mul16_32_9_tb9f0 Multiply Var(inline_mul32_64_mul16_32_9_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 56 00 

# 02406 LoadImm8 [Register(0x57), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_f <- inline_mul32_64_mul16_32_9_tb9f0 Multiply Var(inline_mul32_64_mul16_32_9_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 57 00 

# inline_mul32_64_mul16_32_9_t6ec2 <- inline_mul32_64_mul16_32_9_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# Index("f", Number(0n1/0x01u8))
# 02409 Copy8 [Register(0x55), Register(0x63)]
#       inline_mul32_64_mul16_32_9_t6ec2 <- inline_mul32_64_mul16_32_9_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
#       Index("f", Number(0n1/0x01u8))
0b 55 63 

# inline_mul32_64_mul16_32_9_f[0x03..0x04] <- inline_mul32_64_mul16_32_9_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# 0240c Copy8 [Register(0x63), Register(0x57)]
#       inline_mul32_64_mul16_32_9_f[0x03..0x04] <- inline_mul32_64_mul16_32_9_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
0b 63 57 

# inline_mul32_64_mul16_32_9_t9922 <- inline_mul32_64_mul16_32_9_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# Index("f", Number(0n0/0x00u8))
# 0240f Copy8 [Register(0x54), Register(0x63)]
#       inline_mul32_64_mul16_32_9_t9922 <- inline_mul32_64_mul16_32_9_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
#       Index("f", Number(0n0/0x00u8))
0b 54 63 

# inline_mul32_64_mul16_32_9_f[0x02..0x03] <- inline_mul32_64_mul16_32_9_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# 02412 Copy8 [Register(0x63), Register(0x56)]
#       inline_mul32_64_mul16_32_9_f[0x02..0x03] <- inline_mul32_64_mul16_32_9_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
0b 63 56 

# inline_mul32_64_mul16_32_9_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 02415 LoadImm8 [Register(0x64), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 64 00 

# inline_mul32_64_mul16_32_9_f[0x01..0x02] <- inline_mul32_64_mul16_32_9_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# 02418 Copy8 [Register(0x64), Register(0x55)]
#       inline_mul32_64_mul16_32_9_f[0x01..0x02] <- inline_mul32_64_mul16_32_9_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
0b 64 55 

# inline_mul32_64_mul16_32_9_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 0241b LoadImm8 [Register(0x64), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 64 00 

# inline_mul32_64_mul16_32_9_f[0x00..0x01] <- inline_mul32_64_mul16_32_9_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# 0241e Copy8 [Register(0x64), Register(0x54)]
#       inline_mul32_64_mul16_32_9_f[0x00..0x01] <- inline_mul32_64_mul16_32_9_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
0b 64 54 

# inline_mul32_64_mul16_32_9_tac13 <- inline_mul32_64_mul16_32_9_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_tac13 <- inline_mul32_64_mul16_32_9_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_mul32_64_mul16_32_9_tcbd4 <- inline_mul32_64_mul16_32_9_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_tcbd4 <- inline_mul32_64_mul16_32_9_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 02421 ClearCarry []
#       inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 02422 AddCarry32_1 [Register(0x50), Register(0x54), Register(0x50)]
#       inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 50 54 50 

# 02426 AddCarry32_2 []
#       inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_mul32_64_mul16_32_9_t8792 <- inline_mul32_64_mul16_32_9_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_t8792 <- inline_mul32_64_mul16_32_9_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_mul32_64_mul16_32_9_te47a <- inline_mul32_64_mul16_32_9_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 02427 Copy8 [Register(0x4d), Register(0x5d)]
#       inline_mul32_64_mul16_32_9_te47a <- inline_mul32_64_mul16_32_9_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 4d 5d 

# inline_mul32_64_mul16_32_9_t6ca9 U32 <- inline_mul32_64_mul16_32_9_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 0242a LoadImm32 [Register(0x54), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_9_t6ca9 U32 <- inline_mul32_64_mul16_32_9_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 54 00 00 00 00 

# 02430 Copy8 [Register(0x5d), Register(0x54)]
#       inline_mul32_64_mul16_32_9_t6ca9 U32 <- inline_mul32_64_mul16_32_9_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 5d 54 

# inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 02433 Mul8_16 [Register(0x48), Register(0x54), Register(0x54)]
#       inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 48 54 54 

# 02437 LoadImm8 [Register(0x56), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 56 00 

# 0243a LoadImm8 [Register(0x57), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 57 00 

# inline_mul32_64_mul16_32_9_t3009 <- inline_mul32_64_mul16_32_9_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 0243d Copy8 [Register(0x49), Register(0x62)]
#       inline_mul32_64_mul16_32_9_t3009 <- inline_mul32_64_mul16_32_9_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 49 62 

# inline_mul32_64_mul16_32_9_tb9f0 U32 <- inline_mul32_64_mul16_32_9_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 02440 LoadImm32 [Register(0x58), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_9_tb9f0 U32 <- inline_mul32_64_mul16_32_9_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 58 00 00 00 00 

# 02446 Copy8 [Register(0x62), Register(0x58)]
#       inline_mul32_64_mul16_32_9_tb9f0 U32 <- inline_mul32_64_mul16_32_9_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 62 58 

# inline_mul32_64_mul16_32_9_tace9 <- inline_mul32_64_mul16_32_9_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_tace9 <- inline_mul32_64_mul16_32_9_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_mul32_64_mul16_32_9_e <- inline_mul32_64_mul16_32_9_tb9f0 Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# 02449 Mul8_16 [Register(0x58), Register(0x4c), Register(0x48)]
#       inline_mul32_64_mul16_32_9_e <- inline_mul32_64_mul16_32_9_tb9f0 Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
11 58 4c 48 

# 0244d LoadImm8 [Register(0x4a), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_e <- inline_mul32_64_mul16_32_9_tb9f0 Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 4a 00 

# 02450 LoadImm8 [Register(0x4b), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_e <- inline_mul32_64_mul16_32_9_tb9f0 Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 4b 00 

# inline_mul32_64_mul16_32_9_t45f5 <- inline_mul32_64_mul16_32_9_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 02453 Copy32 [Register(0x54), Register(0x4c)]
#       inline_mul32_64_mul16_32_9_t45f5 <- inline_mul32_64_mul16_32_9_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 54 4c 

# inline_mul32_64_mul16_32_9_t3585 <- inline_mul32_64_mul16_32_9_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_t3585 <- inline_mul32_64_mul16_32_9_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t45f5 Add Var(inline_mul32_64_mul16_32_9_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 02456 ClearCarry []
#       inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t45f5 Add Var(inline_mul32_64_mul16_32_9_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 02457 AddCarry32_1 [Register(0x4c), Register(0x48), Register(0x54)]
#       inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t45f5 Add Var(inline_mul32_64_mul16_32_9_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 4c 48 54 

# 0245b AddCarry32_2 []
#       inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t45f5 Add Var(inline_mul32_64_mul16_32_9_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_mul32_64_mul16_32_9_t8575 <- inline_mul32_64_mul16_32_9_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# Index("d", Number(0n2/0x02u8))
# 0245c Copy8 [Register(0x56), Register(0x62)]
#       inline_mul32_64_mul16_32_9_t8575 <- inline_mul32_64_mul16_32_9_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
#       Index("d", Number(0n2/0x02u8))
0b 56 62 

# inline_mul32_64_mul16_32_9_d[0x03..0x04] <- inline_mul32_64_mul16_32_9_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# 0245f Copy8 [Register(0x62), Register(0x57)]
#       inline_mul32_64_mul16_32_9_d[0x03..0x04] <- inline_mul32_64_mul16_32_9_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
0b 62 57 

# inline_mul32_64_mul16_32_9_t34f7 <- inline_mul32_64_mul16_32_9_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# Index("d", Number(0n1/0x01u8))
# 02462 Copy8 [Register(0x55), Register(0x62)]
#       inline_mul32_64_mul16_32_9_t34f7 <- inline_mul32_64_mul16_32_9_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
#       Index("d", Number(0n1/0x01u8))
0b 55 62 

# inline_mul32_64_mul16_32_9_d[0x02..0x03] <- inline_mul32_64_mul16_32_9_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# 02465 Copy8 [Register(0x62), Register(0x56)]
#       inline_mul32_64_mul16_32_9_d[0x02..0x03] <- inline_mul32_64_mul16_32_9_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
0b 62 56 

# inline_mul32_64_mul16_32_9_t30b9 <- inline_mul32_64_mul16_32_9_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# Index("d", Number(0n0/0x00u8))
# 02468 Copy8 [Register(0x54), Register(0x62)]
#       inline_mul32_64_mul16_32_9_t30b9 <- inline_mul32_64_mul16_32_9_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
#       Index("d", Number(0n0/0x00u8))
0b 54 62 

# inline_mul32_64_mul16_32_9_d[0x01..0x02] <- inline_mul32_64_mul16_32_9_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# 0246b Copy8 [Register(0x62), Register(0x55)]
#       inline_mul32_64_mul16_32_9_d[0x01..0x02] <- inline_mul32_64_mul16_32_9_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
0b 62 55 

# inline_mul32_64_mul16_32_9_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 0246e LoadImm8 [Register(0x64), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 64 00 

# inline_mul32_64_mul16_32_9_d[0x00..0x01] <- inline_mul32_64_mul16_32_9_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# 02471 Copy8 [Register(0x64), Register(0x54)]
#       inline_mul32_64_mul16_32_9_d[0x00..0x01] <- inline_mul32_64_mul16_32_9_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
0b 64 54 

# inline_mul32_64_mul16_32_9_tac13 <- inline_mul32_64_mul16_32_9_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_tac13 <- inline_mul32_64_mul16_32_9_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_mul32_64_mul16_32_9_t45f5 <- inline_mul32_64_mul16_32_9_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 02474 Copy32 [Register(0x54), Register(0x4c)]
#       inline_mul32_64_mul16_32_9_t45f5 <- inline_mul32_64_mul16_32_9_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 54 4c 

# inline_mul32_64_mul16_32_9_ta65d <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 02477 ClearCarry []
#       inline_mul32_64_mul16_32_9_ta65d <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 02478 AddCarry32_1 [Register(0x50), Register(0x4c), Register(0x48)]
#       inline_mul32_64_mul16_32_9_ta65d <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 50 4c 48 

# 0247c AddCarry32_2 []
#       inline_mul32_64_mul16_32_9_ta65d <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# t5a04 <- inline_mul32_64_mul16_32_9_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# optimized away noop copy Instruction { source: "t5a04 <- inline_mul32_64_mul16_32_9_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# goto inline_mul32_64_mul16_32_9_function_end_mul16_32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_mul32_64_mul16_32_9_function_end_mul16_32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: JmpImm, args: [Label24(inline_mul32_64_mul16_32_9_function_end_mul16_32)], resolved: None }
# :inline_mul32_64_mul16_32_9_function_end_mul16_32 None
# inline_mul32_64_mul16_32_9_function_end_mul16_32
# mem[t1335] <- t5a04 U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
# 0247d Store32_1 [Register(0x48), Register(0x68)]
#       mem[t1335] <- t5a04 U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
23 48 68 

# 02480 Store32_2 []
#       mem[t1335] <- t5a04 U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
24 

# temp_lo <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(71,5))
# Assign { target: Ident("temp_lo"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 02481 LoadImm32 [Register(0x70), Constant32(0x00000000=0)]
#       temp_lo <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(71,5))
#       Assign { target: Ident("temp_lo"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 70 00 00 00 00 

# temp_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(72,5))
# Assign { target: Ident("temp_hi"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 02487 LoadImm32 [Register(0x68), Constant32(0x00000000=0)]
#       temp_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(72,5))
#       Assign { target: Ident("temp_hi"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 68 00 00 00 00 

# t8fbd <- a_hi U32 Some('/lutcomp/programs/lib/mul.j':(74,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# Ident("a_hi")
# optimized away noop copy Instruction { source: "t8fbd <- a_hi U32 Some('/lutcomp/programs/lib/mul.j':(74,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\nIdent(\"a_hi\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# tace9 <- b U32 Some('/lutcomp/programs/lib/mul.j':(74,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/lutcomp/programs/lib/mul.j':(74,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_mul32_64_mul16_32_10_a <- t8fbd U32 Some('/lutcomp/programs/lib/mul.j':(74,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_a <- t8fbd U32 Some('/lutcomp/programs/lib/mul.j':(74,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_mul32_64_mul16_32_10_b <- tace9 U32 Some('/lutcomp/programs/lib/mul.j':(74,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_b <- tace9 U32 Some('/lutcomp/programs/lib/mul.j':(74,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_mul32_64_mul16_32_10_t8792 <- inline_mul32_64_mul16_32_10_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_t8792 <- inline_mul32_64_mul16_32_10_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_mul32_64_mul16_32_10_tace9 <- inline_mul32_64_mul16_32_10_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_tace9 <- inline_mul32_64_mul16_32_10_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 0248d Mul8_16 [Register(0x38), Register(0x3c), Register(0x48)]
#       inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 38 3c 48 

# 02491 LoadImm8 [Register(0x4a), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 4a 00 

# 02494 LoadImm8 [Register(0x4b), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 4b 00 

# inline_mul32_64_mul16_32_10_t3009 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 02497 Copy8 [Register(0x39), Register(0x5c)]
#       inline_mul32_64_mul16_32_10_t3009 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 39 5c 

# inline_mul32_64_mul16_32_10_tb9f0 U32 <- inline_mul32_64_mul16_32_10_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 0249a LoadImm32 [Register(0x50), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_10_tb9f0 U32 <- inline_mul32_64_mul16_32_10_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 50 00 00 00 00 

# 024a0 Copy8 [Register(0x5c), Register(0x50)]
#       inline_mul32_64_mul16_32_10_tb9f0 U32 <- inline_mul32_64_mul16_32_10_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 5c 50 

# inline_mul32_64_mul16_32_10_te47a <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 024a3 Copy8 [Register(0x3d), Register(0x5f)]
#       inline_mul32_64_mul16_32_10_te47a <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 3d 5f 

# inline_mul32_64_mul16_32_10_t6ca9 U32 <- inline_mul32_64_mul16_32_10_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 024a6 LoadImm32 [Register(0x4c), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_10_t6ca9 U32 <- inline_mul32_64_mul16_32_10_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 4c 00 00 00 00 

# 024ac Copy8 [Register(0x5f), Register(0x4c)]
#       inline_mul32_64_mul16_32_10_t6ca9 U32 <- inline_mul32_64_mul16_32_10_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 5f 4c 

# inline_mul32_64_mul16_32_10_f <- inline_mul32_64_mul16_32_10_tb9f0 Multiply Var(inline_mul32_64_mul16_32_10_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 024af Mul8_16 [Register(0x50), Register(0x4c), Register(0x4c)]
#       inline_mul32_64_mul16_32_10_f <- inline_mul32_64_mul16_32_10_tb9f0 Multiply Var(inline_mul32_64_mul16_32_10_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 50 4c 4c 

# 024b3 LoadImm8 [Register(0x4e), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_f <- inline_mul32_64_mul16_32_10_tb9f0 Multiply Var(inline_mul32_64_mul16_32_10_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 4e 00 

# 024b6 LoadImm8 [Register(0x4f), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_f <- inline_mul32_64_mul16_32_10_tb9f0 Multiply Var(inline_mul32_64_mul16_32_10_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 4f 00 

# inline_mul32_64_mul16_32_10_t6ec2 <- inline_mul32_64_mul16_32_10_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# Index("f", Number(0n1/0x01u8))
# 024b9 Copy8 [Register(0x4d), Register(0x5d)]
#       inline_mul32_64_mul16_32_10_t6ec2 <- inline_mul32_64_mul16_32_10_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
#       Index("f", Number(0n1/0x01u8))
0b 4d 5d 

# inline_mul32_64_mul16_32_10_f[0x03..0x04] <- inline_mul32_64_mul16_32_10_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# 024bc Copy8 [Register(0x5d), Register(0x4f)]
#       inline_mul32_64_mul16_32_10_f[0x03..0x04] <- inline_mul32_64_mul16_32_10_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
0b 5d 4f 

# inline_mul32_64_mul16_32_10_t9922 <- inline_mul32_64_mul16_32_10_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# Index("f", Number(0n0/0x00u8))
# 024bf Copy8 [Register(0x4c), Register(0x5d)]
#       inline_mul32_64_mul16_32_10_t9922 <- inline_mul32_64_mul16_32_10_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
#       Index("f", Number(0n0/0x00u8))
0b 4c 5d 

# inline_mul32_64_mul16_32_10_f[0x02..0x03] <- inline_mul32_64_mul16_32_10_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# 024c2 Copy8 [Register(0x5d), Register(0x4e)]
#       inline_mul32_64_mul16_32_10_f[0x02..0x03] <- inline_mul32_64_mul16_32_10_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
0b 5d 4e 

# inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 024c5 LoadImm8 [Register(0x5e), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 5e 00 

# inline_mul32_64_mul16_32_10_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# 024c8 Copy8 [Register(0x5e), Register(0x4d)]
#       inline_mul32_64_mul16_32_10_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
0b 5e 4d 

# inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 024cb LoadImm8 [Register(0x5e), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 5e 00 

# inline_mul32_64_mul16_32_10_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# 024ce Copy8 [Register(0x5e), Register(0x4c)]
#       inline_mul32_64_mul16_32_10_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
0b 5e 4c 

# inline_mul32_64_mul16_32_10_tac13 <- inline_mul32_64_mul16_32_10_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_tac13 <- inline_mul32_64_mul16_32_10_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_mul32_64_mul16_32_10_tcbd4 <- inline_mul32_64_mul16_32_10_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_tcbd4 <- inline_mul32_64_mul16_32_10_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 024d1 ClearCarry []
#       inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 024d2 AddCarry32_1 [Register(0x48), Register(0x4c), Register(0x48)]
#       inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 48 4c 48 

# 024d6 AddCarry32_2 []
#       inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_mul32_64_mul16_32_10_t8792 <- inline_mul32_64_mul16_32_10_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_t8792 <- inline_mul32_64_mul16_32_10_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_mul32_64_mul16_32_10_te47a <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 024d7 Copy8 [Register(0x3d), Register(0x5f)]
#       inline_mul32_64_mul16_32_10_te47a <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 3d 5f 

# inline_mul32_64_mul16_32_10_t6ca9 U32 <- inline_mul32_64_mul16_32_10_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 024da LoadImm32 [Register(0x4c), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_10_t6ca9 U32 <- inline_mul32_64_mul16_32_10_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 4c 00 00 00 00 

# 024e0 Copy8 [Register(0x5f), Register(0x4c)]
#       inline_mul32_64_mul16_32_10_t6ca9 U32 <- inline_mul32_64_mul16_32_10_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 5f 4c 

# inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 024e3 Mul8_16 [Register(0x38), Register(0x4c), Register(0x4c)]
#       inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 38 4c 4c 

# 024e7 LoadImm8 [Register(0x4e), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 4e 00 

# 024ea LoadImm8 [Register(0x4f), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 4f 00 

# inline_mul32_64_mul16_32_10_t3009 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 024ed Copy8 [Register(0x39), Register(0x5c)]
#       inline_mul32_64_mul16_32_10_t3009 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 39 5c 

# inline_mul32_64_mul16_32_10_tb9f0 U32 <- inline_mul32_64_mul16_32_10_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 024f0 LoadImm32 [Register(0x50), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_10_tb9f0 U32 <- inline_mul32_64_mul16_32_10_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 50 00 00 00 00 

# 024f6 Copy8 [Register(0x5c), Register(0x50)]
#       inline_mul32_64_mul16_32_10_tb9f0 U32 <- inline_mul32_64_mul16_32_10_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 5c 50 

# inline_mul32_64_mul16_32_10_tace9 <- inline_mul32_64_mul16_32_10_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_tace9 <- inline_mul32_64_mul16_32_10_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_mul32_64_mul16_32_10_e <- inline_mul32_64_mul16_32_10_tb9f0 Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# 024f9 Mul8_16 [Register(0x50), Register(0x3c), Register(0x38)]
#       inline_mul32_64_mul16_32_10_e <- inline_mul32_64_mul16_32_10_tb9f0 Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
11 50 3c 38 

# 024fd LoadImm8 [Register(0x3a), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_e <- inline_mul32_64_mul16_32_10_tb9f0 Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 3a 00 

# 02500 LoadImm8 [Register(0x3b), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_e <- inline_mul32_64_mul16_32_10_tb9f0 Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 3b 00 

# inline_mul32_64_mul16_32_10_t45f5 <- inline_mul32_64_mul16_32_10_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 02503 Copy32 [Register(0x4c), Register(0x3c)]
#       inline_mul32_64_mul16_32_10_t45f5 <- inline_mul32_64_mul16_32_10_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 4c 3c 

# inline_mul32_64_mul16_32_10_t3585 <- inline_mul32_64_mul16_32_10_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_t3585 <- inline_mul32_64_mul16_32_10_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t45f5 Add Var(inline_mul32_64_mul16_32_10_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 02506 ClearCarry []
#       inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t45f5 Add Var(inline_mul32_64_mul16_32_10_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 02507 AddCarry32_1 [Register(0x3c), Register(0x38), Register(0x4c)]
#       inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t45f5 Add Var(inline_mul32_64_mul16_32_10_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 3c 38 4c 

# 0250b AddCarry32_2 []
#       inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t45f5 Add Var(inline_mul32_64_mul16_32_10_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_mul32_64_mul16_32_10_t8575 <- inline_mul32_64_mul16_32_10_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# Index("d", Number(0n2/0x02u8))
# 0250c Copy8 [Register(0x4e), Register(0x5c)]
#       inline_mul32_64_mul16_32_10_t8575 <- inline_mul32_64_mul16_32_10_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
#       Index("d", Number(0n2/0x02u8))
0b 4e 5c 

# inline_mul32_64_mul16_32_10_d[0x03..0x04] <- inline_mul32_64_mul16_32_10_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# 0250f Copy8 [Register(0x5c), Register(0x4f)]
#       inline_mul32_64_mul16_32_10_d[0x03..0x04] <- inline_mul32_64_mul16_32_10_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
0b 5c 4f 

# inline_mul32_64_mul16_32_10_t34f7 <- inline_mul32_64_mul16_32_10_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# Index("d", Number(0n1/0x01u8))
# 02512 Copy8 [Register(0x4d), Register(0x5c)]
#       inline_mul32_64_mul16_32_10_t34f7 <- inline_mul32_64_mul16_32_10_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
#       Index("d", Number(0n1/0x01u8))
0b 4d 5c 

# inline_mul32_64_mul16_32_10_d[0x02..0x03] <- inline_mul32_64_mul16_32_10_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# 02515 Copy8 [Register(0x5c), Register(0x4e)]
#       inline_mul32_64_mul16_32_10_d[0x02..0x03] <- inline_mul32_64_mul16_32_10_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
0b 5c 4e 

# inline_mul32_64_mul16_32_10_t30b9 <- inline_mul32_64_mul16_32_10_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# Index("d", Number(0n0/0x00u8))
# 02518 Copy8 [Register(0x4c), Register(0x5c)]
#       inline_mul32_64_mul16_32_10_t30b9 <- inline_mul32_64_mul16_32_10_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
#       Index("d", Number(0n0/0x00u8))
0b 4c 5c 

# inline_mul32_64_mul16_32_10_d[0x01..0x02] <- inline_mul32_64_mul16_32_10_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# 0251b Copy8 [Register(0x5c), Register(0x4d)]
#       inline_mul32_64_mul16_32_10_d[0x01..0x02] <- inline_mul32_64_mul16_32_10_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
0b 5c 4d 

# inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 0251e LoadImm8 [Register(0x5e), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 5e 00 

# inline_mul32_64_mul16_32_10_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# 02521 Copy8 [Register(0x5e), Register(0x4c)]
#       inline_mul32_64_mul16_32_10_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
0b 5e 4c 

# inline_mul32_64_mul16_32_10_tac13 <- inline_mul32_64_mul16_32_10_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_tac13 <- inline_mul32_64_mul16_32_10_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_mul32_64_mul16_32_10_t45f5 <- inline_mul32_64_mul16_32_10_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 02524 Copy32 [Register(0x4c), Register(0x3c)]
#       inline_mul32_64_mul16_32_10_t45f5 <- inline_mul32_64_mul16_32_10_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 4c 3c 

# inline_mul32_64_mul16_32_10_ta65d <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 02527 ClearCarry []
#       inline_mul32_64_mul16_32_10_ta65d <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 02528 AddCarry32_1 [Register(0x48), Register(0x3c), Register(0x38)]
#       inline_mul32_64_mul16_32_10_ta65d <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 48 3c 38 

# 0252c AddCarry32_2 []
#       inline_mul32_64_mul16_32_10_ta65d <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# temp <- inline_mul32_64_mul16_32_10_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# optimized away noop copy Instruction { source: "temp <- inline_mul32_64_mul16_32_10_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# goto inline_mul32_64_mul16_32_10_function_end_mul16_32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_mul32_64_mul16_32_10_function_end_mul16_32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: JmpImm, args: [Label24(inline_mul32_64_mul16_32_10_function_end_mul16_32)], resolved: None }
# :inline_mul32_64_mul16_32_10_function_end_mul16_32 None
# inline_mul32_64_mul16_32_10_function_end_mul16_32
# t9186 <- temp[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(75,5))
# Assign { target: Index("temp_lo", Number(0n2/0x02u8)), var_type: None, value: Index("temp", Number(0n0/0x00u8)) }
# Index("temp", Number(0n0/0x00u8))
# 0252d Copy8 [Register(0x38), Register(0x5c)]
#       t9186 <- temp[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(75,5))
#       Assign { target: Index("temp_lo", Number(0n2/0x02u8)), var_type: None, value: Index("temp", Number(0n0/0x00u8)) }
#       Index("temp", Number(0n0/0x00u8))
0b 38 5c 

# temp_lo[0x02..0x03] <- t9186 U8 Some('/lutcomp/programs/lib/mul.j':(75,5))
# Assign { target: Index("temp_lo", Number(0n2/0x02u8)), var_type: None, value: Index("temp", Number(0n0/0x00u8)) }
# 02530 Copy8 [Register(0x5c), Register(0x72)]
#       temp_lo[0x02..0x03] <- t9186 U8 Some('/lutcomp/programs/lib/mul.j':(75,5))
#       Assign { target: Index("temp_lo", Number(0n2/0x02u8)), var_type: None, value: Index("temp", Number(0n0/0x00u8)) }
0b 5c 72 

# t3d83 <- temp[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(76,5))
# Assign { target: Index("temp_lo", Number(0n3/0x03u8)), var_type: None, value: Index("temp", Number(0n1/0x01u8)) }
# Index("temp", Number(0n1/0x01u8))
# 02533 Copy8 [Register(0x39), Register(0x5c)]
#       t3d83 <- temp[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(76,5))
#       Assign { target: Index("temp_lo", Number(0n3/0x03u8)), var_type: None, value: Index("temp", Number(0n1/0x01u8)) }
#       Index("temp", Number(0n1/0x01u8))
0b 39 5c 

# temp_lo[0x03..0x04] <- t3d83 U8 Some('/lutcomp/programs/lib/mul.j':(76,5))
# Assign { target: Index("temp_lo", Number(0n3/0x03u8)), var_type: None, value: Index("temp", Number(0n1/0x01u8)) }
# 02536 Copy8 [Register(0x5c), Register(0x73)]
#       temp_lo[0x03..0x04] <- t3d83 U8 Some('/lutcomp/programs/lib/mul.j':(76,5))
#       Assign { target: Index("temp_lo", Number(0n3/0x03u8)), var_type: None, value: Index("temp", Number(0n1/0x01u8)) }
0b 5c 73 

# t3970 <- temp[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(77,5))
# Assign { target: Index("temp_hi", Number(0n0/0x00u8)), var_type: None, value: Index("temp", Number(0n2/0x02u8)) }
# Index("temp", Number(0n2/0x02u8))
# 02539 Copy8 [Register(0x3a), Register(0x5c)]
#       t3970 <- temp[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(77,5))
#       Assign { target: Index("temp_hi", Number(0n0/0x00u8)), var_type: None, value: Index("temp", Number(0n2/0x02u8)) }
#       Index("temp", Number(0n2/0x02u8))
0b 3a 5c 

# temp_hi[0x00..0x01] <- t3970 U8 Some('/lutcomp/programs/lib/mul.j':(77,5))
# Assign { target: Index("temp_hi", Number(0n0/0x00u8)), var_type: None, value: Index("temp", Number(0n2/0x02u8)) }
# 0253c Copy8 [Register(0x5c), Register(0x68)]
#       temp_hi[0x00..0x01] <- t3970 U8 Some('/lutcomp/programs/lib/mul.j':(77,5))
#       Assign { target: Index("temp_hi", Number(0n0/0x00u8)), var_type: None, value: Index("temp", Number(0n2/0x02u8)) }
0b 5c 68 

# t3b80 <- temp[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(78,5))
# Assign { target: Index("temp_hi", Number(0n1/0x01u8)), var_type: None, value: Index("temp", Number(0n3/0x03u8)) }
# Index("temp", Number(0n3/0x03u8))
# 0253f Copy8 [Register(0x3b), Register(0x5c)]
#       t3b80 <- temp[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(78,5))
#       Assign { target: Index("temp_hi", Number(0n1/0x01u8)), var_type: None, value: Index("temp", Number(0n3/0x03u8)) }
#       Index("temp", Number(0n3/0x03u8))
0b 3b 5c 

# temp_hi[0x01..0x02] <- t3b80 U8 Some('/lutcomp/programs/lib/mul.j':(78,5))
# Assign { target: Index("temp_hi", Number(0n1/0x01u8)), var_type: None, value: Index("temp", Number(0n3/0x03u8)) }
# 02542 Copy8 [Register(0x5c), Register(0x69)]
#       temp_hi[0x01..0x02] <- t3b80 U8 Some('/lutcomp/programs/lib/mul.j':(78,5))
#       Assign { target: Index("temp_hi", Number(0n1/0x01u8)), var_type: None, value: Index("temp", Number(0n3/0x03u8)) }
0b 5c 69 

# te546 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(80,5))
# Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Ident("__frame_pointer") }
# Ident("__frame_pointer")
# 02545 Copy32 [Register(0x0c), Register(0x6c)]
#       te546 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(80,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Ident("__frame_pointer") }
#       Ident("__frame_pointer")
21 0c 6c 

# t3308 <- temp_lo U32 Some('/lutcomp/programs/lib/mul.j':(80,5))
# Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
# Ident("temp_lo")
# 02548 Copy32 [Register(0x70), Register(0x38)]
#       t3308 <- temp_lo U32 Some('/lutcomp/programs/lib/mul.j':(80,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
#       Ident("temp_lo")
21 70 38 

# mem[te546] <- t3308 U32 Some('/lutcomp/programs/lib/mul.j':(80,5))
# Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
# 0254b Store32_1 [Register(0x38), Register(0x6c)]
#       mem[te546] <- t3308 U32 Some('/lutcomp/programs/lib/mul.j':(80,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
23 38 6c 

# 0254e Store32_2 []
#       mem[te546] <- t3308 U32 Some('/lutcomp/programs/lib/mul.j':(80,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
24 

# te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(81,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
# Ident("__frame_pointer")
# 0254f Copy32 [Register(0x0c), Register(0x6c)]
#       te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(81,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
#       Ident("__frame_pointer")
21 0c 6c 

# t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(81,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
# 02552 Copy32 [Register(0x6c), Register(0x38)]
#       t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(81,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
21 6c 38 

# 02555 AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000004=4)]
#       t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(81,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
32 38 04 00 00 00 

# t41f5 <- temp_hi U32 Some('/lutcomp/programs/lib/mul.j':(81,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# Ident("temp_hi")
# 0255b Copy32 [Register(0x68), Register(0x3c)]
#       t41f5 <- temp_hi U32 Some('/lutcomp/programs/lib/mul.j':(81,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Ident("temp_hi")
21 68 3c 

# mem[t3f2a] <- t41f5 U32 Some('/lutcomp/programs/lib/mul.j':(81,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# 0255e Store32_1 [Register(0x3c), Register(0x38)]
#       mem[t3f2a] <- t41f5 U32 Some('/lutcomp/programs/lib/mul.j':(81,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
23 3c 38 

# 02561 Store32_2 []
#       mem[t3f2a] <- t41f5 U32 Some('/lutcomp/programs/lib/mul.j':(81,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
24 

# tac13 <- c U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/lutcomp/programs/lib/mul.j':(82,5))\nVoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }\nCall(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# AddressOf(Ident("temp64"))
# Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))
# Ident("__frame_pointer")
# 02562 Copy32 [Register(0x0c), Register(0x6c)]
#       te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))
#       Ident("__frame_pointer")
21 0c 6c 

# t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# AddressOf(Ident("temp64"))
# Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))
# 02565 Copy32 [Register(0x6c), Register(0x38)]
#       t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/lutcomp/programs/lib/mul.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))
21 6c 38 

# 02568 AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000000=0)]
#       t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/lutcomp/programs/lib/mul.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))
32 38 00 00 00 00 

# tf4b2 <- t4a94 U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# AddressOf(Ident("temp64"))
# 0256e Copy32 [Register(0x38), Register(0x3c)]
#       tf4b2 <- t4a94 U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
21 38 3c 

# tac13 <- c U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/lutcomp/programs/lib/mul.j':(82,5))\nVoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }\nCall(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_mul32_64_add_U64_0_a <- tac13 U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# 02571 Copy32 [Register(0x44), Register(0x38)]
#       inline_mul32_64_add_U64_0_a <- tac13 U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
21 44 38 

# inline_mul32_64_add_U64_0_b <- tf4b2 U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_b <- tf4b2 U32 Some('/lutcomp/programs/lib/mul.j':(82,5))\nVoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }\nCall(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_mul32_64_add_U64_0_c <- tac13 U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# 02574 Copy32 [Register(0x44), Register(0x48)]
#       inline_mul32_64_add_U64_0_c <- tac13 U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
21 44 48 

# inline_mul32_64_add_U64_0_tbeec <- inline_mul32_64_add_U64_0_a U32 Some('/lutcomp/programs/lib/U64.j':(7,5))
# Assign { target: Ident("lo"), var_type: Some(Number(U32)), value: PtrFieldDeref("a", "lo") }
# PtrFieldDeref("a", "lo")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_tbeec <- inline_mul32_64_add_U64_0_a U32 Some('/lutcomp/programs/lib/U64.j':(7,5))\nAssign { target: Ident(\"lo\"), var_type: Some(Number(U32)), value: PtrFieldDeref(\"a\", \"lo\") }\nPtrFieldDeref(\"a\", \"lo\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"a\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_mul32_64_add_U64_0_lo <- mem[inline_mul32_64_add_U64_0_tbeec] U32 Some('/lutcomp/programs/lib/U64.j':(7,5))
# Assign { target: Ident("lo"), var_type: Some(Number(U32)), value: PtrFieldDeref("a", "lo") }
# PtrFieldDeref("a", "lo")
# 02577 Load32 [Register(0x38), Register(0x4c)]
#       inline_mul32_64_add_U64_0_lo <- mem[inline_mul32_64_add_U64_0_tbeec] U32 Some('/lutcomp/programs/lib/U64.j':(7,5))
#       Assign { target: Ident("lo"), var_type: Some(Number(U32)), value: PtrFieldDeref("a", "lo") }
#       PtrFieldDeref("a", "lo")
22 38 4c 

# inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n4/0x00000004u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n4/0x00000004u32))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# 0257a Copy32 [Register(0x48), Register(0x50)]
#       inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
21 48 50 

# 0257d AddImm32IgnoreCarry [Register(0x50), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
32 50 04 00 00 00 

# inline_mul32_64_add_U64_0_t144a <- inline_mul32_64_add_U64_0_a Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("a", "hi")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32))
# 02583 Copy32 [Register(0x38), Register(0x54)]
#       inline_mul32_64_add_U64_0_t144a <- inline_mul32_64_add_U64_0_a Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("a", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32))
21 38 54 

# 02586 AddImm32IgnoreCarry [Register(0x54), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_0_t144a <- inline_mul32_64_add_U64_0_a Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("a", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32))
32 54 04 00 00 00 

# inline_mul32_64_add_U64_0_te24c <- mem[inline_mul32_64_add_U64_0_t144a] U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("a", "hi")
# 0258c Load32 [Register(0x54), Register(0x58)]
#       inline_mul32_64_add_U64_0_te24c <- mem[inline_mul32_64_add_U64_0_t144a] U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("a", "hi")
22 54 58 

# inline_mul32_64_add_U64_0_t809 <- inline_mul32_64_add_U64_0_b Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("b", "hi")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32))
# 0258f Copy32 [Register(0x3c), Register(0x54)]
#       inline_mul32_64_add_U64_0_t809 <- inline_mul32_64_add_U64_0_b Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("b", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32))
21 3c 54 

# 02592 AddImm32IgnoreCarry [Register(0x54), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_0_t809 <- inline_mul32_64_add_U64_0_b Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("b", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32))
32 54 04 00 00 00 

# inline_mul32_64_add_U64_0_t153d <- mem[inline_mul32_64_add_U64_0_t809] U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("b", "hi")
# 02598 Load32 [Register(0x54), Register(0x54)]
#       inline_mul32_64_add_U64_0_t153d <- mem[inline_mul32_64_add_U64_0_t809] U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("b", "hi")
22 54 54 

# inline_mul32_64_add_U64_0_t6f1c <- inline_mul32_64_add_U64_0_te24c Add Var(inline_mul32_64_add_U64_0_t153d) Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# 0259b ClearCarry []
#       inline_mul32_64_add_U64_0_t6f1c <- inline_mul32_64_add_U64_0_te24c Add Var(inline_mul32_64_add_U64_0_t153d) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
03 

# 0259c AddCarry32_1 [Register(0x58), Register(0x54), Register(0x54)]
#       inline_mul32_64_add_U64_0_t6f1c <- inline_mul32_64_add_U64_0_te24c Add Var(inline_mul32_64_add_U64_0_t153d) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
30 58 54 54 

# 025a0 AddCarry32_2 []
#       inline_mul32_64_add_U64_0_t6f1c <- inline_mul32_64_add_U64_0_te24c Add Var(inline_mul32_64_add_U64_0_t153d) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
31 

# mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_t6f1c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# 025a1 Store32_1 [Register(0x54), Register(0x50)]
#       mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_t6f1c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
23 54 50 

# 025a4 Store32_2 []
#       mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_t6f1c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
24 

# inline_mul32_64_add_U64_0_t8956 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t8956 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(9,5))\nAssign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_mul32_64_add_U64_0_tbeec <- inline_mul32_64_add_U64_0_a U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# PtrFieldDeref("a", "lo")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_tbeec <- inline_mul32_64_add_U64_0_a U32 Some('/lutcomp/programs/lib/U64.j':(9,5))\nAssign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }\nArithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))\nPtrFieldDeref(\"a\", \"lo\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"a\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_mul32_64_add_U64_0_td868 <- mem[inline_mul32_64_add_U64_0_tbeec] U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# PtrFieldDeref("a", "lo")
# 025a5 Load32 [Register(0x38), Register(0x50)]
#       inline_mul32_64_add_U64_0_td868 <- mem[inline_mul32_64_add_U64_0_tbeec] U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
#       PtrFieldDeref("a", "lo")
22 38 50 

# inline_mul32_64_add_U64_0_td5bf <- mem[inline_mul32_64_add_U64_0_b] U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# PtrFieldDeref("b", "lo")
# 025a8 Load32 [Register(0x3c), Register(0x38)]
#       inline_mul32_64_add_U64_0_td5bf <- mem[inline_mul32_64_add_U64_0_b] U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
#       PtrFieldDeref("b", "lo")
22 3c 38 

# inline_mul32_64_add_U64_0_ta95f <- inline_mul32_64_add_U64_0_td868 Add Var(inline_mul32_64_add_U64_0_td5bf) Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# 025ab ClearCarry []
#       inline_mul32_64_add_U64_0_ta95f <- inline_mul32_64_add_U64_0_td868 Add Var(inline_mul32_64_add_U64_0_td5bf) Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
03 

# 025ac AddCarry32_1 [Register(0x50), Register(0x38), Register(0x38)]
#       inline_mul32_64_add_U64_0_ta95f <- inline_mul32_64_add_U64_0_td868 Add Var(inline_mul32_64_add_U64_0_td5bf) Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
30 50 38 38 

# 025b0 AddCarry32_2 []
#       inline_mul32_64_add_U64_0_ta95f <- inline_mul32_64_add_U64_0_td868 Add Var(inline_mul32_64_add_U64_0_td5bf) Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
31 

# mem[inline_mul32_64_add_U64_0_t8956] <- inline_mul32_64_add_U64_0_ta95f U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# 025b1 Store32_1 [Register(0x38), Register(0x48)]
#       mem[inline_mul32_64_add_U64_0_t8956] <- inline_mul32_64_add_U64_0_ta95f U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
23 38 48 

# 025b4 Store32_2 []
#       mem[inline_mul32_64_add_U64_0_t8956] <- inline_mul32_64_add_U64_0_ta95f U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
24 

# inline_mul32_64_add_U64_0_t8956 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# PtrFieldDeref("c", "lo")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t8956 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(0n1/0x00000001u32)) }])], else_block: [] }\nComparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }\nPtrFieldDeref(\"c\", \"lo\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_mul32_64_add_U64_0_t90ac <- mem[inline_mul32_64_add_U64_0_t8956] U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# PtrFieldDeref("c", "lo")
# 025b5 Load32 [Register(0x48), Register(0x3c)]
#       inline_mul32_64_add_U64_0_t90ac <- mem[inline_mul32_64_add_U64_0_t8956] U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
#       PtrFieldDeref("c", "lo")
22 48 3c 

# inline_mul32_64_add_U64_0_t1506 <- inline_mul32_64_add_U64_0_lo U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# Ident("lo")
# 025b8 Copy32 [Register(0x4c), Register(0x38)]
#       inline_mul32_64_add_U64_0_t1506 <- inline_mul32_64_add_U64_0_lo U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
#       Ident("lo")
21 4c 38 

# if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# 025bb Cmp8 [Register(0x3b), Register(0x3f)]
#       if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
15 3b 3f 

# 025be Cmp8IfZero [Register(0x3a), Register(0x3e)]
#       if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
16 3a 3e 

# 025c1 Cmp8IfZero [Register(0x39), Register(0x3d)]
#       if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
16 39 3d 

# 025c4 Cmp8IfZero [Register(0x38), Register(0x3c)]
#       if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
16 38 3c 

# 025c7 JcImm [Label24(inline_mul32_64_add_U64_0_add_U64_if_else_0_2)]
#       if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
71 ee 25 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(0n1/0x00000001u32)) }])], else_block: [] }\nComparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }\n", opcode: JmpImm, args: [Label24(inline_mul32_64_add_U64_0_add_U64_if_true_0_1)], resolved: None }
# :inline_mul32_64_add_U64_0_add_U64_if_true_0_1 Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
# inline_mul32_64_add_U64_0_add_U64_if_true_0_1
# inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(0n1/0x00000001u32)) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n4/0x00000004u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n4/0x00000004u32))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# 025cb Copy32 [Register(0x48), Register(0x50)]
#       inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
21 48 50 

# 025ce AddImm32IgnoreCarry [Register(0x50), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
32 50 04 00 00 00 

# inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
# PtrFieldDeref("c", "hi")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(0n1/0x00000001u32)) }\nArithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(0n1/0x00000001u32))\nPtrFieldDeref(\"c\", \"hi\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n4/0x00000004u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n4/0x00000004u32))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
# PtrFieldDeref("c", "hi")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# 025d4 Copy32 [Register(0x48), Register(0x50)]
#       inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
#       PtrFieldDeref("c", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
21 48 50 

# 025d7 AddImm32IgnoreCarry [Register(0x50), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
#       PtrFieldDeref("c", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
32 50 04 00 00 00 

# inline_mul32_64_add_U64_0_tf677 <- mem[inline_mul32_64_add_U64_0_t1335] U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
# PtrFieldDeref("c", "hi")
# 025dd Load32 [Register(0x50), Register(0x38)]
#       inline_mul32_64_add_U64_0_tf677 <- mem[inline_mul32_64_add_U64_0_t1335] U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
#       PtrFieldDeref("c", "hi")
22 50 38 

# inline_mul32_64_add_U64_0_tcbd1 <- inline_mul32_64_add_U64_0_tf677 Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
# 025e0 AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000001=1)]
#       inline_mul32_64_add_U64_0_tcbd1 <- inline_mul32_64_add_U64_0_tf677 Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
32 38 01 00 00 00 

# mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_tcbd1 U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# 025e6 Store32_1 [Register(0x38), Register(0x50)]
#       mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_tcbd1 U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
23 38 50 

# 025e9 Store32_2 []
#       mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_tcbd1 U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
24 

# goto inline_mul32_64_add_U64_0_add_U64_if_end_0 Some('/lutcomp/programs/lib/U64.j':(10,5))
# 025ea JmpImm [Label24(inline_mul32_64_add_U64_0_add_U64_if_end_0)]
#       goto inline_mul32_64_add_U64_0_add_U64_if_end_0 Some('/lutcomp/programs/lib/U64.j':(10,5))
70 ee 25 00 

# :inline_mul32_64_add_U64_0_add_U64_if_else_0_2 Some('/lutcomp/programs/lib/U64.j':(10,5))
# inline_mul32_64_add_U64_0_add_U64_if_else_0_2
# :inline_mul32_64_add_U64_0_add_U64_if_end_0 Some('/lutcomp/programs/lib/U64.j':(10,5))
# inline_mul32_64_add_U64_0_add_U64_if_end_0
# goto inline_mul32_64_add_U64_0_function_end_add_U64 None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_mul32_64_add_U64_0_function_end_add_U64 None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_mul32_64_add_U64_0_function_end_add_U64)], resolved: None }
# :inline_mul32_64_add_U64_0_function_end_add_U64 None
# inline_mul32_64_add_U64_0_function_end_add_U64
# t8792 <- a U32 Some('/lutcomp/programs/lib/mul.j':(84,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/lutcomp/programs/lib/mul.j':(84,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x34), Register(0x34)], resolved: None }
# t5cca <- b_hi U32 Some('/lutcomp/programs/lib/mul.j':(84,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# Ident("b_hi")
# optimized away noop copy Instruction { source: "t5cca <- b_hi U32 Some('/lutcomp/programs/lib/mul.j':(84,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })\nIdent(\"b_hi\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_mul32_64_mul16_32_11_a <- t8792 U32 Some('/lutcomp/programs/lib/mul.j':(84,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_a <- t8792 U32 Some('/lutcomp/programs/lib/mul.j':(84,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })\n", opcode: Copy32, args: [Register(0x34), Register(0x34)], resolved: None }
# inline_mul32_64_mul16_32_11_b <- t5cca U32 Some('/lutcomp/programs/lib/mul.j':(84,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# 025ee Copy32 [Register(0x40), Register(0x38)]
#       inline_mul32_64_mul16_32_11_b <- t5cca U32 Some('/lutcomp/programs/lib/mul.j':(84,5))
#       Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
21 40 38 

# inline_mul32_64_mul16_32_11_t8792 <- inline_mul32_64_mul16_32_11_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_t8792 <- inline_mul32_64_mul16_32_11_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x34), Register(0x34)], resolved: None }
# inline_mul32_64_mul16_32_11_tace9 <- inline_mul32_64_mul16_32_11_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_tace9 <- inline_mul32_64_mul16_32_11_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 025f1 Mul8_16 [Register(0x34), Register(0x38), Register(0x3c)]
#       inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 34 38 3c 

# 025f5 LoadImm8 [Register(0x3e), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 3e 00 

# 025f8 LoadImm8 [Register(0x3f), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 3f 00 

# inline_mul32_64_mul16_32_11_t3009 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 025fb Copy8 [Register(0x35), Register(0x60)]
#       inline_mul32_64_mul16_32_11_t3009 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 35 60 

# inline_mul32_64_mul16_32_11_tb9f0 U32 <- inline_mul32_64_mul16_32_11_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 025fe LoadImm32 [Register(0x48), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_11_tb9f0 U32 <- inline_mul32_64_mul16_32_11_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 48 00 00 00 00 

# 02604 Copy8 [Register(0x60), Register(0x48)]
#       inline_mul32_64_mul16_32_11_tb9f0 U32 <- inline_mul32_64_mul16_32_11_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 60 48 

# inline_mul32_64_mul16_32_11_te47a <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 02607 Copy8 [Register(0x39), Register(0x5c)]
#       inline_mul32_64_mul16_32_11_te47a <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 39 5c 

# inline_mul32_64_mul16_32_11_t6ca9 U32 <- inline_mul32_64_mul16_32_11_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 0260a LoadImm32 [Register(0x40), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_11_t6ca9 U32 <- inline_mul32_64_mul16_32_11_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 40 00 00 00 00 

# 02610 Copy8 [Register(0x5c), Register(0x40)]
#       inline_mul32_64_mul16_32_11_t6ca9 U32 <- inline_mul32_64_mul16_32_11_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 5c 40 

# inline_mul32_64_mul16_32_11_f <- inline_mul32_64_mul16_32_11_tb9f0 Multiply Var(inline_mul32_64_mul16_32_11_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 02613 Mul8_16 [Register(0x48), Register(0x40), Register(0x40)]
#       inline_mul32_64_mul16_32_11_f <- inline_mul32_64_mul16_32_11_tb9f0 Multiply Var(inline_mul32_64_mul16_32_11_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 48 40 40 

# 02617 LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_f <- inline_mul32_64_mul16_32_11_tb9f0 Multiply Var(inline_mul32_64_mul16_32_11_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 42 00 

# 0261a LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_f <- inline_mul32_64_mul16_32_11_tb9f0 Multiply Var(inline_mul32_64_mul16_32_11_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 43 00 

# inline_mul32_64_mul16_32_11_t6ec2 <- inline_mul32_64_mul16_32_11_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# Index("f", Number(0n1/0x01u8))
# 0261d Copy8 [Register(0x41), Register(0x61)]
#       inline_mul32_64_mul16_32_11_t6ec2 <- inline_mul32_64_mul16_32_11_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
#       Index("f", Number(0n1/0x01u8))
0b 41 61 

# inline_mul32_64_mul16_32_11_f[0x03..0x04] <- inline_mul32_64_mul16_32_11_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# 02620 Copy8 [Register(0x61), Register(0x43)]
#       inline_mul32_64_mul16_32_11_f[0x03..0x04] <- inline_mul32_64_mul16_32_11_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
0b 61 43 

# inline_mul32_64_mul16_32_11_t9922 <- inline_mul32_64_mul16_32_11_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# Index("f", Number(0n0/0x00u8))
# 02623 Copy8 [Register(0x40), Register(0x61)]
#       inline_mul32_64_mul16_32_11_t9922 <- inline_mul32_64_mul16_32_11_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
#       Index("f", Number(0n0/0x00u8))
0b 40 61 

# inline_mul32_64_mul16_32_11_f[0x02..0x03] <- inline_mul32_64_mul16_32_11_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# 02626 Copy8 [Register(0x61), Register(0x42)]
#       inline_mul32_64_mul16_32_11_f[0x02..0x03] <- inline_mul32_64_mul16_32_11_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
0b 61 42 

# inline_mul32_64_mul16_32_11_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 02629 LoadImm8 [Register(0x62), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 62 00 

# inline_mul32_64_mul16_32_11_f[0x01..0x02] <- inline_mul32_64_mul16_32_11_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# 0262c Copy8 [Register(0x62), Register(0x41)]
#       inline_mul32_64_mul16_32_11_f[0x01..0x02] <- inline_mul32_64_mul16_32_11_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
0b 62 41 

# inline_mul32_64_mul16_32_11_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 0262f LoadImm8 [Register(0x62), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 62 00 

# inline_mul32_64_mul16_32_11_f[0x00..0x01] <- inline_mul32_64_mul16_32_11_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# 02632 Copy8 [Register(0x62), Register(0x40)]
#       inline_mul32_64_mul16_32_11_f[0x00..0x01] <- inline_mul32_64_mul16_32_11_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
0b 62 40 

# inline_mul32_64_mul16_32_11_tac13 <- inline_mul32_64_mul16_32_11_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_tac13 <- inline_mul32_64_mul16_32_11_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_mul32_64_mul16_32_11_tcbd4 <- inline_mul32_64_mul16_32_11_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_tcbd4 <- inline_mul32_64_mul16_32_11_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 02635 ClearCarry []
#       inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 02636 AddCarry32_1 [Register(0x3c), Register(0x40), Register(0x3c)]
#       inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 3c 40 3c 

# 0263a AddCarry32_2 []
#       inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_mul32_64_mul16_32_11_t8792 <- inline_mul32_64_mul16_32_11_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_t8792 <- inline_mul32_64_mul16_32_11_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x34), Register(0x34)], resolved: None }
# inline_mul32_64_mul16_32_11_te47a <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 0263b Copy8 [Register(0x39), Register(0x5c)]
#       inline_mul32_64_mul16_32_11_te47a <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 39 5c 

# inline_mul32_64_mul16_32_11_t6ca9 U32 <- inline_mul32_64_mul16_32_11_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 0263e LoadImm32 [Register(0x40), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_11_t6ca9 U32 <- inline_mul32_64_mul16_32_11_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 40 00 00 00 00 

# 02644 Copy8 [Register(0x5c), Register(0x40)]
#       inline_mul32_64_mul16_32_11_t6ca9 U32 <- inline_mul32_64_mul16_32_11_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 5c 40 

# inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 02647 Mul8_16 [Register(0x34), Register(0x40), Register(0x40)]
#       inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 34 40 40 

# 0264b LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 42 00 

# 0264e LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 43 00 

# inline_mul32_64_mul16_32_11_t3009 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 02651 Copy8 [Register(0x35), Register(0x60)]
#       inline_mul32_64_mul16_32_11_t3009 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 35 60 

# inline_mul32_64_mul16_32_11_tb9f0 U32 <- inline_mul32_64_mul16_32_11_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 02654 LoadImm32 [Register(0x48), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_11_tb9f0 U32 <- inline_mul32_64_mul16_32_11_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 48 00 00 00 00 

# 0265a Copy8 [Register(0x60), Register(0x48)]
#       inline_mul32_64_mul16_32_11_tb9f0 U32 <- inline_mul32_64_mul16_32_11_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 60 48 

# inline_mul32_64_mul16_32_11_tace9 <- inline_mul32_64_mul16_32_11_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_tace9 <- inline_mul32_64_mul16_32_11_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_mul32_64_mul16_32_11_e <- inline_mul32_64_mul16_32_11_tb9f0 Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# 0265d Mul8_16 [Register(0x48), Register(0x38), Register(0x34)]
#       inline_mul32_64_mul16_32_11_e <- inline_mul32_64_mul16_32_11_tb9f0 Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
11 48 38 34 

# 02661 LoadImm8 [Register(0x36), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_e <- inline_mul32_64_mul16_32_11_tb9f0 Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 36 00 

# 02664 LoadImm8 [Register(0x37), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_e <- inline_mul32_64_mul16_32_11_tb9f0 Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 37 00 

# inline_mul32_64_mul16_32_11_t45f5 <- inline_mul32_64_mul16_32_11_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 02667 Copy32 [Register(0x40), Register(0x38)]
#       inline_mul32_64_mul16_32_11_t45f5 <- inline_mul32_64_mul16_32_11_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 40 38 

# inline_mul32_64_mul16_32_11_t3585 <- inline_mul32_64_mul16_32_11_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_t3585 <- inline_mul32_64_mul16_32_11_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x34), Register(0x34)], resolved: None }
# inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t45f5 Add Var(inline_mul32_64_mul16_32_11_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 0266a ClearCarry []
#       inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t45f5 Add Var(inline_mul32_64_mul16_32_11_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 0266b AddCarry32_1 [Register(0x38), Register(0x34), Register(0x40)]
#       inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t45f5 Add Var(inline_mul32_64_mul16_32_11_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 38 34 40 

# 0266f AddCarry32_2 []
#       inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t45f5 Add Var(inline_mul32_64_mul16_32_11_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_mul32_64_mul16_32_11_t8575 <- inline_mul32_64_mul16_32_11_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# Index("d", Number(0n2/0x02u8))
# 02670 Copy8 [Register(0x42), Register(0x60)]
#       inline_mul32_64_mul16_32_11_t8575 <- inline_mul32_64_mul16_32_11_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
#       Index("d", Number(0n2/0x02u8))
0b 42 60 

# inline_mul32_64_mul16_32_11_d[0x03..0x04] <- inline_mul32_64_mul16_32_11_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# 02673 Copy8 [Register(0x60), Register(0x43)]
#       inline_mul32_64_mul16_32_11_d[0x03..0x04] <- inline_mul32_64_mul16_32_11_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
0b 60 43 

# inline_mul32_64_mul16_32_11_t34f7 <- inline_mul32_64_mul16_32_11_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# Index("d", Number(0n1/0x01u8))
# 02676 Copy8 [Register(0x41), Register(0x60)]
#       inline_mul32_64_mul16_32_11_t34f7 <- inline_mul32_64_mul16_32_11_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
#       Index("d", Number(0n1/0x01u8))
0b 41 60 

# inline_mul32_64_mul16_32_11_d[0x02..0x03] <- inline_mul32_64_mul16_32_11_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# 02679 Copy8 [Register(0x60), Register(0x42)]
#       inline_mul32_64_mul16_32_11_d[0x02..0x03] <- inline_mul32_64_mul16_32_11_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
0b 60 42 

# inline_mul32_64_mul16_32_11_t30b9 <- inline_mul32_64_mul16_32_11_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# Index("d", Number(0n0/0x00u8))
# 0267c Copy8 [Register(0x40), Register(0x60)]
#       inline_mul32_64_mul16_32_11_t30b9 <- inline_mul32_64_mul16_32_11_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
#       Index("d", Number(0n0/0x00u8))
0b 40 60 

# inline_mul32_64_mul16_32_11_d[0x01..0x02] <- inline_mul32_64_mul16_32_11_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# 0267f Copy8 [Register(0x60), Register(0x41)]
#       inline_mul32_64_mul16_32_11_d[0x01..0x02] <- inline_mul32_64_mul16_32_11_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
0b 60 41 

# inline_mul32_64_mul16_32_11_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 02682 LoadImm8 [Register(0x62), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 62 00 

# inline_mul32_64_mul16_32_11_d[0x00..0x01] <- inline_mul32_64_mul16_32_11_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# 02685 Copy8 [Register(0x62), Register(0x40)]
#       inline_mul32_64_mul16_32_11_d[0x00..0x01] <- inline_mul32_64_mul16_32_11_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
0b 62 40 

# inline_mul32_64_mul16_32_11_tac13 <- inline_mul32_64_mul16_32_11_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_tac13 <- inline_mul32_64_mul16_32_11_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_mul32_64_mul16_32_11_t45f5 <- inline_mul32_64_mul16_32_11_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 02688 Copy32 [Register(0x40), Register(0x38)]
#       inline_mul32_64_mul16_32_11_t45f5 <- inline_mul32_64_mul16_32_11_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 40 38 

# inline_mul32_64_mul16_32_11_ta65d <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 0268b ClearCarry []
#       inline_mul32_64_mul16_32_11_ta65d <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 0268c AddCarry32_1 [Register(0x3c), Register(0x38), Register(0x34)]
#       inline_mul32_64_mul16_32_11_ta65d <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 3c 38 34 

# 02690 AddCarry32_2 []
#       inline_mul32_64_mul16_32_11_ta65d <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# temp <- inline_mul32_64_mul16_32_11_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# 02691 Copy32 [Register(0x34), Register(0x38)]
#       temp <- inline_mul32_64_mul16_32_11_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
21 34 38 

# goto inline_mul32_64_mul16_32_11_function_end_mul16_32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_mul32_64_mul16_32_11_function_end_mul16_32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: JmpImm, args: [Label24(inline_mul32_64_mul16_32_11_function_end_mul16_32)], resolved: None }
# :inline_mul32_64_mul16_32_11_function_end_mul16_32 None
# inline_mul32_64_mul16_32_11_function_end_mul16_32
# t9186 <- temp[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(85,5))
# Assign { target: Index("temp_lo", Number(0n2/0x02u8)), var_type: None, value: Index("temp", Number(0n0/0x00u8)) }
# Index("temp", Number(0n0/0x00u8))
# 02694 Copy8 [Register(0x38), Register(0x5c)]
#       t9186 <- temp[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(85,5))
#       Assign { target: Index("temp_lo", Number(0n2/0x02u8)), var_type: None, value: Index("temp", Number(0n0/0x00u8)) }
#       Index("temp", Number(0n0/0x00u8))
0b 38 5c 

# temp_lo[0x02..0x03] <- t9186 U8 Some('/lutcomp/programs/lib/mul.j':(85,5))
# Assign { target: Index("temp_lo", Number(0n2/0x02u8)), var_type: None, value: Index("temp", Number(0n0/0x00u8)) }
# 02697 Copy8 [Register(0x5c), Register(0x72)]
#       temp_lo[0x02..0x03] <- t9186 U8 Some('/lutcomp/programs/lib/mul.j':(85,5))
#       Assign { target: Index("temp_lo", Number(0n2/0x02u8)), var_type: None, value: Index("temp", Number(0n0/0x00u8)) }
0b 5c 72 

# t3d83 <- temp[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(86,5))
# Assign { target: Index("temp_lo", Number(0n3/0x03u8)), var_type: None, value: Index("temp", Number(0n1/0x01u8)) }
# Index("temp", Number(0n1/0x01u8))
# 0269a Copy8 [Register(0x39), Register(0x5c)]
#       t3d83 <- temp[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(86,5))
#       Assign { target: Index("temp_lo", Number(0n3/0x03u8)), var_type: None, value: Index("temp", Number(0n1/0x01u8)) }
#       Index("temp", Number(0n1/0x01u8))
0b 39 5c 

# temp_lo[0x03..0x04] <- t3d83 U8 Some('/lutcomp/programs/lib/mul.j':(86,5))
# Assign { target: Index("temp_lo", Number(0n3/0x03u8)), var_type: None, value: Index("temp", Number(0n1/0x01u8)) }
# 0269d Copy8 [Register(0x5c), Register(0x73)]
#       temp_lo[0x03..0x04] <- t3d83 U8 Some('/lutcomp/programs/lib/mul.j':(86,5))
#       Assign { target: Index("temp_lo", Number(0n3/0x03u8)), var_type: None, value: Index("temp", Number(0n1/0x01u8)) }
0b 5c 73 

# t3970 <- temp[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(87,5))
# Assign { target: Index("temp_hi", Number(0n0/0x00u8)), var_type: None, value: Index("temp", Number(0n2/0x02u8)) }
# Index("temp", Number(0n2/0x02u8))
# 026a0 Copy8 [Register(0x3a), Register(0x5c)]
#       t3970 <- temp[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(87,5))
#       Assign { target: Index("temp_hi", Number(0n0/0x00u8)), var_type: None, value: Index("temp", Number(0n2/0x02u8)) }
#       Index("temp", Number(0n2/0x02u8))
0b 3a 5c 

# temp_hi[0x00..0x01] <- t3970 U8 Some('/lutcomp/programs/lib/mul.j':(87,5))
# Assign { target: Index("temp_hi", Number(0n0/0x00u8)), var_type: None, value: Index("temp", Number(0n2/0x02u8)) }
# 026a3 Copy8 [Register(0x5c), Register(0x68)]
#       temp_hi[0x00..0x01] <- t3970 U8 Some('/lutcomp/programs/lib/mul.j':(87,5))
#       Assign { target: Index("temp_hi", Number(0n0/0x00u8)), var_type: None, value: Index("temp", Number(0n2/0x02u8)) }
0b 5c 68 

# t3b80 <- temp[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(88,5))
# Assign { target: Index("temp_hi", Number(0n1/0x01u8)), var_type: None, value: Index("temp", Number(0n3/0x03u8)) }
# Index("temp", Number(0n3/0x03u8))
# 026a6 Copy8 [Register(0x3b), Register(0x5c)]
#       t3b80 <- temp[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(88,5))
#       Assign { target: Index("temp_hi", Number(0n1/0x01u8)), var_type: None, value: Index("temp", Number(0n3/0x03u8)) }
#       Index("temp", Number(0n3/0x03u8))
0b 3b 5c 

# temp_hi[0x01..0x02] <- t3b80 U8 Some('/lutcomp/programs/lib/mul.j':(88,5))
# Assign { target: Index("temp_hi", Number(0n1/0x01u8)), var_type: None, value: Index("temp", Number(0n3/0x03u8)) }
# 026a9 Copy8 [Register(0x5c), Register(0x69)]
#       temp_hi[0x01..0x02] <- t3b80 U8 Some('/lutcomp/programs/lib/mul.j':(88,5))
#       Assign { target: Index("temp_hi", Number(0n1/0x01u8)), var_type: None, value: Index("temp", Number(0n3/0x03u8)) }
0b 5c 69 

# te546 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(90,5))
# Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Ident("__frame_pointer") }
# Ident("__frame_pointer")
# 026ac Copy32 [Register(0x0c), Register(0x6c)]
#       te546 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(90,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Ident("__frame_pointer") }
#       Ident("__frame_pointer")
21 0c 6c 

# t3308 <- temp_lo U32 Some('/lutcomp/programs/lib/mul.j':(90,5))
# Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
# Ident("temp_lo")
# 026af Copy32 [Register(0x70), Register(0x38)]
#       t3308 <- temp_lo U32 Some('/lutcomp/programs/lib/mul.j':(90,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
#       Ident("temp_lo")
21 70 38 

# mem[te546] <- t3308 U32 Some('/lutcomp/programs/lib/mul.j':(90,5))
# Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
# 026b2 Store32_1 [Register(0x38), Register(0x6c)]
#       mem[te546] <- t3308 U32 Some('/lutcomp/programs/lib/mul.j':(90,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
23 38 6c 

# 026b5 Store32_2 []
#       mem[te546] <- t3308 U32 Some('/lutcomp/programs/lib/mul.j':(90,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
24 

# te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(91,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
# Ident("__frame_pointer")
# 026b6 Copy32 [Register(0x0c), Register(0x6c)]
#       te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(91,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
#       Ident("__frame_pointer")
21 0c 6c 

# t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(91,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
# 026b9 Copy32 [Register(0x6c), Register(0x38)]
#       t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(91,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
21 6c 38 

# 026bc AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000004=4)]
#       t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(91,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
32 38 04 00 00 00 

# t41f5 <- temp_hi U32 Some('/lutcomp/programs/lib/mul.j':(91,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# Ident("temp_hi")
# 026c2 Copy32 [Register(0x68), Register(0x3c)]
#       t41f5 <- temp_hi U32 Some('/lutcomp/programs/lib/mul.j':(91,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Ident("temp_hi")
21 68 3c 

# mem[t3f2a] <- t41f5 U32 Some('/lutcomp/programs/lib/mul.j':(91,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# 026c5 Store32_1 [Register(0x3c), Register(0x38)]
#       mem[t3f2a] <- t41f5 U32 Some('/lutcomp/programs/lib/mul.j':(91,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
23 3c 38 

# 026c8 Store32_2 []
#       mem[t3f2a] <- t41f5 U32 Some('/lutcomp/programs/lib/mul.j':(91,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
24 

# tac13 <- c U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/lutcomp/programs/lib/mul.j':(92,5))\nVoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }\nCall(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# AddressOf(Ident("temp64"))
# Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))
# Ident("__frame_pointer")
# 026c9 Copy32 [Register(0x0c), Register(0x6c)]
#       te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))
#       Ident("__frame_pointer")
21 0c 6c 

# t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# AddressOf(Ident("temp64"))
# Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))
# 026cc Copy32 [Register(0x6c), Register(0x38)]
#       t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))
21 6c 38 

# 026cf AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000000=0)]
#       t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))
32 38 00 00 00 00 

# tf4b2 <- t4a94 U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# AddressOf(Ident("temp64"))
# 026d5 Copy32 [Register(0x38), Register(0x3c)]
#       tf4b2 <- t4a94 U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
21 38 3c 

# tac13 <- c U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/lutcomp/programs/lib/mul.j':(92,5))\nVoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }\nCall(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_mul32_64_add_U64_1_a <- tac13 U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# 026d8 Copy32 [Register(0x44), Register(0x34)]
#       inline_mul32_64_add_U64_1_a <- tac13 U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
21 44 34 

# inline_mul32_64_add_U64_1_b <- tf4b2 U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# 026db Copy32 [Register(0x3c), Register(0x38)]
#       inline_mul32_64_add_U64_1_b <- tf4b2 U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
21 3c 38 

# inline_mul32_64_add_U64_1_c <- tac13 U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# 026de Copy32 [Register(0x44), Register(0x3c)]
#       inline_mul32_64_add_U64_1_c <- tac13 U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
21 44 3c 

# inline_mul32_64_add_U64_1_tbeec <- inline_mul32_64_add_U64_1_a U32 Some('/lutcomp/programs/lib/U64.j':(7,5))
# Assign { target: Ident("lo"), var_type: Some(Number(U32)), value: PtrFieldDeref("a", "lo") }
# PtrFieldDeref("a", "lo")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_tbeec <- inline_mul32_64_add_U64_1_a U32 Some('/lutcomp/programs/lib/U64.j':(7,5))\nAssign { target: Ident(\"lo\"), var_type: Some(Number(U32)), value: PtrFieldDeref(\"a\", \"lo\") }\nPtrFieldDeref(\"a\", \"lo\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"a\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x34), Register(0x34)], resolved: None }
# inline_mul32_64_add_U64_1_lo <- mem[inline_mul32_64_add_U64_1_tbeec] U32 Some('/lutcomp/programs/lib/U64.j':(7,5))
# Assign { target: Ident("lo"), var_type: Some(Number(U32)), value: PtrFieldDeref("a", "lo") }
# PtrFieldDeref("a", "lo")
# 026e1 Load32 [Register(0x34), Register(0x40)]
#       inline_mul32_64_add_U64_1_lo <- mem[inline_mul32_64_add_U64_1_tbeec] U32 Some('/lutcomp/programs/lib/U64.j':(7,5))
#       Assign { target: Ident("lo"), var_type: Some(Number(U32)), value: PtrFieldDeref("a", "lo") }
#       PtrFieldDeref("a", "lo")
22 34 40 

# inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n4/0x00000004u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n4/0x00000004u32))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# 026e4 Copy32 [Register(0x3c), Register(0x44)]
#       inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
21 3c 44 

# 026e7 AddImm32IgnoreCarry [Register(0x44), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
32 44 04 00 00 00 

# inline_mul32_64_add_U64_1_t144a <- inline_mul32_64_add_U64_1_a Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("a", "hi")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32))
# 026ed Copy32 [Register(0x34), Register(0x48)]
#       inline_mul32_64_add_U64_1_t144a <- inline_mul32_64_add_U64_1_a Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("a", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32))
21 34 48 

# 026f0 AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_1_t144a <- inline_mul32_64_add_U64_1_a Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("a", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32))
32 48 04 00 00 00 

# inline_mul32_64_add_U64_1_te24c <- mem[inline_mul32_64_add_U64_1_t144a] U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("a", "hi")
# 026f6 Load32 [Register(0x48), Register(0x4c)]
#       inline_mul32_64_add_U64_1_te24c <- mem[inline_mul32_64_add_U64_1_t144a] U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("a", "hi")
22 48 4c 

# inline_mul32_64_add_U64_1_t809 <- inline_mul32_64_add_U64_1_b Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("b", "hi")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32))
# 026f9 Copy32 [Register(0x38), Register(0x48)]
#       inline_mul32_64_add_U64_1_t809 <- inline_mul32_64_add_U64_1_b Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("b", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32))
21 38 48 

# 026fc AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_1_t809 <- inline_mul32_64_add_U64_1_b Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("b", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32))
32 48 04 00 00 00 

# inline_mul32_64_add_U64_1_t153d <- mem[inline_mul32_64_add_U64_1_t809] U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("b", "hi")
# 02702 Load32 [Register(0x48), Register(0x48)]
#       inline_mul32_64_add_U64_1_t153d <- mem[inline_mul32_64_add_U64_1_t809] U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("b", "hi")
22 48 48 

# inline_mul32_64_add_U64_1_t6f1c <- inline_mul32_64_add_U64_1_te24c Add Var(inline_mul32_64_add_U64_1_t153d) Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# 02705 ClearCarry []
#       inline_mul32_64_add_U64_1_t6f1c <- inline_mul32_64_add_U64_1_te24c Add Var(inline_mul32_64_add_U64_1_t153d) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
03 

# 02706 AddCarry32_1 [Register(0x4c), Register(0x48), Register(0x48)]
#       inline_mul32_64_add_U64_1_t6f1c <- inline_mul32_64_add_U64_1_te24c Add Var(inline_mul32_64_add_U64_1_t153d) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
30 4c 48 48 

# 0270a AddCarry32_2 []
#       inline_mul32_64_add_U64_1_t6f1c <- inline_mul32_64_add_U64_1_te24c Add Var(inline_mul32_64_add_U64_1_t153d) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
31 

# mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_t6f1c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# 0270b Store32_1 [Register(0x48), Register(0x44)]
#       mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_t6f1c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
23 48 44 

# 0270e Store32_2 []
#       mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_t6f1c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
24 

# inline_mul32_64_add_U64_1_t8956 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t8956 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(9,5))\nAssign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_mul32_64_add_U64_1_tbeec <- inline_mul32_64_add_U64_1_a U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# PtrFieldDeref("a", "lo")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_tbeec <- inline_mul32_64_add_U64_1_a U32 Some('/lutcomp/programs/lib/U64.j':(9,5))\nAssign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }\nArithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))\nPtrFieldDeref(\"a\", \"lo\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"a\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x34), Register(0x34)], resolved: None }
# inline_mul32_64_add_U64_1_td868 <- mem[inline_mul32_64_add_U64_1_tbeec] U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# PtrFieldDeref("a", "lo")
# 0270f Load32 [Register(0x34), Register(0x44)]
#       inline_mul32_64_add_U64_1_td868 <- mem[inline_mul32_64_add_U64_1_tbeec] U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
#       PtrFieldDeref("a", "lo")
22 34 44 

# inline_mul32_64_add_U64_1_td5bf <- mem[inline_mul32_64_add_U64_1_b] U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# PtrFieldDeref("b", "lo")
# 02712 Load32 [Register(0x38), Register(0x34)]
#       inline_mul32_64_add_U64_1_td5bf <- mem[inline_mul32_64_add_U64_1_b] U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
#       PtrFieldDeref("b", "lo")
22 38 34 

# inline_mul32_64_add_U64_1_ta95f <- inline_mul32_64_add_U64_1_td868 Add Var(inline_mul32_64_add_U64_1_td5bf) Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# 02715 ClearCarry []
#       inline_mul32_64_add_U64_1_ta95f <- inline_mul32_64_add_U64_1_td868 Add Var(inline_mul32_64_add_U64_1_td5bf) Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
03 

# 02716 AddCarry32_1 [Register(0x44), Register(0x34), Register(0x34)]
#       inline_mul32_64_add_U64_1_ta95f <- inline_mul32_64_add_U64_1_td868 Add Var(inline_mul32_64_add_U64_1_td5bf) Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
30 44 34 34 

# 0271a AddCarry32_2 []
#       inline_mul32_64_add_U64_1_ta95f <- inline_mul32_64_add_U64_1_td868 Add Var(inline_mul32_64_add_U64_1_td5bf) Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
31 

# mem[inline_mul32_64_add_U64_1_t8956] <- inline_mul32_64_add_U64_1_ta95f U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# 0271b Store32_1 [Register(0x34), Register(0x3c)]
#       mem[inline_mul32_64_add_U64_1_t8956] <- inline_mul32_64_add_U64_1_ta95f U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
23 34 3c 

# 0271e Store32_2 []
#       mem[inline_mul32_64_add_U64_1_t8956] <- inline_mul32_64_add_U64_1_ta95f U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
24 

# inline_mul32_64_add_U64_1_t8956 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# PtrFieldDeref("c", "lo")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t8956 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(0n1/0x00000001u32)) }])], else_block: [] }\nComparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }\nPtrFieldDeref(\"c\", \"lo\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_mul32_64_add_U64_1_t90ac <- mem[inline_mul32_64_add_U64_1_t8956] U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# PtrFieldDeref("c", "lo")
# 0271f Load32 [Register(0x3c), Register(0x38)]
#       inline_mul32_64_add_U64_1_t90ac <- mem[inline_mul32_64_add_U64_1_t8956] U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
#       PtrFieldDeref("c", "lo")
22 3c 38 

# inline_mul32_64_add_U64_1_t1506 <- inline_mul32_64_add_U64_1_lo U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# Ident("lo")
# 02722 Copy32 [Register(0x40), Register(0x34)]
#       inline_mul32_64_add_U64_1_t1506 <- inline_mul32_64_add_U64_1_lo U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
#       Ident("lo")
21 40 34 

# if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# 02725 Cmp8 [Register(0x37), Register(0x3b)]
#       if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
15 37 3b 

# 02728 Cmp8IfZero [Register(0x36), Register(0x3a)]
#       if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
16 36 3a 

# 0272b Cmp8IfZero [Register(0x35), Register(0x39)]
#       if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
16 35 39 

# 0272e Cmp8IfZero [Register(0x34), Register(0x38)]
#       if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
16 34 38 

# 02731 JcImm [Label24(inline_mul32_64_add_U64_1_add_U64_if_else_0_2)]
#       if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
71 58 27 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(0n1/0x00000001u32)) }])], else_block: [] }\nComparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }\n", opcode: JmpImm, args: [Label24(inline_mul32_64_add_U64_1_add_U64_if_true_0_1)], resolved: None }
# :inline_mul32_64_add_U64_1_add_U64_if_true_0_1 Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
# inline_mul32_64_add_U64_1_add_U64_if_true_0_1
# inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(0n1/0x00000001u32)) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n4/0x00000004u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n4/0x00000004u32))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# 02735 Copy32 [Register(0x3c), Register(0x44)]
#       inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
21 3c 44 

# 02738 AddImm32IgnoreCarry [Register(0x44), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
32 44 04 00 00 00 

# inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
# PtrFieldDeref("c", "hi")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(0n1/0x00000001u32)) }\nArithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(0n1/0x00000001u32))\nPtrFieldDeref(\"c\", \"hi\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n4/0x00000004u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n4/0x00000004u32))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
# PtrFieldDeref("c", "hi")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# 0273e Copy32 [Register(0x3c), Register(0x44)]
#       inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
#       PtrFieldDeref("c", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
21 3c 44 

# 02741 AddImm32IgnoreCarry [Register(0x44), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
#       PtrFieldDeref("c", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
32 44 04 00 00 00 

# inline_mul32_64_add_U64_1_tf677 <- mem[inline_mul32_64_add_U64_1_t1335] U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
# PtrFieldDeref("c", "hi")
# 02747 Load32 [Register(0x44), Register(0x34)]
#       inline_mul32_64_add_U64_1_tf677 <- mem[inline_mul32_64_add_U64_1_t1335] U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
#       PtrFieldDeref("c", "hi")
22 44 34 

# inline_mul32_64_add_U64_1_tcbd1 <- inline_mul32_64_add_U64_1_tf677 Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
# 0274a AddImm32IgnoreCarry [Register(0x34), Constant32(0x00000001=1)]
#       inline_mul32_64_add_U64_1_tcbd1 <- inline_mul32_64_add_U64_1_tf677 Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
32 34 01 00 00 00 

# mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_tcbd1 U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# 02750 Store32_1 [Register(0x34), Register(0x44)]
#       mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_tcbd1 U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
23 34 44 

# 02753 Store32_2 []
#       mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_tcbd1 U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
24 

# goto inline_mul32_64_add_U64_1_add_U64_if_end_0 Some('/lutcomp/programs/lib/U64.j':(10,5))
# 02754 JmpImm [Label24(inline_mul32_64_add_U64_1_add_U64_if_end_0)]
#       goto inline_mul32_64_add_U64_1_add_U64_if_end_0 Some('/lutcomp/programs/lib/U64.j':(10,5))
70 58 27 00 

# :inline_mul32_64_add_U64_1_add_U64_if_else_0_2 Some('/lutcomp/programs/lib/U64.j':(10,5))
# inline_mul32_64_add_U64_1_add_U64_if_else_0_2
# :inline_mul32_64_add_U64_1_add_U64_if_end_0 Some('/lutcomp/programs/lib/U64.j':(10,5))
# inline_mul32_64_add_U64_1_add_U64_if_end_0
# goto inline_mul32_64_add_U64_1_function_end_add_U64 None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_mul32_64_add_U64_1_function_end_add_U64 None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_mul32_64_add_U64_1_function_end_add_U64)], resolved: None }
# :inline_mul32_64_add_U64_1_function_end_add_U64 None
# inline_mul32_64_add_U64_1_function_end_add_U64
# __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) None
# Return { value: None }
# 02758 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) None
#       Return { value: None }
32 0c 08 00 00 00 

# return None None
# Return { value: None }
# 0275e AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       Dealloc 8 bytes from stack
32 0c 08 00 00 00 

# 02764 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_mul32_64 None
# function_end_mul32_64
# Unreachable None
# 02766 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :print_dec32
# Ret None
# Arg0=a
# Var a (Arg0 a Number(U32)) Reg(U32) Some([116, 117, 118, 119])
# Var b (Local b Number(U32) Reg(U32)) Reg(U32) Some([120, 121, 122, 123])
# Var inline_print_dec32_div32_by10_47_a (Arg0 a Number(U32)) Reg(U32) Some([120, 121, 122, 123])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a (Arg0 a Number(U32)) Reg(U32) Some([120, 121, 122, 123])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1a5d (t1a5d Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n31/0x1fu8))) Reg(U8) Some([124])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t286d (t286d Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))) Reg(U8) Some([124])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 (t3009 Index("a", Number(0n1/0x01u8))) Reg(U8) Some([125])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 (t3404 Index("a", Number(0n0/0x00u8))) Reg(U8) Some([124])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 (t3b02 Index("a", Number(0n2/0x02u8))) Reg(U8) Some([126])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4b1e (t4b1e Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8))) Reg(U8) Some([124])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4e2b (t4e2b Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))) Reg(U8) Some([126])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7123 (t7123 Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8))) Reg(U8) Some([124])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7d53 (t7d53 Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8))) Reg(U8) Some([124])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t858c (t858c Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8))) Reg(U8) Some([124])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8792 (t8792 Ident("a")) Reg(U32) Some([120, 121, 122, 123])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8c2e (t8c2e Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8)))) Reg(U8) Some([124])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df (t94df Index("a", Number(0n3/0x03u8))) Reg(U8) Some([125])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta4e7 (ta4e7 Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))) Reg(U8) Some([124])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tb4e5 (tb4e5 Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8)))) Reg(U8) Some([124])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_td726 (td726 Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8)))) Reg(U8) Some([124])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te6a8 (te6a8 Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8))) Reg(U8) Some([124])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tf695 (tf695 Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8))) Reg(U8) Some([124])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tfbb9 (tfbb9 Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8))) Reg(U8) Some([124])
# Var inline_print_dec32_div32_by10_47_t1c61 (t1c61 AddressOf(Ident("prod"))) Reg(U32) Some([128, 129, 130, 131]) Number(0n987656/0x000f1208u32)
# Var inline_print_dec32_div32_by10_47_t45ae (t45ae Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) Reg(U32) Some([120, 121, 122, 123])
# Var inline_print_dec32_div32_by10_47_tb354 (tb354 LocalFieldDeref("prod", "hi")) Reg(U32) Some([120, 121, 122, 123])
# Var inline_print_dec32_div32_by10_47_tb7c3 (tb7c3 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Number(0n987656/0x000f1208u32), Number(0n4/0x00000004u32)) }) Reg(U32) Some([120, 121, 122, 123]) Number(0n987660/0x000f120cu32)
# Var inline_print_dec32_div32_by10_47_tef1a (tef1a Number(0xcccccccdu32)) Reg(U32) Some([132, 133, 134, 135]) Number(0xcccccccdu32)
# Var inline_print_dec32_mul32_by10_14_a (Arg0 a Number(U32)) Reg(U32) Some([116, 117, 118, 119])
# Var inline_print_dec32_mul32_by10_14_b (Local b Number(U32) Reg(U32)) Reg(U32) Some([120, 121, 122, 123])
# Var inline_print_dec32_mul32_by10_14_t7eaf (t7eaf Arithmetic(Add, Ident("b"), Ident("a"))) Reg(U32) Some([116, 117, 118, 119])
# Var inline_print_dec32_mul32_by10_14_t8792 (t8792 Ident("a")) Reg(U32) Some([116, 117, 118, 119])
# Var inline_print_dec32_mul32_by10_14_tace9 (tace9 Ident("b")) Reg(U32) Some([120, 121, 122, 123])
# Var inline_print_dec32_putc_29_c (Arg0 c Number(U8)) Reg(U8) Some([136])
# Var inline_print_dec32_putc_29_t0 (static "lcd_enable" addr) Reg(U32) Some([120, 121, 122, 123]) Number(0n987228/0x000f105cu32)
# Var inline_print_dec32_putc_29_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([125])
# Var inline_print_dec32_putc_29_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([124]) Number(0n0/0x00u8)
# Var inline_print_dec32_putc_29_tac13 (tac13 Ident("c")) Reg(U8) Some([136])
# Var t3404 (t3404 Index("a", Number(0n0/0x00u8))) Reg(U8) Some([136])
# Var t6f38 (t6f38 Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))) Reg(U8) Some([136])
# Var t86e2 (t86e2 Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) Reg(U32) Some([116, 117, 118, 119])
# Var t8792 (t8792 Ident("a")) Reg(U32) Some([128, 129, 130, 131])
# Var t9c15 (t9c15 Number(0n256/0x00000100u32)) Reg(U32) Some([120, 121, 122, 123]) Number(0n256/0x00000100u32)
# Var tace9 (tace9 Ident("b")) Reg(U32) Some([120, 121, 122, 123])
# 0276b Copy32 [Register(0x00), Register(0x74)]
#       Save function parameter 'a' registers [0, 1, 2, 3] to locals [116, 117, 118, 119].
21 00 74 

# t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }, Return { value: None }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
# Ident("a")
# 0276e Copy32 [Register(0x74), Register(0x80)]
#       t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
#       Ident("a")
21 74 80 

# t9c15 <- 0n256/0x00000100u32  Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }, Return { value: None }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
# Number(0n256/0x00000100u32)
# 02771 LoadImm32 [Register(0x78), Constant32(0x00000100=256)]
#       t9c15 <- 0n256/0x00000100u32  Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
#       Number(0n256/0x00000100u32)
20 78 00 01 00 00 

# if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }, Return { value: None }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
# 02777 Cmp8 [Register(0x7b), Register(0x83)]
#       if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
15 7b 83 

# 0277a Cmp8IfZero [Register(0x7a), Register(0x82)]
#       if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
16 7a 82 

# 0277d Cmp8IfZero [Register(0x79), Register(0x81)]
#       if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
16 79 81 

# 02780 Cmp8IfZero [Register(0x78), Register(0x80)]
#       if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
16 78 80 

# 02783 JcImm [Label24(print_dec32_if_else_0_2)]
#       if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
71 a9 27 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(142,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(0n256/0x00000100u32) }, [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Index(\"a\", Number(0n0/0x00u8))] }) }, Return { value: None }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(0n256/0x00000100u32) }\n", opcode: JmpImm, args: [Label24(print_dec32_if_true_0_1)], resolved: None }
# :print_dec32_if_true_0_1 Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }, Return { value: None }])], else_block: [] }
# print_dec32_if_true_0_1
# t3404 <- a[0x00..0x01] U8 Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }
# Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] })
# Index("a", Number(0n0/0x00u8))
# 02787 Copy8 [Register(0x74), Register(0x88)]
#       t3404 <- a[0x00..0x01] U8 Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }
#       Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] })
#       Index("a", Number(0n0/0x00u8))
0b 74 88 

# None <= call print_dec8(t3404,) Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }
# Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] })
# 0278a Copy8 [Register(0x88), Register(0x00)]
#       Arg0[a]=t3404 None <= call print_dec8(t3404,) Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }
#       Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] })
0b 88 00 

# Registers used by this function: {116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 204, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252}
# Registers to save: []
# 0278d AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec8))
32 0c fc ff ff ff 

# 02793 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec8))
25 0c 9d 27 00 00 

# 02799 JmpImm [Label24(:print_dec8)]
#       PseudoCall(Label24(:print_dec8))
70 62 29 00 

# 0279d AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec8))
32 0c 04 00 00 00 

# return None Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# Return { value: None }
# 027a3 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto print_dec32_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# 027a5 JmpImm [Label24(print_dec32_if_end_0)]
#       goto print_dec32_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
70 a9 27 00 

# :print_dec32_if_else_0_2 Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# print_dec32_if_else_0_2
# :print_dec32_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# print_dec32_if_end_0
# t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(147,5))
# Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Call(Call { function: "div32_by10", parameters: [Ident("a")] }) }
# Call(Call { function: "div32_by10", parameters: [Ident("a")] })
# Ident("a")
# 027a9 Copy32 [Register(0x74), Register(0x80)]
#       t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(147,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Call(Call { function: "div32_by10", parameters: [Ident("a")] }) }
#       Call(Call { function: "div32_by10", parameters: [Ident("a")] })
#       Ident("a")
21 74 80 

# inline_print_dec32_div32_by10_47_a <- t8792 U32 Some('/lutcomp/programs/lib/rpnlib.j':(147,5))
# Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Call(Call { function: "div32_by10", parameters: [Ident("a")] }) }
# Call(Call { function: "div32_by10", parameters: [Ident("a")] })
# 027ac Copy32 [Register(0x80), Register(0x78)]
#       inline_print_dec32_div32_by10_47_a <- t8792 U32 Some('/lutcomp/programs/lib/rpnlib.j':(147,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Call(Call { function: "div32_by10", parameters: [Ident("a")] }) }
#       Call(Call { function: "div32_by10", parameters: [Ident("a")] })
21 80 78 

# inline_print_dec32_div32_by10_47_tef1a <- 0xcccccccdu32  Some('/lutcomp/programs/lib/div.j':(130,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] })
# Number(0xcccccccdu32)
# 027af LoadImm32 [Register(0x84), Constant32(0xcccccccd=3435973837)]
#       inline_print_dec32_div32_by10_47_tef1a <- 0xcccccccdu32  Some('/lutcomp/programs/lib/div.j':(130,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] })
#       Number(0xcccccccdu32)
20 84 cd cc cc cc 

# inline_print_dec32_div32_by10_47_t1c61 <- 0n987656/0x000f1208u32  Some('/lutcomp/programs/lib/div.j':(130,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] })
# AddressOf(Ident("prod"))
# Number(0n987656/0x000f1208u32)
# 027b5 LoadImm32 [Register(0x80), Constant32(0x000f1208=987656)]
#       inline_print_dec32_div32_by10_47_t1c61 <- 0n987656/0x000f1208u32  Some('/lutcomp/programs/lib/div.j':(130,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] })
#       AddressOf(Ident("prod"))
#       Number(0n987656/0x000f1208u32)
20 80 08 12 0f 00 

# None <= call mul32_64(inline_print_dec32_div32_by10_47_a,inline_print_dec32_div32_by10_47_tef1a,inline_print_dec32_div32_by10_47_t1c61,) Some('/lutcomp/programs/lib/div.j':(130,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] })
# 027bb Copy32 [Register(0x78), Register(0x00)]
#       Arg0[a]=inline_print_dec32_div32_by10_47_a None <= call mul32_64(inline_print_dec32_div32_by10_47_a,inline_print_dec32_div32_by10_47_tef1a,inline_print_dec32_div32_by10_47_t1c61,) Some('/lutcomp/programs/lib/div.j':(130,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] })
21 78 00 

# 027be Copy32 [Register(0x84), Register(0x04)]
#       Arg1[b]=inline_print_dec32_div32_by10_47_tef1a None <= call mul32_64(inline_print_dec32_div32_by10_47_a,inline_print_dec32_div32_by10_47_tef1a,inline_print_dec32_div32_by10_47_t1c61,) Some('/lutcomp/programs/lib/div.j':(130,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] })
21 84 04 

# 027c1 Copy32 [Register(0x80), Register(0x08)]
#       Arg2[c]=inline_print_dec32_div32_by10_47_t1c61 None <= call mul32_64(inline_print_dec32_div32_by10_47_a,inline_print_dec32_div32_by10_47_tef1a,inline_print_dec32_div32_by10_47_t1c61,) Some('/lutcomp/programs/lib/div.j':(130,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] })
21 80 08 

# Registers used by this function: {116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136}
# Registers used by callee tree: {52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115}
# Registers to save: []
# 027c4 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:mul32_64))
32 0c fc ff ff ff 

# 027ca StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:mul32_64))
25 0c d4 27 00 00 

# 027d0 JmpImm [Label24(:mul32_64)]
#       PseudoCall(Label24(:mul32_64))
70 eb 22 00 

# 027d4 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:mul32_64))
32 0c 04 00 00 00 

# inline_print_dec32_div32_by10_47_tb7c3 <- 0n987660/0x000f120cu32  Some('/lutcomp/programs/lib/div.j':(131,5))
# Return { value: Some(Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) }
# Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })
# LocalFieldDeref("prod", "hi")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Number(0n987656/0x000f1208u32), Number(0n4/0x00000004u32)) }
# Number(0n987660/0x000f120cu32)
# 027da LoadImm32 [Register(0x78), Constant32(0x000f120c=987660)]
#       inline_print_dec32_div32_by10_47_tb7c3 <- 0n987660/0x000f120cu32  Some('/lutcomp/programs/lib/div.j':(131,5))
#       Return { value: Some(Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) }
#       Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })
#       LocalFieldDeref("prod", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Number(0n987656/0x000f1208u32), Number(0n4/0x00000004u32)) }
#       Number(0n987660/0x000f120cu32)
20 78 0c 12 0f 00 

# inline_print_dec32_div32_by10_47_tb354 <- mem[inline_print_dec32_div32_by10_47_tb7c3] U32 Some('/lutcomp/programs/lib/div.j':(131,5))
# Return { value: Some(Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) }
# Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })
# LocalFieldDeref("prod", "hi")
# 027e0 Load32 [Register(0x78), Register(0x78)]
#       inline_print_dec32_div32_by10_47_tb354 <- mem[inline_print_dec32_div32_by10_47_tb7c3] U32 Some('/lutcomp/programs/lib/div.j':(131,5))
#       Return { value: Some(Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) }
#       Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })
#       LocalFieldDeref("prod", "hi")
22 78 78 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a <- inline_print_dec32_div32_by10_47_tb354 U32 Some('/lutcomp/programs/lib/div.j':(131,5))
# Return { value: Some(Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) }
# Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })
# optimized away noop copy Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a <- inline_print_dec32_div32_by10_47_tb354 U32 Some('/lutcomp/programs/lib/div.j':(131,5))\nReturn { value: Some(Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })) }\nCall(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })\n", opcode: Copy32, args: [Register(0x78), Register(0x78)], resolved: None }
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(112,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8))
# Index("a", Number(0n0/0x00u8))
# 027e3 Copy8 [Register(0x78), Register(0x7c)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(112,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8))
#       Index("a", Number(0n0/0x00u8))
0b 78 7c 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tfbb9 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(112,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8))
# 027e6 LoadImm8 [Register(0x00), Constant8(0x03=3)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tfbb9 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(112,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8))
04 00 03 

# 027e9 Shift8 [Constant8(0x04=4), Register(0x00), Register(0x7c), Register(0x7c)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tfbb9 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(112,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8))
1e 04 00 7c 7c 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tfbb9 U8 Some('/lutcomp/programs/lib/div.j':(112,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8)) }
# 027ee Copy8 [Register(0x7c), Register(0x78)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tfbb9 U8 Some('/lutcomp/programs/lib/div.j':(112,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8)) }
0b 7c 78 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(113,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8))
# Index("a", Number(0n1/0x01u8))
# 027f1 Copy8 [Register(0x79), Register(0x7d)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(113,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8))
#       Index("a", Number(0n1/0x01u8))
0b 79 7d 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t858c <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(113,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8))
# 027f4 LoadImm8 [Register(0x00), Constant8(0x03=3)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t858c <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(113,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8))
04 00 03 

# 027f7 Shift8 [Constant8(0x04=4), Register(0x00), Register(0x7d), Register(0x7c)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t858c <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(113,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8))
1e 04 00 7d 7c 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t858c U8 Some('/lutcomp/programs/lib/div.j':(113,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8)) }
# 027fc Copy8 [Register(0x7c), Register(0x79)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t858c U8 Some('/lutcomp/programs/lib/div.j':(113,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8)) }
0b 7c 79 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(114,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8))
# Index("a", Number(0n2/0x02u8))
# 027ff Copy8 [Register(0x7a), Register(0x7e)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(114,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8))
#       Index("a", Number(0n2/0x02u8))
0b 7a 7e 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7d53 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(114,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8))
# 02802 LoadImm8 [Register(0x00), Constant8(0x03=3)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7d53 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(114,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8))
04 00 03 

# 02805 Shift8 [Constant8(0x04=4), Register(0x00), Register(0x7e), Register(0x7c)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7d53 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(114,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8))
1e 04 00 7e 7c 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7d53 U8 Some('/lutcomp/programs/lib/div.j':(114,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8)) }
# 0280a Copy8 [Register(0x7c), Register(0x7a)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7d53 U8 Some('/lutcomp/programs/lib/div.j':(114,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8)) }
0b 7c 7a 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(115,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8))
# Index("a", Number(0n3/0x03u8))
# 0280d Copy8 [Register(0x7b), Register(0x7d)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(115,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8))
#       Index("a", Number(0n3/0x03u8))
0b 7b 7d 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4b1e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(115,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8))
# 02810 LoadImm8 [Register(0x00), Constant8(0x03=3)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4b1e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(115,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8))
04 00 03 

# 02813 Shift8 [Constant8(0x04=4), Register(0x00), Register(0x7d), Register(0x7c)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4b1e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(115,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8))
1e 04 00 7d 7c 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4b1e U8 Some('/lutcomp/programs/lib/div.j':(115,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8)) }
# 02818 Copy8 [Register(0x7c), Register(0x7b)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4b1e U8 Some('/lutcomp/programs/lib/div.j':(115,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8)) }
0b 7c 7b 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(117,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n31/0x1fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n31/0x1fu8))
# Index("a", Number(0n0/0x00u8))
# 0281b Copy8 [Register(0x78), Register(0x7c)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(117,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n31/0x1fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n31/0x1fu8))
#       Index("a", Number(0n0/0x00u8))
0b 78 7c 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1a5d <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(117,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n31/0x1fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n31/0x1fu8))
# 0281e AndImm8 [Register(0x7c), Constant8(0x1f=31)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1a5d <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(117,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n31/0x1fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n31/0x1fu8))
18 7c 1f 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1a5d U8 Some('/lutcomp/programs/lib/div.j':(117,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n31/0x1fu8)) }
# 02821 Copy8 [Register(0x7c), Register(0x78)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1a5d U8 Some('/lutcomp/programs/lib/div.j':(117,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n31/0x1fu8)) }
0b 7c 78 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(118,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8)))
# Index("a", Number(0n0/0x00u8))
# 02824 Copy8 [Register(0x78), Register(0x7c)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(118,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8)))
#       Index("a", Number(0n0/0x00u8))
0b 78 7c 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(118,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))
# Index("a", Number(0n1/0x01u8))
# 02827 Copy8 [Register(0x79), Register(0x7d)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(118,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))
#       Index("a", Number(0n1/0x01u8))
0b 79 7d 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4e2b <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 BitwiseAnd Number(0n224/0xe0u8) Some('/lutcomp/programs/lib/div.j':(118,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))
# 0282a Copy8 [Register(0x7d), Register(0x7e)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4e2b <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 BitwiseAnd Number(0n224/0xe0u8) Some('/lutcomp/programs/lib/div.j':(118,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))
0b 7d 7e 

# 0282d AndImm8 [Register(0x7e), Constant8(0xe0=224)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4e2b <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 BitwiseAnd Number(0n224/0xe0u8) Some('/lutcomp/programs/lib/div.j':(118,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))
18 7e e0 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_td726 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4e2b) Some('/lutcomp/programs/lib/div.j':(118,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8)))
# 02830 Or8 [Register(0x7c), Register(0x7e), Register(0x7c)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_td726 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4e2b) Some('/lutcomp/programs/lib/div.j':(118,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8)))
1c 7c 7e 7c 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_td726 U8 Some('/lutcomp/programs/lib/div.j':(118,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))) }
# 02834 Copy8 [Register(0x7c), Register(0x78)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_td726 U8 Some('/lutcomp/programs/lib/div.j':(118,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))) }
0b 7c 78 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(119,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8))
# Index("a", Number(0n1/0x01u8))
# 02837 Copy8 [Register(0x79), Register(0x7d)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(119,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8))
#       Index("a", Number(0n1/0x01u8))
0b 79 7d 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7123 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(119,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8))
# 0283a Copy8 [Register(0x7d), Register(0x7c)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7123 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(119,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8))
0b 7d 7c 

# 0283d AndImm8 [Register(0x7c), Constant8(0x1f=31)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7123 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(119,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8))
18 7c 1f 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7123 U8 Some('/lutcomp/programs/lib/div.j':(119,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8)) }
# 02840 Copy8 [Register(0x7c), Register(0x79)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7123 U8 Some('/lutcomp/programs/lib/div.j':(119,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8)) }
0b 7c 79 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(120,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8)))
# Index("a", Number(0n1/0x01u8))
# 02843 Copy8 [Register(0x79), Register(0x7d)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(120,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8)))
#       Index("a", Number(0n1/0x01u8))
0b 79 7d 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(120,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))
# Index("a", Number(0n2/0x02u8))
# 02846 Copy8 [Register(0x7a), Register(0x7e)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(120,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))
#       Index("a", Number(0n2/0x02u8))
0b 7a 7e 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta4e7 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 BitwiseAnd Number(0n224/0xe0u8) Some('/lutcomp/programs/lib/div.j':(120,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))
# 02849 Copy8 [Register(0x7e), Register(0x7c)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta4e7 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 BitwiseAnd Number(0n224/0xe0u8) Some('/lutcomp/programs/lib/div.j':(120,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))
0b 7e 7c 

# 0284c AndImm8 [Register(0x7c), Constant8(0xe0=224)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta4e7 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 BitwiseAnd Number(0n224/0xe0u8) Some('/lutcomp/programs/lib/div.j':(120,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))
18 7c e0 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tb4e5 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta4e7) Some('/lutcomp/programs/lib/div.j':(120,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8)))
# 0284f Or8 [Register(0x7d), Register(0x7c), Register(0x7c)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tb4e5 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta4e7) Some('/lutcomp/programs/lib/div.j':(120,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8)))
1c 7d 7c 7c 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tb4e5 U8 Some('/lutcomp/programs/lib/div.j':(120,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))) }
# 02853 Copy8 [Register(0x7c), Register(0x79)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tb4e5 U8 Some('/lutcomp/programs/lib/div.j':(120,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))) }
0b 7c 79 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(121,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8))
# Index("a", Number(0n2/0x02u8))
# 02856 Copy8 [Register(0x7a), Register(0x7e)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(121,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8))
#       Index("a", Number(0n2/0x02u8))
0b 7a 7e 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tf695 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(121,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8))
# 02859 Copy8 [Register(0x7e), Register(0x7c)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tf695 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(121,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8))
0b 7e 7c 

# 0285c AndImm8 [Register(0x7c), Constant8(0x1f=31)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tf695 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(121,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8))
18 7c 1f 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tf695 U8 Some('/lutcomp/programs/lib/div.j':(121,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8)) }
# 0285f Copy8 [Register(0x7c), Register(0x7a)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tf695 U8 Some('/lutcomp/programs/lib/div.j':(121,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8)) }
0b 7c 7a 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(122,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8)))
# Index("a", Number(0n2/0x02u8))
# 02862 Copy8 [Register(0x7a), Register(0x7e)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(122,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8)))
#       Index("a", Number(0n2/0x02u8))
0b 7a 7e 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(122,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))
# Index("a", Number(0n3/0x03u8))
# 02865 Copy8 [Register(0x7b), Register(0x7d)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(122,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))
#       Index("a", Number(0n3/0x03u8))
0b 7b 7d 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t286d <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df BitwiseAnd Number(0n224/0xe0u8) Some('/lutcomp/programs/lib/div.j':(122,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))
# 02868 Copy8 [Register(0x7d), Register(0x7c)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t286d <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df BitwiseAnd Number(0n224/0xe0u8) Some('/lutcomp/programs/lib/div.j':(122,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))
0b 7d 7c 

# 0286b AndImm8 [Register(0x7c), Constant8(0xe0=224)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t286d <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df BitwiseAnd Number(0n224/0xe0u8) Some('/lutcomp/programs/lib/div.j':(122,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))
18 7c e0 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8c2e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t286d) Some('/lutcomp/programs/lib/div.j':(122,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8)))
# 0286e Or8 [Register(0x7e), Register(0x7c), Register(0x7c)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8c2e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t286d) Some('/lutcomp/programs/lib/div.j':(122,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8)))
1c 7e 7c 7c 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8c2e U8 Some('/lutcomp/programs/lib/div.j':(122,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))) }
# 02872 Copy8 [Register(0x7c), Register(0x7a)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8c2e U8 Some('/lutcomp/programs/lib/div.j':(122,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))) }
0b 7c 7a 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(123,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8))
# Index("a", Number(0n3/0x03u8))
# 02875 Copy8 [Register(0x7b), Register(0x7d)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(123,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8))
#       Index("a", Number(0n3/0x03u8))
0b 7b 7d 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te6a8 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(123,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8))
# 02878 Copy8 [Register(0x7d), Register(0x7c)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te6a8 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(123,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8))
0b 7d 7c 

# 0287b AndImm8 [Register(0x7c), Constant8(0x1f=31)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te6a8 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(123,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8))
18 7c 1f 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te6a8 U8 Some('/lutcomp/programs/lib/div.j':(123,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8)) }
# 0287e Copy8 [Register(0x7c), Register(0x7b)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te6a8 U8 Some('/lutcomp/programs/lib/div.j':(123,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8)) }
0b 7c 7b 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8792 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a U32 Some('/lutcomp/programs/lib/div.j':(124,5))
# Return { value: Some(Ident("a")) }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8792 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a U32 Some('/lutcomp/programs/lib/div.j':(124,5))\nReturn { value: Some(Ident(\"a\")) }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x78), Register(0x78)], resolved: None }
# inline_print_dec32_div32_by10_47_t45ae <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8792 U32 Some('/lutcomp/programs/lib/div.j':(124,5))
# Return { value: Some(Ident("a")) }
# optimized away noop copy Instruction { source: "inline_print_dec32_div32_by10_47_t45ae <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8792 U32 Some('/lutcomp/programs/lib/div.j':(124,5))\nReturn { value: Some(Ident(\"a\")) }\n", opcode: Copy32, args: [Register(0x78), Register(0x78)], resolved: None }
# goto inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_function_end_shiftright3 Some('/lutcomp/programs/lib/div.j':(124,5))
# Return { value: Some(Ident("a")) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_function_end_shiftright3 Some('/lutcomp/programs/lib/div.j':(124,5))\nReturn { value: Some(Ident(\"a\")) }\n", opcode: JmpImm, args: [Label24(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_function_end_shiftright3)], resolved: None }
# :inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_function_end_shiftright3 None
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_function_end_shiftright3
# b <- inline_print_dec32_div32_by10_47_t45ae U32 Some('/lutcomp/programs/lib/div.j':(131,5))
# Return { value: Some(Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) }
# optimized away noop copy Instruction { source: "b <- inline_print_dec32_div32_by10_47_t45ae U32 Some('/lutcomp/programs/lib/div.j':(131,5))\nReturn { value: Some(Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })) }\n", opcode: Copy32, args: [Register(0x78), Register(0x78)], resolved: None }
# goto inline_print_dec32_div32_by10_47_function_end_div32_by10 Some('/lutcomp/programs/lib/div.j':(131,5))
# Return { value: Some(Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_print_dec32_div32_by10_47_function_end_div32_by10 Some('/lutcomp/programs/lib/div.j':(131,5))\nReturn { value: Some(Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })) }\n", opcode: JmpImm, args: [Label24(inline_print_dec32_div32_by10_47_function_end_div32_by10)], resolved: None }
# :inline_print_dec32_div32_by10_47_function_end_div32_by10 None
# inline_print_dec32_div32_by10_47_function_end_div32_by10
# tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(148,5))\nVoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"b\")] }) }\nCall(Call { function: \"print_dec32\", parameters: [Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x78), Register(0x78)], resolved: None }
# None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("b")] })
# 02881 Copy32 [Register(0x78), Register(0x00)]
#       Arg0[a]=tace9 None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
21 78 00 

# Registers used by this function: {116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 204, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252}
# Registers to save: [116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136]
# 02884 Push8 [Register(0x88)]
#       Saving reg0x88 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 88 

# 02886 Push8 [Register(0x87)]
#       Saving reg0x87 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 87 

# 02888 Push8 [Register(0x86)]
#       Saving reg0x86 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 86 

# 0288a Push8 [Register(0x85)]
#       Saving reg0x85 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 85 

# 0288c Push8 [Register(0x84)]
#       Saving reg0x84 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 84 

# 0288e Push8 [Register(0x83)]
#       Saving reg0x83 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 83 

# 02890 Push8 [Register(0x82)]
#       Saving reg0x82 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 82 

# 02892 Push8 [Register(0x81)]
#       Saving reg0x81 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 81 

# 02894 Push8 [Register(0x80)]
#       Saving reg0x80 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 80 

# 02896 Push8 [Register(0x7e)]
#       Saving reg0x7e before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 7e 

# 02898 Push8 [Register(0x7d)]
#       Saving reg0x7d before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 7d 

# 0289a Push8 [Register(0x7c)]
#       Saving reg0x7c before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 7c 

# 0289c Push8 [Register(0x7b)]
#       Saving reg0x7b before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 7b 

# 0289e Push8 [Register(0x7a)]
#       Saving reg0x7a before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 7a 

# 028a0 Push8 [Register(0x79)]
#       Saving reg0x79 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 79 

# 028a2 Push8 [Register(0x78)]
#       Saving reg0x78 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 78 

# 028a4 Push8 [Register(0x77)]
#       Saving reg0x77 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 77 

# 028a6 Push8 [Register(0x76)]
#       Saving reg0x76 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 76 

# 028a8 Push8 [Register(0x75)]
#       Saving reg0x75 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 75 

# 028aa Push8 [Register(0x74)]
#       Saving reg0x74 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 74 

# 028ac AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec32))
32 0c fc ff ff ff 

# 028b2 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec32))
25 0c bc 28 00 00 

# 028b8 JmpImm [Label24(:print_dec32)]
#       PseudoCall(Label24(:print_dec32))
70 6b 27 00 

# 028bc AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec32))
32 0c 04 00 00 00 

# 028c2 Pop8 [Register(0x74)]
#       Restoring reg0x74 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 74 

# 028c4 Pop8 [Register(0x75)]
#       Restoring reg0x75 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 75 

# 028c6 Pop8 [Register(0x76)]
#       Restoring reg0x76 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 76 

# 028c8 Pop8 [Register(0x77)]
#       Restoring reg0x77 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 77 

# 028ca Pop8 [Register(0x78)]
#       Restoring reg0x78 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 78 

# 028cc Pop8 [Register(0x79)]
#       Restoring reg0x79 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 79 

# 028ce Pop8 [Register(0x7a)]
#       Restoring reg0x7a after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 7a 

# 028d0 Pop8 [Register(0x7b)]
#       Restoring reg0x7b after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 7b 

# 028d2 Pop8 [Register(0x7c)]
#       Restoring reg0x7c after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 7c 

# 028d4 Pop8 [Register(0x7d)]
#       Restoring reg0x7d after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 7d 

# 028d6 Pop8 [Register(0x7e)]
#       Restoring reg0x7e after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 7e 

# 028d8 Pop8 [Register(0x80)]
#       Restoring reg0x80 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 80 

# 028da Pop8 [Register(0x81)]
#       Restoring reg0x81 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 81 

# 028dc Pop8 [Register(0x82)]
#       Restoring reg0x82 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 82 

# 028de Pop8 [Register(0x83)]
#       Restoring reg0x83 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 83 

# 028e0 Pop8 [Register(0x84)]
#       Restoring reg0x84 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 84 

# 028e2 Pop8 [Register(0x85)]
#       Restoring reg0x85 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 85 

# 028e4 Pop8 [Register(0x86)]
#       Restoring reg0x86 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 86 

# 028e6 Pop8 [Register(0x87)]
#       Restoring reg0x87 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 87 

# 028e8 Pop8 [Register(0x88)]
#       Restoring reg0x88 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 88 

# t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
# Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
# Ident("a")
# 028ea Copy32 [Register(0x74), Register(0x80)]
#       t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
#       Ident("a")
21 74 80 

# tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
# Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
# Call(Call { function: "mul32_by10", parameters: [Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(149,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] })) }\nArithmetic(Subtract, Ident(\"a\"), Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] }))\nCall(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x78), Register(0x78)], resolved: None }
# inline_print_dec32_mul32_by10_14_a <- tace9 U32 Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
# Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
# Call(Call { function: "mul32_by10", parameters: [Ident("b")] })
# 028ed Copy32 [Register(0x78), Register(0x74)]
#       inline_print_dec32_mul32_by10_14_a <- tace9 U32 Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
#       Call(Call { function: "mul32_by10", parameters: [Ident("b")] })
21 78 74 

# inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(49,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(49,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(49,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(49,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# inline_print_dec32_mul32_by10_14_a <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(49,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# 028f0 ClearCarry []
#       inline_print_dec32_mul32_by10_14_a <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(49,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
03 

# 028f1 AddCarry32_1 [Register(0x74), Register(0x74), Register(0x74)]
#       inline_print_dec32_mul32_by10_14_a <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(49,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
30 74 74 74 

# 028f5 AddCarry32_2 []
#       inline_print_dec32_mul32_by10_14_a <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(49,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
31 

# inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(50,5))
# Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(50,5))\nAssign { target: Ident(\"b\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(50,5))
# Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(50,5))\nAssign { target: Ident(\"b\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(50,5))
# Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# 028f6 ClearCarry []
#       inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(50,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
03 

# 028f7 AddCarry32_1 [Register(0x74), Register(0x74), Register(0x78)]
#       inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(50,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
30 74 74 78 

# 028fb AddCarry32_2 []
#       inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(50,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
31 

# inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 Some('/lutcomp/programs/lib/mul.j':(51,5))
# Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
# Arithmetic(Add, Ident("b"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 Some('/lutcomp/programs/lib/mul.j':(51,5))\nAssign { target: Ident(\"b\"), var_type: None, value: Arithmetic(Add, Ident(\"b\"), Ident(\"b\")) }\nArithmetic(Add, Ident(\"b\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x78), Register(0x78)], resolved: None }
# inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 Some('/lutcomp/programs/lib/mul.j':(51,5))
# Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
# Arithmetic(Add, Ident("b"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 Some('/lutcomp/programs/lib/mul.j':(51,5))\nAssign { target: Ident(\"b\"), var_type: None, value: Arithmetic(Add, Ident(\"b\"), Ident(\"b\")) }\nArithmetic(Add, Ident(\"b\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x78), Register(0x78)], resolved: None }
# inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_tace9) Some('/lutcomp/programs/lib/mul.j':(51,5))
# Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
# Arithmetic(Add, Ident("b"), Ident("b"))
# 028fc ClearCarry []
#       inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_tace9) Some('/lutcomp/programs/lib/mul.j':(51,5))
#       Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
#       Arithmetic(Add, Ident("b"), Ident("b"))
03 

# 028fd AddCarry32_1 [Register(0x78), Register(0x78), Register(0x78)]
#       inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_tace9) Some('/lutcomp/programs/lib/mul.j':(51,5))
#       Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
#       Arithmetic(Add, Ident("b"), Ident("b"))
30 78 78 78 

# 02901 AddCarry32_2 []
#       inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_tace9) Some('/lutcomp/programs/lib/mul.j':(51,5))
#       Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
#       Arithmetic(Add, Ident("b"), Ident("b"))
31 

# inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 Some('/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 Some('/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\nArithmetic(Add, Ident(\"b\"), Ident(\"a\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x78), Register(0x78)], resolved: None }
# inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\nArithmetic(Add, Ident(\"b\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# inline_print_dec32_mul32_by10_14_t7eaf <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# 02902 ClearCarry []
#       inline_print_dec32_mul32_by10_14_t7eaf <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(52,5))
#       Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
03 

# 02903 AddCarry32_1 [Register(0x78), Register(0x74), Register(0x74)]
#       inline_print_dec32_mul32_by10_14_t7eaf <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(52,5))
#       Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
30 78 74 74 

# 02907 AddCarry32_2 []
#       inline_print_dec32_mul32_by10_14_t7eaf <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(52,5))
#       Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
31 

# t86e2 <- inline_print_dec32_mul32_by10_14_t7eaf U32 Some('/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# optimized away noop copy Instruction { source: "t86e2 <- inline_print_dec32_mul32_by10_14_t7eaf U32 Some('/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\n", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# goto inline_print_dec32_mul32_by10_14_function_end_mul32_by10 Some('/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_print_dec32_mul32_by10_14_function_end_mul32_by10 Some('/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\n", opcode: JmpImm, args: [Label24(inline_print_dec32_mul32_by10_14_function_end_mul32_by10)], resolved: None }
# :inline_print_dec32_mul32_by10_14_function_end_mul32_by10 None
# inline_print_dec32_mul32_by10_14_function_end_mul32_by10
# a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
# Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
# 02908 Copy32 [Register(0x74), Register(0x00)]
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
21 74 00 

# 0290b Invert8 [Register(0x00)]
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
01 00 

# 0290d Invert8 [Register(0x01)]
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
01 01 

# 0290f Invert8 [Register(0x02)]
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
01 02 

# 02911 Invert8 [Register(0x03)]
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
01 03 

# 02913 AddImm32IgnoreCarry [Register(0x00), Constant32(0x00000001=1)]
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
32 00 01 00 00 00 

# 02919 ClearCarry []
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
03 

# 0291a AddCarry32_1 [Register(0x80), Register(0x00), Register(0x74)]
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
30 80 00 74 

# 0291e AddCarry32_2 []
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
31 

# t3404 <- a[0x00..0x01] U8 Some('/lutcomp/programs/lib/rpnlib.j':(151,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))] })
# Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))
# Index("a", Number(0n0/0x00u8))
# 0291f Copy8 [Register(0x74), Register(0x88)]
#       t3404 <- a[0x00..0x01] U8 Some('/lutcomp/programs/lib/rpnlib.j':(151,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))] })
#       Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))
#       Index("a", Number(0n0/0x00u8))
0b 74 88 

# t6f38 <- t3404 Add Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(151,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))] })
# Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))
# 02922 LoadImm8 [Register(0x00), Constant8(0x30=48)]
#       t6f38 <- t3404 Add Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(151,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))] })
#       Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))
04 00 30 

# 02925 Add8NoCarryIn [Register(0x88), Register(0x00), Register(0x88)]
#       t6f38 <- t3404 Add Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(151,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))] })
#       Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))
14 88 00 88 

# inline_print_dec32_putc_29_c <- t6f38 U8 Some('/lutcomp/programs/lib/rpnlib.j':(151,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))] })
# optimized away noop copy Instruction { source: "inline_print_dec32_putc_29_c <- t6f38 U8 Some('/lutcomp/programs/lib/rpnlib.j':(151,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(0n0/0x00u8)), Number(0n48/0x30u8))] }) }\nCall(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(0n0/0x00u8)), Number(0n48/0x30u8))] })\n", opcode: Copy8, args: [Register(0x88), Register(0x88)], resolved: None }
# inline_print_dec32_putc_29_tac13 <- inline_print_dec32_putc_29_c U8 Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_print_dec32_putc_29_tac13 <- inline_print_dec32_putc_29_c U8 Some('/lutcomp/programs/lib/stdio.j':(35,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x88), Register(0x88)], resolved: None }
# None <= call io_write0(inline_print_dec32_putc_29_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 02929 Out0 [Register(0x88)]
#       IoWrite0
68 88 

# inline_print_dec32_putc_29_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 0292b LoadImm32 [Register(0x78), Constant32(0x000f105c=987228)]
#       inline_print_dec32_putc_29_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
20 78 5c 10 0f 00 

# inline_print_dec32_putc_29_t76c7 <- mem[inline_print_dec32_putc_29_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 02931 Load8 [Register(0x78), Register(0x7d)]
#       inline_print_dec32_putc_29_t76c7 <- mem[inline_print_dec32_putc_29_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
05 78 7d 

# inline_print_dec32_putc_29_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 02934 LoadImm8 [Register(0x7c), Constant8(0x00=0)]
#       inline_print_dec32_putc_29_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 7c 00 

# if inline_print_dec32_putc_29_t76c7 != inline_print_dec32_putc_29_ta97f then 'inline_print_dec32_putc_29_putc_if_true_0_1' else 'inline_print_dec32_putc_29_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# 02937 Cmp8 [Register(0x7d), Register(0x7c)]
#       if inline_print_dec32_putc_29_t76c7 != inline_print_dec32_putc_29_ta97f then 'inline_print_dec32_putc_29_putc_if_true_0_1' else 'inline_print_dec32_putc_29_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
15 7d 7c 

# 0293a JzImm [Label24(inline_print_dec32_putc_29_putc_if_else_0_2)]
#       if inline_print_dec32_putc_29_t76c7 != inline_print_dec32_putc_29_ta97f then 'inline_print_dec32_putc_29_putc_if_true_0_1' else 'inline_print_dec32_putc_29_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
72 5b 29 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_print_dec32_putc_29_t76c7 != inline_print_dec32_putc_29_ta97f then 'inline_print_dec32_putc_29_putc_if_true_0_1' else 'inline_print_dec32_putc_29_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(inline_print_dec32_putc_29_putc_if_true_0_1)], resolved: None }
# :inline_print_dec32_putc_29_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_print_dec32_putc_29_putc_if_true_0_1
# inline_print_dec32_putc_29_tac13 <- inline_print_dec32_putc_29_c U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_print_dec32_putc_29_tac13 <- inline_print_dec32_putc_29_c U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x88), Register(0x88)], resolved: None }
# None <= call lcd_putc(inline_print_dec32_putc_29_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 0293e Copy8 [Register(0x88), Register(0x00)]
#       Arg0[ch]=inline_print_dec32_putc_29_tac13 None <= call lcd_putc(inline_print_dec32_putc_29_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 88 00 

# Registers used by this function: {116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 140, 141, 142, 143, 144, 145, 146, 147, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252}
# Registers to save: []
# 02941 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 02947 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 51 29 00 00 

# 0294d JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 67 1f 00 

# 02951 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_print_dec32_putc_29_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 02957 JmpImm [Label24(inline_print_dec32_putc_29_putc_if_end_0)]
#       goto inline_print_dec32_putc_29_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 5b 29 00 

# :inline_print_dec32_putc_29_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_print_dec32_putc_29_putc_if_else_0_2
# :inline_print_dec32_putc_29_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_print_dec32_putc_29_putc_if_end_0
# goto inline_print_dec32_putc_29_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_print_dec32_putc_29_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_print_dec32_putc_29_function_end_putc)], resolved: None }
# :inline_print_dec32_putc_29_function_end_putc None
# inline_print_dec32_putc_29_function_end_putc
# return None None
# Return { value: None }
# 0295b JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_print_dec32 None
# function_end_print_dec32
# Unreachable None
# 0295d Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :print_dec8
# Ret None
# Arg0=a
# Var a (Arg0 a Number(U8)) Reg(U8) Some([137])
# Var b (Local b Number(U8) Reg(U8)) Reg(U8) Some([138])
# Var inline_print_dec8_putc_30_c (Arg0 c Number(U8)) Reg(U8) Some([137])
# Var inline_print_dec8_putc_30_t0 (static "lcd_enable" addr) Reg(U32) Some([140, 141, 142, 143]) Number(0n987228/0x000f105cu32)
# Var inline_print_dec8_putc_30_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([138])
# Var inline_print_dec8_putc_30_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([144]) Number(0n0/0x00u8)
# Var inline_print_dec8_putc_30_tac13 (tac13 Ident("c")) Reg(U8) Some([137])
# Var t25ee (t25ee Number(0n10/0x0au8)) Reg(U8) Some([138]) Number(0n10/0x0au8)
# Var t5673 (t5673 Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))) Reg(U8) Some([137])
# Var t8792 (t8792 Ident("a")) Reg(U8) Some([137])
# Var tace9 (tace9 Ident("b")) Reg(U8) Some([138])
# Var tf5e0 (tf5e0 Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) Reg(U8) Some([138])
# 02962 Copy8 [Register(0x00), Register(0x89)]
#       Save function parameter 'a' registers [0] to locals [137].
0b 00 89 

# t8792 <- a U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"a\"), right: Number(0n10/0x0au8) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(0n10/0x0au8)) }, VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(0n10/0x0au8))) }])], else_block: [] }\nComparison { op: GreaterThanOrEqual, left: Ident(\"a\"), right: Number(0n10/0x0au8) }\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x89), Register(0x89)], resolved: None }
# t25ee <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }
# Number(0n10/0x0au8)
# 02965 LoadImm8 [Register(0x8a), Constant8(0x0a=10)]
#       t25ee <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }
#       Number(0n10/0x0au8)
04 8a 0a 

# if t8792 >= t25ee then 'print_dec8_if_true_0_1' else 'print_dec8_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }
# 02968 Cmp8 [Register(0x8a), Register(0x89)]
#       if t8792 >= t25ee then 'print_dec8_if_true_0_1' else 'print_dec8_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }
15 8a 89 

# 0296b JcImm [Label24(print_dec8_if_true_0_1)]
#       if t8792 >= t25ee then 'print_dec8_if_true_0_1' else 'print_dec8_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }
71 73 29 00 

# 0296f JmpImm [Label24(print_dec8_if_else_0_2)]
#       if t8792 >= t25ee then 'print_dec8_if_true_0_1' else 'print_dec8_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }
70 c3 29 00 

# :print_dec8_if_true_0_1 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }])], else_block: [] }
# print_dec8_if_true_0_1
# t8792 <- a U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8)) }
# Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8))
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))\nAssign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(0n10/0x0au8)) }\nArithmetic(Divide, Ident(\"a\"), Number(0n10/0x0au8))\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x89), Register(0x89)], resolved: None }
# b <- t8792 Divide Number(0n10/0x0au8) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8)) }
# Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8))
# 02973 LoadImm8 [Register(0x00), Constant8(0x0a=10)]
#       b <- t8792 Divide Number(0n10/0x0au8) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8)) }
#       Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8))
04 00 0a 

# 02976 Divide8 [Register(0x89), Register(0x00), Register(0x8a)]
#       b <- t8792 Divide Number(0n10/0x0au8) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8)) }
#       Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8))
17 89 00 8a 

# tace9 <- b U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
# Call(Call { function: "print_dec8", parameters: [Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))\nVoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] }) }\nCall(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy8, args: [Register(0x8a), Register(0x8a)], resolved: None }
# None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
# Call(Call { function: "print_dec8", parameters: [Ident("b")] })
# 0297a Copy8 [Register(0x8a), Register(0x00)]
#       Arg0[a]=tace9 None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0b 8a 00 

# Registers used by this function: {137, 138, 140, 141, 142, 143, 144}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 204, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252}
# Registers to save: [137, 138, 140, 141, 142, 143, 144]
# 0297d Push8 [Register(0x90)]
#       Saving reg0x90 before None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
09 90 

# 0297f Push8 [Register(0x8f)]
#       Saving reg0x8f before None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
09 8f 

# 02981 Push8 [Register(0x8e)]
#       Saving reg0x8e before None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
09 8e 

# 02983 Push8 [Register(0x8d)]
#       Saving reg0x8d before None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
09 8d 

# 02985 Push8 [Register(0x8c)]
#       Saving reg0x8c before None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
09 8c 

# 02987 Push8 [Register(0x8a)]
#       Saving reg0x8a before None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
09 8a 

# 02989 Push8 [Register(0x89)]
#       Saving reg0x89 before None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
09 89 

# 0298b AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec8))
32 0c fc ff ff ff 

# 02991 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec8))
25 0c 9b 29 00 00 

# 02997 JmpImm [Label24(:print_dec8)]
#       PseudoCall(Label24(:print_dec8))
70 62 29 00 

# 0299b AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec8))
32 0c 04 00 00 00 

# 029a1 Pop8 [Register(0x89)]
#       Restoring reg0x89 after None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0a 89 

# 029a3 Pop8 [Register(0x8a)]
#       Restoring reg0x8a after None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0a 8a 

# 029a5 Pop8 [Register(0x8c)]
#       Restoring reg0x8c after None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0a 8c 

# 029a7 Pop8 [Register(0x8d)]
#       Restoring reg0x8d after None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0a 8d 

# 029a9 Pop8 [Register(0x8e)]
#       Restoring reg0x8e after None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0a 8e 

# 029ab Pop8 [Register(0x8f)]
#       Restoring reg0x8f after None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0a 8f 

# 029ad Pop8 [Register(0x90)]
#       Restoring reg0x90 after None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0a 90 

# t8792 <- a U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }
# Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8)))
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(0n10/0x0au8))) }\nArithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(0n10/0x0au8)))\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x89), Register(0x89)], resolved: None }
# tace9 <- b U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }
# Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8)))
# Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(0n10/0x0au8))) }\nArithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(0n10/0x0au8)))\nArithmetic(Multiply, Ident(\"b\"), Number(0n10/0x0au8))\nIdent(\"b\")\n", opcode: Copy8, args: [Register(0x8a), Register(0x8a)], resolved: None }
# tf5e0 <- tace9 Multiply Number(0n10/0x0au8) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }
# Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8)))
# Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))
# 029af LoadImm8 [Register(0x00), Constant8(0x0a=10)]
#       tf5e0 <- tace9 Multiply Number(0n10/0x0au8) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8)))
#       Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))
04 00 0a 

# 029b2 Mul8_8 [Register(0x8a), Register(0x00), Register(0x8a)]
#       tf5e0 <- tace9 Multiply Number(0n10/0x0au8) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8)))
#       Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))
10 8a 00 8a 

# a <- t8792 Subtract Var(tf5e0) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }
# Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8)))
# 029b6 Copy8 [Register(0x8a), Register(0x00)]
#       a <- t8792 Subtract Var(tf5e0) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8)))
0b 8a 00 

# 029b9 Negate8 [Register(0x00)]
#       a <- t8792 Subtract Var(tf5e0) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8)))
02 00 

# 029bb Add8NoCarryIn [Register(0x89), Register(0x00), Register(0x89)]
#       a <- t8792 Subtract Var(tf5e0) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8)))
14 89 00 89 

# goto print_dec8_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# 029bf JmpImm [Label24(print_dec8_if_end_0)]
#       goto print_dec8_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
70 c3 29 00 

# :print_dec8_if_else_0_2 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# print_dec8_if_else_0_2
# :print_dec8_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# print_dec8_if_end_0
# t8792 <- a U8 Some('/lutcomp/programs/lib/rpnlib.j':(161,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))] })
# Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U8 Some('/lutcomp/programs/lib/rpnlib.j':(161,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(0n48/0x30u8))] }) }\nCall(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(0n48/0x30u8))] })\nArithmetic(Add, Ident(\"a\"), Number(0n48/0x30u8))\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x89), Register(0x89)], resolved: None }
# t5673 <- t8792 Add Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(161,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))] })
# Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))
# 029c3 LoadImm8 [Register(0x00), Constant8(0x30=48)]
#       t5673 <- t8792 Add Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(161,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))] })
#       Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))
04 00 30 

# 029c6 Add8NoCarryIn [Register(0x89), Register(0x00), Register(0x89)]
#       t5673 <- t8792 Add Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(161,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))] })
#       Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))
14 89 00 89 

# inline_print_dec8_putc_30_c <- t5673 U8 Some('/lutcomp/programs/lib/rpnlib.j':(161,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))] })
# optimized away noop copy Instruction { source: "inline_print_dec8_putc_30_c <- t5673 U8 Some('/lutcomp/programs/lib/rpnlib.j':(161,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(0n48/0x30u8))] }) }\nCall(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(0n48/0x30u8))] })\n", opcode: Copy8, args: [Register(0x89), Register(0x89)], resolved: None }
# inline_print_dec8_putc_30_tac13 <- inline_print_dec8_putc_30_c U8 Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_print_dec8_putc_30_tac13 <- inline_print_dec8_putc_30_c U8 Some('/lutcomp/programs/lib/stdio.j':(35,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x89), Register(0x89)], resolved: None }
# None <= call io_write0(inline_print_dec8_putc_30_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 029ca Out0 [Register(0x89)]
#       IoWrite0
68 89 

# inline_print_dec8_putc_30_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 029cc LoadImm32 [Register(0x8c), Constant32(0x000f105c=987228)]
#       inline_print_dec8_putc_30_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
20 8c 5c 10 0f 00 

# inline_print_dec8_putc_30_t76c7 <- mem[inline_print_dec8_putc_30_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 029d2 Load8 [Register(0x8c), Register(0x8a)]
#       inline_print_dec8_putc_30_t76c7 <- mem[inline_print_dec8_putc_30_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
05 8c 8a 

# inline_print_dec8_putc_30_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 029d5 LoadImm8 [Register(0x90), Constant8(0x00=0)]
#       inline_print_dec8_putc_30_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 90 00 

# if inline_print_dec8_putc_30_t76c7 != inline_print_dec8_putc_30_ta97f then 'inline_print_dec8_putc_30_putc_if_true_0_1' else 'inline_print_dec8_putc_30_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# 029d8 Cmp8 [Register(0x8a), Register(0x90)]
#       if inline_print_dec8_putc_30_t76c7 != inline_print_dec8_putc_30_ta97f then 'inline_print_dec8_putc_30_putc_if_true_0_1' else 'inline_print_dec8_putc_30_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
15 8a 90 

# 029db JzImm [Label24(inline_print_dec8_putc_30_putc_if_else_0_2)]
#       if inline_print_dec8_putc_30_t76c7 != inline_print_dec8_putc_30_ta97f then 'inline_print_dec8_putc_30_putc_if_true_0_1' else 'inline_print_dec8_putc_30_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
72 10 2a 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_print_dec8_putc_30_t76c7 != inline_print_dec8_putc_30_ta97f then 'inline_print_dec8_putc_30_putc_if_true_0_1' else 'inline_print_dec8_putc_30_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(inline_print_dec8_putc_30_putc_if_true_0_1)], resolved: None }
# :inline_print_dec8_putc_30_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_print_dec8_putc_30_putc_if_true_0_1
# inline_print_dec8_putc_30_tac13 <- inline_print_dec8_putc_30_c U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_print_dec8_putc_30_tac13 <- inline_print_dec8_putc_30_c U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x89), Register(0x89)], resolved: None }
# None <= call lcd_putc(inline_print_dec8_putc_30_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 029df Copy8 [Register(0x89), Register(0x00)]
#       Arg0[ch]=inline_print_dec8_putc_30_tac13 None <= call lcd_putc(inline_print_dec8_putc_30_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 89 00 

# Registers used by this function: {137, 138, 140, 141, 142, 143, 144}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 140, 141, 142, 143, 144, 145, 146, 147, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252}
# Registers to save: [140, 141, 142, 143, 144]
# 029e2 Push8 [Register(0x90)]
#       Saving reg0x90 before None <= call lcd_putc(inline_print_dec8_putc_30_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 90 

# 029e4 Push8 [Register(0x8f)]
#       Saving reg0x8f before None <= call lcd_putc(inline_print_dec8_putc_30_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 8f 

# 029e6 Push8 [Register(0x8e)]
#       Saving reg0x8e before None <= call lcd_putc(inline_print_dec8_putc_30_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 8e 

# 029e8 Push8 [Register(0x8d)]
#       Saving reg0x8d before None <= call lcd_putc(inline_print_dec8_putc_30_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 8d 

# 029ea Push8 [Register(0x8c)]
#       Saving reg0x8c before None <= call lcd_putc(inline_print_dec8_putc_30_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 8c 

# 029ec AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 029f2 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c fc 29 00 00 

# 029f8 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 67 1f 00 

# 029fc AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# 02a02 Pop8 [Register(0x8c)]
#       Restoring reg0x8c after None <= call lcd_putc(inline_print_dec8_putc_30_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a 8c 

# 02a04 Pop8 [Register(0x8d)]
#       Restoring reg0x8d after None <= call lcd_putc(inline_print_dec8_putc_30_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a 8d 

# 02a06 Pop8 [Register(0x8e)]
#       Restoring reg0x8e after None <= call lcd_putc(inline_print_dec8_putc_30_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a 8e 

# 02a08 Pop8 [Register(0x8f)]
#       Restoring reg0x8f after None <= call lcd_putc(inline_print_dec8_putc_30_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a 8f 

# 02a0a Pop8 [Register(0x90)]
#       Restoring reg0x90 after None <= call lcd_putc(inline_print_dec8_putc_30_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a 90 

# goto inline_print_dec8_putc_30_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 02a0c JmpImm [Label24(inline_print_dec8_putc_30_putc_if_end_0)]
#       goto inline_print_dec8_putc_30_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 10 2a 00 

# :inline_print_dec8_putc_30_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_print_dec8_putc_30_putc_if_else_0_2
# :inline_print_dec8_putc_30_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_print_dec8_putc_30_putc_if_end_0
# goto inline_print_dec8_putc_30_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_print_dec8_putc_30_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_print_dec8_putc_30_function_end_putc)], resolved: None }
# :inline_print_dec8_putc_30_function_end_putc None
# inline_print_dec8_putc_30_function_end_putc
# return None None
# Return { value: None }
# 02a10 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_print_dec8 None
# function_end_print_dec8
# Unreachable None
# 02a12 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :stdio_init
# Ret None
# Var inline_stdio_init_queue_init_35_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([145]) Number(0n0/0x00u8)
# Var inline_stdio_init_queue_init_35_tb702 (tb702 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }) Reg(U32) Some([148, 149, 150, 151]) Number(0n987648/0x000f1200u32)
# Var inline_stdio_init_queue_init_35_tc1ff (tc1ff Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }) Reg(U32) Some([148, 149, 150, 151]) Number(0n987652/0x000f1204u32)
# Var t0 (static "lcd_enable" addr) Reg(U32) Some([152, 153, 154, 155]) Number(0n987228/0x000f105cu32)
# Var t1 (static "keyboard_enable" addr) Reg(U32) Some([152, 153, 154, 155]) Number(0n987144/0x000f1008u32)
# Var ta11a (ta11a Number(0n1/0x01u8)) Reg(U8) Some([156]) Number(0n1/0x01u8)
# t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(11,5))
# Assign { target: Ident("lcd_enable"), var_type: None, value: Number(0n1/0x01u8) }
# 02a17 LoadImm32 [Register(0x98), Constant32(0x000f105c=987228)]
#       t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(11,5))
#       Assign { target: Ident("lcd_enable"), var_type: None, value: Number(0n1/0x01u8) }
20 98 5c 10 0f 00 

# ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/stdio.j':(11,5))
# Assign { target: Ident("lcd_enable"), var_type: None, value: Number(0n1/0x01u8) }
# Number(0n1/0x01u8)
# 02a1d LoadImm8 [Register(0x9c), Constant8(0x01=1)]
#       ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/stdio.j':(11,5))
#       Assign { target: Ident("lcd_enable"), var_type: None, value: Number(0n1/0x01u8) }
#       Number(0n1/0x01u8)
04 9c 01 

# mem[t0] <- ta11a U8 Some('/lutcomp/programs/lib/stdio.j':(11,5))
# Assign { target: Ident("lcd_enable"), var_type: None, value: Number(0n1/0x01u8) }
# 02a20 Store8 [Register(0x9c), Register(0x98)]
#       mem[t0] <- ta11a U8 Some('/lutcomp/programs/lib/stdio.j':(11,5))
#       Assign { target: Ident("lcd_enable"), var_type: None, value: Number(0n1/0x01u8) }
06 9c 98 

# t1 <- 0n987144/0x000f1008u32  Some('/lutcomp/programs/lib/stdio.j':(12,5))
# Assign { target: Ident("keyboard_enable"), var_type: None, value: Number(0n1/0x01u8) }
# 02a23 LoadImm32 [Register(0x98), Constant32(0x000f1008=987144)]
#       t1 <- 0n987144/0x000f1008u32  Some('/lutcomp/programs/lib/stdio.j':(12,5))
#       Assign { target: Ident("keyboard_enable"), var_type: None, value: Number(0n1/0x01u8) }
20 98 08 10 0f 00 

# ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/stdio.j':(12,5))
# Assign { target: Ident("keyboard_enable"), var_type: None, value: Number(0n1/0x01u8) }
# Number(0n1/0x01u8)
# 02a29 LoadImm8 [Register(0x9c), Constant8(0x01=1)]
#       ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/stdio.j':(12,5))
#       Assign { target: Ident("keyboard_enable"), var_type: None, value: Number(0n1/0x01u8) }
#       Number(0n1/0x01u8)
04 9c 01 

# mem[t1] <- ta11a U8 Some('/lutcomp/programs/lib/stdio.j':(12,5))
# Assign { target: Ident("keyboard_enable"), var_type: None, value: Number(0n1/0x01u8) }
# 02a2c Store8 [Register(0x9c), Register(0x98)]
#       mem[t1] <- ta11a U8 Some('/lutcomp/programs/lib/stdio.j':(12,5))
#       Assign { target: Ident("keyboard_enable"), var_type: None, value: Number(0n1/0x01u8) }
06 9c 98 

# inline_stdio_init_queue_init_35_tb702 <- 0n987648/0x000f1200u32  Some('/lutcomp/programs/lib/Queue.j':(8,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
# # In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_35_tb702 <- inline_stdio_init_queue_init_35_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_stdio_init_queue_init_35_tb702 <- 0n987648/0x000f1200u32 `.
# 02a2f LoadImm32 [Register(0x94), Constant32(0x000f1200=987648)]
#       inline_stdio_init_queue_init_35_tb702 <- 0n987648/0x000f1200u32  Some('/lutcomp/programs/lib/Queue.j':(8,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
#       # In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_35_tb702 <- inline_stdio_init_queue_init_35_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_stdio_init_queue_init_35_tb702 <- 0n987648/0x000f1200u32 `.
20 94 00 12 0f 00 

# inline_stdio_init_queue_init_35_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(8,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 02a35 LoadImm8 [Register(0x91), Constant8(0x00=0)]
#       inline_stdio_init_queue_init_35_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(8,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 91 00 

# mem[inline_stdio_init_queue_init_35_tb702] <- inline_stdio_init_queue_init_35_ta97f U8 Some('/lutcomp/programs/lib/Queue.j':(8,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(0n0/0x00u8) }
# 02a38 Store8 [Register(0x91), Register(0x94)]
#       mem[inline_stdio_init_queue_init_35_tb702] <- inline_stdio_init_queue_init_35_ta97f U8 Some('/lutcomp/programs/lib/Queue.j':(8,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(0n0/0x00u8) }
06 91 94 

# inline_stdio_init_queue_init_35_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(9,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
# # In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_35_tc1ff <- inline_stdio_init_queue_init_35_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_stdio_init_queue_init_35_tc1ff <- 0n987652/0x000f1204u32 `.
# 02a3b LoadImm32 [Register(0x94), Constant32(0x000f1204=987652)]
#       inline_stdio_init_queue_init_35_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(9,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
#       # In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_35_tc1ff <- inline_stdio_init_queue_init_35_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_stdio_init_queue_init_35_tc1ff <- 0n987652/0x000f1204u32 `.
20 94 04 12 0f 00 

# inline_stdio_init_queue_init_35_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(9,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 02a41 LoadImm8 [Register(0x91), Constant8(0x00=0)]
#       inline_stdio_init_queue_init_35_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(9,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 91 00 

# mem[inline_stdio_init_queue_init_35_tc1ff] <- inline_stdio_init_queue_init_35_ta97f U8 Some('/lutcomp/programs/lib/Queue.j':(9,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(0n0/0x00u8) }
# 02a44 Store8 [Register(0x91), Register(0x94)]
#       mem[inline_stdio_init_queue_init_35_tc1ff] <- inline_stdio_init_queue_init_35_ta97f U8 Some('/lutcomp/programs/lib/Queue.j':(9,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(0n0/0x00u8) }
06 91 94 

# goto inline_stdio_init_queue_init_35_function_end_queue_init None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_stdio_init_queue_init_35_function_end_queue_init None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_stdio_init_queue_init_35_function_end_queue_init)], resolved: None }
# :inline_stdio_init_queue_init_35_function_end_queue_init None
# inline_stdio_init_queue_init_35_function_end_queue_init
# None <= call lcd_init() Some('/lutcomp/programs/lib/stdio.j':(14,5))
# VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
# Call(Call { function: "lcd_init", parameters: [] })
# Registers used by this function: {145, 148, 149, 150, 151, 152, 153, 154, 155, 156}
# Registers used by callee tree: {140, 141, 142, 143, 144, 145, 146, 147, 205, 228, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241}
# Registers to save: [145]
# 02a47 Push8 [Register(0x91)]
#       Saving reg0x91 before None <= call lcd_init() Some('/lutcomp/programs/lib/stdio.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
#       Call(Call { function: "lcd_init", parameters: [] })
09 91 

# 02a49 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_init))
32 0c fc ff ff ff 

# 02a4f StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_init))
25 0c 59 2a 00 00 

# 02a55 JmpImm [Label24(:lcd_init)]
#       PseudoCall(Label24(:lcd_init))
70 1c 1e 00 

# 02a59 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_init))
32 0c 04 00 00 00 

# 02a5f Pop8 [Register(0x91)]
#       Restoring reg0x91 after None <= call lcd_init() Some('/lutcomp/programs/lib/stdio.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
#       Call(Call { function: "lcd_init", parameters: [] })
0a 91 

# None <= call KeyBoard_init() Some('/lutcomp/programs/lib/stdio.j':(15,5))
# VoidExpression { expression: Call(Call { function: "KeyBoard_init", parameters: [] }) }
# Call(Call { function: "KeyBoard_init", parameters: [] })
# Registers used by this function: {145, 148, 149, 150, 151, 152, 153, 154, 155, 156}
# Registers used by callee tree: {16, 20, 21, 22, 23}
# Registers to save: []
# 02a61 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:KeyBoard_init))
32 0c fc ff ff ff 

# 02a67 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:KeyBoard_init))
25 0c 71 2a 00 00 

# 02a6d JmpImm [Label24(:KeyBoard_init)]
#       PseudoCall(Label24(:KeyBoard_init))
70 27 04 00 

# 02a71 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:KeyBoard_init))
32 0c 04 00 00 00 

# return None None
# Return { value: None }
# 02a77 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_stdio_init None
# function_end_stdio_init
# Unreachable None
# 02a79 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# Tick Count: 4267648
